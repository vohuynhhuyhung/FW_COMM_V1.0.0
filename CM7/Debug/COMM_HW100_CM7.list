
COMM_HW100_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012f24  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001630  080131c4  080131c4  000141c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080147f4  080147f4  00016138  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080147f4  080147f4  000157f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080147fc  080147fc  00016138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080147fc  080147fc  000157fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014800  08014800  00015800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000138  24000000  08014804  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00042d58  24000138  0801493c  00016138  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24042e90  0801493c  00016e90  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00016138  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a4de  00000000  00000000  00016166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007686  00000000  00000000  00040644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025a0  00000000  00000000  00047cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c50  00000000  00000000  0004a270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004a676  00000000  00000000  0004bec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031e87  00000000  00000000  00096536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001c456b  00000000  00000000  000c83bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0028c928  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a604  00000000  00000000  0028c96c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00296f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000138 	.word	0x24000138
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080131ac 	.word	0x080131ac

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400013c 	.word	0x2400013c
 80002dc:	080131ac 	.word	0x080131ac

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80003b4:	4b49      	ldr	r3, [pc, #292]	@ (80004dc <SystemInit+0x12c>)
 80003b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003ba:	4a48      	ldr	r2, [pc, #288]	@ (80004dc <SystemInit+0x12c>)
 80003bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80003c4:	4b45      	ldr	r3, [pc, #276]	@ (80004dc <SystemInit+0x12c>)
 80003c6:	691b      	ldr	r3, [r3, #16]
 80003c8:	4a44      	ldr	r2, [pc, #272]	@ (80004dc <SystemInit+0x12c>)
 80003ca:	f043 0310 	orr.w	r3, r3, #16
 80003ce:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003d0:	4b43      	ldr	r3, [pc, #268]	@ (80004e0 <SystemInit+0x130>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	f003 030f 	and.w	r3, r3, #15
 80003d8:	2b06      	cmp	r3, #6
 80003da:	d807      	bhi.n	80003ec <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003dc:	4b40      	ldr	r3, [pc, #256]	@ (80004e0 <SystemInit+0x130>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	f023 030f 	bic.w	r3, r3, #15
 80003e4:	4a3e      	ldr	r2, [pc, #248]	@ (80004e0 <SystemInit+0x130>)
 80003e6:	f043 0307 	orr.w	r3, r3, #7
 80003ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003ec:	4b3d      	ldr	r3, [pc, #244]	@ (80004e4 <SystemInit+0x134>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a3c      	ldr	r2, [pc, #240]	@ (80004e4 <SystemInit+0x134>)
 80003f2:	f043 0301 	orr.w	r3, r3, #1
 80003f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003f8:	4b3a      	ldr	r3, [pc, #232]	@ (80004e4 <SystemInit+0x134>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003fe:	4b39      	ldr	r3, [pc, #228]	@ (80004e4 <SystemInit+0x134>)
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	4938      	ldr	r1, [pc, #224]	@ (80004e4 <SystemInit+0x134>)
 8000404:	4b38      	ldr	r3, [pc, #224]	@ (80004e8 <SystemInit+0x138>)
 8000406:	4013      	ands	r3, r2
 8000408:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800040a:	4b35      	ldr	r3, [pc, #212]	@ (80004e0 <SystemInit+0x130>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f003 0308 	and.w	r3, r3, #8
 8000412:	2b00      	cmp	r3, #0
 8000414:	d007      	beq.n	8000426 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000416:	4b32      	ldr	r3, [pc, #200]	@ (80004e0 <SystemInit+0x130>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	f023 030f 	bic.w	r3, r3, #15
 800041e:	4a30      	ldr	r2, [pc, #192]	@ (80004e0 <SystemInit+0x130>)
 8000420:	f043 0307 	orr.w	r3, r3, #7
 8000424:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000426:	4b2f      	ldr	r3, [pc, #188]	@ (80004e4 <SystemInit+0x134>)
 8000428:	2200      	movs	r2, #0
 800042a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800042c:	4b2d      	ldr	r3, [pc, #180]	@ (80004e4 <SystemInit+0x134>)
 800042e:	2200      	movs	r2, #0
 8000430:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000432:	4b2c      	ldr	r3, [pc, #176]	@ (80004e4 <SystemInit+0x134>)
 8000434:	2200      	movs	r2, #0
 8000436:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000438:	4b2a      	ldr	r3, [pc, #168]	@ (80004e4 <SystemInit+0x134>)
 800043a:	4a2c      	ldr	r2, [pc, #176]	@ (80004ec <SystemInit+0x13c>)
 800043c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800043e:	4b29      	ldr	r3, [pc, #164]	@ (80004e4 <SystemInit+0x134>)
 8000440:	4a2b      	ldr	r2, [pc, #172]	@ (80004f0 <SystemInit+0x140>)
 8000442:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000444:	4b27      	ldr	r3, [pc, #156]	@ (80004e4 <SystemInit+0x134>)
 8000446:	4a2b      	ldr	r2, [pc, #172]	@ (80004f4 <SystemInit+0x144>)
 8000448:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800044a:	4b26      	ldr	r3, [pc, #152]	@ (80004e4 <SystemInit+0x134>)
 800044c:	2200      	movs	r2, #0
 800044e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000450:	4b24      	ldr	r3, [pc, #144]	@ (80004e4 <SystemInit+0x134>)
 8000452:	4a28      	ldr	r2, [pc, #160]	@ (80004f4 <SystemInit+0x144>)
 8000454:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000456:	4b23      	ldr	r3, [pc, #140]	@ (80004e4 <SystemInit+0x134>)
 8000458:	2200      	movs	r2, #0
 800045a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800045c:	4b21      	ldr	r3, [pc, #132]	@ (80004e4 <SystemInit+0x134>)
 800045e:	4a25      	ldr	r2, [pc, #148]	@ (80004f4 <SystemInit+0x144>)
 8000460:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000462:	4b20      	ldr	r3, [pc, #128]	@ (80004e4 <SystemInit+0x134>)
 8000464:	2200      	movs	r2, #0
 8000466:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000468:	4b1e      	ldr	r3, [pc, #120]	@ (80004e4 <SystemInit+0x134>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a1d      	ldr	r2, [pc, #116]	@ (80004e4 <SystemInit+0x134>)
 800046e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000472:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000474:	4b1b      	ldr	r3, [pc, #108]	@ (80004e4 <SystemInit+0x134>)
 8000476:	2200      	movs	r2, #0
 8000478:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800047a:	4b1f      	ldr	r3, [pc, #124]	@ (80004f8 <SystemInit+0x148>)
 800047c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800047e:	4a1e      	ldr	r2, [pc, #120]	@ (80004f8 <SystemInit+0x148>)
 8000480:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000484:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000486:	4b1d      	ldr	r3, [pc, #116]	@ (80004fc <SystemInit+0x14c>)
 8000488:	681a      	ldr	r2, [r3, #0]
 800048a:	4b1d      	ldr	r3, [pc, #116]	@ (8000500 <SystemInit+0x150>)
 800048c:	4013      	ands	r3, r2
 800048e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000492:	d202      	bcs.n	800049a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000494:	4b1b      	ldr	r3, [pc, #108]	@ (8000504 <SystemInit+0x154>)
 8000496:	2201      	movs	r2, #1
 8000498:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800049a:	4b12      	ldr	r3, [pc, #72]	@ (80004e4 <SystemInit+0x134>)
 800049c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80004a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d113      	bne.n	80004d0 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80004a8:	4b0e      	ldr	r3, [pc, #56]	@ (80004e4 <SystemInit+0x134>)
 80004aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80004ae:	4a0d      	ldr	r2, [pc, #52]	@ (80004e4 <SystemInit+0x134>)
 80004b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80004b4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80004b8:	4b13      	ldr	r3, [pc, #76]	@ (8000508 <SystemInit+0x158>)
 80004ba:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80004be:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80004c0:	4b08      	ldr	r3, [pc, #32]	@ (80004e4 <SystemInit+0x134>)
 80004c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80004c6:	4a07      	ldr	r2, [pc, #28]	@ (80004e4 <SystemInit+0x134>)
 80004c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80004cc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	e000ed00 	.word	0xe000ed00
 80004e0:	52002000 	.word	0x52002000
 80004e4:	58024400 	.word	0x58024400
 80004e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80004ec:	02020200 	.word	0x02020200
 80004f0:	01ff0000 	.word	0x01ff0000
 80004f4:	01010280 	.word	0x01010280
 80004f8:	580000c0 	.word	0x580000c0
 80004fc:	5c001000 	.word	0x5c001000
 8000500:	ffff0000 	.word	0xffff0000
 8000504:	51008108 	.word	0x51008108
 8000508:	52004000 	.word	0x52004000

0800050c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
#if defined(USE_PWR_LDO_SUPPLY)
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
 8000510:	4b0a      	ldr	r3, [pc, #40]	@ (800053c <ExitRun0Mode+0x30>)
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	f023 0306 	bic.w	r3, r3, #6
 8000518:	4a08      	ldr	r2, [pc, #32]	@ (800053c <ExitRun0Mode+0x30>)
 800051a:	f043 0302 	orr.w	r3, r3, #2
 800051e:	60d3      	str	r3, [r2, #12]
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000520:	bf00      	nop
 8000522:	4b06      	ldr	r3, [pc, #24]	@ (800053c <ExitRun0Mode+0x30>)
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800052a:	2b00      	cmp	r3, #0
 800052c:	d0f9      	beq.n	8000522 <ExitRun0Mode+0x16>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800052e:	bf00      	nop
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	58024800 	.word	0x58024800

08000540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000544:	4b04      	ldr	r3, [pc, #16]	@ (8000558 <__NVIC_GetPriorityGrouping+0x18>)
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	0a1b      	lsrs	r3, r3, #8
 800054a:	f003 0307 	and.w	r3, r3, #7
}
 800054e:	4618      	mov	r0, r3
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	e000ed00 	.word	0xe000ed00

0800055c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800056a:	2b00      	cmp	r3, #0
 800056c:	db0b      	blt.n	8000586 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800056e:	88fb      	ldrh	r3, [r7, #6]
 8000570:	f003 021f 	and.w	r2, r3, #31
 8000574:	4907      	ldr	r1, [pc, #28]	@ (8000594 <__NVIC_EnableIRQ+0x38>)
 8000576:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800057a:	095b      	lsrs	r3, r3, #5
 800057c:	2001      	movs	r0, #1
 800057e:	fa00 f202 	lsl.w	r2, r0, r2
 8000582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	e000e100 	.word	0xe000e100

08000598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	6039      	str	r1, [r7, #0]
 80005a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80005a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	db0a      	blt.n	80005c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	b2da      	uxtb	r2, r3
 80005b0:	490c      	ldr	r1, [pc, #48]	@ (80005e4 <__NVIC_SetPriority+0x4c>)
 80005b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005b6:	0112      	lsls	r2, r2, #4
 80005b8:	b2d2      	uxtb	r2, r2
 80005ba:	440b      	add	r3, r1
 80005bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005c0:	e00a      	b.n	80005d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	4908      	ldr	r1, [pc, #32]	@ (80005e8 <__NVIC_SetPriority+0x50>)
 80005c8:	88fb      	ldrh	r3, [r7, #6]
 80005ca:	f003 030f 	and.w	r3, r3, #15
 80005ce:	3b04      	subs	r3, #4
 80005d0:	0112      	lsls	r2, r2, #4
 80005d2:	b2d2      	uxtb	r2, r2
 80005d4:	440b      	add	r3, r1
 80005d6:	761a      	strb	r2, [r3, #24]
}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	e000e100 	.word	0xe000e100
 80005e8:	e000ed00 	.word	0xe000ed00

080005ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b089      	sub	sp, #36	@ 0x24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000600:	69fb      	ldr	r3, [r7, #28]
 8000602:	f1c3 0307 	rsb	r3, r3, #7
 8000606:	2b04      	cmp	r3, #4
 8000608:	bf28      	it	cs
 800060a:	2304      	movcs	r3, #4
 800060c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	3304      	adds	r3, #4
 8000612:	2b06      	cmp	r3, #6
 8000614:	d902      	bls.n	800061c <NVIC_EncodePriority+0x30>
 8000616:	69fb      	ldr	r3, [r7, #28]
 8000618:	3b03      	subs	r3, #3
 800061a:	e000      	b.n	800061e <NVIC_EncodePriority+0x32>
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000620:	f04f 32ff 	mov.w	r2, #4294967295
 8000624:	69bb      	ldr	r3, [r7, #24]
 8000626:	fa02 f303 	lsl.w	r3, r2, r3
 800062a:	43da      	mvns	r2, r3
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	401a      	ands	r2, r3
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000634:	f04f 31ff 	mov.w	r1, #4294967295
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	fa01 f303 	lsl.w	r3, r1, r3
 800063e:	43d9      	mvns	r1, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000644:	4313      	orrs	r3, r2
         );
}
 8000646:	4618      	mov	r0, r3
 8000648:	3724      	adds	r7, #36	@ 0x24
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr

08000652 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000652:	b480      	push	{r7}
 8000654:	b087      	sub	sp, #28
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
 800065a:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000662:	2b00      	cmp	r3, #0
 8000664:	d107      	bne.n	8000676 <LL_ADC_SetChannelPreselection+0x24>
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	0e9b      	lsrs	r3, r3, #26
 800066a:	f003 031f 	and.w	r3, r3, #31
 800066e:	2201      	movs	r2, #1
 8000670:	fa02 f303 	lsl.w	r3, r2, r3
 8000674:	e015      	b.n	80006a2 <LL_ADC_SetChannelPreselection+0x50>
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800067a:	693b      	ldr	r3, [r7, #16]
 800067c:	fa93 f3a3 	rbit	r3, r3
 8000680:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d101      	bne.n	8000690 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 800068c:	2320      	movs	r3, #32
 800068e:	e003      	b.n	8000698 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	fab3 f383 	clz	r3, r3
 8000696:	b2db      	uxtb	r3, r3
 8000698:	f003 031f 	and.w	r3, r3, #31
 800069c:	2201      	movs	r2, #1
 800069e:	fa02 f303 	lsl.w	r3, r2, r3
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	69d2      	ldr	r2, [r2, #28]
 80006a6:	431a      	orrs	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 80006ac:	bf00      	nop
 80006ae:	371c      	adds	r7, #28
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr

080006b8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b087      	sub	sp, #28
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	3330      	adds	r3, #48	@ 0x30
 80006c8:	461a      	mov	r2, r3
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	0a1b      	lsrs	r3, r3, #8
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	f003 030c 	and.w	r3, r3, #12
 80006d4:	4413      	add	r3, r2
 80006d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	f003 031f 	and.w	r3, r3, #31
 80006e2:	211f      	movs	r1, #31
 80006e4:	fa01 f303 	lsl.w	r3, r1, r3
 80006e8:	43db      	mvns	r3, r3
 80006ea:	401a      	ands	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	0e9b      	lsrs	r3, r3, #26
 80006f0:	f003 011f 	and.w	r1, r3, #31
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	f003 031f 	and.w	r3, r3, #31
 80006fa:	fa01 f303 	lsl.w	r3, r1, r3
 80006fe:	431a      	orrs	r2, r3
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000704:	bf00      	nop
 8000706:	371c      	adds	r7, #28
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	68db      	ldr	r3, [r3, #12]
 800071e:	f023 0203 	bic.w	r2, r3, #3
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	431a      	orrs	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	60da      	str	r2, [r3, #12]
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000736:	b480      	push	{r7}
 8000738:	b087      	sub	sp, #28
 800073a:	af00      	add	r7, sp, #0
 800073c:	60f8      	str	r0, [r7, #12]
 800073e:	60b9      	str	r1, [r7, #8]
 8000740:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	3314      	adds	r3, #20
 8000746:	461a      	mov	r2, r3
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	0e5b      	lsrs	r3, r3, #25
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	4413      	add	r3, r2
 8000754:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	0d1b      	lsrs	r3, r3, #20
 800075e:	f003 031f 	and.w	r3, r3, #31
 8000762:	2107      	movs	r1, #7
 8000764:	fa01 f303 	lsl.w	r3, r1, r3
 8000768:	43db      	mvns	r3, r3
 800076a:	401a      	ands	r2, r3
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	0d1b      	lsrs	r3, r3, #20
 8000770:	f003 031f 	and.w	r3, r3, #31
 8000774:	6879      	ldr	r1, [r7, #4]
 8000776:	fa01 f303 	lsl.w	r3, r1, r3
 800077a:	431a      	orrs	r2, r3
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000780:	bf00      	nop
 8000782:	371c      	adds	r7, #28
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80007a4:	43db      	mvns	r3, r3
 80007a6:	401a      	ands	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	f003 0318 	and.w	r3, r3, #24
 80007ae:	4908      	ldr	r1, [pc, #32]	@ (80007d0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80007b0:	40d9      	lsrs	r1, r3
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	400b      	ands	r3, r1
 80007b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80007ba:	431a      	orrs	r2, r3
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80007c2:	bf00      	nop
 80007c4:	3714      	adds	r7, #20
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	000fffff 	.word	0x000fffff

080007d4 <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_GRP_INJECTED
  *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	691a      	ldr	r2, [r3, #16]
 80007e2:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <LL_ADC_SetOverSamplingScope+0x28>)
 80007e4:	4013      	ands	r3, r2
 80007e6:	683a      	ldr	r2, [r7, #0]
 80007e8:	431a      	orrs	r2, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	611a      	str	r2, [r3, #16]
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	fffffbfc 	.word	0xfffffbfc

08000800 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	689a      	ldr	r2, [r3, #8]
 800080c:	4b04      	ldr	r3, [pc, #16]	@ (8000820 <LL_ADC_DisableDeepPowerDown+0x20>)
 800080e:	4013      	ands	r3, r2
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	6093      	str	r3, [r2, #8]
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	5fffffc0 	.word	0x5fffffc0

08000824 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	689a      	ldr	r2, [r3, #8]
 8000830:	4b05      	ldr	r3, [pc, #20]	@ (8000848 <LL_ADC_EnableInternalRegulator+0x24>)
 8000832:	4013      	ands	r3, r2
 8000834:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	6fffffc0 	.word	0x6fffffc0

0800084c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	689a      	ldr	r2, [r3, #8]
 8000858:	4b05      	ldr	r3, [pc, #20]	@ (8000870 <LL_ADC_Enable+0x24>)
 800085a:	4013      	ands	r3, r2
 800085c:	f043 0201 	orr.w	r2, r3, #1
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	7fffffc0 	.word	0x7fffffc0

08000874 <LL_ADC_IsActiveFlag_ADRDY>:
  * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(const ADC_TypeDef *ADCx)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	2b01      	cmp	r3, #1
 8000886:	d101      	bne.n	800088c <LL_ADC_IsActiveFlag_ADRDY+0x18>
 8000888:	2301      	movs	r3, #1
 800088a:	e000      	b.n	800088e <LL_ADC_IsActiveFlag_ADRDY+0x1a>
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 800089a:	b480      	push	{r7}
 800089c:	b083      	sub	sp, #12
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	601a      	str	r2, [r3, #0]
}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr

080008ba <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 80008ba:	b480      	push	{r7}
 80008bc:	b083      	sub	sp, #12
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	601a      	str	r2, [r3, #0]
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
	...

080008dc <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	68da      	ldr	r2, [r3, #12]
 80008ec:	4b06      	ldr	r3, [pc, #24]	@ (8000908 <LL_I2C_SetOwnAddress2+0x2c>)
 80008ee:	4013      	ands	r3, r2
 80008f0:	68b9      	ldr	r1, [r7, #8]
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	430a      	orrs	r2, r1
 80008f6:	431a      	orrs	r2, r3
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	60da      	str	r2, [r3, #12]
}
 80008fc:	bf00      	nop
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	fffff801 	.word	0xfffff801

0800090c <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	60da      	str	r2, [r3, #12]
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	605a      	str	r2, [r3, #4]
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f043 0201 	orr.w	r2, r3, #1
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	601a      	str	r2, [r3, #0]
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	601a      	str	r2, [r3, #0]
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 800098c:	b480      	push	{r7}
 800098e:	b089      	sub	sp, #36	@ 0x24
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	3308      	adds	r3, #8
 800099a:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	e853 3f00 	ldrex	r3, [r3]
 80009a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	075b      	lsls	r3, r3, #29
 80009ae:	4313      	orrs	r3, r2
 80009b0:	61fb      	str	r3, [r7, #28]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	3308      	adds	r3, #8
 80009b6:	69fa      	ldr	r2, [r7, #28]
 80009b8:	61ba      	str	r2, [r7, #24]
 80009ba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80009bc:	6979      	ldr	r1, [r7, #20]
 80009be:	69ba      	ldr	r2, [r7, #24]
 80009c0:	e841 2300 	strex	r3, r2, [r1]
 80009c4:	613b      	str	r3, [r7, #16]
   return(result);
 80009c6:	693b      	ldr	r3, [r7, #16]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d1e4      	bne.n	8000996 <LL_USART_SetTXFIFOThreshold+0xa>
}
 80009cc:	bf00      	nop
 80009ce:	bf00      	nop
 80009d0:	3724      	adds	r7, #36	@ 0x24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 80009da:	b480      	push	{r7}
 80009dc:	b089      	sub	sp, #36	@ 0x24
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
 80009e2:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3308      	adds	r3, #8
 80009e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	e853 3f00 	ldrex	r3, [r3]
 80009f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	065b      	lsls	r3, r3, #25
 80009fc:	4313      	orrs	r3, r2
 80009fe:	61fb      	str	r3, [r7, #28]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3308      	adds	r3, #8
 8000a04:	69fa      	ldr	r2, [r7, #28]
 8000a06:	61ba      	str	r2, [r7, #24]
 8000a08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000a0a:	6979      	ldr	r1, [r7, #20]
 8000a0c:	69ba      	ldr	r2, [r7, #24]
 8000a0e:	e841 2300 	strex	r3, r2, [r1]
 8000a12:	613b      	str	r3, [r7, #16]
   return(result);
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d1e4      	bne.n	80009e4 <LL_USART_SetRXFIFOThreshold+0xa>
}
 8000a1a:	bf00      	nop
 8000a1c:	bf00      	nop
 8000a1e:	3724      	adds	r7, #36	@ 0x24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	609a      	str	r2, [r3, #8]
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	69db      	ldr	r3, [r3, #28]
 8000a60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8000a68:	d101      	bne.n	8000a6e <LL_USART_IsActiveFlag_TEACK+0x1a>
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e000      	b.n	8000a70 <LL_USART_IsActiveFlag_TEACK+0x1c>
 8000a6e:	2300      	movs	r3, #0
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	69db      	ldr	r3, [r3, #28]
 8000a88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000a90:	d101      	bne.n	8000a96 <LL_USART_IsActiveFlag_REACK+0x1a>
 8000a92:	2301      	movs	r3, #1
 8000a94:	e000      	b.n	8000a98 <LL_USART_IsActiveFlag_REACK+0x1c>
 8000a96:	2300      	movs	r3, #0
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <LL_SYSCFG_OpenAnalogSwitch>:
  *         @arg LL_SYSCFG_ANALOG_SWITCH_PC2 : PC2 analog switch
  *         @arg LL_SYSCFG_ANALOG_SWITCH_PC3:  PC3 analog switch
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_OpenAnalogSwitch(uint32_t AnalogSwitch)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->PMCR, AnalogSwitch);
 8000aac:	4b05      	ldr	r3, [pc, #20]	@ (8000ac4 <LL_SYSCFG_OpenAnalogSwitch+0x20>)
 8000aae:	685a      	ldr	r2, [r3, #4]
 8000ab0:	4904      	ldr	r1, [pc, #16]	@ (8000ac4 <LL_SYSCFG_OpenAnalogSwitch+0x20>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	604b      	str	r3, [r1, #4]
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	58000400 	.word	0x58000400

08000ac8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	683a      	ldr	r2, [r7, #0]
 8000ad6:	619a      	str	r2, [r3, #24]
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	041a      	lsls	r2, r3, #16
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	619a      	str	r2, [r3, #24]
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
	...

08000b04 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b38 <LL_AHB1_GRP1_EnableClock+0x34>)
 8000b0e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8000b12:	4909      	ldr	r1, [pc, #36]	@ (8000b38 <LL_AHB1_GRP1_EnableClock+0x34>)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	f8c1 30d8 	str.w	r3, [r1, #216]	@ 0xd8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000b1c:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <LL_AHB1_GRP1_EnableClock+0x34>)
 8000b1e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4013      	ands	r3, r2
 8000b26:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b28:	68fb      	ldr	r3, [r7, #12]
}
 8000b2a:	bf00      	nop
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	58024400 	.word	0x58024400

08000b3c <LL_AHB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 8000b44:	4b0a      	ldr	r3, [pc, #40]	@ (8000b70 <LL_AHB4_GRP1_EnableClock+0x34>)
 8000b46:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000b4a:	4909      	ldr	r1, [pc, #36]	@ (8000b70 <LL_AHB4_GRP1_EnableClock+0x34>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8000b54:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <LL_AHB4_GRP1_EnableClock+0x34>)
 8000b56:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b60:	68fb      	ldr	r3, [r7, #12]
}
 8000b62:	bf00      	nop
 8000b64:	3714      	adds	r7, #20
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	58024400 	.word	0x58024400

08000b74 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1LENR, Periphs);
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba8 <LL_APB1_GRP1_EnableClock+0x34>)
 8000b7e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8000b82:	4909      	ldr	r1, [pc, #36]	@ (8000ba8 <LL_APB1_GRP1_EnableClock+0x34>)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8000b8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <LL_APB1_GRP1_EnableClock+0x34>)
 8000b8e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4013      	ands	r3, r2
 8000b96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b98:	68fb      	ldr	r3, [r7, #12]
}
 8000b9a:	bf00      	nop
 8000b9c:	3714      	adds	r7, #20
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	58024400 	.word	0x58024400

08000bac <csp_conf_get_defaults>:
} csp_conf_t;

/**
   Get default CSP configuration.
*/
static inline void csp_conf_get_defaults(csp_conf_t * conf) {
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	conf->address = 1;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
	conf->hostname = "hostname";
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a13      	ldr	r2, [pc, #76]	@ (8000c0c <csp_conf_get_defaults+0x60>)
 8000bbe:	605a      	str	r2, [r3, #4]
	conf->model = "model";
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a13      	ldr	r2, [pc, #76]	@ (8000c10 <csp_conf_get_defaults+0x64>)
 8000bc4:	609a      	str	r2, [r3, #8]
	conf->revision = "resvision";
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a12      	ldr	r2, [pc, #72]	@ (8000c14 <csp_conf_get_defaults+0x68>)
 8000bca:	60da      	str	r2, [r3, #12]
	conf->conn_max = 10;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	220a      	movs	r2, #10
 8000bd0:	741a      	strb	r2, [r3, #16]
	conf->conn_queue_length = 10;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	220a      	movs	r2, #10
 8000bd6:	745a      	strb	r2, [r3, #17]
	conf->fifo_length = 25;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2219      	movs	r2, #25
 8000bdc:	749a      	strb	r2, [r3, #18]
	conf->port_max_bind = 24;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2218      	movs	r2, #24
 8000be2:	74da      	strb	r2, [r3, #19]
	conf->rdp_max_window = 20;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2214      	movs	r2, #20
 8000be8:	751a      	strb	r2, [r3, #20]
	conf->buffers = 10;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	220a      	movs	r2, #10
 8000bee:	82da      	strh	r2, [r3, #22]
	conf->buffer_data_size = 256;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bf6:	831a      	strh	r2, [r3, #24]
	conf->conn_dfl_so = CSP_O_NONE;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	61da      	str	r2, [r3, #28]
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	080131c4 	.word	0x080131c4
 8000c10:	080131d0 	.word	0x080131d0
 8000c14:	080131d8 	.word	0x080131d8

08000c18 <CLI_Polling_Task>:
        vTaskDelay( 500 );
    }
}

static void CLI_Polling_Task( void * parameters )
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
//            }
//            embeddedCliProcess(get_COMM_USB_CliPointer());
//            CDC_setRxReady(0);
//        }

        if (UART_Driver_IsDataAvailable(UART4))
 8000c20:	480e      	ldr	r0, [pc, #56]	@ (8000c5c <CLI_Polling_Task+0x44>)
 8000c22:	f001 fa53 	bl	80020cc <UART_Driver_IsDataAvailable>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d012      	beq.n	8000c52 <CLI_Polling_Task+0x3a>
        {
        	rxData = UART_Driver_Read(UART4);
 8000c2c:	480b      	ldr	r0, [pc, #44]	@ (8000c5c <CLI_Polling_Task+0x44>)
 8000c2e:	f001 fa09 	bl	8002044 <UART_Driver_Read>
 8000c32:	4603      	mov	r3, r0
 8000c34:	73fb      	strb	r3, [r7, #15]
            embeddedCliReceiveChar(get_COMM_UART_CliPointer(), (char)rxData);
 8000c36:	f001 fe7b 	bl	8002930 <get_COMM_UART_CliPointer>
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4610      	mov	r0, r2
 8000c42:	f001 ff6b 	bl	8002b1c <embeddedCliReceiveChar>
            embeddedCliProcess(get_COMM_UART_CliPointer());
 8000c46:	f001 fe73 	bl	8002930 <get_COMM_UART_CliPointer>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f001 ff88 	bl	8002b62 <embeddedCliProcess>
        }

        vTaskDelay(1);
 8000c52:	2001      	movs	r0, #1
 8000c54:	f004 fd40 	bl	80056d8 <vTaskDelay>
    {
 8000c58:	e7e2      	b.n	8000c20 <CLI_Polling_Task+0x8>
 8000c5a:	bf00      	nop
 8000c5c:	40004c00 	.word	0x40004c00

08000c60 <csp_rx_task>:

		vTaskDelay(2000);
	}
}

void csp_rx_task(void *argument) {
 8000c60:	b590      	push	{r4, r7, lr}
 8000c62:	b0af      	sub	sp, #188	@ 0xbc
 8000c64:	af04      	add	r7, sp, #16
 8000c66:	6078      	str	r0, [r7, #4]
	/* Create socket with no specific socket options, e.g. accepts CRC32, HMAC, XTEA, etc. if enabled during compilation */
	csp_socket_t *sock = csp_socket(CSP_SO_NONE);
 8000c68:	2000      	movs	r0, #0
 8000c6a:	f007 fe97 	bl	800899c <csp_socket>
 8000c6e:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

	/* Bind socket to all ports, e.g. all incoming connections will be handled here */
	csp_bind(sock, CSP_ANY);
 8000c72:	21ff      	movs	r1, #255	@ 0xff
 8000c74:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8000c78:	f008 f8f8 	bl	8008e6c <csp_bind>

	/* Create a backlog of 10 connections, i.e. up to 10 new connections can be queued */
	csp_listen(sock, 10);
 8000c7c:	210a      	movs	r1, #10
 8000c7e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8000c82:	f008 f8cd 	bl	8008e20 <csp_listen>

	/* Wait for connections and then process packets on the connection */
	while (1) {
		/* Wait for a new connection, 1000 mS timeout */
		csp_conn_t *conn;
		if ((conn = csp_accept(sock, 1000)) == NULL) {
 8000c86:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c8a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8000c8e:	f007 ff0f 	bl	8008ab0 <csp_accept>
 8000c92:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 8000c96:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	f000 811e 	beq.w	8000edc <csp_rx_task+0x27c>
			continue;
		}

		/* Read packets on connection, timout is 100 mS */
		csp_packet_t *packet;
		while ((packet = csp_read(conn, 100)) != NULL) {
 8000ca0:	e108      	b.n	8000eb4 <csp_rx_task+0x254>
			switch (csp_conn_dport(conn)) {
 8000ca2:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8000ca6:	f007 fd15 	bl	80086d4 <csp_conn_dport>
 8000caa:	4603      	mov	r3, r0
 8000cac:	3b07      	subs	r3, #7
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	f200 80fa 	bhi.w	8000ea8 <csp_rx_task+0x248>
			case 8:
			case 7:

				if ((packet->data[0] & 0xF0)== 0x00/* 0x00 */) {
 8000cb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000cb8:	7c1b      	ldrb	r3, [r3, #16]
 8000cba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f000 80b8 	beq.w	8000e34 <csp_rx_task+0x1d4>

				}
				else if ((packet->data[0] & 0xF0)== 0x10/* 0x01 */) {
 8000cc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000cc8:	7c1b      	ldrb	r3, [r3, #16]
 8000cca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000cce:	2b10      	cmp	r3, #16
 8000cd0:	f040 80b0 	bne.w	8000e34 <csp_rx_task+0x1d4>

//					if ((packet->data[0] & 0x0F) == 0x06) {

					if(packet->data[1]== 0x04) {
 8000cd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000cd8:	7c5b      	ldrb	r3, [r3, #17]
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	d13b      	bne.n	8000d56 <csp_rx_task+0xf6>
						size_t len = 6;
 8000cde:	2306      	movs	r3, #6
 8000ce0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
						csp_packet_t *reply = csp_buffer_get(sizeof(len));
 8000ce4:	2004      	movs	r0, #4
 8000ce6:	f007 f851 	bl	8007d8c <csp_buffer_get>
 8000cea:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
						reply->data[0]= packet->data[0]&0x0F;
 8000cee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000cf2:	7c1b      	ldrb	r3, [r3, #16]
 8000cf4:	f003 030f 	and.w	r3, r3, #15
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000cfe:	741a      	strb	r2, [r3, #16]
						reply->data[1]= packet->data[1];
 8000d00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000d04:	7c5a      	ldrb	r2, [r3, #17]
 8000d06:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000d0a:	745a      	strb	r2, [r3, #17]
						reply->data[2]= 0x00;
 8000d0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000d10:	2200      	movs	r2, #0
 8000d12:	749a      	strb	r2, [r3, #18]
						reply->data[3]= 0x00;
 8000d14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000d18:	2200      	movs	r2, #0
 8000d1a:	74da      	strb	r2, [r3, #19]
						reply->data[4]= 0x00;
 8000d1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000d20:	2200      	movs	r2, #0
 8000d22:	751a      	strb	r2, [r3, #20]
						reply->data[5]= 0x18;
 8000d24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000d28:	2218      	movs	r2, #24
 8000d2a:	755a      	strb	r2, [r3, #21]
						reply->length= 6;
 8000d2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000d30:	2206      	movs	r2, #6
 8000d32:	815a      	strh	r2, [r3, #10]

						if (csp_send(conn, reply, 1000) == CSP_ERR_NONE)
 8000d34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d38:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8000d3c:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8000d40:	f007 ffe2 	bl	8008d08 <csp_send>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f040 80b3 	bne.w	8000eb2 <csp_rx_task+0x252>
						csp_buffer_free(reply);
 8000d4c:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000d50:	f007 f8b8 	bl	8007ec4 <csp_buffer_free>

						break;
 8000d54:	e0ad      	b.n	8000eb2 <csp_rx_task+0x252>
					}

					uint16_t raw= ADC1_ReadIndex(packet->data[1]);
 8000d56:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000d5a:	7c5b      	ldrb	r3, [r3, #17]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f000 ffaf 	bl	8001cc0 <ADC1_ReadIndex>
 8000d62:	4603      	mov	r3, r0
 8000d64:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
					int32_t temperature = ((raw* 3300)- (500* 65535))/ 65535;
 8000d68:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8000d6c:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000d70:	fb03 f202 	mul.w	r2, r3, r2
 8000d74:	4b5a      	ldr	r3, [pc, #360]	@ (8000ee0 <csp_rx_task+0x280>)
 8000d76:	4413      	add	r3, r2
 8000d78:	4a5a      	ldr	r2, [pc, #360]	@ (8000ee4 <csp_rx_task+0x284>)
 8000d7a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d7e:	441a      	add	r2, r3
 8000d80:	13d2      	asrs	r2, r2, #15
 8000d82:	17db      	asrs	r3, r3, #31
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
					if(temperature > 1250) {
 8000d8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000d8e:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8000d92:	4293      	cmp	r3, r2
 8000d94:	dd04      	ble.n	8000da0 <csp_rx_task+0x140>
						temperature = 1250;
 8000d96:	f240 43e2 	movw	r3, #1250	@ 0x4e2
 8000d9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000d9e:	e007      	b.n	8000db0 <csp_rx_task+0x150>
					} else if(temperature < -400) {
 8000da0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000da4:	f513 7fc8 	cmn.w	r3, #400	@ 0x190
 8000da8:	da02      	bge.n	8000db0 <csp_rx_task+0x150>
						temperature = -400;
 8000daa:	4b4f      	ldr	r3, [pc, #316]	@ (8000ee8 <csp_rx_task+0x288>)
 8000dac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
					}

					csp_packet_t *reply = csp_buffer_get(sizeof(temperature));
 8000db0:	2004      	movs	r0, #4
 8000db2:	f006 ffeb 	bl	8007d8c <csp_buffer_get>
 8000db6:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
					reply->data[0]= packet->data[0]&0x0F;
 8000dba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000dbe:	7c1b      	ldrb	r3, [r3, #16]
 8000dc0:	f003 030f 	and.w	r3, r3, #15
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000dca:	741a      	strb	r2, [r3, #16]
					reply->data[1]= packet->data[1];
 8000dcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000dd0:	7c5a      	ldrb	r2, [r3, #17]
 8000dd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000dd6:	745a      	strb	r2, [r3, #17]
					reply->data[2]= (uint8_t)((temperature>> 24)& 0xFF);
 8000dd8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000ddc:	161b      	asrs	r3, r3, #24
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000de4:	749a      	strb	r2, [r3, #18]
					reply->data[3]= (uint8_t)((temperature>> 16)& 0xFF);
 8000de6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000dea:	141b      	asrs	r3, r3, #16
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000df2:	74da      	strb	r2, [r3, #19]
					reply->data[4]= (uint8_t)((temperature>> 8)& 0xFF);
 8000df4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000df8:	121b      	asrs	r3, r3, #8
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000e00:	751a      	strb	r2, [r3, #20]
					reply->data[5]= (uint8_t)(temperature& 0xFF);
 8000e02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000e0c:	755a      	strb	r2, [r3, #21]
					reply->length= 6;
 8000e0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000e12:	2206      	movs	r2, #6
 8000e14:	815a      	strh	r2, [r3, #10]

//				        if (reply) {
//				            memcpy(reply->data, &temperature, sizeof(temperature));
//				            reply->length = sizeof(temperature);

					if (csp_send(conn, reply, 1000) == CSP_ERR_NONE)
 8000e16:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8000e1e:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8000e22:	f007 ff71 	bl	8008d08 <csp_send>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d103      	bne.n	8000e34 <csp_rx_task+0x1d4>
					csp_buffer_free(reply);
 8000e2c:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000e30:	f007 f848 	bl	8007ec4 <csp_buffer_free>
//						}
//					}
				}

				/* Process packet here */
				csp_log_info("Packet received on MY_SERVER_PORT: %s", (char *) packet->data);
 8000e34:	4b2d      	ldr	r3, [pc, #180]	@ (8000eec <csp_rx_task+0x28c>)
 8000e36:	789b      	ldrb	r3, [r3, #2]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d007      	beq.n	8000e4c <csp_rx_task+0x1ec>
 8000e3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000e40:	3310      	adds	r3, #16
 8000e42:	461a      	mov	r2, r3
 8000e44:	492a      	ldr	r1, [pc, #168]	@ (8000ef0 <csp_rx_task+0x290>)
 8000e46:	2002      	movs	r0, #2
 8000e48:	f007 fc62 	bl	8008710 <do_csp_debug>

				char out[128];
				snprintf(out, sizeof(out),
 8000e4c:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8000e50:	f007 fc4f 	bl	80086f2 <csp_conn_src>
 8000e54:	4604      	mov	r4, r0
 8000e56:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8000e5a:	f007 fc3b 	bl	80086d4 <csp_conn_dport>
 8000e5e:	4602      	mov	r2, r0
				         "RxData from node %u port %u: %.*s",
				         csp_conn_src(conn),
				         csp_conn_dport(conn),
				         packet->length,
 8000e60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000e64:	895b      	ldrh	r3, [r3, #10]
				snprintf(out, sizeof(out),
 8000e66:	4619      	mov	r1, r3
				         (char *)packet->data);
 8000e68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000e6c:	3310      	adds	r3, #16
				snprintf(out, sizeof(out),
 8000e6e:	f107 0008 	add.w	r0, r7, #8
 8000e72:	9302      	str	r3, [sp, #8]
 8000e74:	9101      	str	r1, [sp, #4]
 8000e76:	9200      	str	r2, [sp, #0]
 8000e78:	4623      	mov	r3, r4
 8000e7a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ef4 <csp_rx_task+0x294>)
 8000e7c:	2180      	movs	r1, #128	@ 0x80
 8000e7e:	f011 f85d 	bl	8011f3c <sniprintf>

				embeddedCliPrint(get_COMM_UART_CliPointer(), out);
 8000e82:	f001 fd55 	bl	8002930 <get_COMM_UART_CliPointer>
 8000e86:	4602      	mov	r2, r0
 8000e88:	f107 0308 	add.w	r3, r7, #8
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4610      	mov	r0, r2
 8000e90:	f001 fef8 	bl	8002c84 <embeddedCliPrint>

				csp_buffer_free(packet);
 8000e94:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8000e98:	f007 f814 	bl	8007ec4 <csp_buffer_free>
				++server_received;
 8000e9c:	4b16      	ldr	r3, [pc, #88]	@ (8000ef8 <csp_rx_task+0x298>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	4a15      	ldr	r2, [pc, #84]	@ (8000ef8 <csp_rx_task+0x298>)
 8000ea4:	6013      	str	r3, [r2, #0]
				break;
 8000ea6:	e005      	b.n	8000eb4 <csp_rx_task+0x254>
//				         csp_conn_dport(conn),
//				         packet->length,
//				         (char *)packet->data);
//
//				embeddedCliPrint(get_COMM_UART_CliPointer(), out);
				csp_buffer_free(packet);
 8000ea8:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8000eac:	f007 f80a 	bl	8007ec4 <csp_buffer_free>
//
				break;
 8000eb0:	e000      	b.n	8000eb4 <csp_rx_task+0x254>
						break;
 8000eb2:	bf00      	nop
		while ((packet = csp_read(conn, 100)) != NULL) {
 8000eb4:	2164      	movs	r1, #100	@ 0x64
 8000eb6:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8000eba:	f007 fe1b 	bl	8008af4 <csp_read>
 8000ebe:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
 8000ec2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f47f aeeb 	bne.w	8000ca2 <csp_rx_task+0x42>
			}
		}
		/* Close current connection */
		csp_close(conn);
 8000ecc:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8000ed0:	f007 fa9b 	bl	800840a <csp_close>

		vTaskDelay(100);
 8000ed4:	2064      	movs	r0, #100	@ 0x64
 8000ed6:	f004 fbff 	bl	80056d8 <vTaskDelay>
 8000eda:	e6d4      	b.n	8000c86 <csp_rx_task+0x26>
			continue;
 8000edc:	bf00      	nop
	while (1) {
 8000ede:	e6d2      	b.n	8000c86 <csp_rx_task+0x26>
 8000ee0:	fe0c01f4 	.word	0xfe0c01f4
 8000ee4:	80008001 	.word	0x80008001
 8000ee8:	fffffe70 	.word	0xfffffe70
 8000eec:	2400008c 	.word	0x2400008c
 8000ef0:	080131ec 	.word	0x080131ec
 8000ef4:	08013214 	.word	0x08013214
 8000ef8:	24000258 	.word	0x24000258

08000efc <watchdog_task>:
	}
}

void watchdog_task(void *argument) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
	    LL_GPIO_ResetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 8000f04:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f08:	4808      	ldr	r0, [pc, #32]	@ (8000f2c <watchdog_task+0x30>)
 8000f0a:	f7ff fdeb 	bl	8000ae4 <LL_GPIO_ResetOutputPin>
	    vTaskDelay(pdMS_TO_TICKS(200));
 8000f0e:	20c8      	movs	r0, #200	@ 0xc8
 8000f10:	f004 fbe2 	bl	80056d8 <vTaskDelay>
	    LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 8000f14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f18:	4804      	ldr	r0, [pc, #16]	@ (8000f2c <watchdog_task+0x30>)
 8000f1a:	f7ff fdd5 	bl	8000ac8 <LL_GPIO_SetOutputPin>
	    vTaskDelay(pdMS_TO_TICKS(600));
 8000f1e:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000f22:	f004 fbd9 	bl	80056d8 <vTaskDelay>
	    LL_GPIO_ResetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 8000f26:	bf00      	nop
 8000f28:	e7ec      	b.n	8000f04 <watchdog_task+0x8>
 8000f2a:	bf00      	nop
 8000f2c:	58020c00 	.word	0x58020c00

08000f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af02      	add	r7, sp, #8
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f36:	f009 f929 	bl	800a18c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3a:	f000 f86b 	bl	8001014 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f3e:	f000 f8e5 	bl	800110c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f42:	f000 fbf1 	bl	8001728 <MX_GPIO_Init>
  MX_UART4_Init();
 8000f46:	f000 fb4f 	bl	80015e8 <MX_UART4_Init>
  MX_FDCAN2_Init();
 8000f4a:	f000 fa65 	bl	8001418 <MX_FDCAN2_Init>
  MX_I2C1_Init();
 8000f4e:	f000 fac7 	bl	80014e0 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000f52:	f000 f90b 	bl	800116c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000f56:	f000 f9e9 	bl	800132c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  CDC_RingBuffer_Init();
 8000f5a:	f001 f931 	bl	80021c0 <CDC_RingBuffer_Init>
  UART_Driver_Init();
 8000f5e:	f001 f847 	bl	8001ff0 <UART_Driver_Init>
  SystemCLI_Init();
 8000f62:	f001 fc99 	bl	8002898 <SystemCLI_Init>

  /*CSP INIT*/
  csp_conf_get_defaults(&csp_conf);
 8000f66:	4823      	ldr	r0, [pc, #140]	@ (8000ff4 <main+0xc4>)
 8000f68:	f7ff fe20 	bl	8000bac <csp_conf_get_defaults>
  csp_conf.address = 12;
 8000f6c:	4b21      	ldr	r3, [pc, #132]	@ (8000ff4 <main+0xc4>)
 8000f6e:	220c      	movs	r2, #12
 8000f70:	701a      	strb	r2, [r3, #0]
  csp_init(&csp_conf);
 8000f72:	4820      	ldr	r0, [pc, #128]	@ (8000ff4 <main+0xc4>)
 8000f74:	f007 fcce 	bl	8008914 <csp_init>
  /*CSP INTERFACE INIT*/
  can_csp_init();
 8000f78:	f008 fb20 	bl	80095bc <can_csp_init>
  csp_route_start_task(500, 6);
 8000f7c:	2106      	movs	r1, #6
 8000f7e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f82:	f008 fac1 	bl	8009508 <csp_route_start_task>
  csp_rtable_set(3, CSP_ID_HOST_SIZE, &can_iface, CSP_NO_VIA_ADDRESS);
 8000f86:	23ff      	movs	r3, #255	@ 0xff
 8000f88:	4a1b      	ldr	r2, [pc, #108]	@ (8000ff8 <main+0xc8>)
 8000f8a:	2105      	movs	r1, #5
 8000f8c:	2003      	movs	r0, #3
 8000f8e:	f008 fed9 	bl	8009d44 <csp_rtable_set>
  csp_rtable_set(2, CSP_ID_HOST_SIZE, &can_iface, CSP_NO_VIA_ADDRESS);
 8000f92:	23ff      	movs	r3, #255	@ 0xff
 8000f94:	4a18      	ldr	r2, [pc, #96]	@ (8000ff8 <main+0xc8>)
 8000f96:	2105      	movs	r1, #5
 8000f98:	2002      	movs	r0, #2
 8000f9a:	f008 fed3 	bl	8009d44 <csp_rtable_set>
  csp_rtable_set(1, CSP_ID_HOST_SIZE, &can_iface, CSP_NO_VIA_ADDRESS);
 8000f9e:	23ff      	movs	r3, #255	@ 0xff
 8000fa0:	4a15      	ldr	r2, [pc, #84]	@ (8000ff8 <main+0xc8>)
 8000fa2:	2105      	movs	r1, #5
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f008 fecd 	bl	8009d44 <csp_rtable_set>
//  SRAM_Initialize(&IS66WV);

//  xTaskCreate(UsbInitTask,		"USB_Init",				configMINIMAL_STACK_SIZE * 10, 	NULL, configMAX_PRIORITIES - 3U, NULL);
//  xTaskCreate(blink,			"Blink",				configMINIMAL_STACK_SIZE * 10, 	NULL, configMAX_PRIORITIES - 3U, NULL);
  xTaskCreate(CLI_Polling_Task, "CLI_Polling_Task",		configMINIMAL_STACK_SIZE * 10, 	NULL, configMAX_PRIORITIES - 1U, NULL);
 8000faa:	2300      	movs	r3, #0
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	2306      	movs	r3, #6
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000fb8:	4910      	ldr	r1, [pc, #64]	@ (8000ffc <main+0xcc>)
 8000fba:	4811      	ldr	r0, [pc, #68]	@ (8001000 <main+0xd0>)
 8000fbc:	f004 fa3d 	bl	800543a <xTaskCreate>
//  xTaskCreate(USB_HS_Task,		"USB_HS_Task",			configMINIMAL_STACK_SIZE * 10, 	NULL, configMAX_PRIORITIES - 3U, NULL);
//  xTaskCreate(USB_FS_Task,		"USB_FS_Task",			configMINIMAL_STACK_SIZE * 10, 	NULL, configMAX_PRIORITIES - 3U, NULL);
//  xTaskCreate(csp_tx_task, 		"csp_can_tx", 			configMINIMAL_STACK_SIZE * 10, 	NULL, configMAX_PRIORITIES - 3U, NULL);
  xTaskCreate(csp_rx_task, 		"csp_can_rx", 			configMINIMAL_STACK_SIZE * 10, 	NULL, configMAX_PRIORITIES - 1U, NULL);
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	9301      	str	r3, [sp, #4]
 8000fc4:	2306      	movs	r3, #6
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000fce:	490d      	ldr	r1, [pc, #52]	@ (8001004 <main+0xd4>)
 8000fd0:	480d      	ldr	r0, [pc, #52]	@ (8001008 <main+0xd8>)
 8000fd2:	f004 fa32 	bl	800543a <xTaskCreate>
  xTaskCreate(watchdog_task, 	"watch_dog", 			configMINIMAL_STACK_SIZE * 5, 	NULL, configMAX_PRIORITIES - 1U, NULL);
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	2306      	movs	r3, #6
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000fe4:	4909      	ldr	r1, [pc, #36]	@ (800100c <main+0xdc>)
 8000fe6:	480a      	ldr	r0, [pc, #40]	@ (8001010 <main+0xe0>)
 8000fe8:	f004 fa27 	bl	800543a <xTaskCreate>

  vTaskStartScheduler();
 8000fec:	f004 fc14 	bl	8005818 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <main+0xc0>
 8000ff4:	24042c54 	.word	0x24042c54
 8000ff8:	24042c84 	.word	0x24042c84
 8000ffc:	08013238 	.word	0x08013238
 8001000:	08000c19 	.word	0x08000c19
 8001004:	0801324c 	.word	0x0801324c
 8001008:	08000c61 	.word	0x08000c61
 800100c:	08013258 	.word	0x08013258
 8001010:	08000efd 	.word	0x08000efd

08001014 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b09c      	sub	sp, #112	@ 0x70
 8001018:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800101e:	224c      	movs	r2, #76	@ 0x4c
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f011 f8de 	bl	80121e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	2220      	movs	r2, #32
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f011 f8d8 	bl	80121e4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001034:	2002      	movs	r0, #2
 8001036:	f00b fd31 	bl	800ca9c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800103a:	2300      	movs	r3, #0
 800103c:	603b      	str	r3, [r7, #0]
 800103e:	4b31      	ldr	r3, [pc, #196]	@ (8001104 <SystemClock_Config+0xf0>)
 8001040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001042:	4a30      	ldr	r2, [pc, #192]	@ (8001104 <SystemClock_Config+0xf0>)
 8001044:	f023 0301 	bic.w	r3, r3, #1
 8001048:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800104a:	4b2e      	ldr	r3, [pc, #184]	@ (8001104 <SystemClock_Config+0xf0>)
 800104c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	4b2c      	ldr	r3, [pc, #176]	@ (8001108 <SystemClock_Config+0xf4>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800105c:	4a2a      	ldr	r2, [pc, #168]	@ (8001108 <SystemClock_Config+0xf4>)
 800105e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001062:	6193      	str	r3, [r2, #24]
 8001064:	4b28      	ldr	r3, [pc, #160]	@ (8001108 <SystemClock_Config+0xf4>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800106c:	603b      	str	r3, [r7, #0]
 800106e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001070:	bf00      	nop
 8001072:	4b25      	ldr	r3, [pc, #148]	@ (8001108 <SystemClock_Config+0xf4>)
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800107a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800107e:	d1f8      	bne.n	8001072 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001080:	2301      	movs	r3, #1
 8001082:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001084:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001088:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800108a:	2302      	movs	r3, #2
 800108c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800108e:	2302      	movs	r3, #2
 8001090:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001092:	2302      	movs	r3, #2
 8001094:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001096:	230c      	movs	r3, #12
 8001098:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800109a:	2302      	movs	r3, #2
 800109c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800109e:	2303      	movs	r3, #3
 80010a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010a2:	2302      	movs	r3, #2
 80010a4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80010a6:	230c      	movs	r3, #12
 80010a8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80010aa:	2302      	movs	r3, #2
 80010ac:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010b6:	4618      	mov	r0, r3
 80010b8:	f00b fd4a 	bl	800cb50 <HAL_RCC_OscConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80010c2:	f000 fb8d 	bl	80017e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c6:	233f      	movs	r3, #63	@ 0x3f
 80010c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ca:	2303      	movs	r3, #3
 80010cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010da:	2340      	movs	r3, #64	@ 0x40
 80010dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2101      	movs	r1, #1
 80010ea:	4618      	mov	r0, r3
 80010ec:	f00c f98a 	bl	800d404 <HAL_RCC_ClockConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80010f6:	f000 fb73 	bl	80017e0 <Error_Handler>
  }
}
 80010fa:	bf00      	nop
 80010fc:	3770      	adds	r7, #112	@ 0x70
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	58000400 	.word	0x58000400
 8001108:	58024800 	.word	0x58024800

0800110c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b0b0      	sub	sp, #192	@ 0xc0
 8001110:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001112:	463b      	mov	r3, r7
 8001114:	22c0      	movs	r2, #192	@ 0xc0
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f011 f863 	bl	80121e4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800111e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001122:	f04f 0300 	mov.w	r3, #0
 8001126:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800112a:	2302      	movs	r3, #2
 800112c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800112e:	230c      	movs	r3, #12
 8001130:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 8001132:	2303      	movs	r3, #3
 8001134:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001136:	2302      	movs	r3, #2
 8001138:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800113a:	2302      	movs	r3, #2
 800113c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800113e:	23c0      	movs	r3, #192	@ 0xc0
 8001140:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001142:	2320      	movs	r3, #32
 8001144:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800114a:	2300      	movs	r3, #0
 800114c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001150:	463b      	mov	r3, r7
 8001152:	4618      	mov	r0, r3
 8001154:	f00c fccc 	bl	800daf0 <HAL_RCCEx_PeriphCLKConfig>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800115e:	f000 fb3f 	bl	80017e0 <Error_Handler>
  }
}
 8001162:	bf00      	nop
 8001164:	37c0      	adds	r7, #192	@ 0xc0
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b094      	sub	sp, #80	@ 0x50
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001172:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800117e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
 800118c:	611a      	str	r2, [r3, #16]
 800118e:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
 80011ac:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 80011ae:	2020      	movs	r0, #32
 80011b0:	f7ff fca8 	bl	8000b04 <LL_AHB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 80011b4:	2001      	movs	r0, #1
 80011b6:	f7ff fcc1 	bl	8000b3c <LL_AHB4_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA6   ------> ADC1_INP3
  PA0_C   ------> ADC1_INP0
  PA1_C   ------> ADC1_INP1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80011ba:	2340      	movs	r3, #64	@ 0x40
 80011bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80011be:	2303      	movs	r3, #3
 80011c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	4619      	mov	r1, r3
 80011ca:	4850      	ldr	r0, [pc, #320]	@ (800130c <MX_ADC1_Init+0x1a0>)
 80011cc:	f00f fb5c 	bl	8010888 <LL_GPIO_Init>

  LL_SYSCFG_OpenAnalogSwitch(LL_SYSCFG_ANALOG_SWITCH_PA0|LL_SYSCFG_ANALOG_SWITCH_PA1);
 80011d0:	f04f 7040 	mov.w	r0, #50331648	@ 0x3000000
 80011d4:	f7ff fc66 	bl	8000aa4 <LL_SYSCFG_OpenAnalogSwitch>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 80011d8:	2100      	movs	r1, #0
 80011da:	484d      	ldr	r0, [pc, #308]	@ (8001310 <MX_ADC1_Init+0x1a4>)
 80011dc:	f7ff fafa 	bl	80007d4 <LL_ADC_SetOverSamplingScope>
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_16B;
 80011e0:	2300      	movs	r3, #0
 80011e2:	647b      	str	r3, [r7, #68]	@ 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  ADC_InitStruct.LeftBitShift = LL_ADC_LEFT_BIT_SHIFT_NONE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80011ec:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80011f0:	4619      	mov	r1, r3
 80011f2:	4847      	ldr	r0, [pc, #284]	@ (8001310 <MX_ADC1_Init+0x1a4>)
 80011f4:	f00f f9f8 	bl	80105e8 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS;
 80011fc:	2302      	movs	r3, #2
 80011fe:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_REG_InitStruct.SequencerDiscont = DISABLE;
 8001200:	2300      	movs	r3, #0
 8001202:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8001204:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001208:	63bb      	str	r3, [r7, #56]	@ 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 800120a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800120e:	643b      	str	r3, [r7, #64]	@ 0x40
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001210:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001214:	4619      	mov	r1, r3
 8001216:	483e      	ldr	r0, [pc, #248]	@ (8001310 <MX_ADC1_Init+0x1a4>)
 8001218:	f00f fa12 	bl	8010640 <LL_ADC_REG_Init>
  LL_ADC_REG_SetDataTransferMode(ADC1, LL_ADC_REG_DR_TRANSFER);
 800121c:	2100      	movs	r1, #0
 800121e:	483c      	ldr	r0, [pc, #240]	@ (8001310 <MX_ADC1_Init+0x1a4>)
 8001220:	f7ff fa76 	bl	8000710 <LL_ADC_REG_SetDataTransferMode>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV2;
 8001224:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001228:	61fb      	str	r3, [r7, #28]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 800122a:	2300      	movs	r3, #0
 800122c:	623b      	str	r3, [r7, #32]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	4619      	mov	r1, r3
 8001234:	4837      	ldr	r0, [pc, #220]	@ (8001314 <MX_ADC1_Init+0x1a8>)
 8001236:	f00f f97f 	bl	8010538 <LL_ADC_CommonInit>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 800123a:	4835      	ldr	r0, [pc, #212]	@ (8001310 <MX_ADC1_Init+0x1a4>)
 800123c:	f7ff fae0 	bl	8000800 <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8001240:	4833      	ldr	r0, [pc, #204]	@ (8001310 <MX_ADC1_Init+0x1a4>)
 8001242:	f7ff faef 	bl	8000824 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  __IO uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8001246:	4b34      	ldr	r3, [pc, #208]	@ (8001318 <MX_ADC1_Init+0x1ac>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	099b      	lsrs	r3, r3, #6
 800124c:	4a33      	ldr	r2, [pc, #204]	@ (800131c <MX_ADC1_Init+0x1b0>)
 800124e:	fba2 2303 	umull	r2, r3, r2, r3
 8001252:	099a      	lsrs	r2, r3, #6
 8001254:	4613      	mov	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	461a      	mov	r2, r3
 800125e:	4b30      	ldr	r3, [pc, #192]	@ (8001320 <MX_ADC1_Init+0x1b4>)
 8001260:	fba3 2302 	umull	r2, r3, r3, r2
 8001264:	08db      	lsrs	r3, r3, #3
 8001266:	603b      	str	r3, [r7, #0]
  while(wait_loop_index != 0)
 8001268:	e002      	b.n	8001270 <MX_ADC1_Init+0x104>
  {
    wait_loop_index--;
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	3b01      	subs	r3, #1
 800126e:	603b      	str	r3, [r7, #0]
  while(wait_loop_index != 0)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1f9      	bne.n	800126a <MX_ADC1_Init+0xfe>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 8001276:	2201      	movs	r2, #1
 8001278:	2106      	movs	r1, #6
 800127a:	4825      	ldr	r0, [pc, #148]	@ (8001310 <MX_ADC1_Init+0x1a4>)
 800127c:	f7ff fa1c 	bl	80006b8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8001280:	2200      	movs	r2, #0
 8001282:	2101      	movs	r1, #1
 8001284:	4822      	ldr	r0, [pc, #136]	@ (8001310 <MX_ADC1_Init+0x1a4>)
 8001286:	f7ff fa56 	bl	8000736 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SINGLE_ENDED);
 800128a:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800128e:	2101      	movs	r1, #1
 8001290:	481f      	ldr	r0, [pc, #124]	@ (8001310 <MX_ADC1_Init+0x1a4>)
 8001292:	f7ff fa7b 	bl	800078c <LL_ADC_SetChannelSingleDiff>
  LL_ADC_SetChannelPreselection(ADC1, LL_ADC_CHANNEL_0);
 8001296:	2101      	movs	r1, #1
 8001298:	481d      	ldr	r0, [pc, #116]	@ (8001310 <MX_ADC1_Init+0x1a4>)
 800129a:	f7ff f9da 	bl	8000652 <LL_ADC_SetChannelPreselection>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_1);
 800129e:	4a21      	ldr	r2, [pc, #132]	@ (8001324 <MX_ADC1_Init+0x1b8>)
 80012a0:	210c      	movs	r1, #12
 80012a2:	481b      	ldr	r0, [pc, #108]	@ (8001310 <MX_ADC1_Init+0x1a4>)
 80012a4:	f7ff fa08 	bl	80006b8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80012a8:	2200      	movs	r2, #0
 80012aa:	491e      	ldr	r1, [pc, #120]	@ (8001324 <MX_ADC1_Init+0x1b8>)
 80012ac:	4818      	ldr	r0, [pc, #96]	@ (8001310 <MX_ADC1_Init+0x1a4>)
 80012ae:	f7ff fa42 	bl	8000736 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 80012b2:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80012b6:	491b      	ldr	r1, [pc, #108]	@ (8001324 <MX_ADC1_Init+0x1b8>)
 80012b8:	4815      	ldr	r0, [pc, #84]	@ (8001310 <MX_ADC1_Init+0x1a4>)
 80012ba:	f7ff fa67 	bl	800078c <LL_ADC_SetChannelSingleDiff>
  LL_ADC_SetChannelPreselection(ADC1, LL_ADC_CHANNEL_1);
 80012be:	4919      	ldr	r1, [pc, #100]	@ (8001324 <MX_ADC1_Init+0x1b8>)
 80012c0:	4813      	ldr	r0, [pc, #76]	@ (8001310 <MX_ADC1_Init+0x1a4>)
 80012c2:	f7ff f9c6 	bl	8000652 <LL_ADC_SetChannelPreselection>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_3);
 80012c6:	4a18      	ldr	r2, [pc, #96]	@ (8001328 <MX_ADC1_Init+0x1bc>)
 80012c8:	2112      	movs	r1, #18
 80012ca:	4811      	ldr	r0, [pc, #68]	@ (8001310 <MX_ADC1_Init+0x1a4>)
 80012cc:	f7ff f9f4 	bl	80006b8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80012d0:	2200      	movs	r2, #0
 80012d2:	4915      	ldr	r1, [pc, #84]	@ (8001328 <MX_ADC1_Init+0x1bc>)
 80012d4:	480e      	ldr	r0, [pc, #56]	@ (8001310 <MX_ADC1_Init+0x1a4>)
 80012d6:	f7ff fa2e 	bl	8000736 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SINGLE_ENDED);
 80012da:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80012de:	4912      	ldr	r1, [pc, #72]	@ (8001328 <MX_ADC1_Init+0x1bc>)
 80012e0:	480b      	ldr	r0, [pc, #44]	@ (8001310 <MX_ADC1_Init+0x1a4>)
 80012e2:	f7ff fa53 	bl	800078c <LL_ADC_SetChannelSingleDiff>
  LL_ADC_SetChannelPreselection(ADC1, LL_ADC_CHANNEL_3);
 80012e6:	4910      	ldr	r1, [pc, #64]	@ (8001328 <MX_ADC1_Init+0x1bc>)
 80012e8:	4809      	ldr	r0, [pc, #36]	@ (8001310 <MX_ADC1_Init+0x1a4>)
 80012ea:	f7ff f9b2 	bl	8000652 <LL_ADC_SetChannelPreselection>
  /* USER CODE BEGIN ADC1_Init 2 */

  LL_ADC_Enable(ADC1);
 80012ee:	4808      	ldr	r0, [pc, #32]	@ (8001310 <MX_ADC1_Init+0x1a4>)
 80012f0:	f7ff faac 	bl	800084c <LL_ADC_Enable>
  while (!LL_ADC_IsActiveFlag_ADRDY(ADC1));
 80012f4:	bf00      	nop
 80012f6:	4806      	ldr	r0, [pc, #24]	@ (8001310 <MX_ADC1_Init+0x1a4>)
 80012f8:	f7ff fabc 	bl	8000874 <LL_ADC_IsActiveFlag_ADRDY>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0f9      	beq.n	80012f6 <MX_ADC1_Init+0x18a>
  /* USER CODE END ADC1_Init 2 */

}
 8001302:	bf00      	nop
 8001304:	bf00      	nop
 8001306:	3750      	adds	r7, #80	@ 0x50
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	58020000 	.word	0x58020000
 8001310:	40022000 	.word	0x40022000
 8001314:	40022300 	.word	0x40022300
 8001318:	24000000 	.word	0x24000000
 800131c:	053e2d63 	.word	0x053e2d63
 8001320:	cccccccd 	.word	0xcccccccd
 8001324:	04300002 	.word	0x04300002
 8001328:	0c900008 	.word	0x0c900008

0800132c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
 8001340:	615a      	str	r2, [r3, #20]
 8001342:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001344:	4b31      	ldr	r3, [pc, #196]	@ (800140c <MX_ADC2_Init+0xe0>)
 8001346:	4a32      	ldr	r2, [pc, #200]	@ (8001410 <MX_ADC2_Init+0xe4>)
 8001348:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800134a:	4b30      	ldr	r3, [pc, #192]	@ (800140c <MX_ADC2_Init+0xe0>)
 800134c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001350:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8001352:	4b2e      	ldr	r3, [pc, #184]	@ (800140c <MX_ADC2_Init+0xe0>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001358:	4b2c      	ldr	r3, [pc, #176]	@ (800140c <MX_ADC2_Init+0xe0>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800135e:	4b2b      	ldr	r3, [pc, #172]	@ (800140c <MX_ADC2_Init+0xe0>)
 8001360:	2204      	movs	r2, #4
 8001362:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001364:	4b29      	ldr	r3, [pc, #164]	@ (800140c <MX_ADC2_Init+0xe0>)
 8001366:	2200      	movs	r2, #0
 8001368:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800136a:	4b28      	ldr	r3, [pc, #160]	@ (800140c <MX_ADC2_Init+0xe0>)
 800136c:	2201      	movs	r2, #1
 800136e:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8001370:	4b26      	ldr	r3, [pc, #152]	@ (800140c <MX_ADC2_Init+0xe0>)
 8001372:	2201      	movs	r2, #1
 8001374:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001376:	4b25      	ldr	r3, [pc, #148]	@ (800140c <MX_ADC2_Init+0xe0>)
 8001378:	2200      	movs	r2, #0
 800137a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800137c:	4b23      	ldr	r3, [pc, #140]	@ (800140c <MX_ADC2_Init+0xe0>)
 800137e:	2200      	movs	r2, #0
 8001380:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001382:	4b22      	ldr	r3, [pc, #136]	@ (800140c <MX_ADC2_Init+0xe0>)
 8001384:	2200      	movs	r2, #0
 8001386:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001388:	4b20      	ldr	r3, [pc, #128]	@ (800140c <MX_ADC2_Init+0xe0>)
 800138a:	2200      	movs	r2, #0
 800138c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800138e:	4b1f      	ldr	r3, [pc, #124]	@ (800140c <MX_ADC2_Init+0xe0>)
 8001390:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001394:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001396:	4b1d      	ldr	r3, [pc, #116]	@ (800140c <MX_ADC2_Init+0xe0>)
 8001398:	2200      	movs	r2, #0
 800139a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800139c:	4b1b      	ldr	r3, [pc, #108]	@ (800140c <MX_ADC2_Init+0xe0>)
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Oversampling.Ratio = 1;
 80013a4:	4b19      	ldr	r3, [pc, #100]	@ (800140c <MX_ADC2_Init+0xe0>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80013aa:	4818      	ldr	r0, [pc, #96]	@ (800140c <MX_ADC2_Init+0xe0>)
 80013ac:	f009 f94a 	bl	800a644 <HAL_ADC_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80013b6:	f000 fa13 	bl	80017e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80013ba:	4b16      	ldr	r3, [pc, #88]	@ (8001414 <MX_ADC2_Init+0xe8>)
 80013bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013be:	2306      	movs	r3, #6
 80013c0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013c6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80013ca:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013cc:	2304      	movs	r3, #4
 80013ce:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80013d4:	2300      	movs	r3, #0
 80013d6:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	4619      	mov	r1, r3
 80013dc:	480b      	ldr	r0, [pc, #44]	@ (800140c <MX_ADC2_Init+0xe0>)
 80013de:	f009 fad3 	bl	800a988 <HAL_ADC_ConfigChannel>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_ADC2_Init+0xc0>
  {
    Error_Handler();
 80013e8:	f000 f9fa 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  LL_ADC_Enable(ADC2);
 80013ec:	4808      	ldr	r0, [pc, #32]	@ (8001410 <MX_ADC2_Init+0xe4>)
 80013ee:	f7ff fa2d 	bl	800084c <LL_ADC_Enable>
  while (!LL_ADC_IsActiveFlag_ADRDY(ADC2));
 80013f2:	bf00      	nop
 80013f4:	4806      	ldr	r0, [pc, #24]	@ (8001410 <MX_ADC2_Init+0xe4>)
 80013f6:	f7ff fa3d 	bl	8000874 <LL_ADC_IsActiveFlag_ADRDY>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0f9      	beq.n	80013f4 <MX_ADC2_Init+0xc8>
  /* USER CODE END ADC2_Init 2 */

}
 8001400:	bf00      	nop
 8001402:	bf00      	nop
 8001404:	3720      	adds	r7, #32
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	24000154 	.word	0x24000154
 8001410:	40022100 	.word	0x40022100
 8001414:	10c00010 	.word	0x10c00010

08001418 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800141c:	4b2e      	ldr	r3, [pc, #184]	@ (80014d8 <MX_FDCAN2_Init+0xc0>)
 800141e:	4a2f      	ldr	r2, [pc, #188]	@ (80014dc <MX_FDCAN2_Init+0xc4>)
 8001420:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001422:	4b2d      	ldr	r3, [pc, #180]	@ (80014d8 <MX_FDCAN2_Init+0xc0>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001428:	4b2b      	ldr	r3, [pc, #172]	@ (80014d8 <MX_FDCAN2_Init+0xc0>)
 800142a:	2200      	movs	r2, #0
 800142c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800142e:	4b2a      	ldr	r3, [pc, #168]	@ (80014d8 <MX_FDCAN2_Init+0xc0>)
 8001430:	2200      	movs	r2, #0
 8001432:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001434:	4b28      	ldr	r3, [pc, #160]	@ (80014d8 <MX_FDCAN2_Init+0xc0>)
 8001436:	2200      	movs	r2, #0
 8001438:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800143a:	4b27      	ldr	r3, [pc, #156]	@ (80014d8 <MX_FDCAN2_Init+0xc0>)
 800143c:	2200      	movs	r2, #0
 800143e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 10;
 8001440:	4b25      	ldr	r3, [pc, #148]	@ (80014d8 <MX_FDCAN2_Init+0xc0>)
 8001442:	220a      	movs	r2, #10
 8001444:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001446:	4b24      	ldr	r3, [pc, #144]	@ (80014d8 <MX_FDCAN2_Init+0xc0>)
 8001448:	2201      	movs	r2, #1
 800144a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 8;
 800144c:	4b22      	ldr	r3, [pc, #136]	@ (80014d8 <MX_FDCAN2_Init+0xc0>)
 800144e:	2208      	movs	r2, #8
 8001450:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 1;
 8001452:	4b21      	ldr	r3, [pc, #132]	@ (80014d8 <MX_FDCAN2_Init+0xc0>)
 8001454:	2201      	movs	r2, #1
 8001456:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001458:	4b1f      	ldr	r3, [pc, #124]	@ (80014d8 <MX_FDCAN2_Init+0xc0>)
 800145a:	2201      	movs	r2, #1
 800145c:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800145e:	4b1e      	ldr	r3, [pc, #120]	@ (80014d8 <MX_FDCAN2_Init+0xc0>)
 8001460:	2201      	movs	r2, #1
 8001462:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001464:	4b1c      	ldr	r3, [pc, #112]	@ (80014d8 <MX_FDCAN2_Init+0xc0>)
 8001466:	2201      	movs	r2, #1
 8001468:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800146a:	4b1b      	ldr	r3, [pc, #108]	@ (80014d8 <MX_FDCAN2_Init+0xc0>)
 800146c:	2201      	movs	r2, #1
 800146e:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8001470:	4b19      	ldr	r3, [pc, #100]	@ (80014d8 <MX_FDCAN2_Init+0xc0>)
 8001472:	2200      	movs	r2, #0
 8001474:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8001476:	4b18      	ldr	r3, [pc, #96]	@ (80014d8 <MX_FDCAN2_Init+0xc0>)
 8001478:	2200      	movs	r2, #0
 800147a:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 1;
 800147c:	4b16      	ldr	r3, [pc, #88]	@ (80014d8 <MX_FDCAN2_Init+0xc0>)
 800147e:	2201      	movs	r2, #1
 8001480:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 8;
 8001482:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <MX_FDCAN2_Init+0xc0>)
 8001484:	2208      	movs	r2, #8
 8001486:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001488:	4b13      	ldr	r3, [pc, #76]	@ (80014d8 <MX_FDCAN2_Init+0xc0>)
 800148a:	2204      	movs	r2, #4
 800148c:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800148e:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <MX_FDCAN2_Init+0xc0>)
 8001490:	2200      	movs	r2, #0
 8001492:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001494:	4b10      	ldr	r3, [pc, #64]	@ (80014d8 <MX_FDCAN2_Init+0xc0>)
 8001496:	2204      	movs	r2, #4
 8001498:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 800149a:	4b0f      	ldr	r3, [pc, #60]	@ (80014d8 <MX_FDCAN2_Init+0xc0>)
 800149c:	2200      	movs	r2, #0
 800149e:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80014a0:	4b0d      	ldr	r3, [pc, #52]	@ (80014d8 <MX_FDCAN2_Init+0xc0>)
 80014a2:	2204      	movs	r2, #4
 80014a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 80014a6:	4b0c      	ldr	r3, [pc, #48]	@ (80014d8 <MX_FDCAN2_Init+0xc0>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 80014ac:	4b0a      	ldr	r3, [pc, #40]	@ (80014d8 <MX_FDCAN2_Init+0xc0>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 8;
 80014b2:	4b09      	ldr	r3, [pc, #36]	@ (80014d8 <MX_FDCAN2_Init+0xc0>)
 80014b4:	2208      	movs	r2, #8
 80014b6:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80014b8:	4b07      	ldr	r3, [pc, #28]	@ (80014d8 <MX_FDCAN2_Init+0xc0>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80014be:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <MX_FDCAN2_Init+0xc0>)
 80014c0:	2204      	movs	r2, #4
 80014c2:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80014c4:	4804      	ldr	r0, [pc, #16]	@ (80014d8 <MX_FDCAN2_Init+0xc0>)
 80014c6:	f009 ff6b 	bl	800b3a0 <HAL_FDCAN_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 80014d0:	f000 f986 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	240001b8 	.word	0x240001b8
 80014dc:	4000a400 	.word	0x4000a400

080014e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b0be      	sub	sp, #248	@ 0xf8
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80014e6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	611a      	str	r2, [r3, #16]
 80014f6:	615a      	str	r2, [r3, #20]
 80014f8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fa:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
 8001508:	611a      	str	r2, [r3, #16]
 800150a:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800150c:	463b      	mov	r3, r7
 800150e:	22c0      	movs	r2, #192	@ 0xc0
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f010 fe66 	bl	80121e4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001518:	f04f 0208 	mov.w	r2, #8
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001524:	2300      	movs	r3, #0
 8001526:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800152a:	463b      	mov	r3, r7
 800152c:	4618      	mov	r0, r3
 800152e:	f00c fadf 	bl	800daf0 <HAL_RCCEx_PeriphCLKConfig>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001538:	f000 f952 	bl	80017e0 <Error_Handler>
  }

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOB);
 800153c:	2002      	movs	r0, #2
 800153e:	f7ff fafd 	bl	8000b3c <LL_AHB4_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001542:	23c0      	movs	r3, #192	@ 0xc0
 8001544:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001548:	2302      	movs	r3, #2
 800154a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800154e:	2300      	movs	r3, #0
 8001550:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001554:	2301      	movs	r3, #1
 8001556:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800155a:	2300      	movs	r3, #0
 800155c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001560:	2304      	movs	r3, #4
 8001562:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001566:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800156a:	4619      	mov	r1, r3
 800156c:	481b      	ldr	r0, [pc, #108]	@ (80015dc <MX_I2C1_Init+0xfc>)
 800156e:	f00f f98b 	bl	8010888 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001572:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001576:	f7ff fafd 	bl	8000b74 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 800157a:	4819      	ldr	r0, [pc, #100]	@ (80015e0 <MX_I2C1_Init+0x100>)
 800157c:	f7ff f9d6 	bl	800092c <LL_I2C_EnableAutoEndMode>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001580:	2200      	movs	r2, #0
 8001582:	2100      	movs	r1, #0
 8001584:	4816      	ldr	r0, [pc, #88]	@ (80015e0 <MX_I2C1_Init+0x100>)
 8001586:	f7ff f9a9 	bl	80008dc <LL_I2C_SetOwnAddress2>
  LL_I2C_DisableOwnAddress2(I2C1);
 800158a:	4815      	ldr	r0, [pc, #84]	@ (80015e0 <MX_I2C1_Init+0x100>)
 800158c:	f7ff f9be 	bl	800090c <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001590:	4813      	ldr	r0, [pc, #76]	@ (80015e0 <MX_I2C1_Init+0x100>)
 8001592:	f7ff f992 	bl	80008ba <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001596:	4812      	ldr	r0, [pc, #72]	@ (80015e0 <MX_I2C1_Init+0x100>)
 8001598:	f7ff f97f 	bl	800089a <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800159c:	2300      	movs	r3, #0
 800159e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  I2C_InitStruct.Timing = 0x00909FCE;
 80015a2:	4b10      	ldr	r3, [pc, #64]	@ (80015e4 <MX_I2C1_Init+0x104>)
 80015a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  I2C_InitStruct.DigitalFilter = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  I2C_InitStruct.OwnAddress1 = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80015c6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80015ca:	4619      	mov	r1, r3
 80015cc:	4804      	ldr	r0, [pc, #16]	@ (80015e0 <MX_I2C1_Init+0x100>)
 80015ce:	f00f fa6d 	bl	8010aac <LL_I2C_Init>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	37f8      	adds	r7, #248	@ 0xf8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	58020400 	.word	0x58020400
 80015e0:	40005400 	.word	0x40005400
 80015e4:	00909fce 	.word	0x00909fce

080015e8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b0be      	sub	sp, #248	@ 0xf8
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef UART_InitStruct = {0};
 80015ee:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80015f2:	2220      	movs	r2, #32
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f010 fdf4 	bl	80121e4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
 800160c:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800160e:	463b      	mov	r3, r7
 8001610:	22c0      	movs	r2, #192	@ 0xc0
 8001612:	2100      	movs	r1, #0
 8001614:	4618      	mov	r0, r3
 8001616:	f010 fde5 	bl	80121e4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800161a:	f04f 0202 	mov.w	r2, #2
 800161e:	f04f 0300 	mov.w	r3, #0
 8001622:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001626:	2300      	movs	r3, #0
 8001628:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800162a:	463b      	mov	r3, r7
 800162c:	4618      	mov	r0, r3
 800162e:	f00c fa5f 	bl	800daf0 <HAL_RCCEx_PeriphCLKConfig>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_UART4_Init+0x54>
  {
    Error_Handler();
 8001638:	f000 f8d2 	bl	80017e0 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 800163c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001640:	f7ff fa98 	bl	8000b74 <LL_APB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 8001644:	2001      	movs	r0, #1
 8001646:	f7ff fa79 	bl	8000b3c <LL_AHB4_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PA1   ------> UART4_RX
  PA0   ------> UART4_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_0;
 800164a:	2303      	movs	r3, #3
 800164c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001650:	2302      	movs	r3, #2
 8001652:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001656:	2300      	movs	r3, #0
 8001658:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001662:	2300      	movs	r3, #0
 8001664:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8001668:	2308      	movs	r3, #8
 800166a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166e:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001672:	4619      	mov	r1, r3
 8001674:	482a      	ldr	r0, [pc, #168]	@ (8001720 <MX_UART4_Init+0x138>)
 8001676:	f00f f907 	bl	8010888 <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800167a:	f7fe ff61 	bl	8000540 <__NVIC_GetPriorityGrouping>
 800167e:	4603      	mov	r3, r0
 8001680:	2200      	movs	r2, #0
 8001682:	2100      	movs	r1, #0
 8001684:	4618      	mov	r0, r3
 8001686:	f7fe ffb1 	bl	80005ec <NVIC_EncodePriority>
 800168a:	4603      	mov	r3, r0
 800168c:	4619      	mov	r1, r3
 800168e:	2034      	movs	r0, #52	@ 0x34
 8001690:	f7fe ff82 	bl	8000598 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 8001694:	2034      	movs	r0, #52	@ 0x34
 8001696:	f7fe ff61 	bl	800055c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  UART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 800169a:	2300      	movs	r3, #0
 800169c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  UART_InitStruct.BaudRate = 115200;
 80016a0:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80016a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  UART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80016a8:	2300      	movs	r3, #0
 80016aa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  UART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80016ae:	2300      	movs	r3, #0
 80016b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  UART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  UART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80016ba:	230c      	movs	r3, #12
 80016bc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  UART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80016c0:	2300      	movs	r3, #0
 80016c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  UART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80016c6:	2300      	movs	r3, #0
 80016c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  LL_USART_Init(UART4, &UART_InitStruct);
 80016cc:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80016d0:	4619      	mov	r1, r3
 80016d2:	4814      	ldr	r0, [pc, #80]	@ (8001724 <MX_UART4_Init+0x13c>)
 80016d4:	f010 f966 	bl	80119a4 <LL_USART_Init>
  LL_USART_DisableFIFO(UART4);
 80016d8:	4812      	ldr	r0, [pc, #72]	@ (8001724 <MX_UART4_Init+0x13c>)
 80016da:	f7ff f947 	bl	800096c <LL_USART_DisableFIFO>
  LL_USART_SetTXFIFOThreshold(UART4, LL_USART_FIFOTHRESHOLD_1_8);
 80016de:	2100      	movs	r1, #0
 80016e0:	4810      	ldr	r0, [pc, #64]	@ (8001724 <MX_UART4_Init+0x13c>)
 80016e2:	f7ff f953 	bl	800098c <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(UART4, LL_USART_FIFOTHRESHOLD_1_8);
 80016e6:	2100      	movs	r1, #0
 80016e8:	480e      	ldr	r0, [pc, #56]	@ (8001724 <MX_UART4_Init+0x13c>)
 80016ea:	f7ff f976 	bl	80009da <LL_USART_SetRXFIFOThreshold>
  LL_USART_ConfigAsyncMode(UART4);
 80016ee:	480d      	ldr	r0, [pc, #52]	@ (8001724 <MX_UART4_Init+0x13c>)
 80016f0:	f7ff f99a 	bl	8000a28 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType UART4 */

  /* USER CODE END WKUPType UART4 */

  LL_USART_Enable(UART4);
 80016f4:	480b      	ldr	r0, [pc, #44]	@ (8001724 <MX_UART4_Init+0x13c>)
 80016f6:	f7ff f929 	bl	800094c <LL_USART_Enable>

  /* Polling UART4 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(UART4))) || (!(LL_USART_IsActiveFlag_REACK(UART4))))
 80016fa:	bf00      	nop
 80016fc:	4809      	ldr	r0, [pc, #36]	@ (8001724 <MX_UART4_Init+0x13c>)
 80016fe:	f7ff f9a9 	bl	8000a54 <LL_USART_IsActiveFlag_TEACK>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0f9      	beq.n	80016fc <MX_UART4_Init+0x114>
 8001708:	4806      	ldr	r0, [pc, #24]	@ (8001724 <MX_UART4_Init+0x13c>)
 800170a:	f7ff f9b7 	bl	8000a7c <LL_USART_IsActiveFlag_REACK>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0f3      	beq.n	80016fc <MX_UART4_Init+0x114>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001714:	bf00      	nop
 8001716:	bf00      	nop
 8001718:	37f8      	adds	r7, #248	@ 0xf8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	58020000 	.word	0x58020000
 8001724:	40004c00 	.word	0x40004c00

08001728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172e:	463b      	mov	r3, r7
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]
 800173c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOB);
 800173e:	2002      	movs	r0, #2
 8001740:	f7ff f9fc 	bl	8000b3c <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 8001744:	2001      	movs	r0, #1
 8001746:	f7ff f9f9 	bl	8000b3c <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOD);
 800174a:	2008      	movs	r0, #8
 800174c:	f7ff f9f6 	bl	8000b3c <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 8001750:	2004      	movs	r0, #4
 8001752:	f7ff f9f3 	bl	8000b3c <LL_AHB4_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 8001756:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800175a:	481e      	ldr	r0, [pc, #120]	@ (80017d4 <MX_GPIO_Init+0xac>)
 800175c:	f7ff f9b4 	bl	8000ac8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LED_B_Pin|LED_G_Pin);
 8001760:	2118      	movs	r1, #24
 8001762:	481d      	ldr	r0, [pc, #116]	@ (80017d8 <MX_GPIO_Init+0xb0>)
 8001764:	f7ff f9be 	bl	8000ae4 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = WD_DONE_Pin;
 8001768:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800176c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800176e:	2301      	movs	r3, #1
 8001770:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(WD_DONE_GPIO_Port, &GPIO_InitStruct);
 800177e:	463b      	mov	r3, r7
 8001780:	4619      	mov	r1, r3
 8001782:	4814      	ldr	r0, [pc, #80]	@ (80017d4 <MX_GPIO_Init+0xac>)
 8001784:	f00f f880 	bl	8010888 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15|LL_GPIO_PIN_14;
 8001788:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800178c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800178e:	2302      	movs	r3, #2
 8001790:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001792:	2300      	movs	r3, #0
 8001794:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 800179e:	230c      	movs	r3, #12
 80017a0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a2:	463b      	mov	r3, r7
 80017a4:	4619      	mov	r1, r3
 80017a6:	480d      	ldr	r0, [pc, #52]	@ (80017dc <MX_GPIO_Init+0xb4>)
 80017a8:	f00f f86e 	bl	8010888 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_B_Pin|LED_G_Pin;
 80017ac:	2318      	movs	r3, #24
 80017ae:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80017b0:	2301      	movs	r3, #1
 80017b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80017bc:	2300      	movs	r3, #0
 80017be:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c0:	463b      	mov	r3, r7
 80017c2:	4619      	mov	r1, r3
 80017c4:	4804      	ldr	r0, [pc, #16]	@ (80017d8 <MX_GPIO_Init+0xb0>)
 80017c6:	f00f f85f 	bl	8010888 <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80017ca:	bf00      	nop
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	58020c00 	.word	0x58020c00
 80017d8:	58020000 	.word	0x58020000
 80017dc:	58020400 	.word	0x58020400

080017e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80017e4:	b672      	cpsid	i
}
 80017e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <Error_Handler+0x8>

080017ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f2:	4b0a      	ldr	r3, [pc, #40]	@ (800181c <HAL_MspInit+0x30>)
 80017f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017f8:	4a08      	ldr	r2, [pc, #32]	@ (800181c <HAL_MspInit+0x30>)
 80017fa:	f043 0302 	orr.w	r3, r3, #2
 80017fe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001802:	4b06      	ldr	r3, [pc, #24]	@ (800181c <HAL_MspInit+0x30>)
 8001804:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	607b      	str	r3, [r7, #4]
 800180e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	58024400 	.word	0x58024400

08001820 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	@ 0x28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a1c      	ldr	r2, [pc, #112]	@ (80018b0 <HAL_ADC_MspInit+0x90>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d132      	bne.n	80018a8 <HAL_ADC_MspInit+0x88>
  {
    /* USER CODE BEGIN ADC2_MspInit 0 */

    /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001842:	4b1c      	ldr	r3, [pc, #112]	@ (80018b4 <HAL_ADC_MspInit+0x94>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	3301      	adds	r3, #1
 8001848:	4a1a      	ldr	r2, [pc, #104]	@ (80018b4 <HAL_ADC_MspInit+0x94>)
 800184a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800184c:	4b19      	ldr	r3, [pc, #100]	@ (80018b4 <HAL_ADC_MspInit+0x94>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d10e      	bne.n	8001872 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001854:	4b18      	ldr	r3, [pc, #96]	@ (80018b8 <HAL_ADC_MspInit+0x98>)
 8001856:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800185a:	4a17      	ldr	r2, [pc, #92]	@ (80018b8 <HAL_ADC_MspInit+0x98>)
 800185c:	f043 0320 	orr.w	r3, r3, #32
 8001860:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001864:	4b14      	ldr	r3, [pc, #80]	@ (80018b8 <HAL_ADC_MspInit+0x98>)
 8001866:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800186a:	f003 0320 	and.w	r3, r3, #32
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001872:	4b11      	ldr	r3, [pc, #68]	@ (80018b8 <HAL_ADC_MspInit+0x98>)
 8001874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001878:	4a0f      	ldr	r2, [pc, #60]	@ (80018b8 <HAL_ADC_MspInit+0x98>)
 800187a:	f043 0304 	orr.w	r3, r3, #4
 800187e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001882:	4b0d      	ldr	r3, [pc, #52]	@ (80018b8 <HAL_ADC_MspInit+0x98>)
 8001884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PC4     ------> ADC2_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001890:	2310      	movs	r3, #16
 8001892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001894:	2303      	movs	r3, #3
 8001896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	4619      	mov	r1, r3
 80018a2:	4806      	ldr	r0, [pc, #24]	@ (80018bc <HAL_ADC_MspInit+0x9c>)
 80018a4:	f00a ff4a 	bl	800c73c <HAL_GPIO_Init>

    /* USER CODE END ADC2_MspInit 1 */

  }

}
 80018a8:	bf00      	nop
 80018aa:	3728      	adds	r7, #40	@ 0x28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40022100 	.word	0x40022100
 80018b4:	2400025c 	.word	0x2400025c
 80018b8:	58024400 	.word	0x58024400
 80018bc:	58020800 	.word	0x58020800

080018c0 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b0ba      	sub	sp, #232	@ 0xe8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018d8:	f107 0310 	add.w	r3, r7, #16
 80018dc:	22c0      	movs	r2, #192	@ 0xc0
 80018de:	2100      	movs	r1, #0
 80018e0:	4618      	mov	r0, r3
 80018e2:	f010 fc7f 	bl	80121e4 <memset>
  if(hfdcan->Instance==FDCAN2)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a2b      	ldr	r2, [pc, #172]	@ (8001998 <HAL_FDCAN_MspInit+0xd8>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d14f      	bne.n	8001990 <HAL_FDCAN_MspInit+0xd0>

    /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80018f0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80018fc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001900:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001904:	f107 0310 	add.w	r3, r7, #16
 8001908:	4618      	mov	r0, r3
 800190a:	f00c f8f1 	bl	800daf0 <HAL_RCCEx_PeriphCLKConfig>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001914:	f7ff ff64 	bl	80017e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001918:	4b20      	ldr	r3, [pc, #128]	@ (800199c <HAL_FDCAN_MspInit+0xdc>)
 800191a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800191e:	4a1f      	ldr	r2, [pc, #124]	@ (800199c <HAL_FDCAN_MspInit+0xdc>)
 8001920:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001924:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001928:	4b1c      	ldr	r3, [pc, #112]	@ (800199c <HAL_FDCAN_MspInit+0xdc>)
 800192a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800192e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001936:	4b19      	ldr	r3, [pc, #100]	@ (800199c <HAL_FDCAN_MspInit+0xdc>)
 8001938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800193c:	4a17      	ldr	r2, [pc, #92]	@ (800199c <HAL_FDCAN_MspInit+0xdc>)
 800193e:	f043 0302 	orr.w	r3, r3, #2
 8001942:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001946:	4b15      	ldr	r3, [pc, #84]	@ (800199c <HAL_FDCAN_MspInit+0xdc>)
 8001948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001954:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001958:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195c:	2302      	movs	r3, #2
 800195e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2300      	movs	r3, #0
 800196a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800196e:	2309      	movs	r3, #9
 8001970:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001974:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001978:	4619      	mov	r1, r3
 800197a:	4809      	ldr	r0, [pc, #36]	@ (80019a0 <HAL_FDCAN_MspInit+0xe0>)
 800197c:	f00a fede 	bl	800c73c <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 5, 0);
 8001980:	2200      	movs	r2, #0
 8001982:	2105      	movs	r1, #5
 8001984:	2014      	movs	r0, #20
 8001986:	f009 fcd6 	bl	800b336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 800198a:	2014      	movs	r0, #20
 800198c:	f009 fced 	bl	800b36a <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 8001990:	bf00      	nop
 8001992:	37e8      	adds	r7, #232	@ 0xe8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	4000a400 	.word	0x4000a400
 800199c:	58024400 	.word	0x58024400
 80019a0:	58020400 	.word	0x58020400

080019a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019a8:	bf00      	nop
 80019aa:	e7fd      	b.n	80019a8 <NMI_Handler+0x4>

080019ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b0:	bf00      	nop
 80019b2:	e7fd      	b.n	80019b0 <HardFault_Handler+0x4>

080019b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <MemManage_Handler+0x4>

080019bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <BusFault_Handler+0x4>

080019c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c8:	bf00      	nop
 80019ca:	e7fd      	b.n	80019c8 <UsageFault_Handler+0x4>

080019cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019de:	f008 fc47 	bl	800a270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
//	#if (INCLUDE_xTaskGetSchedulerState == 1 )
//	  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
//	  {
//	#endif /* INCLUDE_xTaskGetSchedulerState */
	  xPortSysTickHandler();
 80019e2:	f005 fc41 	bl	8007268 <xPortSysTickHandler>
//	#if (INCLUDE_xTaskGetSchedulerState == 1 )
//	  }
//	#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE END SysTick_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80019f0:	4802      	ldr	r0, [pc, #8]	@ (80019fc <FDCAN2_IT0_IRQHandler+0x10>)
 80019f2:	f00a f995 	bl	800bd20 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	240001b8 	.word	0x240001b8

08001a00 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	UART_Driver_ISR(UART4);
 8001a04:	4802      	ldr	r0, [pc, #8]	@ (8001a10 <UART4_IRQHandler+0x10>)
 8001a06:	f000 fb78 	bl	80020fa <UART_Driver_ISR>
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40004c00 	.word	0x40004c00

08001a14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return 1;
 8001a18:	2301      	movs	r3, #1
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <_kill>:

int _kill(int pid, int sig)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a2e:	f010 fc69 	bl	8012304 <__errno>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2216      	movs	r2, #22
 8001a36:	601a      	str	r2, [r3, #0]
  return -1;
 8001a38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <_exit>:

void _exit (int status)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff ffe7 	bl	8001a24 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a56:	bf00      	nop
 8001a58:	e7fd      	b.n	8001a56 <_exit+0x12>

08001a5a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b086      	sub	sp, #24
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	60f8      	str	r0, [r7, #12]
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	e00a      	b.n	8001a82 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a6c:	f3af 8000 	nop.w
 8001a70:	4601      	mov	r1, r0
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	60ba      	str	r2, [r7, #8]
 8001a78:	b2ca      	uxtb	r2, r1
 8001a7a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	dbf0      	blt.n	8001a6c <_read+0x12>
  }

  return len;
 8001a8a:	687b      	ldr	r3, [r7, #4]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	e009      	b.n	8001aba <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	1c5a      	adds	r2, r3, #1
 8001aaa:	60ba      	str	r2, [r7, #8]
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	dbf1      	blt.n	8001aa6 <_write+0x12>
  }
  return len;
 8001ac2:	687b      	ldr	r3, [r7, #4]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <_close>:

int _close(int file)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ad4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001af4:	605a      	str	r2, [r3, #4]
  return 0;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <_isatty>:

int _isatty(int file)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b0c:	2301      	movs	r3, #1
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b085      	sub	sp, #20
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	60f8      	str	r0, [r7, #12]
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b3c:	4a14      	ldr	r2, [pc, #80]	@ (8001b90 <_sbrk+0x5c>)
 8001b3e:	4b15      	ldr	r3, [pc, #84]	@ (8001b94 <_sbrk+0x60>)
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b48:	4b13      	ldr	r3, [pc, #76]	@ (8001b98 <_sbrk+0x64>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d102      	bne.n	8001b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b50:	4b11      	ldr	r3, [pc, #68]	@ (8001b98 <_sbrk+0x64>)
 8001b52:	4a12      	ldr	r2, [pc, #72]	@ (8001b9c <_sbrk+0x68>)
 8001b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b56:	4b10      	ldr	r3, [pc, #64]	@ (8001b98 <_sbrk+0x64>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d207      	bcs.n	8001b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b64:	f010 fbce 	bl	8012304 <__errno>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b72:	e009      	b.n	8001b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b74:	4b08      	ldr	r3, [pc, #32]	@ (8001b98 <_sbrk+0x64>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b7a:	4b07      	ldr	r3, [pc, #28]	@ (8001b98 <_sbrk+0x64>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	4a05      	ldr	r2, [pc, #20]	@ (8001b98 <_sbrk+0x64>)
 8001b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b86:	68fb      	ldr	r3, [r7, #12]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	24080000 	.word	0x24080000
 8001b94:	00000400 	.word	0x00000400
 8001b98:	24000260 	.word	0x24000260
 8001b9c:	24042e90 	.word	0x24042e90

08001ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ba0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001bdc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001ba4:	f7fe fcb2 	bl	800050c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ba8:	f7fe fc02 	bl	80003b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bac:	480c      	ldr	r0, [pc, #48]	@ (8001be0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bae:	490d      	ldr	r1, [pc, #52]	@ (8001be4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001be8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb4:	e002      	b.n	8001bbc <LoopCopyDataInit>

08001bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bba:	3304      	adds	r3, #4

08001bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc0:	d3f9      	bcc.n	8001bb6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bc4:	4c0a      	ldr	r4, [pc, #40]	@ (8001bf0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc8:	e001      	b.n	8001bce <LoopFillZerobss>

08001bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bcc:	3204      	adds	r2, #4

08001bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd0:	d3fb      	bcc.n	8001bca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bd2:	f010 fb9d 	bl	8012310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bd6:	f7ff f9ab 	bl	8000f30 <main>
  bx  lr
 8001bda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bdc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001be0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001be4:	24000138 	.word	0x24000138
  ldr r2, =_sidata
 8001be8:	08014804 	.word	0x08014804
  ldr r2, =_sbss
 8001bec:	24000138 	.word	0x24000138
  ldr r4, =_ebss
 8001bf0:	24042e90 	.word	0x24042e90

08001bf4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bf4:	e7fe      	b.n	8001bf4 <ADC3_IRQHandler>
	...

08001bf8 <LL_ADC_REG_StartConversion>:
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	4b05      	ldr	r3, [pc, #20]	@ (8001c1c <LL_ADC_REG_StartConversion+0x24>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	f043 0204 	orr.w	r2, r3, #4
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	7fffffc0 	.word	0x7fffffc0

08001c20 <LL_ADC_REG_ReadConversionData16>:
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2c:	b29b      	uxth	r3, r3
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(const ADC_TypeDef *ADCx)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	d101      	bne.n	8001c52 <LL_ADC_IsActiveFlag_EOC+0x18>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e000      	b.n	8001c54 <LL_ADC_IsActiveFlag_EOC+0x1a>
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2204      	movs	r2, #4
 8001c6c:	601a      	str	r2, [r3, #0]
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
	...

08001c7c <ADC2_Read>:

uint16_t live_buf[3];
uint16_t live_buf_2;

uint16_t ADC2_Read()
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0

    LL_ADC_ClearFlag_EOC(ADC2);
 8001c80:	480d      	ldr	r0, [pc, #52]	@ (8001cb8 <ADC2_Read+0x3c>)
 8001c82:	f7ff ffed 	bl	8001c60 <LL_ADC_ClearFlag_EOC>
    LL_ADC_REG_StartConversion(ADC2);
 8001c86:	480c      	ldr	r0, [pc, #48]	@ (8001cb8 <ADC2_Read+0x3c>)
 8001c88:	f7ff ffb6 	bl	8001bf8 <LL_ADC_REG_StartConversion>

    while (!LL_ADC_IsActiveFlag_EOC(ADC2));
 8001c8c:	bf00      	nop
 8001c8e:	480a      	ldr	r0, [pc, #40]	@ (8001cb8 <ADC2_Read+0x3c>)
 8001c90:	f7ff ffd3 	bl	8001c3a <LL_ADC_IsActiveFlag_EOC>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0f9      	beq.n	8001c8e <ADC2_Read+0x12>
    LL_ADC_ClearFlag_EOC(ADC2);
 8001c9a:	4807      	ldr	r0, [pc, #28]	@ (8001cb8 <ADC2_Read+0x3c>)
 8001c9c:	f7ff ffe0 	bl	8001c60 <LL_ADC_ClearFlag_EOC>

    live_buf_2 = LL_ADC_REG_ReadConversionData16(ADC2);
 8001ca0:	4805      	ldr	r0, [pc, #20]	@ (8001cb8 <ADC2_Read+0x3c>)
 8001ca2:	f7ff ffbd 	bl	8001c20 <LL_ADC_REG_ReadConversionData16>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b04      	ldr	r3, [pc, #16]	@ (8001cbc <ADC2_Read+0x40>)
 8001cac:	801a      	strh	r2, [r3, #0]

    return live_buf_2;
 8001cae:	4b03      	ldr	r3, [pc, #12]	@ (8001cbc <ADC2_Read+0x40>)
 8001cb0:	881b      	ldrh	r3, [r3, #0]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40022100 	.word	0x40022100
 8001cbc:	2400026a 	.word	0x2400026a

08001cc0 <ADC1_ReadIndex>:

uint16_t ADC1_ReadIndex(uint8_t index)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]

    LL_ADC_ClearFlag_EOC(ADC1);
 8001cca:	481d      	ldr	r0, [pc, #116]	@ (8001d40 <ADC1_ReadIndex+0x80>)
 8001ccc:	f7ff ffc8 	bl	8001c60 <LL_ADC_ClearFlag_EOC>
//    LL_ADC_ClearFlag_EOS(ADC1);
    LL_ADC_REG_StartConversion(ADC1);
 8001cd0:	481b      	ldr	r0, [pc, #108]	@ (8001d40 <ADC1_ReadIndex+0x80>)
 8001cd2:	f7ff ff91 	bl	8001bf8 <LL_ADC_REG_StartConversion>

    for (int i = 0; i < 3; i++) {
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	e015      	b.n	8001d08 <ADC1_ReadIndex+0x48>
        while (!LL_ADC_IsActiveFlag_EOC(ADC1));
 8001cdc:	bf00      	nop
 8001cde:	4818      	ldr	r0, [pc, #96]	@ (8001d40 <ADC1_ReadIndex+0x80>)
 8001ce0:	f7ff ffab 	bl	8001c3a <LL_ADC_IsActiveFlag_EOC>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0f9      	beq.n	8001cde <ADC1_ReadIndex+0x1e>
        LL_ADC_ClearFlag_EOC(ADC1);
 8001cea:	4815      	ldr	r0, [pc, #84]	@ (8001d40 <ADC1_ReadIndex+0x80>)
 8001cec:	f7ff ffb8 	bl	8001c60 <LL_ADC_ClearFlag_EOC>
        live_buf[i] = LL_ADC_REG_ReadConversionData16(ADC1);
 8001cf0:	4813      	ldr	r0, [pc, #76]	@ (8001d40 <ADC1_ReadIndex+0x80>)
 8001cf2:	f7ff ff95 	bl	8001c20 <LL_ADC_REG_ReadConversionData16>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4a12      	ldr	r2, [pc, #72]	@ (8001d44 <ADC1_ReadIndex+0x84>)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < 3; i++) {
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	3301      	adds	r3, #1
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	dde6      	ble.n	8001cdc <ADC1_ReadIndex+0x1c>
    }
//    while (!LL_ADC_IsActiveFlag_EOS(ADC1));
//    LL_ADC_ClearFlag_EOS(ADC1);

    switch (index) {
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	2b03      	cmp	r3, #3
 8001d12:	d00c      	beq.n	8001d2e <ADC1_ReadIndex+0x6e>
 8001d14:	2b03      	cmp	r3, #3
 8001d16:	dc0d      	bgt.n	8001d34 <ADC1_ReadIndex+0x74>
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d002      	beq.n	8001d22 <ADC1_ReadIndex+0x62>
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d003      	beq.n	8001d28 <ADC1_ReadIndex+0x68>
 8001d20:	e008      	b.n	8001d34 <ADC1_ReadIndex+0x74>
        case 1: return live_buf[0]; // INP0
 8001d22:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <ADC1_ReadIndex+0x84>)
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	e007      	b.n	8001d38 <ADC1_ReadIndex+0x78>
        case 2: return live_buf[1]; // INP1
 8001d28:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <ADC1_ReadIndex+0x84>)
 8001d2a:	885b      	ldrh	r3, [r3, #2]
 8001d2c:	e004      	b.n	8001d38 <ADC1_ReadIndex+0x78>
        case 3: return live_buf[2]; // INP3
 8001d2e:	4b05      	ldr	r3, [pc, #20]	@ (8001d44 <ADC1_ReadIndex+0x84>)
 8001d30:	889b      	ldrh	r3, [r3, #4]
 8001d32:	e001      	b.n	8001d38 <ADC1_ReadIndex+0x78>
        default: return 0xFFFF; // invalid
 8001d34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    }
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40022000 	.word	0x40022000
 8001d44:	24000264 	.word	0x24000264

08001d48 <LL_USART_IsActiveFlag_FE>:
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d101      	bne.n	8001d60 <LL_USART_IsActiveFlag_FE+0x18>
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e000      	b.n	8001d62 <LL_USART_IsActiveFlag_FE+0x1a>
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <LL_USART_IsActiveFlag_NE>:
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d101      	bne.n	8001d86 <LL_USART_IsActiveFlag_NE+0x18>
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <LL_USART_IsActiveFlag_NE+0x1a>
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <LL_USART_IsActiveFlag_ORE>:
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	d101      	bne.n	8001dac <LL_USART_IsActiveFlag_ORE+0x18>
 8001da8:	2301      	movs	r3, #1
 8001daa:	e000      	b.n	8001dae <LL_USART_IsActiveFlag_ORE+0x1a>
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	f003 0320 	and.w	r3, r3, #32
 8001dca:	2b20      	cmp	r3, #32
 8001dcc:	d101      	bne.n	8001dd2 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_USART_IsActiveFlag_TXE_TXFNF>:
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001df0:	2b80      	cmp	r3, #128	@ 0x80
 8001df2:	d101      	bne.n	8001df8 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 8001df4:	2301      	movs	r3, #1
 8001df6:	e000      	b.n	8001dfa <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <LL_USART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2202      	movs	r2, #2
 8001e12:	621a      	str	r2, [r3, #32]
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <LL_USART_ClearFlag_NE>:
  * @rmtoll ICR          NECF          LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2204      	movs	r2, #4
 8001e2c:	621a      	str	r2, [r3, #32]
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2208      	movs	r2, #8
 8001e46:	621a      	str	r2, [r3, #32]
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b089      	sub	sp, #36	@ 0x24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	e853 3f00 	ldrex	r3, [r3]
 8001e66:	60bb      	str	r3, [r7, #8]
   return(result);
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	f043 0320 	orr.w	r3, r3, #32
 8001e6e:	61fb      	str	r3, [r7, #28]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	69fa      	ldr	r2, [r7, #28]
 8001e74:	61ba      	str	r2, [r7, #24]
 8001e76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e78:	6979      	ldr	r1, [r7, #20]
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	e841 2300 	strex	r3, r2, [r1]
 8001e80:	613b      	str	r3, [r7, #16]
   return(result);
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1e9      	bne.n	8001e5c <LL_USART_EnableIT_RXNE_RXFNE+0x8>
}
 8001e88:	bf00      	nop
 8001e8a:	bf00      	nop
 8001e8c:	3724      	adds	r7, #36	@ 0x24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <LL_USART_EnableIT_TXE_TXFNF>:
  * @rmtoll CR1         TXEIE_TXFNFIE  LL_USART_EnableIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b089      	sub	sp, #36	@ 0x24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	e853 3f00 	ldrex	r3, [r3]
 8001ea8:	60bb      	str	r3, [r7, #8]
   return(result);
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001eb0:	61fb      	str	r3, [r7, #28]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69fa      	ldr	r2, [r7, #28]
 8001eb6:	61ba      	str	r2, [r7, #24]
 8001eb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eba:	6979      	ldr	r1, [r7, #20]
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	e841 2300 	strex	r3, r2, [r1]
 8001ec2:	613b      	str	r3, [r7, #16]
   return(result);
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1e9      	bne.n	8001e9e <LL_USART_EnableIT_TXE_TXFNF+0x8>
}
 8001eca:	bf00      	nop
 8001ecc:	bf00      	nop
 8001ece:	3724      	adds	r7, #36	@ 0x24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <LL_USART_DisableIT_TXE_TXFNF>:
  * @rmtoll CR1        TXEIE_TXFNFIE  LL_USART_DisableIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b089      	sub	sp, #36	@ 0x24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	e853 3f00 	ldrex	r3, [r3]
 8001eea:	60bb      	str	r3, [r7, #8]
   return(result);
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001ef2:	61fb      	str	r3, [r7, #28]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69fa      	ldr	r2, [r7, #28]
 8001ef8:	61ba      	str	r2, [r7, #24]
 8001efa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001efc:	6979      	ldr	r1, [r7, #20]
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	e841 2300 	strex	r3, r2, [r1]
 8001f04:	613b      	str	r3, [r7, #16]
   return(result);
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1e9      	bne.n	8001ee0 <LL_USART_DisableIT_TXE_TXFNF+0x8>
}
 8001f0c:	bf00      	nop
 8001f0e:	bf00      	nop
 8001f10:	3724      	adds	r7, #36	@ 0x24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <LL_USART_IsEnabledIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_IsEnabledIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE_RXFNE(const USART_TypeDef *USARTx)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0320 	and.w	r3, r3, #32
 8001f2a:	2b20      	cmp	r3, #32
 8001f2c:	d101      	bne.n	8001f32 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <LL_USART_IsEnabledIT_TXE_TXFNF>:
  * @rmtoll CR1         TXEIE_TXFNFIE  LL_USART_IsEnabledIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE_TXFNF(const USART_TypeDef *USARTx)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE) == (USART_CR1_TXEIE_TXFNFIE)) ? 1UL : 0UL);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f50:	2b80      	cmp	r3, #128	@ 0x80
 8001f52:	d101      	bne.n	8001f58 <LL_USART_IsEnabledIT_TXE_TXFNF+0x18>
 8001f54:	2301      	movs	r3, #1
 8001f56:	e000      	b.n	8001f5a <LL_USART_IsEnabledIT_TXE_TXFNF+0x1a>
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f72:	b2db      	uxtb	r3, r3
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8001f8c:	78fa      	ldrb	r2, [r7, #3]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <UART_Driver_Get>:
/*************************************************
 *                  HELPER                       *
 *************************************************/

static UART_Driver_t *UART_Driver_Get(USART_TypeDef *uart)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < UART_DRIVER_COUNT; i++)
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	e013      	b.n	8001fd6 <UART_Driver_Get+0x36>
    {
        if (uart_drivers[i].uart == uart)
 8001fae:	4a0f      	ldr	r2, [pc, #60]	@ (8001fec <UART_Driver_Get+0x4c>)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2164      	movs	r1, #100	@ 0x64
 8001fb4:	fb01 f303 	mul.w	r3, r1, r3
 8001fb8:	4413      	add	r3, r2
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d106      	bne.n	8001fd0 <UART_Driver_Get+0x30>
        {
            return &uart_drivers[i];
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2264      	movs	r2, #100	@ 0x64
 8001fc6:	fb02 f303 	mul.w	r3, r2, r3
 8001fca:	4a08      	ldr	r2, [pc, #32]	@ (8001fec <UART_Driver_Get+0x4c>)
 8001fcc:	4413      	add	r3, r2
 8001fce:	e006      	b.n	8001fde <UART_Driver_Get+0x3e>
    for (int i = 0; i < UART_DRIVER_COUNT; i++)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	dde8      	ble.n	8001fae <UART_Driver_Get+0xe>
        }
    }
    return NULL;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	24000008 	.word	0x24000008

08001ff0 <UART_Driver_Init>:
/*************************************************
 *                    Init                       *
 *************************************************/

Std_ReturnType UART_Driver_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af02      	add	r7, sp, #8
    RingBuffer_Create(&uart_drivers[0].rx_buffer, 1, "UART4_RX", uart4_rx_data, UART6_BUFFER_SIZE);
 8001ff6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8002028 <UART_Driver_Init+0x38>)
 8001ffe:	4a0b      	ldr	r2, [pc, #44]	@ (800202c <UART_Driver_Init+0x3c>)
 8002000:	2101      	movs	r1, #1
 8002002:	480b      	ldr	r0, [pc, #44]	@ (8002030 <UART_Driver_Init+0x40>)
 8002004:	f007 ffe2 	bl	8009fcc <RingBuffer_Create>
    RingBuffer_Create(&uart_drivers[0].tx_buffer, 2, "UART4_TX", uart4_tx_data, UART6_BUFFER_SIZE);
 8002008:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	4b09      	ldr	r3, [pc, #36]	@ (8002034 <UART_Driver_Init+0x44>)
 8002010:	4a09      	ldr	r2, [pc, #36]	@ (8002038 <UART_Driver_Init+0x48>)
 8002012:	2102      	movs	r1, #2
 8002014:	4809      	ldr	r0, [pc, #36]	@ (800203c <UART_Driver_Init+0x4c>)
 8002016:	f007 ffd9 	bl	8009fcc <RingBuffer_Create>

//    LL_USART_EnableIT_ERROR(UART4);
    LL_USART_EnableIT_RXNE(UART4);
 800201a:	4809      	ldr	r0, [pc, #36]	@ (8002040 <UART_Driver_Init+0x50>)
 800201c:	f7ff ff1a 	bl	8001e54 <LL_USART_EnableIT_RXNE_RXFNE>

    return E_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	2400026c 	.word	0x2400026c
 800202c:	08013264 	.word	0x08013264
 8002030:	2400000c 	.word	0x2400000c
 8002034:	2400066c 	.word	0x2400066c
 8002038:	08013270 	.word	0x08013270
 800203c:	2400003c 	.word	0x2400003c
 8002040:	40004c00 	.word	0x40004c00

08002044 <UART_Driver_Read>:
/*************************************************
 *                     API                       *
 *************************************************/

int UART_Driver_Read(USART_TypeDef *uart)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
    UART_Driver_t *driver = UART_Driver_Get(uart);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff ffa7 	bl	8001fa0 <UART_Driver_Get>
 8002052:	60f8      	str	r0, [r7, #12]
    if (driver == NULL)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d102      	bne.n	8002060 <UART_Driver_Read+0x1c>
        return -1;
 800205a:	f04f 33ff 	mov.w	r3, #4294967295
 800205e:	e00e      	b.n	800207e <UART_Driver_Read+0x3a>

    RingBufElement data;
    if (RingBuffer_Get(&driver->rx_buffer, &data))
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	3304      	adds	r3, #4
 8002064:	f107 020b 	add.w	r2, r7, #11
 8002068:	4611      	mov	r1, r2
 800206a:	4618      	mov	r0, r3
 800206c:	f008 f827 	bl	800a0be <RingBuffer_Get>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <UART_Driver_Read+0x36>
    {
        return data;
 8002076:	7afb      	ldrb	r3, [r7, #11]
 8002078:	e001      	b.n	800207e <UART_Driver_Read+0x3a>
    }
    return -1;
 800207a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <UART_Driver_Write>:

void UART_Driver_Write(USART_TypeDef *uart, uint8_t data)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b084      	sub	sp, #16
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
 800208e:	460b      	mov	r3, r1
 8002090:	70fb      	strb	r3, [r7, #3]
    UART_Driver_t *driver = UART_Driver_Get(uart);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7ff ff84 	bl	8001fa0 <UART_Driver_Get>
 8002098:	60f8      	str	r0, [r7, #12]
    if (driver == NULL)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d011      	beq.n	80020c4 <UART_Driver_Write+0x3e>
        return;

    while (!RingBuffer_Put(&driver->tx_buffer, data))
 80020a0:	bf00      	nop
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	3334      	adds	r3, #52	@ 0x34
 80020a6:	78fa      	ldrb	r2, [r7, #3]
 80020a8:	4611      	mov	r1, r2
 80020aa:	4618      	mov	r0, r3
 80020ac:	f007 ffc1 	bl	800a032 <RingBuffer_Put>
 80020b0:	4603      	mov	r3, r0
 80020b2:	f083 0301 	eor.w	r3, r3, #1
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1f2      	bne.n	80020a2 <UART_Driver_Write+0x1c>
    {
        // vTaskDelay(pdMS_TO_TICKS(1));
    }
    LL_USART_EnableIT_TXE(uart);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff feea 	bl	8001e96 <LL_USART_EnableIT_TXE_TXFNF>
 80020c2:	e000      	b.n	80020c6 <UART_Driver_Write+0x40>
        return;
 80020c4:	bf00      	nop
}
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <UART_Driver_IsDataAvailable>:
        str++;
    }
}

_Bool UART_Driver_IsDataAvailable(USART_TypeDef *uart)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
    UART_Driver_t *driver = UART_Driver_Get(uart);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff ff63 	bl	8001fa0 <UART_Driver_Get>
 80020da:	60f8      	str	r0, [r7, #12]
    if (driver == NULL)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <UART_Driver_IsDataAvailable+0x1a>
        return false;
 80020e2:	2300      	movs	r3, #0
 80020e4:	e005      	b.n	80020f2 <UART_Driver_IsDataAvailable+0x26>

    return RingBuffer_IsDataAvailable(&driver->rx_buffer);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	3304      	adds	r3, #4
 80020ea:	4618      	mov	r0, r3
 80020ec:	f008 f828 	bl	800a140 <RingBuffer_IsDataAvailable>
 80020f0:	4603      	mov	r3, r0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <UART_Driver_ISR>:
    UART_Driver_FlushRx(uart);
    UART_Driver_FlushTx(uart);
}

void UART_Driver_ISR(USART_TypeDef *uart)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b084      	sub	sp, #16
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
    UART_Driver_t *driver = UART_Driver_Get(uart);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff ff4c 	bl	8001fa0 <UART_Driver_Get>
 8002108:	60f8      	str	r0, [r7, #12]
    if (driver == NULL)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d053      	beq.n	80021b8 <UART_Driver_ISR+0xbe>
        return;

    if ((LL_USART_IsActiveFlag_RXNE(uart) != RESET) &&
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7ff fe52 	bl	8001dba <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d02c      	beq.n	8002176 <UART_Driver_ISR+0x7c>
        (LL_USART_IsEnabledIT_RXNE(uart) != RESET))
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7ff fefc 	bl	8001f1a <LL_USART_IsEnabledIT_RXNE_RXFNE>
 8002122:	4603      	mov	r3, r0
    if ((LL_USART_IsActiveFlag_RXNE(uart) != RESET) &&
 8002124:	2b00      	cmp	r3, #0
 8002126:	d026      	beq.n	8002176 <UART_Driver_ISR+0x7c>
    {
        uint8_t data = LL_USART_ReceiveData8(uart);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff ff1c 	bl	8001f66 <LL_USART_ReceiveData8>
 800212e:	4603      	mov	r3, r0
 8002130:	72fb      	strb	r3, [r7, #11]

        if (LL_USART_IsActiveFlag_ORE(uart))
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff fe2e 	bl	8001d94 <LL_USART_IsActiveFlag_ORE>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d002      	beq.n	8002144 <UART_Driver_ISR+0x4a>
        {
            LL_USART_ClearFlag_ORE(uart);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff fe7b 	bl	8001e3a <LL_USART_ClearFlag_ORE>
        }
        if (LL_USART_IsActiveFlag_FE(uart))
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff fdff 	bl	8001d48 <LL_USART_IsActiveFlag_FE>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d002      	beq.n	8002156 <UART_Driver_ISR+0x5c>
        {
            LL_USART_ClearFlag_FE(uart);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff fe58 	bl	8001e06 <LL_USART_ClearFlag_FE>
        }
        if (LL_USART_IsActiveFlag_NE(uart))
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff fe09 	bl	8001d6e <LL_USART_IsActiveFlag_NE>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d002      	beq.n	8002168 <UART_Driver_ISR+0x6e>
        {
            LL_USART_ClearFlag_NE(uart);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7ff fe5c 	bl	8001e20 <LL_USART_ClearFlag_NE>
        }
        RingBuffer_Put(&driver->rx_buffer, data);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	3304      	adds	r3, #4
 800216c:	7afa      	ldrb	r2, [r7, #11]
 800216e:	4611      	mov	r1, r2
 8002170:	4618      	mov	r0, r3
 8002172:	f007 ff5e 	bl	800a032 <RingBuffer_Put>
    }

    if ((LL_USART_IsActiveFlag_TXE(uart) != RESET) &&
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff fe32 	bl	8001de0 <LL_USART_IsActiveFlag_TXE_TXFNF>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d01b      	beq.n	80021ba <UART_Driver_ISR+0xc0>
        (LL_USART_IsEnabledIT_TXE(uart) != RESET))
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff fedc 	bl	8001f40 <LL_USART_IsEnabledIT_TXE_TXFNF>
 8002188:	4603      	mov	r3, r0
    if ((LL_USART_IsActiveFlag_TXE(uart) != RESET) &&
 800218a:	2b00      	cmp	r3, #0
 800218c:	d015      	beq.n	80021ba <UART_Driver_ISR+0xc0>
    {
        uint8_t tx_data;
        if (RingBuffer_Get(&driver->tx_buffer, &tx_data))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	3334      	adds	r3, #52	@ 0x34
 8002192:	f107 020a 	add.w	r2, r7, #10
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f007 ff90 	bl	800a0be <RingBuffer_Get>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <UART_Driver_ISR+0xb6>
        {
            LL_USART_TransmitData8(uart, tx_data);
 80021a4:	7abb      	ldrb	r3, [r7, #10]
 80021a6:	4619      	mov	r1, r3
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff fee9 	bl	8001f80 <LL_USART_TransmitData8>
 80021ae:	e004      	b.n	80021ba <UART_Driver_ISR+0xc0>
        }
        else
        {
            LL_USART_DisableIT_TXE(uart);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff fe91 	bl	8001ed8 <LL_USART_DisableIT_TXE_TXFNF>
 80021b6:	e000      	b.n	80021ba <UART_Driver_ISR+0xc0>
        return;
 80021b8:	bf00      	nop
        }
    }
}
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <CDC_RingBuffer_Init>:
/*************************************************
 *                 Function Define               *
 *************************************************/

void CDC_RingBuffer_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af02      	add	r7, sp, #8
	RingBuffer_Create(&cdcTxRingBuffer, 3, "CDC_TX", cdcTxBuffer, CDC_TX_RING_BUFFER_SIZE);
 80021c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	4b08      	ldr	r3, [pc, #32]	@ (80021f0 <CDC_RingBuffer_Init+0x30>)
 80021ce:	4a09      	ldr	r2, [pc, #36]	@ (80021f4 <CDC_RingBuffer_Init+0x34>)
 80021d0:	2103      	movs	r1, #3
 80021d2:	4809      	ldr	r0, [pc, #36]	@ (80021f8 <CDC_RingBuffer_Init+0x38>)
 80021d4:	f007 fefa 	bl	8009fcc <RingBuffer_Create>
    RingBuffer_Create(&cdcRxRingBuffer, 4, "CDC_RX", cdcRxBuffer, CDC_RX_RING_BUFFER_SIZE);
 80021d8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	4b07      	ldr	r3, [pc, #28]	@ (80021fc <CDC_RingBuffer_Init+0x3c>)
 80021e0:	4a07      	ldr	r2, [pc, #28]	@ (8002200 <CDC_RingBuffer_Init+0x40>)
 80021e2:	2104      	movs	r1, #4
 80021e4:	4807      	ldr	r0, [pc, #28]	@ (8002204 <CDC_RingBuffer_Init+0x44>)
 80021e6:	f007 fef1 	bl	8009fcc <RingBuffer_Create>
}
 80021ea:	bf00      	nop
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	2400129c 	.word	0x2400129c
 80021f4:	0801327c 	.word	0x0801327c
 80021f8:	24001a9c 	.word	0x24001a9c
 80021fc:	24000a6c 	.word	0x24000a6c
 8002200:	08013284 	.word	0x08013284
 8002204:	2400126c 	.word	0x2400126c

08002208 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800220c:	f3bf 8f4f 	dsb	sy
}
 8002210:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002212:	4b06      	ldr	r3, [pc, #24]	@ (800222c <__NVIC_SystemReset+0x24>)
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800221a:	4904      	ldr	r1, [pc, #16]	@ (800222c <__NVIC_SystemReset+0x24>)
 800221c:	4b04      	ldr	r3, [pc, #16]	@ (8002230 <__NVIC_SystemReset+0x28>)
 800221e:	4313      	orrs	r3, r2
 8002220:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002222:	f3bf 8f4f 	dsb	sy
}
 8002226:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002228:	bf00      	nop
 800222a:	e7fd      	b.n	8002228 <__NVIC_SystemReset+0x20>
 800222c:	e000ed00 	.word	0xe000ed00
 8002230:	05fa0004 	.word	0x05fa0004

08002234 <CMD_Clear_CLI>:

/*************************************************
 *             Command List Function             *
 *************************************************/

static void CMD_Clear_CLI(EmbeddedCli *cli, char *args, void *context) {
 8002234:	b580      	push	{r7, lr}
 8002236:	b088      	sub	sp, #32
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
    char buffer[10];
    snprintf(buffer, sizeof(buffer), "\33[2J");
 8002240:	f107 0314 	add.w	r3, r7, #20
 8002244:	4a07      	ldr	r2, [pc, #28]	@ (8002264 <CMD_Clear_CLI+0x30>)
 8002246:	210a      	movs	r1, #10
 8002248:	4618      	mov	r0, r3
 800224a:	f00f fe77 	bl	8011f3c <sniprintf>
    embeddedCliPrint(cli, buffer);
 800224e:	f107 0314 	add.w	r3, r7, #20
 8002252:	4619      	mov	r1, r3
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 fd15 	bl	8002c84 <embeddedCliPrint>
}
 800225a:	bf00      	nop
 800225c:	3720      	adds	r7, #32
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	080133bc 	.word	0x080133bc

08002268 <CMD_Reset>:

static void CMD_Reset(EmbeddedCli *cli, char *args, void *context) {
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
	NVIC_SystemReset();
 8002274:	f7ff ffc8 	bl	8002208 <__NVIC_SystemReset>

08002278 <CMD_Ping>:
    embeddedCliPrint(cli, "");
}

static void CMD_Ping(EmbeddedCli *cli, char *args, void *context) {
 8002278:	b580      	push	{r7, lr}
 800227a:	b09c      	sub	sp, #112	@ 0x70
 800227c:	af02      	add	r7, sp, #8
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
	(void) context;

    uint16_t tok_count = embeddedCliGetTokenCount(args);
 8002284:	68b8      	ldr	r0, [r7, #8]
 8002286:	f000 fdf5 	bl	8002e74 <embeddedCliGetTokenCount>
 800228a:	4603      	mov	r3, r0
 800228c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    if (tok_count < 2) {
 8002290:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8002294:	2b01      	cmp	r3, #1
 8002296:	d804      	bhi.n	80022a2 <CMD_Ping+0x2a>
        embeddedCliPrint(cli, "Usage: connect <dst> <port>");
 8002298:	4934      	ldr	r1, [pc, #208]	@ (800236c <CMD_Ping+0xf4>)
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f000 fcf2 	bl	8002c84 <embeddedCliPrint>
        return;
 80022a0:	e060      	b.n	8002364 <CMD_Ping+0xec>
    }

    const char *s_dst = embeddedCliGetToken(args, 1);
 80022a2:	2101      	movs	r1, #1
 80022a4:	68b8      	ldr	r0, [r7, #8]
 80022a6:	f000 fdaf 	bl	8002e08 <embeddedCliGetToken>
 80022aa:	6638      	str	r0, [r7, #96]	@ 0x60
    const char *s_port = embeddedCliGetToken(args, 2);
 80022ac:	2102      	movs	r1, #2
 80022ae:	68b8      	ldr	r0, [r7, #8]
 80022b0:	f000 fdaa 	bl	8002e08 <embeddedCliGetToken>
 80022b4:	65f8      	str	r0, [r7, #92]	@ 0x5c

    if (!s_dst || !s_port) {
 80022b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d002      	beq.n	80022c2 <CMD_Ping+0x4a>
 80022bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d104      	bne.n	80022cc <CMD_Ping+0x54>
        embeddedCliPrint(cli, "Usage: connect <dst> <port>");
 80022c2:	492a      	ldr	r1, [pc, #168]	@ (800236c <CMD_Ping+0xf4>)
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f000 fcdd 	bl	8002c84 <embeddedCliPrint>
        return;
 80022ca:	e04b      	b.n	8002364 <CMD_Ping+0xec>
    }

    long dst_l = strtol(s_dst, NULL, 0);
 80022cc:	2200      	movs	r2, #0
 80022ce:	2100      	movs	r1, #0
 80022d0:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80022d2:	f00f fcf7 	bl	8011cc4 <strtol>
 80022d6:	65b8      	str	r0, [r7, #88]	@ 0x58
    long port_l = strtol(s_port, NULL, 0);
 80022d8:	2200      	movs	r2, #0
 80022da:	2100      	movs	r1, #0
 80022dc:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80022de:	f00f fcf1 	bl	8011cc4 <strtol>
 80022e2:	6578      	str	r0, [r7, #84]	@ 0x54

    if (dst_l < 0 || dst_l > 255 || port_l < 0 || port_l > 255) {
 80022e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	db08      	blt.n	80022fc <CMD_Ping+0x84>
 80022ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022ec:	2bff      	cmp	r3, #255	@ 0xff
 80022ee:	dc05      	bgt.n	80022fc <CMD_Ping+0x84>
 80022f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	db02      	blt.n	80022fc <CMD_Ping+0x84>
 80022f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022f8:	2bff      	cmp	r3, #255	@ 0xff
 80022fa:	dd04      	ble.n	8002306 <CMD_Ping+0x8e>
        embeddedCliPrint(cli, "Invalid arguments. dst and port: 0..255");
 80022fc:	491c      	ldr	r1, [pc, #112]	@ (8002370 <CMD_Ping+0xf8>)
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 fcc0 	bl	8002c84 <embeddedCliPrint>
        return;
 8002304:	e02e      	b.n	8002364 <CMD_Ping+0xec>
    }

    uint8_t dst = (uint8_t) dst_l;
 8002306:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002308:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    uint8_t port = (uint8_t) port_l;
 800230c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800230e:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

    conn = csp_connect(CSP_PRIO_NORM, dst, port, 1000, CSP_O_NONE);
 8002312:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8002316:	f897 1053 	ldrb.w	r1, [r7, #83]	@ 0x53
 800231a:	2300      	movs	r3, #0
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002322:	2002      	movs	r0, #2
 8002324:	f006 f8d6 	bl	80084d4 <csp_connect>
 8002328:	4603      	mov	r3, r0
 800232a:	4a12      	ldr	r2, [pc, #72]	@ (8002374 <CMD_Ping+0xfc>)
 800232c:	6013      	str	r3, [r2, #0]
    if (conn == NULL) {
 800232e:	4b11      	ldr	r3, [pc, #68]	@ (8002374 <CMD_Ping+0xfc>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d104      	bne.n	8002340 <CMD_Ping+0xc8>
        embeddedCliPrint(cli, "csp_connect: Connection failed (NULL)");
 8002336:	4910      	ldr	r1, [pc, #64]	@ (8002378 <CMD_Ping+0x100>)
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f000 fca3 	bl	8002c84 <embeddedCliPrint>
        return;
 800233e:	e011      	b.n	8002364 <CMD_Ping+0xec>
    }

    char out[64];
    snprintf(out, sizeof(out), "Connected to dst=%u port=%u", (unsigned)dst, (unsigned)port);
 8002340:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8002344:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8002348:	f107 0010 	add.w	r0, r7, #16
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	4613      	mov	r3, r2
 8002350:	4a0a      	ldr	r2, [pc, #40]	@ (800237c <CMD_Ping+0x104>)
 8002352:	2140      	movs	r1, #64	@ 0x40
 8002354:	f00f fdf2 	bl	8011f3c <sniprintf>
    embeddedCliPrint(cli, out);
 8002358:	f107 0310 	add.w	r3, r7, #16
 800235c:	4619      	mov	r1, r3
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 fc90 	bl	8002c84 <embeddedCliPrint>
}
 8002364:	3768      	adds	r7, #104	@ 0x68
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	080133c4 	.word	0x080133c4
 8002370:	080133e0 	.word	0x080133e0
 8002374:	24001acc 	.word	0x24001acc
 8002378:	08013408 	.word	0x08013408
 800237c:	08013430 	.word	0x08013430

08002380 <CMD_Send>:

static void CMD_Send(EmbeddedCli *cli, char *args, void *context) {
 8002380:	b580      	push	{r7, lr}
 8002382:	b0c6      	sub	sp, #280	@ 0x118
 8002384:	af02      	add	r7, sp, #8
 8002386:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800238a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800238e:	6018      	str	r0, [r3, #0]
 8002390:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002394:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002398:	6019      	str	r1, [r3, #0]
 800239a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800239e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80023a2:	601a      	str	r2, [r3, #0]
    (void) context;

    uint16_t tok_count = embeddedCliGetTokenCount(args);
 80023a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80023a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80023ac:	6818      	ldr	r0, [r3, #0]
 80023ae:	f000 fd61 	bl	8002e74 <embeddedCliGetTokenCount>
 80023b2:	4603      	mov	r3, r0
 80023b4:	f8a7 3100 	strh.w	r3, [r7, #256]	@ 0x100
    if (tok_count < 3) {
 80023b8:	f8b7 3100 	ldrh.w	r3, [r7, #256]	@ 0x100
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d808      	bhi.n	80023d2 <CMD_Send+0x52>
        embeddedCliPrint(cli, "Usage: csp_send <dst> <port> <message>");
 80023c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80023c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80023c8:	49bc      	ldr	r1, [pc, #752]	@ (80026bc <CMD_Send+0x33c>)
 80023ca:	6818      	ldr	r0, [r3, #0]
 80023cc:	f000 fc5a 	bl	8002c84 <embeddedCliPrint>
        return;
 80023d0:	e170      	b.n	80026b4 <CMD_Send+0x334>
    }

    const char *s_dst  = embeddedCliGetToken(args, 1);
 80023d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80023d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80023da:	2101      	movs	r1, #1
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	f000 fd13 	bl	8002e08 <embeddedCliGetToken>
 80023e2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    const char *s_port = embeddedCliGetToken(args, 2);
 80023e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80023ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80023ee:	2102      	movs	r1, #2
 80023f0:	6818      	ldr	r0, [r3, #0]
 80023f2:	f000 fd09 	bl	8002e08 <embeddedCliGetToken>
 80023f6:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8

    long dst_l  = strtol(s_dst,  NULL, 0);
 80023fa:	2200      	movs	r2, #0
 80023fc:	2100      	movs	r1, #0
 80023fe:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 8002402:	f00f fc5f 	bl	8011cc4 <strtol>
 8002406:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
    long port_l = strtol(s_port, NULL, 0);
 800240a:	2200      	movs	r2, #0
 800240c:	2100      	movs	r1, #0
 800240e:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 8002412:	f00f fc57 	bl	8011cc4 <strtol>
 8002416:	f8c7 00f0 	str.w	r0, [r7, #240]	@ 0xf0

    if (dst_l < 0 || dst_l > 255 || port_l < 0 || port_l > 255) {
 800241a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800241e:	2b00      	cmp	r3, #0
 8002420:	db0b      	blt.n	800243a <CMD_Send+0xba>
 8002422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002426:	2bff      	cmp	r3, #255	@ 0xff
 8002428:	dc07      	bgt.n	800243a <CMD_Send+0xba>
 800242a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800242e:	2b00      	cmp	r3, #0
 8002430:	db03      	blt.n	800243a <CMD_Send+0xba>
 8002432:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002436:	2bff      	cmp	r3, #255	@ 0xff
 8002438:	dd08      	ble.n	800244c <CMD_Send+0xcc>
        embeddedCliPrint(cli, "Invalid dst/port. Range: 0..255");
 800243a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800243e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002442:	499f      	ldr	r1, [pc, #636]	@ (80026c0 <CMD_Send+0x340>)
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	f000 fc1d 	bl	8002c84 <embeddedCliPrint>
        return;
 800244a:	e133      	b.n	80026b4 <CMD_Send+0x334>
    }

    uint8_t dst   = (uint8_t) dst_l;
 800244c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002450:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
    uint8_t dport = (uint8_t) port_l;
 8002454:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002458:	f887 30ee 	strb.w	r3, [r7, #238]	@ 0xee

    size_t msg_len = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    for (uint16_t i = 3; i <= tok_count; ++i) {
 8002462:	2303      	movs	r3, #3
 8002464:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
 8002468:	e025      	b.n	80024b6 <CMD_Send+0x136>
        const char *tk = embeddedCliGetToken(args, i);
 800246a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 800246e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002472:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002476:	4611      	mov	r1, r2
 8002478:	6818      	ldr	r0, [r3, #0]
 800247a:	f000 fcc5 	bl	8002e08 <embeddedCliGetToken>
 800247e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
        msg_len += strlen(tk);
 8002482:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8002486:	f7fd ff35 	bl	80002f4 <strlen>
 800248a:	4602      	mov	r2, r0
 800248c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002490:	4413      	add	r3, r2
 8002492:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        if (i != tok_count) msg_len += 1;
 8002496:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 800249a:	f8b7 3100 	ldrh.w	r3, [r7, #256]	@ 0x100
 800249e:	429a      	cmp	r2, r3
 80024a0:	d004      	beq.n	80024ac <CMD_Send+0x12c>
 80024a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80024a6:	3301      	adds	r3, #1
 80024a8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    for (uint16_t i = 3; i <= tok_count; ++i) {
 80024ac:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 80024b0:	3301      	adds	r3, #1
 80024b2:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
 80024b6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 80024ba:	f8b7 3100 	ldrh.w	r3, [r7, #256]	@ 0x100
 80024be:	429a      	cmp	r2, r3
 80024c0:	d9d3      	bls.n	800246a <CMD_Send+0xea>
    }

    if (msg_len == 0) {
 80024c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d108      	bne.n	80024dc <CMD_Send+0x15c>
        embeddedCliPrint(cli, "Empty message");
 80024ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80024ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80024d2:	497c      	ldr	r1, [pc, #496]	@ (80026c4 <CMD_Send+0x344>)
 80024d4:	6818      	ldr	r0, [r3, #0]
 80024d6:	f000 fbd5 	bl	8002c84 <embeddedCliPrint>
        return;
 80024da:	e0eb      	b.n	80026b4 <CMD_Send+0x334>
    }

    const uint32_t timeout_ms = 1000;
 80024dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024e0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    csp_conn_t *conn = csp_connect(CSP_PRIO_NORM, dst, dport, timeout_ms, CSP_O_NONE);
 80024e4:	f897 20ee 	ldrb.w	r2, [r7, #238]	@ 0xee
 80024e8:	f897 10ef 	ldrb.w	r1, [r7, #239]	@ 0xef
 80024ec:	2300      	movs	r3, #0
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80024f4:	2002      	movs	r0, #2
 80024f6:	f005 ffed 	bl	80084d4 <csp_connect>
 80024fa:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
    if (conn == NULL) {
 80024fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002502:	2b00      	cmp	r3, #0
 8002504:	d108      	bne.n	8002518 <CMD_Send+0x198>
        embeddedCliPrint(cli, "csp_connect failed");
 8002506:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800250a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800250e:	496e      	ldr	r1, [pc, #440]	@ (80026c8 <CMD_Send+0x348>)
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	f000 fbb7 	bl	8002c84 <embeddedCliPrint>
        return;
 8002516:	e0cd      	b.n	80026b4 <CMD_Send+0x334>
    }

    csp_packet_t *pkt = csp_buffer_get(msg_len);
 8002518:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 800251c:	f005 fc36 	bl	8007d8c <csp_buffer_get>
 8002520:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
    if (pkt == NULL) {
 8002524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d10c      	bne.n	8002546 <CMD_Send+0x1c6>
        csp_close(conn);
 800252c:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 8002530:	f005 ff6b 	bl	800840a <csp_close>
        embeddedCliPrint(cli, "csp_buffer_get failed");
 8002534:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002538:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800253c:	4963      	ldr	r1, [pc, #396]	@ (80026cc <CMD_Send+0x34c>)
 800253e:	6818      	ldr	r0, [r3, #0]
 8002540:	f000 fba0 	bl	8002c84 <embeddedCliPrint>
        return;
 8002544:	e0b6      	b.n	80026b4 <CMD_Send+0x334>
    }

    size_t off = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    for (uint16_t i = 3; i <= tok_count; ++i) {
 800254c:	2303      	movs	r3, #3
 800254e:	f8a7 3102 	strh.w	r3, [r7, #258]	@ 0x102
 8002552:	e03a      	b.n	80025ca <CMD_Send+0x24a>
        const char *tk = embeddedCliGetToken(args, i);
 8002554:	f8b7 2102 	ldrh.w	r2, [r7, #258]	@ 0x102
 8002558:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800255c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002560:	4611      	mov	r1, r2
 8002562:	6818      	ldr	r0, [r3, #0]
 8002564:	f000 fc50 	bl	8002e08 <embeddedCliGetToken>
 8002568:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
        size_t l = strlen(tk);
 800256c:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8002570:	f7fd fec0 	bl	80002f4 <strlen>
 8002574:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
        memcpy(&pkt->data[off], tk, l);
 8002578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800257c:	3310      	adds	r3, #16
 800257e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002582:	4413      	add	r3, r2
 8002584:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8002588:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 800258c:	4618      	mov	r0, r3
 800258e:	f00f fee6 	bl	801235e <memcpy>
        off += l;
 8002592:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8002596:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800259a:	4413      	add	r3, r2
 800259c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        if (i != tok_count) pkt->data[off++] = ' ';
 80025a0:	f8b7 2102 	ldrh.w	r2, [r7, #258]	@ 0x102
 80025a4:	f8b7 3100 	ldrh.w	r3, [r7, #256]	@ 0x100
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d009      	beq.n	80025c0 <CMD_Send+0x240>
 80025ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 80025b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80025ba:	4413      	add	r3, r2
 80025bc:	2220      	movs	r2, #32
 80025be:	741a      	strb	r2, [r3, #16]
    for (uint16_t i = 3; i <= tok_count; ++i) {
 80025c0:	f8b7 3102 	ldrh.w	r3, [r7, #258]	@ 0x102
 80025c4:	3301      	adds	r3, #1
 80025c6:	f8a7 3102 	strh.w	r3, [r7, #258]	@ 0x102
 80025ca:	f8b7 2102 	ldrh.w	r2, [r7, #258]	@ 0x102
 80025ce:	f8b7 3100 	ldrh.w	r3, [r7, #256]	@ 0x100
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d9be      	bls.n	8002554 <CMD_Send+0x1d4>
    }
    pkt->length = (uint16_t) msg_len;
 80025d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80025da:	b29a      	uxth	r2, r3
 80025dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025e0:	815a      	strh	r2, [r3, #10]

    if (csp_send(conn, pkt, 1000) == CSP_ERR_NONE) {
 80025e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80025e6:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 80025ea:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 80025ee:	f006 fb8b 	bl	8008d08 <csp_send>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d110      	bne.n	800261a <CMD_Send+0x29a>
        csp_buffer_free(pkt);
 80025f8:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 80025fc:	f005 fc62 	bl	8007ec4 <csp_buffer_free>
        csp_close(conn);
 8002600:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 8002604:	f005 ff01 	bl	800840a <csp_close>
        embeddedCliPrint(cli, "csp_send failed");
 8002608:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800260c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002610:	492f      	ldr	r1, [pc, #188]	@ (80026d0 <CMD_Send+0x350>)
 8002612:	6818      	ldr	r0, [r3, #0]
 8002614:	f000 fb36 	bl	8002c84 <embeddedCliPrint>
        return;
 8002618:	e04c      	b.n	80026b4 <CMD_Send+0x334>
    }

    csp_packet_t *reply = csp_read(conn, 1000);
 800261a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800261e:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 8002622:	f006 fa67 	bl	8008af4 <csp_read>
 8002626:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
    if (reply) {
 800262a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800262e:	2b00      	cmp	r3, #0
 8002630:	d022      	beq.n	8002678 <CMD_Send+0x2f8>
        char out[128];
        snprintf(out, sizeof(out), "Reply (%u bytes): %.*s", reply->length, reply->length, reply->data);
 8002632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002636:	895b      	ldrh	r3, [r3, #10]
 8002638:	4619      	mov	r1, r3
 800263a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800263e:	895b      	ldrh	r3, [r3, #10]
 8002640:	461a      	mov	r2, r3
 8002642:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002646:	3310      	adds	r3, #16
 8002648:	f107 0010 	add.w	r0, r7, #16
 800264c:	9301      	str	r3, [sp, #4]
 800264e:	9200      	str	r2, [sp, #0]
 8002650:	460b      	mov	r3, r1
 8002652:	4a20      	ldr	r2, [pc, #128]	@ (80026d4 <CMD_Send+0x354>)
 8002654:	2180      	movs	r1, #128	@ 0x80
 8002656:	f00f fc71 	bl	8011f3c <sniprintf>
        embeddedCliPrint(cli, out);
 800265a:	f107 0210 	add.w	r2, r7, #16
 800265e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002662:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002666:	4611      	mov	r1, r2
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	f000 fb0b 	bl	8002c84 <embeddedCliPrint>
        csp_buffer_free(reply);
 800266e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8002672:	f005 fc27 	bl	8007ec4 <csp_buffer_free>
 8002676:	e007      	b.n	8002688 <CMD_Send+0x308>
    } else {
        embeddedCliPrint(cli, "No reply received (timeout)");
 8002678:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800267c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002680:	4915      	ldr	r1, [pc, #84]	@ (80026d8 <CMD_Send+0x358>)
 8002682:	6818      	ldr	r0, [r3, #0]
 8002684:	f000 fafe 	bl	8002c84 <embeddedCliPrint>
    }

    csp_close(conn);
 8002688:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 800268c:	f005 febd 	bl	800840a <csp_close>

    char out2[64];
    snprintf(out2, sizeof(out2), "Sent %u bytes", (unsigned)msg_len);
 8002690:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8002694:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002698:	4a10      	ldr	r2, [pc, #64]	@ (80026dc <CMD_Send+0x35c>)
 800269a:	2140      	movs	r1, #64	@ 0x40
 800269c:	f00f fc4e 	bl	8011f3c <sniprintf>
    embeddedCliPrint(cli, out2);
 80026a0:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 80026a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80026a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80026ac:	4611      	mov	r1, r2
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	f000 fae8 	bl	8002c84 <embeddedCliPrint>
}
 80026b4:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	0801344c 	.word	0x0801344c
 80026c0:	08013474 	.word	0x08013474
 80026c4:	08013494 	.word	0x08013494
 80026c8:	080134a4 	.word	0x080134a4
 80026cc:	080134b8 	.word	0x080134b8
 80026d0:	080134d0 	.word	0x080134d0
 80026d4:	080134e0 	.word	0x080134e0
 80026d8:	080134f8 	.word	0x080134f8
 80026dc:	08013514 	.word	0x08013514

080026e0 <CMD_Close>:


static void CMD_Close(EmbeddedCli *cli, char *args, void *context){
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
	csp_close(conn);
 80026ec:	4b06      	ldr	r3, [pc, #24]	@ (8002708 <CMD_Close+0x28>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f005 fe8a 	bl	800840a <csp_close>
	embeddedCliPrint(cli, "Close CSP");
 80026f6:	4905      	ldr	r1, [pc, #20]	@ (800270c <CMD_Close+0x2c>)
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 fac3 	bl	8002c84 <embeddedCliPrint>
}
 80026fe:	bf00      	nop
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	24001acc 	.word	0x24001acc
 800270c:	08013524 	.word	0x08013524

08002710 <CMD_Get_Temperature>:

static void CMD_Get_Temperature(EmbeddedCli *cli, char *args, void *context){
 8002710:	b580      	push	{r7, lr}
 8002712:	b09c      	sub	sp, #112	@ 0x70
 8002714:	af02      	add	r7, sp, #8
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
	(void) context;

    uint16_t tok_count = embeddedCliGetTokenCount(args);
 800271c:	68b8      	ldr	r0, [r7, #8]
 800271e:	f000 fba9 	bl	8002e74 <embeddedCliGetTokenCount>
 8002722:	4603      	mov	r3, r0
 8002724:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    if (tok_count < 1) {
 8002728:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800272c:	2b00      	cmp	r3, #0
 800272e:	d104      	bne.n	800273a <CMD_Get_Temperature+0x2a>
        embeddedCliPrint(cli, "Usage: get_temperature <index>");
 8002730:	4927      	ldr	r1, [pc, #156]	@ (80027d0 <CMD_Get_Temperature+0xc0>)
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 faa6 	bl	8002c84 <embeddedCliPrint>
        return;
 8002738:	e047      	b.n	80027ca <CMD_Get_Temperature+0xba>
    }

    const char *s_index = embeddedCliGetToken(args, 1);
 800273a:	2101      	movs	r1, #1
 800273c:	68b8      	ldr	r0, [r7, #8]
 800273e:	f000 fb63 	bl	8002e08 <embeddedCliGetToken>
 8002742:	6638      	str	r0, [r7, #96]	@ 0x60
    long index = strtol(s_index, NULL, 0);
 8002744:	2200      	movs	r2, #0
 8002746:	2100      	movs	r1, #0
 8002748:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800274a:	f00f fabb 	bl	8011cc4 <strtol>
 800274e:	65f8      	str	r0, [r7, #92]	@ 0x5c
    if (index < 1 || index > 3) {
 8002750:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002752:	2b00      	cmp	r3, #0
 8002754:	dd02      	ble.n	800275c <CMD_Get_Temperature+0x4c>
 8002756:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002758:	2b03      	cmp	r3, #3
 800275a:	dd04      	ble.n	8002766 <CMD_Get_Temperature+0x56>
        embeddedCliPrint(cli, "Index must be 1, 2, or 3\r\n");
 800275c:	491d      	ldr	r1, [pc, #116]	@ (80027d4 <CMD_Get_Temperature+0xc4>)
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 fa90 	bl	8002c84 <embeddedCliPrint>
        return;
 8002764:	e031      	b.n	80027ca <CMD_Get_Temperature+0xba>
    }

    uint16_t raw = ADC1_ReadIndex((uint8_t)index);
 8002766:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002768:	b2db      	uxtb	r3, r3
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff faa8 	bl	8001cc0 <ADC1_ReadIndex>
 8002770:	4603      	mov	r3, r0
 8002772:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (raw == 0xFFFF) {
 8002776:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800277a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800277e:	4293      	cmp	r3, r2
 8002780:	d104      	bne.n	800278c <CMD_Get_Temperature+0x7c>
        embeddedCliPrint(cli, "Invalid ADC channel index\r\n");
 8002782:	4915      	ldr	r1, [pc, #84]	@ (80027d8 <CMD_Get_Temperature+0xc8>)
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 fa7d 	bl	8002c84 <embeddedCliPrint>
        return;
 800278a:	e01e      	b.n	80027ca <CMD_Get_Temperature+0xba>
    }

    int32_t temperature = ((raw* 3300)- (500* 65535))/ 65535 ;
 800278c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002790:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8002794:	fb03 f202 	mul.w	r2, r3, r2
 8002798:	4b10      	ldr	r3, [pc, #64]	@ (80027dc <CMD_Get_Temperature+0xcc>)
 800279a:	4413      	add	r3, r2
 800279c:	4a10      	ldr	r2, [pc, #64]	@ (80027e0 <CMD_Get_Temperature+0xd0>)
 800279e:	fb82 1203 	smull	r1, r2, r2, r3
 80027a2:	441a      	add	r2, r3
 80027a4:	13d2      	asrs	r2, r2, #15
 80027a6:	17db      	asrs	r3, r3, #31
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	657b      	str	r3, [r7, #84]	@ 0x54

    char buf[64];
    snprintf(buf, sizeof(buf), "board_temp_%ld: temperature=%ld C\r\n", index, temperature);
 80027ac:	f107 0014 	add.w	r0, r7, #20
 80027b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027b6:	4a0b      	ldr	r2, [pc, #44]	@ (80027e4 <CMD_Get_Temperature+0xd4>)
 80027b8:	2140      	movs	r1, #64	@ 0x40
 80027ba:	f00f fbbf 	bl	8011f3c <sniprintf>
    embeddedCliPrint(cli, buf);
 80027be:	f107 0314 	add.w	r3, r7, #20
 80027c2:	4619      	mov	r1, r3
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 fa5d 	bl	8002c84 <embeddedCliPrint>

}
 80027ca:	3768      	adds	r7, #104	@ 0x68
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	08013530 	.word	0x08013530
 80027d4:	08013550 	.word	0x08013550
 80027d8:	0801356c 	.word	0x0801356c
 80027dc:	fe0c01f4 	.word	0xfe0c01f4
 80027e0:	80008001 	.word	0x80008001
 80027e4:	08013588 	.word	0x08013588

080027e8 <CMD_Get_Current>:

static void CMD_Get_Current(EmbeddedCli *cli, char *args, void *context){
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b096      	sub	sp, #88	@ 0x58
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]

	uint16_t raw = ADC2_Read();
 80027f4:	f7ff fa42 	bl	8001c7c <ADC2_Read>
 80027f8:	4603      	mov	r3, r0
 80027fa:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
	uint32_t current = ((raw*33)/65535)* 549;
 80027fe:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8002802:	4613      	mov	r3, r2
 8002804:	015b      	lsls	r3, r3, #5
 8002806:	4413      	add	r3, r2
 8002808:	4a0e      	ldr	r2, [pc, #56]	@ (8002844 <CMD_Get_Current+0x5c>)
 800280a:	fb82 1203 	smull	r1, r2, r2, r3
 800280e:	441a      	add	r2, r3
 8002810:	13d2      	asrs	r2, r2, #15
 8002812:	17db      	asrs	r3, r3, #31
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	f240 2225 	movw	r2, #549	@ 0x225
 800281a:	fb02 f303 	mul.w	r3, r2, r3
 800281e:	653b      	str	r3, [r7, #80]	@ 0x50

    char buf[64];
    snprintf(buf, sizeof(buf), "board_temp_current: current=%ld mA\r\n", current);
 8002820:	f107 0010 	add.w	r0, r7, #16
 8002824:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002826:	4a08      	ldr	r2, [pc, #32]	@ (8002848 <CMD_Get_Current+0x60>)
 8002828:	2140      	movs	r1, #64	@ 0x40
 800282a:	f00f fb87 	bl	8011f3c <sniprintf>
    embeddedCliPrint(cli, buf);
 800282e:	f107 0310 	add.w	r3, r7, #16
 8002832:	4619      	mov	r1, r3
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 fa25 	bl	8002c84 <embeddedCliPrint>
}
 800283a:	bf00      	nop
 800283c:	3758      	adds	r7, #88	@ 0x58
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	80008001 	.word	0x80008001
 8002848:	080135ac 	.word	0x080135ac

0800284c <getCliStaticBindings>:
 *************************************************/

/*************************************************
 *                Getter - Helper                *
 *************************************************/
const CliCommandBinding *getCliStaticBindings(void) {
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
    return cliStaticBindings_internal;
 8002850:	4b02      	ldr	r3, [pc, #8]	@ (800285c <getCliStaticBindings+0x10>)
}
 8002852:	4618      	mov	r0, r3
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	080144f0 	.word	0x080144f0

08002860 <getCliStaticBindingCount>:

uint16_t getCliStaticBindingCount(void) {
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
    return sizeof(cliStaticBindings_internal) / sizeof(cliStaticBindings_internal[0]);
 8002864:	2308      	movs	r3, #8
}
 8002866:	4618      	mov	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <writeCharTocli_COMM_UART>:
//    while (CDC_Transmit_HS(&b, 1) == USBD_BUSY) {
//    	vTaskDelay(1);
//    }
//}

static void writeCharTocli_COMM_UART(EmbeddedCli *embeddedCli, char c) {
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	70fb      	strb	r3, [r7, #3]
    uint8_t b = c;
 800287c:	78fb      	ldrb	r3, [r7, #3]
 800287e:	73fb      	strb	r3, [r7, #15]
    UART_Driver_Write(UART4, b);
 8002880:	7bfb      	ldrb	r3, [r7, #15]
 8002882:	4619      	mov	r1, r3
 8002884:	4803      	ldr	r0, [pc, #12]	@ (8002894 <writeCharTocli_COMM_UART+0x24>)
 8002886:	f7ff fbfe 	bl	8002086 <UART_Driver_Write>
}
 800288a:	bf00      	nop
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40004c00 	.word	0x40004c00

08002898 <SystemCLI_Init>:

Std_ReturnType SystemCLI_Init() {
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
//        return E_ERROR;
//    }
//    cli_COMM_USB->writeChar = writeCharTocli_COMM_USB;

    // Initialize COMM UART CLi
    EmbeddedCliConfig *COMM_UART_config = embeddedCliDefaultConfig();
 800289e:	f000 f853 	bl	8002948 <embeddedCliDefaultConfig>
 80028a2:	6078      	str	r0, [r7, #4]
    COMM_UART_config->cliBuffer = COMM_UART_cliStaticBuffer;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a1d      	ldr	r2, [pc, #116]	@ (800291c <SystemCLI_Init+0x84>)
 80028a8:	60da      	str	r2, [r3, #12]
    COMM_UART_config->cliBufferSize = COMM_UART_CLI_BUFFER_SIZE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80028b0:	821a      	strh	r2, [r3, #16]
    COMM_UART_config->rxBufferSize = CLI_RX_BUFFER_SIZE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2210      	movs	r2, #16
 80028b6:	809a      	strh	r2, [r3, #4]
    COMM_UART_config->cmdBufferSize = CLI_CMD_BUFFER_SIZE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2240      	movs	r2, #64	@ 0x40
 80028bc:	80da      	strh	r2, [r3, #6]
    COMM_UART_config->historyBufferSize = CLI_HISTORY_SIZE;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2280      	movs	r2, #128	@ 0x80
 80028c2:	811a      	strh	r2, [r3, #8]
    COMM_UART_config->maxBindingCount = CLI_MAX_BINDING_COUNT;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2220      	movs	r2, #32
 80028c8:	815a      	strh	r2, [r3, #10]
    COMM_UART_config->enableAutoComplete = CLI_AUTO_COMPLETE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	749a      	strb	r2, [r3, #18]
    COMM_UART_config->invitation = CLI_INITATION_COMM_UART;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a13      	ldr	r2, [pc, #76]	@ (8002920 <SystemCLI_Init+0x88>)
 80028d4:	601a      	str	r2, [r3, #0]
    COMM_UART_config->staticBindings = getCliStaticBindings();
 80028d6:	f7ff ffb9 	bl	800284c <getCliStaticBindings>
 80028da:	4602      	mov	r2, r0
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	615a      	str	r2, [r3, #20]
    COMM_UART_config->staticBindingCount = getCliStaticBindingCount();
 80028e0:	f7ff ffbe 	bl	8002860 <getCliStaticBindingCount>
 80028e4:	4603      	mov	r3, r0
 80028e6:	461a      	mov	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	831a      	strh	r2, [r3, #24]

    cli_COMM_UART = embeddedCliNew(COMM_UART_config);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 f886 	bl	80029fe <embeddedCliNew>
 80028f2:	4603      	mov	r3, r0
 80028f4:	4a0b      	ldr	r2, [pc, #44]	@ (8002924 <SystemCLI_Init+0x8c>)
 80028f6:	6013      	str	r3, [r2, #0]
    if (cli_COMM_UART == NULL) {
 80028f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002924 <SystemCLI_Init+0x8c>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <SystemCLI_Init+0x6c>
        return E_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e007      	b.n	8002914 <SystemCLI_Init+0x7c>
    }
    cli_COMM_UART->writeChar = writeCharTocli_COMM_UART;
 8002904:	4b07      	ldr	r3, [pc, #28]	@ (8002924 <SystemCLI_Init+0x8c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a07      	ldr	r2, [pc, #28]	@ (8002928 <SystemCLI_Init+0x90>)
 800290a:	601a      	str	r2, [r3, #0]

//	// Init the CLI with blank screen
//	onClearCLI(cli, NULL, NULL);

    // CLI has now been initialized, set bool to true to enable interrupts.
    cliIsReady = true;
 800290c:	4b07      	ldr	r3, [pc, #28]	@ (800292c <SystemCLI_Init+0x94>)
 800290e:	2201      	movs	r2, #1
 8002910:	701a      	strb	r2, [r3, #0]

    return E_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	24001ad0 	.word	0x24001ad0
 8002920:	080135d4 	.word	0x080135d4
 8002924:	240022d0 	.word	0x240022d0
 8002928:	08002871 	.word	0x08002871
 800292c:	240022d4 	.word	0x240022d4

08002930 <get_COMM_UART_CliPointer>:

//EmbeddedCli *get_COMM_USB_CliPointer() {
//    return cli_COMM_USB;
//}

EmbeddedCli *get_COMM_UART_CliPointer() {
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
    return cli_COMM_UART;
 8002934:	4b03      	ldr	r3, [pc, #12]	@ (8002944 <get_COMM_UART_CliPointer+0x14>)
 8002936:	681b      	ldr	r3, [r3, #0]
}
 8002938:	4618      	mov	r0, r3
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	240022d0 	.word	0x240022d0

08002948 <embeddedCliDefaultConfig>:
 * @param pos - token position (counted from 1)
 * @return index of first char of specified token
 */
static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos);

EmbeddedCliConfig *embeddedCliDefaultConfig(void) {
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
    defaultConfig.rxBufferSize = 64;
 800294c:	4b11      	ldr	r3, [pc, #68]	@ (8002994 <embeddedCliDefaultConfig+0x4c>)
 800294e:	2240      	movs	r2, #64	@ 0x40
 8002950:	809a      	strh	r2, [r3, #4]
    defaultConfig.cmdBufferSize = 64;
 8002952:	4b10      	ldr	r3, [pc, #64]	@ (8002994 <embeddedCliDefaultConfig+0x4c>)
 8002954:	2240      	movs	r2, #64	@ 0x40
 8002956:	80da      	strh	r2, [r3, #6]
    defaultConfig.historyBufferSize = 128;
 8002958:	4b0e      	ldr	r3, [pc, #56]	@ (8002994 <embeddedCliDefaultConfig+0x4c>)
 800295a:	2280      	movs	r2, #128	@ 0x80
 800295c:	811a      	strh	r2, [r3, #8]
    defaultConfig.cliBuffer = NULL;
 800295e:	4b0d      	ldr	r3, [pc, #52]	@ (8002994 <embeddedCliDefaultConfig+0x4c>)
 8002960:	2200      	movs	r2, #0
 8002962:	60da      	str	r2, [r3, #12]
    defaultConfig.cliBufferSize = 0;
 8002964:	4b0b      	ldr	r3, [pc, #44]	@ (8002994 <embeddedCliDefaultConfig+0x4c>)
 8002966:	2200      	movs	r2, #0
 8002968:	821a      	strh	r2, [r3, #16]
    defaultConfig.maxBindingCount = 8;
 800296a:	4b0a      	ldr	r3, [pc, #40]	@ (8002994 <embeddedCliDefaultConfig+0x4c>)
 800296c:	2208      	movs	r2, #8
 800296e:	815a      	strh	r2, [r3, #10]
    defaultConfig.enableAutoComplete = true;
 8002970:	4b08      	ldr	r3, [pc, #32]	@ (8002994 <embeddedCliDefaultConfig+0x4c>)
 8002972:	2201      	movs	r2, #1
 8002974:	749a      	strb	r2, [r3, #18]
    defaultConfig.invitation = "> ";
 8002976:	4b07      	ldr	r3, [pc, #28]	@ (8002994 <embeddedCliDefaultConfig+0x4c>)
 8002978:	4a07      	ldr	r2, [pc, #28]	@ (8002998 <embeddedCliDefaultConfig+0x50>)
 800297a:	601a      	str	r2, [r3, #0]
    defaultConfig.staticBindingCount = 0;
 800297c:	4b05      	ldr	r3, [pc, #20]	@ (8002994 <embeddedCliDefaultConfig+0x4c>)
 800297e:	2200      	movs	r2, #0
 8002980:	831a      	strh	r2, [r3, #24]
    defaultConfig.staticBindings = NULL;
 8002982:	4b04      	ldr	r3, [pc, #16]	@ (8002994 <embeddedCliDefaultConfig+0x4c>)
 8002984:	2200      	movs	r2, #0
 8002986:	615a      	str	r2, [r3, #20]
    return &defaultConfig;
 8002988:	4b02      	ldr	r3, [pc, #8]	@ (8002994 <embeddedCliDefaultConfig+0x4c>)
}
 800298a:	4618      	mov	r0, r3
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	240022d8 	.word	0x240022d8
 8002998:	08013600 	.word	0x08013600

0800299c <embeddedCliRequiredSize>:

uint16_t embeddedCliRequiredSize(EmbeddedCliConfig *config) {
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
    uint16_t bindingCount = (config->staticBindings == NULL) ?
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d102      	bne.n	80029b2 <embeddedCliRequiredSize+0x16>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	895b      	ldrh	r3, [r3, #10]
 80029b0:	e000      	b.n	80029b4 <embeddedCliRequiredSize+0x18>
 80029b2:	2300      	movs	r3, #0
 80029b4:	81fb      	strh	r3, [r7, #14]
                            (config->maxBindingCount) : 0;
    return (CLI_UINT_SIZE * (
        BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli)) +
        BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl)) +
        BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	889b      	ldrh	r3, [r3, #4]
 80029ba:	3303      	adds	r3, #3
 80029bc:	089a      	lsrs	r2, r3, #2
        BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	88db      	ldrh	r3, [r3, #6]
 80029c2:	3303      	adds	r3, #3
 80029c4:	089b      	lsrs	r3, r3, #2
        BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 80029c6:	441a      	add	r2, r3
        BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	891b      	ldrh	r3, [r3, #8]
 80029cc:	3303      	adds	r3, #3
 80029ce:	089b      	lsrs	r3, r3, #2
        BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 80029d0:	18d1      	adds	r1, r2, r3
        BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 80029d2:	89fa      	ldrh	r2, [r7, #14]
 80029d4:	4613      	mov	r3, r2
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	4413      	add	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	3303      	adds	r3, #3
 80029de:	089b      	lsrs	r3, r3, #2
        BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 80029e0:	18ca      	adds	r2, r1, r3
        BYTES_TO_CLI_UINTS(bindingCount * sizeof(uint8_t))
 80029e2:	89fb      	ldrh	r3, [r7, #14]
 80029e4:	3303      	adds	r3, #3
 80029e6:	089b      	lsrs	r3, r3, #2
        BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 80029e8:	4413      	add	r3, r2
 80029ea:	3312      	adds	r3, #18
    return (CLI_UINT_SIZE * (
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	b29b      	uxth	r3, r3
    ));
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <embeddedCliNew>:

EmbeddedCli *embeddedCliNew(EmbeddedCliConfig *config) {
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b088      	sub	sp, #32
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
    EmbeddedCli *cli = NULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	61fb      	str	r3, [r7, #28]

    size_t totalSize = embeddedCliRequiredSize(config);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff ffc6 	bl	800299c <embeddedCliRequiredSize>
 8002a10:	4603      	mov	r3, r0
 8002a12:	61bb      	str	r3, [r7, #24]

    _Bool allocated = false;
 8002a14:	2300      	movs	r3, #0
 8002a16:	75fb      	strb	r3, [r7, #23]

    if (config->cliBuffer == NULL || config->cliBufferSize < totalSize) {
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d005      	beq.n	8002a2c <embeddedCliNew+0x2e>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	8a1b      	ldrh	r3, [r3, #16]
 8002a24:	461a      	mov	r2, r3
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d901      	bls.n	8002a30 <embeddedCliNew+0x32>
        return NULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	e071      	b.n	8002b14 <embeddedCliNew+0x116>
    }

    CLI_UINT *buf = config->cliBuffer;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	613b      	str	r3, [r7, #16]

    memset(buf, 0, totalSize);
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	2100      	movs	r1, #0
 8002a3a:	6938      	ldr	r0, [r7, #16]
 8002a3c:	f00f fbd2 	bl	80121e4 <memset>

    cli = (EmbeddedCli *) buf;
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	61fb      	str	r3, [r7, #28]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli));
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	3310      	adds	r3, #16
 8002a48:	613b      	str	r3, [r7, #16]

    cli->_impl = (EmbeddedCliImpl *) buf;
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	60da      	str	r2, [r3, #12]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl));
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	3338      	adds	r3, #56	@ 0x38
 8002a54:	613b      	str	r3, [r7, #16]

    PREPARE_IMPL(cli);
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	60fb      	str	r3, [r7, #12]
    impl->rxBuffer.buf = (char *) buf;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	611a      	str	r2, [r3, #16]
    buf += BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	889b      	ldrh	r3, [r3, #4]
 8002a66:	3303      	adds	r3, #3
 8002a68:	f023 0303 	bic.w	r3, r3, #3
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4413      	add	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]

    impl->cmdBuffer = (char *) buf;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	61da      	str	r2, [r3, #28]
    buf += BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	88db      	ldrh	r3, [r3, #6]
 8002a7c:	3303      	adds	r3, #3
 8002a7e:	f023 0303 	bic.w	r3, r3, #3
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4413      	add	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]


    impl->bindings = (CliCommandBinding *) config->staticBindings;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	695a      	ldr	r2, [r3, #20]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	625a      	str	r2, [r3, #36]	@ 0x24
    impl->bindingsCount = config->staticBindingCount;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	8b1a      	ldrh	r2, [r3, #24]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	859a      	strh	r2, [r3, #44]	@ 0x2c
    impl->maxBindingsCount = config->staticBindingCount;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	8b1a      	ldrh	r2, [r3, #24]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	85da      	strh	r2, [r3, #46]	@ 0x2e


    impl->history.buf = (char *) buf;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	605a      	str	r2, [r3, #4]
    impl->history.bufferSize = config->historyBufferSize;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	891a      	ldrh	r2, [r3, #8]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	811a      	strh	r2, [r3, #8]

    if (allocated)
 8002aae:	7dfb      	ldrb	r3, [r7, #23]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d008      	beq.n	8002ac6 <embeddedCliNew+0xc8>
        SET_FLAG(impl->flags, CLI_FLAG_ALLOCATED);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002aba:	f043 0304 	orr.w	r3, r3, #4
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    if (config->enableAutoComplete)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	7c9b      	ldrb	r3, [r3, #18]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d008      	beq.n	8002ae0 <embeddedCliNew+0xe2>
        SET_FLAG(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002ad4:	f043 0320 	orr.w	r3, r3, #32
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    impl->rxBuffer.size = config->rxBufferSize;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	889a      	ldrh	r2, [r3, #4]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	831a      	strh	r2, [r3, #24]
    impl->rxBuffer.front = 0;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	829a      	strh	r2, [r3, #20]
    impl->rxBuffer.back = 0;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	82da      	strh	r2, [r3, #22]
    impl->cmdMaxSize = config->cmdBufferSize;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	88da      	ldrh	r2, [r3, #6]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	845a      	strh	r2, [r3, #34]	@ 0x22
    impl->lastChar = '\0';
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    impl->invitation = config->invitation;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	601a      	str	r2, [r3, #0]
    impl->cursorPos = 0;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	869a      	strh	r2, [r3, #52]	@ 0x34

    return cli;
 8002b12:	69fb      	ldr	r3, [r7, #28]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3720      	adds	r7, #32
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <embeddedCliReceiveChar>:

void embeddedCliReceiveChar(EmbeddedCli *cli, char c) {
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	60fb      	str	r3, [r7, #12]

    if (!fifoBufPush(&impl->rxBuffer, c)) {
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	3310      	adds	r3, #16
 8002b32:	78fa      	ldrb	r2, [r7, #3]
 8002b34:	4611      	mov	r1, r2
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 ff8a 	bl	8003a50 <fifoBufPush>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	f083 0301 	eor.w	r3, r3, #1
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d008      	beq.n	8002b5a <embeddedCliReceiveChar+0x3e>
        SET_FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002b4e:	f043 0301 	orr.w	r3, r3, #1
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    }
}
 8002b5a:	bf00      	nop
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <embeddedCliProcess>:

void embeddedCliProcess(EmbeddedCli *cli) {
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b084      	sub	sp, #16
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
    if (cli->writeChar == NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 8083 	beq.w	8002c7a <embeddedCliProcess+0x118>
        return;

    PREPARE_IMPL(cli);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	60fb      	str	r3, [r7, #12]


    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_INIT_COMPLETE)) {
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d155      	bne.n	8002c34 <embeddedCliProcess+0xd2>
        SET_FLAG(impl->flags, CLI_FLAG_INIT_COMPLETE);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002b8e:	f043 0302 	orr.w	r3, r3, #2
 8002b92:	b2da      	uxtb	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        writeToOutput(cli, impl->invitation);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 fe7e 	bl	80038a2 <writeToOutput>
    }

    while (fifoBufAvailable(&impl->rxBuffer)) {
 8002ba6:	e045      	b.n	8002c34 <embeddedCliProcess+0xd2>
        char c = fifoBufPop(&impl->rxBuffer);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	3310      	adds	r3, #16
 8002bac:	4618      	mov	r0, r3
 8002bae:	f000 ff27 	bl	8003a00 <fifoBufPop>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	72fb      	strb	r3, [r7, #11]

        if (IS_FLAG_SET(impl->flags, CLI_FLAG_ESCAPE_MODE)) {
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002bbc:	f003 0308 	and.w	r3, r3, #8
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <embeddedCliProcess+0x6e>
            onEscapedInput(cli, c);
 8002bc4:	7afb      	ldrb	r3, [r7, #11]
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f9f5 	bl	8002fb8 <onEscapedInput>
 8002bce:	e02a      	b.n	8002c26 <embeddedCliProcess+0xc4>
        } else if (impl->lastChar == 0x1B && c == '[') {
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002bd6:	2b1b      	cmp	r3, #27
 8002bd8:	d10c      	bne.n	8002bf4 <embeddedCliProcess+0x92>
 8002bda:	7afb      	ldrb	r3, [r7, #11]
 8002bdc:	2b5b      	cmp	r3, #91	@ 0x5b
 8002bde:	d109      	bne.n	8002bf4 <embeddedCliProcess+0x92>
            //enter escape mode
            SET_FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002be6:	f043 0308 	orr.w	r3, r3, #8
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8002bf2:	e018      	b.n	8002c26 <embeddedCliProcess+0xc4>
        } else if (isControlChar(c)) {
 8002bf4:	7afb      	ldrb	r3, [r7, #11]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 feaa 	bl	8003950 <isControlChar>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d005      	beq.n	8002c0e <embeddedCliProcess+0xac>
            onControlInput(cli, c);
 8002c02:	7afb      	ldrb	r3, [r7, #11]
 8002c04:	4619      	mov	r1, r3
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 fa86 	bl	8003118 <onControlInput>
 8002c0c:	e00b      	b.n	8002c26 <embeddedCliProcess+0xc4>
        } else if (isDisplayableChar(c)) {
 8002c0e:	7afb      	ldrb	r3, [r7, #11]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 febd 	bl	8003990 <isDisplayableChar>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d004      	beq.n	8002c26 <embeddedCliProcess+0xc4>
            onCharInput(cli, c);
 8002c1c:	7afb      	ldrb	r3, [r7, #11]
 8002c1e:	4619      	mov	r1, r3
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 fa27 	bl	8003074 <onCharInput>
        }

        printLiveAutocompletion(cli);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 fd12 	bl	8003650 <printLiveAutocompletion>

        impl->lastChar = c;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	7afa      	ldrb	r2, [r7, #11]
 8002c30:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    while (fifoBufAvailable(&impl->rxBuffer)) {
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	3310      	adds	r3, #16
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 fec0 	bl	80039be <fifoBufAvailable>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1b1      	bne.n	8002ba8 <embeddedCliProcess+0x46>
    }

    // discard unfinished command if overflow happened
    if (IS_FLAG_SET(impl->flags, CLI_FLAG_OVERFLOW)) {
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d014      	beq.n	8002c7c <embeddedCliProcess+0x11a>
        impl->cmdSize = 0;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	8c12      	ldrh	r2, [r2, #32]
 8002c60:	4413      	add	r3, r2
 8002c62:	2200      	movs	r2, #0
 8002c64:	701a      	strb	r2, [r3, #0]
        UNSET_U8FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002c6c:	f023 0301 	bic.w	r3, r3, #1
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8002c78:	e000      	b.n	8002c7c <embeddedCliProcess+0x11a>
        return;
 8002c7a:	bf00      	nop
    }
}
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
	...

08002c84 <embeddedCliPrint>:

void embeddedCliPrint(EmbeddedCli *cli, const char *string) {
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
    if (cli->writeChar == NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d03e      	beq.n	8002d14 <embeddedCliPrint+0x90>
        return;

    PREPARE_IMPL(cli);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	60fb      	str	r3, [r7, #12]

    // Save cursor position
    uint16_t cursorPosSave = impl->cursorPos;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002ca0:	817b      	strh	r3, [r7, #10]

    // remove chars for autocompletion and live command
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002ca8:	f003 0310 	and.w	r3, r3, #16
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d102      	bne.n	8002cb6 <embeddedCliPrint+0x32>
        clearCurrentLine(cli);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 fdc1 	bl	8003838 <clearCurrentLine>

    // Restore cursor position
    impl->cursorPos = cursorPosSave;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	897a      	ldrh	r2, [r7, #10]
 8002cba:	869a      	strh	r2, [r3, #52]	@ 0x34

    // print provided string
    writeToOutput(cli, string);
 8002cbc:	6839      	ldr	r1, [r7, #0]
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 fdef 	bl	80038a2 <writeToOutput>
    writeToOutput(cli, lineBreak);
 8002cc4:	4b15      	ldr	r3, [pc, #84]	@ (8002d1c <embeddedCliPrint+0x98>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4619      	mov	r1, r3
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 fde9 	bl	80038a2 <writeToOutput>

    // print current command back to screen
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT)) {
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002cd6:	f003 0310 	and.w	r3, r3, #16
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d11b      	bne.n	8002d16 <embeddedCliPrint+0x92>
        writeToOutput(cli, impl->invitation);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 fddc 	bl	80038a2 <writeToOutput>
        writeToOutput(cli, impl->cmdBuffer);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	4619      	mov	r1, r3
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 fdd6 	bl	80038a2 <writeToOutput>
        impl->inputLineLength = impl->cmdSize;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8c1a      	ldrh	r2, [r3, #32]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	861a      	strh	r2, [r3, #48]	@ 0x30
        moveCursor(cli, impl->cursorPos, CURSOR_DIRECTION_BACKWARD);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002d02:	2200      	movs	r2, #0
 8002d04:	4619      	mov	r1, r3
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 fdec 	bl	80038e4 <moveCursor>

        printLiveAutocompletion(cli);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 fc9f 	bl	8003650 <printLiveAutocompletion>
 8002d12:	e000      	b.n	8002d16 <embeddedCliPrint+0x92>
        return;
 8002d14:	bf00      	nop
    }
}
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	2400006c 	.word	0x2400006c

08002d20 <embeddedCliTokenizeArgs>:

void embeddedCliTokenizeArgs(char *args) {
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b088      	sub	sp, #32
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
    if (args == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d066      	beq.n	8002dfc <embeddedCliTokenizeArgs+0xdc>
        return;

    // for now only space, but can add more later
    const char *separators = " ";
 8002d2e:	4b35      	ldr	r3, [pc, #212]	@ (8002e04 <embeddedCliTokenizeArgs+0xe4>)
 8002d30:	60fb      	str	r3, [r7, #12]

    // indicates that arg is quoted so separators are copied as is
    bool quotesEnabled = false;
 8002d32:	2300      	movs	r3, #0
 8002d34:	77fb      	strb	r3, [r7, #31]
    // indicates that previous char was a slash, so next char is copied as is
    bool escapeActivated = false;
 8002d36:	2300      	movs	r3, #0
 8002d38:	77bb      	strb	r3, [r7, #30]
    int insertPos = 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61bb      	str	r3, [r7, #24]

    int i = 0;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	617b      	str	r3, [r7, #20]
    char currentChar;
    while ((currentChar = args[i]) != '\0') {
 8002d42:	e047      	b.n	8002dd4 <embeddedCliTokenizeArgs+0xb4>
        ++i;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	3301      	adds	r3, #1
 8002d48:	617b      	str	r3, [r7, #20]

        if (escapeActivated) {
 8002d4a:	7fbb      	ldrb	r3, [r7, #30]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <embeddedCliTokenizeArgs+0x36>
            escapeActivated = false;
 8002d50:	2300      	movs	r3, #0
 8002d52:	77bb      	strb	r3, [r7, #30]
 8002d54:	e029      	b.n	8002daa <embeddedCliTokenizeArgs+0x8a>
        } else if (currentChar == '\\') {
 8002d56:	7cfb      	ldrb	r3, [r7, #19]
 8002d58:	2b5c      	cmp	r3, #92	@ 0x5c
 8002d5a:	d102      	bne.n	8002d62 <embeddedCliTokenizeArgs+0x42>
            escapeActivated = true;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	77bb      	strb	r3, [r7, #30]
            continue;
 8002d60:	e038      	b.n	8002dd4 <embeddedCliTokenizeArgs+0xb4>
        } else if (currentChar == '"') {
 8002d62:	7cfb      	ldrb	r3, [r7, #19]
 8002d64:	2b22      	cmp	r3, #34	@ 0x22
 8002d66:	d110      	bne.n	8002d8a <embeddedCliTokenizeArgs+0x6a>
            quotesEnabled = !quotesEnabled;
 8002d68:	7ffb      	ldrb	r3, [r7, #31]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	bf14      	ite	ne
 8002d6e:	2301      	movne	r3, #1
 8002d70:	2300      	moveq	r3, #0
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	f083 0301 	eor.w	r3, r3, #1
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	77fb      	strb	r3, [r7, #31]
 8002d7c:	7ffb      	ldrb	r3, [r7, #31]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	77fb      	strb	r3, [r7, #31]
            currentChar = '\0';
 8002d84:	2300      	movs	r3, #0
 8002d86:	74fb      	strb	r3, [r7, #19]
 8002d88:	e00f      	b.n	8002daa <embeddedCliTokenizeArgs+0x8a>
        } else if (!quotesEnabled && strchr(separators, currentChar) != NULL) {
 8002d8a:	7ffb      	ldrb	r3, [r7, #31]
 8002d8c:	f083 0301 	eor.w	r3, r3, #1
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d009      	beq.n	8002daa <embeddedCliTokenizeArgs+0x8a>
 8002d96:	7cfb      	ldrb	r3, [r7, #19]
 8002d98:	4619      	mov	r1, r3
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f00f fa2a 	bl	80121f4 <strchr>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <embeddedCliTokenizeArgs+0x8a>
            currentChar = '\0';
 8002da6:	2300      	movs	r3, #0
 8002da8:	74fb      	strb	r3, [r7, #19]
        }

        // null chars are only copied once and not copied to the beginning
        if (currentChar != '\0' || (insertPos > 0 && args[insertPos - 1] != '\0')) {
 8002daa:	7cfb      	ldrb	r3, [r7, #19]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d109      	bne.n	8002dc4 <embeddedCliTokenizeArgs+0xa4>
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	dd0e      	ble.n	8002dd4 <embeddedCliTokenizeArgs+0xb4>
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	3b01      	subs	r3, #1
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d007      	beq.n	8002dd4 <embeddedCliTokenizeArgs+0xb4>
            args[insertPos] = currentChar;
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	4413      	add	r3, r2
 8002dca:	7cfa      	ldrb	r2, [r7, #19]
 8002dcc:	701a      	strb	r2, [r3, #0]
            ++insertPos;
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	61bb      	str	r3, [r7, #24]
    while ((currentChar = args[i]) != '\0') {
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	4413      	add	r3, r2
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	74fb      	strb	r3, [r7, #19]
 8002dde:	7cfb      	ldrb	r3, [r7, #19]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1af      	bne.n	8002d44 <embeddedCliTokenizeArgs+0x24>
        }
    }

    // make args double null-terminated source buffer must be big enough to contain extra spaces
    args[insertPos] = '\0';
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	4413      	add	r3, r2
 8002dea:	2200      	movs	r2, #0
 8002dec:	701a      	strb	r2, [r3, #0]
    args[insertPos + 1] = '\0';
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	3301      	adds	r3, #1
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	4413      	add	r3, r2
 8002df6:	2200      	movs	r2, #0
 8002df8:	701a      	strb	r2, [r3, #0]
 8002dfa:	e000      	b.n	8002dfe <embeddedCliTokenizeArgs+0xde>
        return;
 8002dfc:	bf00      	nop
}
 8002dfe:	3720      	adds	r7, #32
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	08013604 	.word	0x08013604

08002e08 <embeddedCliGetToken>:

const char *embeddedCliGetToken(const char *tokenizedStr, uint16_t pos) {
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 8002e14:	887b      	ldrh	r3, [r7, #2]
 8002e16:	4619      	mov	r1, r3
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 ff20 	bl	8003c5e <getTokenPosition>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 8002e22:	89fb      	ldrh	r3, [r7, #14]
 8002e24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d003      	beq.n	8002e34 <embeddedCliGetToken+0x2c>
        return &tokenizedStr[i];
 8002e2c:	89fb      	ldrh	r3, [r7, #14]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	4413      	add	r3, r2
 8002e32:	e000      	b.n	8002e36 <embeddedCliGetToken+0x2e>
    else
        return NULL;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <embeddedCliGetTokenVariable>:

char *embeddedCliGetTokenVariable(char *tokenizedStr, uint16_t pos) {
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b084      	sub	sp, #16
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	460b      	mov	r3, r1
 8002e48:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 8002e4a:	887b      	ldrh	r3, [r7, #2]
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 ff05 	bl	8003c5e <getTokenPosition>
 8002e54:	4603      	mov	r3, r0
 8002e56:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 8002e58:	89fb      	ldrh	r3, [r7, #14]
 8002e5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d003      	beq.n	8002e6a <embeddedCliGetTokenVariable+0x2c>
        return &tokenizedStr[i];
 8002e62:	89fb      	ldrh	r3, [r7, #14]
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	4413      	add	r3, r2
 8002e68:	e000      	b.n	8002e6c <embeddedCliGetTokenVariable+0x2e>
    else
        return NULL;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <embeddedCliGetTokenCount>:
    }

    return 0;
}

uint16_t embeddedCliGetTokenCount(const char *tokenizedStr) {
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
    if (tokenizedStr == NULL || tokenizedStr[0] == '\0')
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <embeddedCliGetTokenCount+0x16>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <embeddedCliGetTokenCount+0x1a>
        return 0;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	e019      	b.n	8002ec2 <embeddedCliGetTokenCount+0x4e>

    int i = 0;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60fb      	str	r3, [r7, #12]
    uint16_t tokenCount = 1;
 8002e92:	2301      	movs	r3, #1
 8002e94:	817b      	strh	r3, [r7, #10]
    while (true) {
        if (tokenizedStr[i] == '\0') {
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d109      	bne.n	8002eb6 <embeddedCliGetTokenCount+0x42>
            if (tokenizedStr[i + 1] == '\0')
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d006      	beq.n	8002ebe <embeddedCliGetTokenCount+0x4a>
                break;
            ++tokenCount;
 8002eb0:	897b      	ldrh	r3, [r7, #10]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	817b      	strh	r3, [r7, #10]
        }
        ++i;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	60fb      	str	r3, [r7, #12]
        if (tokenizedStr[i] == '\0') {
 8002ebc:	e7eb      	b.n	8002e96 <embeddedCliGetTokenCount+0x22>
                break;
 8002ebe:	bf00      	nop
    }

    return tokenCount;
 8002ec0:	897b      	ldrh	r3, [r7, #10]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
	...

08002ed0 <navigateHistory>:

static void navigateHistory(EmbeddedCli *cli, bool navigateUp) {
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	613b      	str	r3, [r7, #16]
    if (impl->history.itemsCount == 0 ||
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	899b      	ldrh	r3, [r3, #12]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d05f      	beq.n	8002faa <navigateHistory+0xda>
 8002eea:	78fb      	ldrb	r3, [r7, #3]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <navigateHistory+0x2c>
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	895a      	ldrh	r2, [r3, #10]
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	899b      	ldrh	r3, [r3, #12]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d056      	beq.n	8002faa <navigateHistory+0xda>
        (!navigateUp && impl->history.current == 0))
 8002efc:	78fb      	ldrb	r3, [r7, #3]
 8002efe:	f083 0301 	eor.w	r3, r3, #1
 8002f02:	b2db      	uxtb	r3, r3
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <navigateHistory+0x40>
        (!navigateUp && impl->history.current == 0))
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	895b      	ldrh	r3, [r3, #10]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d04c      	beq.n	8002faa <navigateHistory+0xda>
        return;

    clearCurrentLine(cli);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 fc91 	bl	8003838 <clearCurrentLine>

    writeToOutput(cli, impl->invitation);
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 fcc0 	bl	80038a2 <writeToOutput>

    if (navigateUp)
 8002f22:	78fb      	ldrb	r3, [r7, #3]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d006      	beq.n	8002f36 <navigateHistory+0x66>
        ++impl->history.current;
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	895b      	ldrh	r3, [r3, #10]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	815a      	strh	r2, [r3, #10]
 8002f34:	e005      	b.n	8002f42 <navigateHistory+0x72>
    else
        --impl->history.current;
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	895b      	ldrh	r3, [r3, #10]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	815a      	strh	r2, [r3, #10]

    const char *item = historyGet(&impl->history, impl->history.current);
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1d1a      	adds	r2, r3, #4
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	895b      	ldrh	r3, [r3, #10]
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4610      	mov	r0, r2
 8002f4e:	f000 fe0d 	bl	8003b6c <historyGet>
 8002f52:	6178      	str	r0, [r7, #20]
    // simple way to handle empty command the same way as others
    if (item == NULL)
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <navigateHistory+0x8e>
        item = "";
 8002f5a:	4b16      	ldr	r3, [pc, #88]	@ (8002fb4 <navigateHistory+0xe4>)
 8002f5c:	617b      	str	r3, [r7, #20]
    uint16_t len = (uint16_t) strlen(item);
 8002f5e:	6978      	ldr	r0, [r7, #20]
 8002f60:	f7fd f9c8 	bl	80002f4 <strlen>
 8002f64:	4603      	mov	r3, r0
 8002f66:	81fb      	strh	r3, [r7, #14]
    memcpy(impl->cmdBuffer, item, len);
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	89fa      	ldrh	r2, [r7, #14]
 8002f6e:	6979      	ldr	r1, [r7, #20]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f00f f9f4 	bl	801235e <memcpy>
    impl->cmdBuffer[len] = '\0';
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	69da      	ldr	r2, [r3, #28]
 8002f7a:	89fb      	ldrh	r3, [r7, #14]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	2200      	movs	r2, #0
 8002f80:	701a      	strb	r2, [r3, #0]
    impl->cmdSize = len;
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	89fa      	ldrh	r2, [r7, #14]
 8002f86:	841a      	strh	r2, [r3, #32]

    writeToOutput(cli, impl->cmdBuffer);
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 fc87 	bl	80038a2 <writeToOutput>
    impl->inputLineLength = impl->cmdSize;
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	8c1a      	ldrh	r2, [r3, #32]
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	861a      	strh	r2, [r3, #48]	@ 0x30
    impl->cursorPos = 0;
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	869a      	strh	r2, [r3, #52]	@ 0x34

    printLiveAutocompletion(cli);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 fb54 	bl	8003650 <printLiveAutocompletion>
 8002fa8:	e000      	b.n	8002fac <navigateHistory+0xdc>
        return;
 8002faa:	bf00      	nop
}
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	08013608 	.word	0x08013608

08002fb8 <onEscapedInput>:

static void onEscapedInput(EmbeddedCli *cli, char c) {
 8002fb8:	b590      	push	{r4, r7, lr}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	60fb      	str	r3, [r7, #12]

    if (c >= 64 && c <= 126) {
 8002fca:	78fb      	ldrb	r3, [r7, #3]
 8002fcc:	2b3f      	cmp	r3, #63	@ 0x3f
 8002fce:	d948      	bls.n	8003062 <onEscapedInput+0xaa>
 8002fd0:	78fb      	ldrb	r3, [r7, #3]
 8002fd2:	2b7e      	cmp	r3, #126	@ 0x7e
 8002fd4:	d845      	bhi.n	8003062 <onEscapedInput+0xaa>
        // handle escape sequence
        UNSET_U8FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002fdc:	f023 0308 	bic.w	r3, r3, #8
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

        if (c == 'A' || c == 'B') {
 8002fe8:	78fb      	ldrb	r3, [r7, #3]
 8002fea:	2b41      	cmp	r3, #65	@ 0x41
 8002fec:	d002      	beq.n	8002ff4 <onEscapedInput+0x3c>
 8002fee:	78fb      	ldrb	r3, [r7, #3]
 8002ff0:	2b42      	cmp	r3, #66	@ 0x42
 8002ff2:	d109      	bne.n	8003008 <onEscapedInput+0x50>
            // treat \e[..A as cursor up and \e[..B as cursor down
            // there might be extra chars between [ and A/B, just ignore them
            navigateHistory(cli, c == 'A');
 8002ff4:	78fb      	ldrb	r3, [r7, #3]
 8002ff6:	2b41      	cmp	r3, #65	@ 0x41
 8002ff8:	bf0c      	ite	eq
 8002ffa:	2301      	moveq	r3, #1
 8002ffc:	2300      	movne	r3, #0
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	4619      	mov	r1, r3
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7ff ff64 	bl	8002ed0 <navigateHistory>
        }

        if (c == 'C' && impl->cursorPos > 0) {
 8003008:	78fb      	ldrb	r3, [r7, #3]
 800300a:	2b43      	cmp	r3, #67	@ 0x43
 800300c:	d10f      	bne.n	800302e <onEscapedInput+0x76>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00b      	beq.n	800302e <onEscapedInput+0x76>
            impl->cursorPos--;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800301a:	3b01      	subs	r3, #1
 800301c:	b29a      	uxth	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	869a      	strh	r2, [r3, #52]	@ 0x34
            writeToOutput(cli, escSeqCursorRight);
 8003022:	4b12      	ldr	r3, [pc, #72]	@ (800306c <onEscapedInput+0xb4>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4619      	mov	r1, r3
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 fc3a 	bl	80038a2 <writeToOutput>
        }

        if (c == 'D' && impl->cursorPos < strlen(impl->cmdBuffer)) {
 800302e:	78fb      	ldrb	r3, [r7, #3]
 8003030:	2b44      	cmp	r3, #68	@ 0x44
 8003032:	d116      	bne.n	8003062 <onEscapedInput+0xaa>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8003038:	461c      	mov	r4, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	4618      	mov	r0, r3
 8003040:	f7fd f958 	bl	80002f4 <strlen>
 8003044:	4603      	mov	r3, r0
 8003046:	429c      	cmp	r4, r3
 8003048:	d20b      	bcs.n	8003062 <onEscapedInput+0xaa>
            impl->cursorPos++;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800304e:	3301      	adds	r3, #1
 8003050:	b29a      	uxth	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	869a      	strh	r2, [r3, #52]	@ 0x34
            writeToOutput(cli, escSeqCursorLeft);
 8003056:	4b06      	ldr	r3, [pc, #24]	@ (8003070 <onEscapedInput+0xb8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4619      	mov	r1, r3
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 fc20 	bl	80038a2 <writeToOutput>
        }
    }
}
 8003062:	bf00      	nop
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	bd90      	pop	{r4, r7, pc}
 800306a:	bf00      	nop
 800306c:	24000070 	.word	0x24000070
 8003070:	24000074 	.word	0x24000074

08003074 <onCharInput>:

static void onCharInput(EmbeddedCli *cli, char c) {
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	460b      	mov	r3, r1
 800307e:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	60fb      	str	r3, [r7, #12]

    // have to reserve two extra chars for command ending (used in tokenization)
    if (impl->cmdSize + 2 >= impl->cmdMaxSize)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8c1b      	ldrh	r3, [r3, #32]
 800308a:	3302      	adds	r3, #2
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8003090:	4293      	cmp	r3, r2
 8003092:	da3b      	bge.n	800310c <onCharInput+0x98>
        return;

    size_t insertPos = strlen(impl->cmdBuffer) - impl->cursorPos;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	69db      	ldr	r3, [r3, #28]
 8003098:	4618      	mov	r0, r3
 800309a:	f7fd f92b 	bl	80002f4 <strlen>
 800309e:	4602      	mov	r2, r0
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	60bb      	str	r3, [r7, #8]

    memmove(&impl->cmdBuffer[insertPos + 1], &impl->cmdBuffer[insertPos], impl->cursorPos + 1);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	69da      	ldr	r2, [r3, #28]
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	3301      	adds	r3, #1
 80030b0:	18d0      	adds	r0, r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	69da      	ldr	r2, [r3, #28]
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	18d1      	adds	r1, r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80030be:	3301      	adds	r3, #1
 80030c0:	461a      	mov	r2, r3
 80030c2:	f00f f875 	bl	80121b0 <memmove>

    ++impl->cmdSize;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8c1b      	ldrh	r3, [r3, #32]
 80030ca:	3301      	adds	r3, #1
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	841a      	strh	r2, [r3, #32]
    ++impl->inputLineLength;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80030d6:	3301      	adds	r3, #1
 80030d8:	b29a      	uxth	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	861a      	strh	r2, [r3, #48]	@ 0x30
    impl->cmdBuffer[insertPos] = c;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	69da      	ldr	r2, [r3, #28]
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	4413      	add	r3, r2
 80030e6:	78fa      	ldrb	r2, [r7, #3]
 80030e8:	701a      	strb	r2, [r3, #0]

    if (impl->cursorPos > 0)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d005      	beq.n	80030fe <onCharInput+0x8a>
        writeToOutput(cli, escSeqInsertChar); // Insert Character
 80030f2:	4b08      	ldr	r3, [pc, #32]	@ (8003114 <onCharInput+0xa0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4619      	mov	r1, r3
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 fbd2 	bl	80038a2 <writeToOutput>

    cli->writeChar(cli, c);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	78fa      	ldrb	r2, [r7, #3]
 8003104:	4611      	mov	r1, r2
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	4798      	blx	r3
 800310a:	e000      	b.n	800310e <onCharInput+0x9a>
        return;
 800310c:	bf00      	nop
}
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	24000080 	.word	0x24000080

08003118 <onControlInput>:

static void onControlInput(EmbeddedCli *cli, char c) {
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	460b      	mov	r3, r1
 8003122:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	60fb      	str	r3, [r7, #12]

    // process \r\n and \n\r as single \r\n command
    if ((impl->lastChar == '\r' && c == '\n') ||
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003130:	2b0d      	cmp	r3, #13
 8003132:	d102      	bne.n	800313a <onControlInput+0x22>
 8003134:	78fb      	ldrb	r3, [r7, #3]
 8003136:	2b0a      	cmp	r3, #10
 8003138:	d078      	beq.n	800322c <onControlInput+0x114>
        (impl->lastChar == '\n' && c == '\r'))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
    if ((impl->lastChar == '\r' && c == '\n') ||
 8003140:	2b0a      	cmp	r3, #10
 8003142:	d102      	bne.n	800314a <onControlInput+0x32>
        (impl->lastChar == '\n' && c == '\r'))
 8003144:	78fb      	ldrb	r3, [r7, #3]
 8003146:	2b0d      	cmp	r3, #13
 8003148:	d070      	beq.n	800322c <onControlInput+0x114>
        return;

    if (c == '\r' || c == '\n') {
 800314a:	78fb      	ldrb	r3, [r7, #3]
 800314c:	2b0d      	cmp	r3, #13
 800314e:	d002      	beq.n	8003156 <onControlInput+0x3e>
 8003150:	78fb      	ldrb	r3, [r7, #3]
 8003152:	2b0a      	cmp	r3, #10
 8003154:	d129      	bne.n	80031aa <onControlInput+0x92>
        // try to autocomplete command and then process it
        onAutocompleteRequest(cli);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 fadc 	bl	8003714 <onAutocompleteRequest>

        writeToOutput(cli, lineBreak);
 800315c:	4b35      	ldr	r3, [pc, #212]	@ (8003234 <onControlInput+0x11c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4619      	mov	r1, r3
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 fb9d 	bl	80038a2 <writeToOutput>

        if (impl->cmdSize > 0)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8c1b      	ldrh	r3, [r3, #32]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d002      	beq.n	8003176 <onControlInput+0x5e>
            parseCommand(cli);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f865 	bl	8003240 <parseCommand>
        impl->cmdSize = 0;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	8c12      	ldrh	r2, [r2, #32]
 8003184:	4413      	add	r3, r2
 8003186:	2200      	movs	r2, #0
 8003188:	701a      	strb	r2, [r3, #0]
        impl->inputLineLength = 0;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	861a      	strh	r2, [r3, #48]	@ 0x30
        impl->history.current = 0;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	815a      	strh	r2, [r3, #10]
        impl->cursorPos = 0;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	869a      	strh	r2, [r3, #52]	@ 0x34

        writeToOutput(cli, impl->invitation);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4619      	mov	r1, r3
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 fb7d 	bl	80038a2 <writeToOutput>
 80031a8:	e041      	b.n	800322e <onControlInput+0x116>
    } else if ((c == '\b' || c == 0x7F) && ((impl->cmdSize - impl->cursorPos) > 0)) {
 80031aa:	78fb      	ldrb	r3, [r7, #3]
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d002      	beq.n	80031b6 <onControlInput+0x9e>
 80031b0:	78fb      	ldrb	r3, [r7, #3]
 80031b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80031b4:	d133      	bne.n	800321e <onControlInput+0x106>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8c1b      	ldrh	r3, [r3, #32]
 80031ba:	461a      	mov	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	dd2b      	ble.n	800321e <onControlInput+0x106>
        // remove char from screen
        writeToOutput(cli, escSeqCursorLeft); // Move cursor to left
 80031c6:	4b1c      	ldr	r3, [pc, #112]	@ (8003238 <onControlInput+0x120>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4619      	mov	r1, r3
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 fb68 	bl	80038a2 <writeToOutput>
        writeToOutput(cli, escSeqDeleteChar); // And remove character
 80031d2:	4b1a      	ldr	r3, [pc, #104]	@ (800323c <onControlInput+0x124>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4619      	mov	r1, r3
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 fb62 	bl	80038a2 <writeToOutput>
        // and from buffer
        size_t insertPos = strlen(impl->cmdBuffer) - impl->cursorPos;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fd f886 	bl	80002f4 <strlen>
 80031e8:	4602      	mov	r2, r0
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	60bb      	str	r3, [r7, #8]
        memmove(&impl->cmdBuffer[insertPos - 1], &impl->cmdBuffer[insertPos], impl->cursorPos + 1);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	69da      	ldr	r2, [r3, #28]
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	3b01      	subs	r3, #1
 80031fa:	18d0      	adds	r0, r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	69da      	ldr	r2, [r3, #28]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	18d1      	adds	r1, r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8003208:	3301      	adds	r3, #1
 800320a:	461a      	mov	r2, r3
 800320c:	f00e ffd0 	bl	80121b0 <memmove>
        --impl->cmdSize;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8c1b      	ldrh	r3, [r3, #32]
 8003214:	3b01      	subs	r3, #1
 8003216:	b29a      	uxth	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	841a      	strh	r2, [r3, #32]
    } else if ((c == '\b' || c == 0x7F) && ((impl->cmdSize - impl->cursorPos) > 0)) {
 800321c:	e007      	b.n	800322e <onControlInput+0x116>
    } else if (c == '\t') {
 800321e:	78fb      	ldrb	r3, [r7, #3]
 8003220:	2b09      	cmp	r3, #9
 8003222:	d104      	bne.n	800322e <onControlInput+0x116>
        onAutocompleteRequest(cli);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 fa75 	bl	8003714 <onAutocompleteRequest>
 800322a:	e000      	b.n	800322e <onControlInput+0x116>
        return;
 800322c:	bf00      	nop
    }

}
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	2400006c 	.word	0x2400006c
 8003238:	24000074 	.word	0x24000074
 800323c:	24000084 	.word	0x24000084

08003240 <parseCommand>:

static void parseCommand(EmbeddedCli *cli) {
 8003240:	b590      	push	{r4, r7, lr}
 8003242:	b08f      	sub	sp, #60	@ 0x3c
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	61bb      	str	r3, [r7, #24]

    bool isEmpty = true;
 800324e:	2301      	movs	r3, #1
 8003250:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    for (int i = 0; i < impl->cmdSize; ++i) {
 8003254:	2300      	movs	r3, #0
 8003256:	633b      	str	r3, [r7, #48]	@ 0x30
 8003258:	e00d      	b.n	8003276 <parseCommand+0x36>
        if (impl->cmdBuffer[i] != ' ') {
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	69da      	ldr	r2, [r3, #28]
 800325e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003260:	4413      	add	r3, r2
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b20      	cmp	r3, #32
 8003266:	d003      	beq.n	8003270 <parseCommand+0x30>
            isEmpty = false;
 8003268:	2300      	movs	r3, #0
 800326a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            break;
 800326e:	e008      	b.n	8003282 <parseCommand+0x42>
    for (int i = 0; i < impl->cmdSize; ++i) {
 8003270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003272:	3301      	adds	r3, #1
 8003274:	633b      	str	r3, [r7, #48]	@ 0x30
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	8c1b      	ldrh	r3, [r3, #32]
 800327a:	461a      	mov	r2, r3
 800327c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800327e:	4293      	cmp	r3, r2
 8003280:	dbeb      	blt.n	800325a <parseCommand+0x1a>
        }
    }
    // do not process empty commands
    if (isEmpty)
 8003282:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003286:	2b00      	cmp	r3, #0
 8003288:	f040 80fa 	bne.w	8003480 <parseCommand+0x240>
        return;
    // push command to history before buffer is modified
    historyPut(&impl->history, impl->cmdBuffer);
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	1d1a      	adds	r2, r3, #4
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	4619      	mov	r1, r3
 8003296:	4610      	mov	r0, r2
 8003298:	f000 fc04 	bl	8003aa4 <historyPut>

    char *cmdName = NULL;
 800329c:	2300      	movs	r3, #0
 800329e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    char *cmdArgs = NULL;
 80032a0:	2300      	movs	r3, #0
 80032a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    bool nameFinished = false;
 80032a4:	2300      	movs	r3, #0
 80032a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // find command name and command args inside command buffer
    for (int i = 0; i < impl->cmdSize; ++i) {
 80032aa:	2300      	movs	r3, #0
 80032ac:	623b      	str	r3, [r7, #32]
 80032ae:	e030      	b.n	8003312 <parseCommand+0xd2>
        char c = impl->cmdBuffer[i];
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	69da      	ldr	r2, [r3, #28]
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	4413      	add	r3, r2
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	75fb      	strb	r3, [r7, #23]

        if (c == ' ') {
 80032bc:	7dfb      	ldrb	r3, [r7, #23]
 80032be:	2b20      	cmp	r3, #32
 80032c0:	d10f      	bne.n	80032e2 <parseCommand+0xa2>
            // all spaces between name and args are filled with zeros
            // so name is a correct null-terminated string
            if (cmdArgs == NULL)
 80032c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d105      	bne.n	80032d4 <parseCommand+0x94>
                impl->cmdBuffer[i] = '\0';
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	69da      	ldr	r2, [r3, #28]
 80032cc:	6a3b      	ldr	r3, [r7, #32]
 80032ce:	4413      	add	r3, r2
 80032d0:	2200      	movs	r2, #0
 80032d2:	701a      	strb	r2, [r3, #0]
            if (cmdName != NULL)
 80032d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d018      	beq.n	800330c <parseCommand+0xcc>
                nameFinished = true;
 80032da:	2301      	movs	r3, #1
 80032dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80032e0:	e014      	b.n	800330c <parseCommand+0xcc>

        } else if (cmdName == NULL) {
 80032e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d105      	bne.n	80032f4 <parseCommand+0xb4>
            cmdName = &impl->cmdBuffer[i];
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	69da      	ldr	r2, [r3, #28]
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	4413      	add	r3, r2
 80032f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032f2:	e00b      	b.n	800330c <parseCommand+0xcc>
        } else if (cmdArgs == NULL && nameFinished) {
 80032f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d108      	bne.n	800330c <parseCommand+0xcc>
 80032fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d004      	beq.n	800330c <parseCommand+0xcc>
            cmdArgs = &impl->cmdBuffer[i];
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	69da      	ldr	r2, [r3, #28]
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	4413      	add	r3, r2
 800330a:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (int i = 0; i < impl->cmdSize; ++i) {
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	3301      	adds	r3, #1
 8003310:	623b      	str	r3, [r7, #32]
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	8c1b      	ldrh	r3, [r3, #32]
 8003316:	461a      	mov	r2, r3
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	4293      	cmp	r3, r2
 800331c:	dbc8      	blt.n	80032b0 <parseCommand+0x70>
        }
    }

    // we keep two last bytes in cmd buffer reserved so cmdSize is always by 2
    // less than cmdMaxSize
    impl->cmdBuffer[impl->cmdSize + 1] = '\0';
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	69da      	ldr	r2, [r3, #28]
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	8c1b      	ldrh	r3, [r3, #32]
 8003326:	3301      	adds	r3, #1
 8003328:	4413      	add	r3, r2
 800332a:	2200      	movs	r2, #0
 800332c:	701a      	strb	r2, [r3, #0]

    if (cmdName == NULL)
 800332e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 80a7 	beq.w	8003484 <parseCommand+0x244>
        return;

    // try to find command in bindings
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8003336:	2300      	movs	r3, #0
 8003338:	61fb      	str	r3, [r7, #28]
 800333a:	e072      	b.n	8003422 <parseCommand+0x1e2>
        if (strcmp(cmdName, impl->bindings[i].name) == 0) {
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003340:	69fa      	ldr	r2, [r7, #28]
 8003342:	4613      	mov	r3, r2
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	4413      	add	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	440b      	add	r3, r1
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	4619      	mov	r1, r3
 8003350:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003352:	f7fc ffc5 	bl	80002e0 <strcmp>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d15f      	bne.n	800341c <parseCommand+0x1dc>
            if (impl->bindings[i].binding == NULL)
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003360:	69fa      	ldr	r2, [r7, #28]
 8003362:	4613      	mov	r3, r2
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	4413      	add	r3, r2
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	440b      	add	r3, r1
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d05e      	beq.n	8003430 <parseCommand+0x1f0>
                break;

            if (impl->bindings[i].tokenizeArgs)
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003376:	69fa      	ldr	r2, [r7, #28]
 8003378:	4613      	mov	r3, r2
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	4413      	add	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	440b      	add	r3, r1
 8003382:	7b1b      	ldrb	r3, [r3, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <parseCommand+0x14e>
                embeddedCliTokenizeArgs(cmdArgs);
 8003388:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800338a:	f7ff fcc9 	bl	8002d20 <embeddedCliTokenizeArgs>
            // currently, output is blank line, so we can just print directly
            SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8003394:	f043 0310 	orr.w	r3, r3, #16
 8003398:	b2da      	uxtb	r2, r3
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            // check if help was requested (help is printed when no other options are set)
            if (cmdArgs != NULL && (strcmp(cmdArgs, "-h") == 0 || strcmp(cmdArgs, "--help") == 0)) {
 80033a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d01a      	beq.n	80033dc <parseCommand+0x19c>
 80033a6:	4939      	ldr	r1, [pc, #228]	@ (800348c <parseCommand+0x24c>)
 80033a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033aa:	f7fc ff99 	bl	80002e0 <strcmp>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d006      	beq.n	80033c2 <parseCommand+0x182>
 80033b4:	4936      	ldr	r1, [pc, #216]	@ (8003490 <parseCommand+0x250>)
 80033b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033b8:	f7fc ff92 	bl	80002e0 <strcmp>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10c      	bne.n	80033dc <parseCommand+0x19c>
                printBindingHelp(cli, &impl->bindings[i]);
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80033c6:	69fa      	ldr	r2, [r7, #28]
 80033c8:	4613      	mov	r3, r2
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	4413      	add	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	440b      	add	r3, r1
 80033d2:	4619      	mov	r1, r3
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 f85d 	bl	8003494 <printBindingHelp>
 80033da:	e015      	b.n	8003408 <parseCommand+0x1c8>
            } else {
                impl->bindings[i].binding(cli, cmdArgs, impl->bindings[i].context);
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80033e0:	69fa      	ldr	r2, [r7, #28]
 80033e2:	4613      	mov	r3, r2
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	4413      	add	r3, r2
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	440b      	add	r3, r1
 80033ec:	695c      	ldr	r4, [r3, #20]
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80033f2:	69fa      	ldr	r2, [r7, #28]
 80033f4:	4613      	mov	r3, r2
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	4413      	add	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	440b      	add	r3, r1
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	461a      	mov	r2, r3
 8003402:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	47a0      	blx	r4
            }
            UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800340e:	f023 0310 	bic.w	r3, r3, #16
 8003412:	b2da      	uxtb	r2, r3
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            return;
 800341a:	e034      	b.n	8003486 <parseCommand+0x246>
    for (int i = 0; i < impl->bindingsCount; ++i) {
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	3301      	adds	r3, #1
 8003420:	61fb      	str	r3, [r7, #28]
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003426:	461a      	mov	r2, r3
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	4293      	cmp	r3, r2
 800342c:	db86      	blt.n	800333c <parseCommand+0xfc>
 800342e:	e000      	b.n	8003432 <parseCommand+0x1f2>
                break;
 8003430:	bf00      	nop
        }
    }

    // command not found in bindings or binding was null
    // try to call default callback
    if (cli->onCommand != NULL) {
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d01d      	beq.n	8003476 <parseCommand+0x236>
        CliCommand command;
        command.name = cmdName;
 800343a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800343c:	60fb      	str	r3, [r7, #12]
        command.args = cmdArgs;
 800343e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003440:	613b      	str	r3, [r7, #16]

        // currently, output is blank line, so we can just print directly
        SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8003448:	f043 0310 	orr.w	r3, r3, #16
 800344c:	b2da      	uxtb	r2, r3
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        cli->onCommand(cli, &command);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f107 020c 	add.w	r2, r7, #12
 800345c:	4611      	mov	r1, r2
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	4798      	blx	r3
        UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8003468:	f023 0310 	bic.w	r3, r3, #16
 800346c:	b2da      	uxtb	r2, r3
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8003474:	e007      	b.n	8003486 <parseCommand+0x246>
    } else {
        onUnknownCommand(cli, cmdName);
 8003476:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 fe5f 	bl	800413c <onUnknownCommand>
 800347e:	e002      	b.n	8003486 <parseCommand+0x246>
        return;
 8003480:	bf00      	nop
 8003482:	e000      	b.n	8003486 <parseCommand+0x246>
        return;
 8003484:	bf00      	nop
    }
}
 8003486:	373c      	adds	r7, #60	@ 0x3c
 8003488:	46bd      	mov	sp, r7
 800348a:	bd90      	pop	{r4, r7, pc}
 800348c:	0801360c 	.word	0x0801360c
 8003490:	08013610 	.word	0x08013610

08003494 <printBindingHelp>:

static void printBindingHelp(EmbeddedCli *cli, CliCommandBinding *binding) {
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
    if (binding->help != NULL) {
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d010      	beq.n	80034c8 <printBindingHelp+0x34>
        cli->writeChar(cli, '\t');
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2109      	movs	r1, #9
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	4798      	blx	r3
        writeToOutput(cli, binding->help);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	4619      	mov	r1, r3
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f9f3 	bl	80038a2 <writeToOutput>
        writeToOutput(cli, lineBreak);
 80034bc:	4b04      	ldr	r3, [pc, #16]	@ (80034d0 <printBindingHelp+0x3c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4619      	mov	r1, r3
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f9ed 	bl	80038a2 <writeToOutput>
    }
}
 80034c8:	bf00      	nop
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	2400006c 	.word	0x2400006c

080034d4 <getAutocompletedCommand>:

static AutocompletedCommand getAutocompletedCommand(EmbeddedCli *cli, const char *prefix) {
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08e      	sub	sp, #56	@ 0x38
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
    AutocompletedCommand cmd = {NULL, 0, 0};
 80034e0:	2300      	movs	r3, #0
 80034e2:	613b      	str	r3, [r7, #16]
 80034e4:	2300      	movs	r3, #0
 80034e6:	82bb      	strh	r3, [r7, #20]
 80034e8:	2300      	movs	r3, #0
 80034ea:	82fb      	strh	r3, [r7, #22]

    size_t prefixLen = strlen(prefix);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7fc ff01 	bl	80002f4 <strlen>
 80034f2:	6278      	str	r0, [r7, #36]	@ 0x24

    PREPARE_IMPL(cli);
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	623b      	str	r3, [r7, #32]
    if (impl->bindingsCount == 0 || prefixLen == 0)
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d002      	beq.n	8003508 <getAutocompletedCommand+0x34>
 8003502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003504:	2b00      	cmp	r3, #0
 8003506:	d108      	bne.n	800351a <getAutocompletedCommand+0x46>
        return cmd;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	461a      	mov	r2, r3
 800350c:	f107 0310 	add.w	r3, r7, #16
 8003510:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003514:	e882 0003 	stmia.w	r2, {r0, r1}
 8003518:	e095      	b.n	8003646 <getAutocompletedCommand+0x172>


    for (int i = 0; i < impl->bindingsCount; ++i) {
 800351a:	2300      	movs	r3, #0
 800351c:	637b      	str	r3, [r7, #52]	@ 0x34
 800351e:	e083      	b.n	8003628 <getAutocompletedCommand+0x154>
        const char *name = impl->bindings[i].name;
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003524:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003526:	4613      	mov	r3, r2
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	4413      	add	r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	440b      	add	r3, r1
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	61fb      	str	r3, [r7, #28]
        size_t len = strlen(name);
 8003534:	69f8      	ldr	r0, [r7, #28]
 8003536:	f7fc fedd 	bl	80002f4 <strlen>
 800353a:	61b8      	str	r0, [r7, #24]

        // unset autocomplete flag
        UNSET_U8FLAG(impl->bindingsFlags[i], BINDING_FLAG_AUTOCOMPLETE);
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003542:	4413      	add	r3, r2
 8003544:	781a      	ldrb	r2, [r3, #0]
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800354a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800354c:	440b      	add	r3, r1
 800354e:	f022 0201 	bic.w	r2, r2, #1
 8003552:	b2d2      	uxtb	r2, r2
 8003554:	701a      	strb	r2, [r3, #0]

        if (len < prefixLen)
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355a:	429a      	cmp	r2, r3
 800355c:	d35e      	bcc.n	800361c <getAutocompletedCommand+0x148>
            continue;

        // check if this command is candidate for autocomplete
        bool isCandidate = true;
 800355e:	2301      	movs	r3, #1
 8003560:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        for (size_t j = 0; j < prefixLen; ++j) {
 8003564:	2300      	movs	r3, #0
 8003566:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003568:	e010      	b.n	800358c <getAutocompletedCommand+0xb8>
            if (prefix[j] != name[j]) {
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800356e:	4413      	add	r3, r2
 8003570:	781a      	ldrb	r2, [r3, #0]
 8003572:	69f9      	ldr	r1, [r7, #28]
 8003574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003576:	440b      	add	r3, r1
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	429a      	cmp	r2, r3
 800357c:	d003      	beq.n	8003586 <getAutocompletedCommand+0xb2>
                isCandidate = false;
 800357e:	2300      	movs	r3, #0
 8003580:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                break;
 8003584:	e006      	b.n	8003594 <getAutocompletedCommand+0xc0>
        for (size_t j = 0; j < prefixLen; ++j) {
 8003586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003588:	3301      	adds	r3, #1
 800358a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800358c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800358e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003590:	429a      	cmp	r2, r3
 8003592:	d3ea      	bcc.n	800356a <getAutocompletedCommand+0x96>
            }
        }
        if (!isCandidate)
 8003594:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003598:	f083 0301 	eor.w	r3, r3, #1
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d13e      	bne.n	8003620 <getAutocompletedCommand+0x14c>
            continue;

        impl->bindingsFlags[i] |= BINDING_FLAG_AUTOCOMPLETE;
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035a8:	4413      	add	r3, r2
 80035aa:	781a      	ldrb	r2, [r3, #0]
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80035b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035b2:	440b      	add	r3, r1
 80035b4:	f042 0201 	orr.w	r2, r2, #1
 80035b8:	b2d2      	uxtb	r2, r2
 80035ba:	701a      	strb	r2, [r3, #0]

        if (cmd.candidateCount == 0 || len < cmd.autocompletedLen)
 80035bc:	8afb      	ldrh	r3, [r7, #22]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d004      	beq.n	80035cc <getAutocompletedCommand+0xf8>
 80035c2:	8abb      	ldrh	r3, [r7, #20]
 80035c4:	461a      	mov	r2, r3
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d202      	bcs.n	80035d2 <getAutocompletedCommand+0xfe>
            cmd.autocompletedLen = (uint16_t) len;
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	82bb      	strh	r3, [r7, #20]

        ++cmd.candidateCount;
 80035d2:	8afb      	ldrh	r3, [r7, #22]
 80035d4:	3301      	adds	r3, #1
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	82fb      	strh	r3, [r7, #22]

        if (cmd.candidateCount == 1) {
 80035da:	8afb      	ldrh	r3, [r7, #22]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d102      	bne.n	80035e6 <getAutocompletedCommand+0x112>
            cmd.firstCandidate = name;
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	613b      	str	r3, [r7, #16]
            continue;
 80035e4:	e01d      	b.n	8003622 <getAutocompletedCommand+0x14e>
        }

        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	8c1b      	ldrh	r3, [r3, #32]
 80035ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035ec:	e010      	b.n	8003610 <getAutocompletedCommand+0x13c>
            if (cmd.firstCandidate[j] != name[j]) {
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f2:	4413      	add	r3, r2
 80035f4:	781a      	ldrb	r2, [r3, #0]
 80035f6:	69f9      	ldr	r1, [r7, #28]
 80035f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035fa:	440b      	add	r3, r1
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d003      	beq.n	800360a <getAutocompletedCommand+0x136>
                cmd.autocompletedLen = (uint16_t) j;
 8003602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003604:	b29b      	uxth	r3, r3
 8003606:	82bb      	strh	r3, [r7, #20]
                break;
 8003608:	e00b      	b.n	8003622 <getAutocompletedCommand+0x14e>
        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 800360a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800360c:	3301      	adds	r3, #1
 800360e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003610:	8abb      	ldrh	r3, [r7, #20]
 8003612:	461a      	mov	r2, r3
 8003614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003616:	4293      	cmp	r3, r2
 8003618:	d3e9      	bcc.n	80035ee <getAutocompletedCommand+0x11a>
 800361a:	e002      	b.n	8003622 <getAutocompletedCommand+0x14e>
            continue;
 800361c:	bf00      	nop
 800361e:	e000      	b.n	8003622 <getAutocompletedCommand+0x14e>
            continue;
 8003620:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8003622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003624:	3301      	adds	r3, #1
 8003626:	637b      	str	r3, [r7, #52]	@ 0x34
 8003628:	6a3b      	ldr	r3, [r7, #32]
 800362a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800362c:	461a      	mov	r2, r3
 800362e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003630:	4293      	cmp	r3, r2
 8003632:	f6ff af75 	blt.w	8003520 <getAutocompletedCommand+0x4c>
            }
        }
    }

    return cmd;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	461a      	mov	r2, r3
 800363a:	f107 0310 	add.w	r3, r7, #16
 800363e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003642:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	3738      	adds	r7, #56	@ 0x38
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <printLiveAutocompletion>:

static void printLiveAutocompletion(EmbeddedCli *cli) {
 8003650:	b580      	push	{r7, lr}
 8003652:	b088      	sub	sp, #32
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	617b      	str	r3, [r7, #20]

    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED))
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8003664:	f003 0320 	and.w	r3, r3, #32
 8003668:	2b00      	cmp	r3, #0
 800366a:	d04a      	beq.n	8003702 <printLiveAutocompletion+0xb2>
        return;

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	69da      	ldr	r2, [r3, #28]
 8003670:	f107 030c 	add.w	r3, r7, #12
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff ff2c 	bl	80034d4 <getAutocompletedCommand>

    if (cmd.candidateCount == 0) {
 800367c:	8a7b      	ldrh	r3, [r7, #18]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d102      	bne.n	8003688 <printLiveAutocompletion+0x38>
        cmd.autocompletedLen = impl->cmdSize;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	8c1b      	ldrh	r3, [r3, #32]
 8003686:	823b      	strh	r3, [r7, #16]
    }

    // save cursor location
    writeToOutput(cli, escSeqCursorSave);
 8003688:	4b20      	ldr	r3, [pc, #128]	@ (800370c <printLiveAutocompletion+0xbc>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4619      	mov	r1, r3
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f907 	bl	80038a2 <writeToOutput>

    moveCursor(cli, impl->cursorPos, CURSOR_DIRECTION_FORWARD);
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8003698:	2201      	movs	r2, #1
 800369a:	4619      	mov	r1, r3
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f921 	bl	80038e4 <moveCursor>

    // print live autocompletion (or nothing, if it doesn't exist)
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	8c1b      	ldrh	r3, [r3, #32]
 80036a6:	61fb      	str	r3, [r7, #28]
 80036a8:	e00b      	b.n	80036c2 <printLiveAutocompletion+0x72>
        cli->writeChar(cli, cmd.firstCandidate[i]);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68f9      	ldr	r1, [r7, #12]
 80036b0:	69fa      	ldr	r2, [r7, #28]
 80036b2:	440a      	add	r2, r1
 80036b4:	7812      	ldrb	r2, [r2, #0]
 80036b6:	4611      	mov	r1, r2
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	4798      	blx	r3
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	3301      	adds	r3, #1
 80036c0:	61fb      	str	r3, [r7, #28]
 80036c2:	8a3b      	ldrh	r3, [r7, #16]
 80036c4:	461a      	mov	r2, r3
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d3ee      	bcc.n	80036aa <printLiveAutocompletion+0x5a>
    }
    // replace with spaces previous autocompletion
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 80036cc:	8a3b      	ldrh	r3, [r7, #16]
 80036ce:	61bb      	str	r3, [r7, #24]
 80036d0:	e007      	b.n	80036e2 <printLiveAutocompletion+0x92>
        cli->writeChar(cli, ' ');
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2120      	movs	r1, #32
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	4798      	blx	r3
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	3301      	adds	r3, #1
 80036e0:	61bb      	str	r3, [r7, #24]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80036e6:	461a      	mov	r2, r3
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d3f1      	bcc.n	80036d2 <printLiveAutocompletion+0x82>
    }
    impl->inputLineLength = cmd.autocompletedLen;
 80036ee:	8a3a      	ldrh	r2, [r7, #16]
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	861a      	strh	r2, [r3, #48]	@ 0x30

    // restore cursor
    writeToOutput(cli, escSeqCursorRestore);
 80036f4:	4b06      	ldr	r3, [pc, #24]	@ (8003710 <printLiveAutocompletion+0xc0>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4619      	mov	r1, r3
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f8d1 	bl	80038a2 <writeToOutput>
 8003700:	e000      	b.n	8003704 <printLiveAutocompletion+0xb4>
        return;
 8003702:	bf00      	nop
}
 8003704:	3720      	adds	r7, #32
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	24000078 	.word	0x24000078
 8003710:	2400007c 	.word	0x2400007c

08003714 <onAutocompleteRequest>:

static void onAutocompleteRequest(EmbeddedCli *cli) {
 8003714:	b580      	push	{r7, lr}
 8003716:	b088      	sub	sp, #32
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	61bb      	str	r3, [r7, #24]

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	69da      	ldr	r2, [r3, #28]
 8003726:	f107 030c 	add.w	r3, r7, #12
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff fed1 	bl	80034d4 <getAutocompletedCommand>

    if (cmd.candidateCount == 0)
 8003732:	8a7b      	ldrh	r3, [r7, #18]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d078      	beq.n	800382a <onAutocompleteRequest+0x116>
        return;

    if (cmd.candidateCount == 1 || cmd.autocompletedLen > impl->cmdSize) {
 8003738:	8a7b      	ldrh	r3, [r7, #18]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d004      	beq.n	8003748 <onAutocompleteRequest+0x34>
 800373e:	8a3a      	ldrh	r2, [r7, #16]
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	8c1b      	ldrh	r3, [r3, #32]
 8003744:	429a      	cmp	r2, r3
 8003746:	d931      	bls.n	80037ac <onAutocompleteRequest+0x98>
        // can copy from index cmdSize, but prefix is the same, so copy everything
        memcpy(impl->cmdBuffer, cmd.firstCandidate, cmd.autocompletedLen);
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	68f9      	ldr	r1, [r7, #12]
 800374e:	8a3a      	ldrh	r2, [r7, #16]
 8003750:	4618      	mov	r0, r3
 8003752:	f00e fe04 	bl	801235e <memcpy>
        if (cmd.candidateCount == 1) {
 8003756:	8a7b      	ldrh	r3, [r7, #18]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d109      	bne.n	8003770 <onAutocompleteRequest+0x5c>
            impl->cmdBuffer[cmd.autocompletedLen] = ' ';
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	69db      	ldr	r3, [r3, #28]
 8003760:	8a3a      	ldrh	r2, [r7, #16]
 8003762:	4413      	add	r3, r2
 8003764:	2220      	movs	r2, #32
 8003766:	701a      	strb	r2, [r3, #0]
            ++cmd.autocompletedLen;
 8003768:	8a3b      	ldrh	r3, [r7, #16]
 800376a:	3301      	adds	r3, #1
 800376c:	b29b      	uxth	r3, r3
 800376e:	823b      	strh	r3, [r7, #16]
        }
        impl->cmdBuffer[cmd.autocompletedLen] = '\0';
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	69db      	ldr	r3, [r3, #28]
 8003774:	8a3a      	ldrh	r2, [r7, #16]
 8003776:	4413      	add	r3, r2
 8003778:	2200      	movs	r2, #0
 800377a:	701a      	strb	r2, [r3, #0]

        writeToOutput(cli, &impl->cmdBuffer[impl->cmdSize - impl->cursorPos]);
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	8c12      	ldrh	r2, [r2, #32]
 8003784:	4611      	mov	r1, r2
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	8e92      	ldrh	r2, [r2, #52]	@ 0x34
 800378a:	1a8a      	subs	r2, r1, r2
 800378c:	4413      	add	r3, r2
 800378e:	4619      	mov	r1, r3
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f886 	bl	80038a2 <writeToOutput>
        impl->cmdSize = cmd.autocompletedLen;
 8003796:	8a3a      	ldrh	r2, [r7, #16]
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	841a      	strh	r2, [r3, #32]
        impl->inputLineLength = impl->cmdSize;
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	8c1a      	ldrh	r2, [r3, #32]
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	861a      	strh	r2, [r3, #48]	@ 0x30
        impl->cursorPos = 0; // Cursor has been moved to the end
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	2200      	movs	r2, #0
 80037a8:	869a      	strh	r2, [r3, #52]	@ 0x34
        return;
 80037aa:	e03f      	b.n	800382c <onAutocompleteRequest+0x118>
    }

    // with multiple candidates when we already completed to common prefix
    // we show all candidates and print input again
    // we need to completely clear current line since it begins with invitation
    clearCurrentLine(cli);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f843 	bl	8003838 <clearCurrentLine>

    for (int i = 0; i < impl->bindingsCount; ++i) {
 80037b2:	2300      	movs	r3, #0
 80037b4:	61fb      	str	r3, [r7, #28]
 80037b6:	e021      	b.n	80037fc <onAutocompleteRequest+0xe8>
        // autocomplete flag is set for all candidates by last call to
        // getAutocompletedCommand
        if (!(impl->bindingsFlags[i] & BINDING_FLAG_AUTOCOMPLETE))
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	4413      	add	r3, r2
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d014      	beq.n	80037f4 <onAutocompleteRequest+0xe0>
            continue;

        const char *name = impl->bindings[i].name;
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80037ce:	69fa      	ldr	r2, [r7, #28]
 80037d0:	4613      	mov	r3, r2
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	4413      	add	r3, r2
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	440b      	add	r3, r1
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	617b      	str	r3, [r7, #20]

        writeToOutput(cli, name);
 80037de:	6979      	ldr	r1, [r7, #20]
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f85e 	bl	80038a2 <writeToOutput>
        writeToOutput(cli, lineBreak);
 80037e6:	4b13      	ldr	r3, [pc, #76]	@ (8003834 <onAutocompleteRequest+0x120>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4619      	mov	r1, r3
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f858 	bl	80038a2 <writeToOutput>
 80037f2:	e000      	b.n	80037f6 <onAutocompleteRequest+0xe2>
            continue;
 80037f4:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	3301      	adds	r3, #1
 80037fa:	61fb      	str	r3, [r7, #28]
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003800:	461a      	mov	r2, r3
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	4293      	cmp	r3, r2
 8003806:	dbd7      	blt.n	80037b8 <onAutocompleteRequest+0xa4>
    }

    writeToOutput(cli, impl->invitation);
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4619      	mov	r1, r3
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f847 	bl	80038a2 <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	4619      	mov	r1, r3
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f841 	bl	80038a2 <writeToOutput>

    impl->inputLineLength = impl->cmdSize;
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	8c1a      	ldrh	r2, [r3, #32]
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	861a      	strh	r2, [r3, #48]	@ 0x30
 8003828:	e000      	b.n	800382c <onAutocompleteRequest+0x118>
        return;
 800382a:	bf00      	nop
}
 800382c:	3720      	adds	r7, #32
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	2400006c 	.word	0x2400006c

08003838 <clearCurrentLine>:

static void clearCurrentLine(EmbeddedCli *cli) {
 8003838:	b590      	push	{r4, r7, lr}
 800383a:	b087      	sub	sp, #28
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	613b      	str	r3, [r7, #16]
    size_t len = impl->inputLineLength + strlen(impl->invitation);
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800384a:	461c      	mov	r4, r3
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4618      	mov	r0, r3
 8003852:	f7fc fd4f 	bl	80002f4 <strlen>
 8003856:	4603      	mov	r3, r0
 8003858:	4423      	add	r3, r4
 800385a:	60fb      	str	r3, [r7, #12]

    cli->writeChar(cli, '\r');
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	210d      	movs	r1, #13
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]
 800386a:	e007      	b.n	800387c <clearCurrentLine+0x44>
        cli->writeChar(cli, ' ');
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2120      	movs	r1, #32
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	3301      	adds	r3, #1
 800387a:	617b      	str	r3, [r7, #20]
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	429a      	cmp	r2, r3
 8003882:	d3f3      	bcc.n	800386c <clearCurrentLine+0x34>
    }
    cli->writeChar(cli, '\r');
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	210d      	movs	r1, #13
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	4798      	blx	r3
    impl->inputLineLength = 0;
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	2200      	movs	r2, #0
 8003892:	861a      	strh	r2, [r3, #48]	@ 0x30

    impl->cursorPos = 0;
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	2200      	movs	r2, #0
 8003898:	869a      	strh	r2, [r3, #52]	@ 0x34
}
 800389a:	bf00      	nop
 800389c:	371c      	adds	r7, #28
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd90      	pop	{r4, r7, pc}

080038a2 <writeToOutput>:

static void writeToOutput(EmbeddedCli *cli, const char *str) {
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b084      	sub	sp, #16
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
 80038aa:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 80038ac:	6838      	ldr	r0, [r7, #0]
 80038ae:	f7fc fd21 	bl	80002f4 <strlen>
 80038b2:	60b8      	str	r0, [r7, #8]

    for (size_t i = 0; i < len; ++i) {
 80038b4:	2300      	movs	r3, #0
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	e00b      	b.n	80038d2 <writeToOutput+0x30>
        cli->writeChar(cli, str[i]);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6839      	ldr	r1, [r7, #0]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	440a      	add	r2, r1
 80038c4:	7812      	ldrb	r2, [r2, #0]
 80038c6:	4611      	mov	r1, r2
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	3301      	adds	r3, #1
 80038d0:	60fb      	str	r3, [r7, #12]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d3ef      	bcc.n	80038ba <writeToOutput+0x18>
    }
}
 80038da:	bf00      	nop
 80038dc:	bf00      	nop
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <moveCursor>:

static void moveCursor(EmbeddedCli* cli, uint16_t count, bool direction) {
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	460b      	mov	r3, r1
 80038ee:	807b      	strh	r3, [r7, #2]
 80038f0:	4613      	mov	r3, r2
 80038f2:	707b      	strb	r3, [r7, #1]
    // Check if we need to send any command
    if (count == 0)
 80038f4:	887b      	ldrh	r3, [r7, #2]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d020      	beq.n	800393c <moveCursor+0x58>
        return;

    // 5 = uint16_t max, 3 = escape sequence, 1 = string termination
    char escBuffer[5 + 3 + 1] = { 0 };
 80038fa:	f107 030c 	add.w	r3, r7, #12
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	605a      	str	r2, [r3, #4]
 8003904:	721a      	strb	r2, [r3, #8]
    char dirChar = direction ? escSeqCursorRight[2] : escSeqCursorLeft[2];
 8003906:	787b      	ldrb	r3, [r7, #1]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d004      	beq.n	8003916 <moveCursor+0x32>
 800390c:	4b0d      	ldr	r3, [pc, #52]	@ (8003944 <moveCursor+0x60>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	3302      	adds	r3, #2
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	e003      	b.n	800391e <moveCursor+0x3a>
 8003916:	4b0c      	ldr	r3, [pc, #48]	@ (8003948 <moveCursor+0x64>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	3302      	adds	r3, #2
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	75fb      	strb	r3, [r7, #23]
    sprintf(escBuffer, "\x1B[%u%c", count, dirChar);
 8003920:	887a      	ldrh	r2, [r7, #2]
 8003922:	7dfb      	ldrb	r3, [r7, #23]
 8003924:	f107 000c 	add.w	r0, r7, #12
 8003928:	4908      	ldr	r1, [pc, #32]	@ (800394c <moveCursor+0x68>)
 800392a:	f00e fb3d 	bl	8011fa8 <siprintf>
    writeToOutput(cli, escBuffer);
 800392e:	f107 030c 	add.w	r3, r7, #12
 8003932:	4619      	mov	r1, r3
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7ff ffb4 	bl	80038a2 <writeToOutput>
 800393a:	e000      	b.n	800393e <moveCursor+0x5a>
        return;
 800393c:	bf00      	nop
}
 800393e:	3718      	adds	r7, #24
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	24000070 	.word	0x24000070
 8003948:	24000074 	.word	0x24000074
 800394c:	08013618 	.word	0x08013618

08003950 <isControlChar>:

static bool isControlChar(char c) {
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	4603      	mov	r3, r0
 8003958:	71fb      	strb	r3, [r7, #7]
    return c == '\r' || c == '\n' || c == '\b' || c == '\t' || c == 0x7F;
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	2b0d      	cmp	r3, #13
 800395e:	d00b      	beq.n	8003978 <isControlChar+0x28>
 8003960:	79fb      	ldrb	r3, [r7, #7]
 8003962:	2b0a      	cmp	r3, #10
 8003964:	d008      	beq.n	8003978 <isControlChar+0x28>
 8003966:	79fb      	ldrb	r3, [r7, #7]
 8003968:	2b08      	cmp	r3, #8
 800396a:	d005      	beq.n	8003978 <isControlChar+0x28>
 800396c:	79fb      	ldrb	r3, [r7, #7]
 800396e:	2b09      	cmp	r3, #9
 8003970:	d002      	beq.n	8003978 <isControlChar+0x28>
 8003972:	79fb      	ldrb	r3, [r7, #7]
 8003974:	2b7f      	cmp	r3, #127	@ 0x7f
 8003976:	d101      	bne.n	800397c <isControlChar+0x2c>
 8003978:	2301      	movs	r3, #1
 800397a:	e000      	b.n	800397e <isControlChar+0x2e>
 800397c:	2300      	movs	r3, #0
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	b2db      	uxtb	r3, r3
}
 8003984:	4618      	mov	r0, r3
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <isDisplayableChar>:

static bool isDisplayableChar(char c) {
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	4603      	mov	r3, r0
 8003998:	71fb      	strb	r3, [r7, #7]
    return (c >= 32 && c <= 126);
 800399a:	79fb      	ldrb	r3, [r7, #7]
 800399c:	2b1f      	cmp	r3, #31
 800399e:	d904      	bls.n	80039aa <isDisplayableChar+0x1a>
 80039a0:	79fb      	ldrb	r3, [r7, #7]
 80039a2:	2b7e      	cmp	r3, #126	@ 0x7e
 80039a4:	d801      	bhi.n	80039aa <isDisplayableChar+0x1a>
 80039a6:	2301      	movs	r3, #1
 80039a8:	e000      	b.n	80039ac <isDisplayableChar+0x1c>
 80039aa:	2300      	movs	r3, #0
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	b2db      	uxtb	r3, r3
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <fifoBufAvailable>:

static uint16_t fifoBufAvailable(FifoBuf *buffer) {
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
    if (buffer->back >= buffer->front)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	88da      	ldrh	r2, [r3, #6]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	889b      	ldrh	r3, [r3, #4]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d306      	bcc.n	80039e0 <fifoBufAvailable+0x22>
        return (uint16_t) (buffer->back - buffer->front);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	88da      	ldrh	r2, [r3, #6]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	889b      	ldrh	r3, [r3, #4]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	b29b      	uxth	r3, r3
 80039de:	e009      	b.n	80039f4 <fifoBufAvailable+0x36>
    else
        return (uint16_t) (buffer->size - buffer->front + buffer->back);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	891a      	ldrh	r2, [r3, #8]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	889b      	ldrh	r3, [r3, #4]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	88db      	ldrh	r3, [r3, #6]
 80039f0:	4413      	add	r3, r2
 80039f2:	b29b      	uxth	r3, r3
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <fifoBufPop>:

static char fifoBufPop(FifoBuf *buffer) {
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
    char a = '\0';
 8003a08:	2300      	movs	r3, #0
 8003a0a:	73fb      	strb	r3, [r7, #15]
    if (buffer->front != buffer->back) {
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	889a      	ldrh	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	88db      	ldrh	r3, [r3, #6]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d014      	beq.n	8003a42 <fifoBufPop+0x42>
        a = buffer->buf[buffer->front];
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	8892      	ldrh	r2, [r2, #4]
 8003a20:	4413      	add	r3, r2
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	73fb      	strb	r3, [r7, #15]
        buffer->front = (uint16_t) (buffer->front + 1) % buffer->size;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	889b      	ldrh	r3, [r3, #4]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	8912      	ldrh	r2, [r2, #8]
 8003a32:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a36:	fb01 f202 	mul.w	r2, r1, r2
 8003a3a:	1a9b      	subs	r3, r3, r2
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	809a      	strh	r2, [r3, #4]
    }
    return a;
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3714      	adds	r7, #20
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <fifoBufPush>:

static bool fifoBufPush(FifoBuf *buffer, char a) {
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	70fb      	strb	r3, [r7, #3]
    uint16_t newBack = (uint16_t) (buffer->back + 1) % buffer->size;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	88db      	ldrh	r3, [r3, #6]
 8003a60:	3301      	adds	r3, #1
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	8912      	ldrh	r2, [r2, #8]
 8003a68:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a6c:	fb01 f202 	mul.w	r2, r1, r2
 8003a70:	1a9b      	subs	r3, r3, r2
 8003a72:	81fb      	strh	r3, [r7, #14]
    if (newBack != buffer->front) {
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	889b      	ldrh	r3, [r3, #4]
 8003a78:	89fa      	ldrh	r2, [r7, #14]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d00b      	beq.n	8003a96 <fifoBufPush+0x46>
        buffer->buf[buffer->back] = a;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	88d2      	ldrh	r2, [r2, #6]
 8003a86:	4413      	add	r3, r2
 8003a88:	78fa      	ldrb	r2, [r7, #3]
 8003a8a:	701a      	strb	r2, [r3, #0]
        buffer->back = newBack;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	89fa      	ldrh	r2, [r7, #14]
 8003a90:	80da      	strh	r2, [r3, #6]
        return true;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <fifoBufPush+0x48>
    }
    return false;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <historyPut>:

static bool historyPut(CliHistory *history, const char *str) {
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b088      	sub	sp, #32
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 8003aae:	6838      	ldr	r0, [r7, #0]
 8003ab0:	f7fc fc20 	bl	80002f4 <strlen>
 8003ab4:	61b8      	str	r0, [r7, #24]
    // each item is ended with \0 so, need to have that much space at least
    if (history->bufferSize < len + 1)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	889b      	ldrh	r3, [r3, #4]
 8003aba:	461a      	mov	r2, r3
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d201      	bcs.n	8003ac8 <historyPut+0x24>
        return false;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	e04d      	b.n	8003b64 <historyPut+0xc0>

    // remove str from history (if it's present) so we don't get duplicates
    historyRemove(history, str);
 8003ac8:	6839      	ldr	r1, [r7, #0]
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f86a 	bl	8003ba4 <historyRemove>

    size_t usedSize;
    // remove old items if new one can't fit into buffer
    while (history->itemsCount > 0) {
 8003ad0:	e024      	b.n	8003b1c <historyPut+0x78>
        const char *item = historyGet(history, history->itemsCount);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	891b      	ldrh	r3, [r3, #8]
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f847 	bl	8003b6c <historyGet>
 8003ade:	6178      	str	r0, [r7, #20]
        size_t itemLen = strlen(item);
 8003ae0:	6978      	ldr	r0, [r7, #20]
 8003ae2:	f7fc fc07 	bl	80002f4 <strlen>
 8003ae6:	6138      	str	r0, [r7, #16]
        usedSize = ((size_t) (item - history->buf)) + itemLen + 1;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	461a      	mov	r2, r3
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	4413      	add	r3, r2
 8003af6:	3301      	adds	r3, #1
 8003af8:	61fb      	str	r3, [r7, #28]

        size_t freeSpace = history->bufferSize - usedSize;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	889b      	ldrh	r3, [r3, #4]
 8003afe:	461a      	mov	r2, r3
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	60fb      	str	r3, [r7, #12]

        if (freeSpace >= len + 1)
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d20a      	bcs.n	8003b26 <historyPut+0x82>
            break;

        // space not enough, remove last element
        --history->itemsCount;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	891b      	ldrh	r3, [r3, #8]
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	811a      	strh	r2, [r3, #8]
    while (history->itemsCount > 0) {
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	891b      	ldrh	r3, [r3, #8]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1d6      	bne.n	8003ad2 <historyPut+0x2e>
 8003b24:	e000      	b.n	8003b28 <historyPut+0x84>
            break;
 8003b26:	bf00      	nop
    }
    if (history->itemsCount > 0) {
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	891b      	ldrh	r3, [r3, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00a      	beq.n	8003b46 <historyPut+0xa2>
        // when history not empty, shift elements so new item is first
        memmove(&history->buf[len + 1], history->buf, usedSize);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	3301      	adds	r3, #1
 8003b38:	18d0      	adds	r0, r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	69fa      	ldr	r2, [r7, #28]
 8003b40:	4619      	mov	r1, r3
 8003b42:	f00e fb35 	bl	80121b0 <memmove>
    }
    memcpy(history->buf, str, len + 1);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6818      	ldr	r0, [r3, #0]
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	461a      	mov	r2, r3
 8003b50:	6839      	ldr	r1, [r7, #0]
 8003b52:	f00e fc04 	bl	801235e <memcpy>
    ++history->itemsCount;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	891b      	ldrh	r3, [r3, #8]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	811a      	strh	r2, [r3, #8]

    return true;
 8003b62:	2301      	movs	r3, #1
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3720      	adds	r7, #32
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <historyGet>:

static const char *historyGet(CliHistory *history, uint16_t item) {
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	460b      	mov	r3, r1
 8003b76:	807b      	strh	r3, [r7, #2]
    if (item == 0 || item > history->itemsCount)
 8003b78:	887b      	ldrh	r3, [r7, #2]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d004      	beq.n	8003b88 <historyGet+0x1c>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	891b      	ldrh	r3, [r3, #8]
 8003b82:	887a      	ldrh	r2, [r7, #2]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d901      	bls.n	8003b8c <historyGet+0x20>
        return NULL;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	e007      	b.n	8003b9c <historyGet+0x30>

    // items are stored in the same way (separated by \0 and counted from 1),
    // so can use this call
    return embeddedCliGetToken(history->buf, item);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	887a      	ldrh	r2, [r7, #2]
 8003b92:	4611      	mov	r1, r2
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7ff f937 	bl	8002e08 <embeddedCliGetToken>
 8003b9a:	4603      	mov	r3, r0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3708      	adds	r7, #8
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <historyRemove>:

static void historyRemove(CliHistory *history, const char *str) {
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
    if (str == NULL || history->itemsCount == 0)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d04c      	beq.n	8003c4e <historyRemove+0xaa>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	891b      	ldrh	r3, [r3, #8]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d048      	beq.n	8003c4e <historyRemove+0xaa>
        return;
    char *item = NULL;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	617b      	str	r3, [r7, #20]
    uint16_t itemPosition;
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	827b      	strh	r3, [r7, #18]
 8003bc4:	e013      	b.n	8003bee <historyRemove+0x4a>
        // items are stored in the same way (separated by \0 and counted from 1),
        // so can use this call
        item = embeddedCliGetTokenVariable(history->buf, itemPosition);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	8a7a      	ldrh	r2, [r7, #18]
 8003bcc:	4611      	mov	r1, r2
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff f935 	bl	8002e3e <embeddedCliGetTokenVariable>
 8003bd4:	6178      	str	r0, [r7, #20]
        if (strcmp(item, str) == 0) {
 8003bd6:	6839      	ldr	r1, [r7, #0]
 8003bd8:	6978      	ldr	r0, [r7, #20]
 8003bda:	f7fc fb81 	bl	80002e0 <strcmp>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00a      	beq.n	8003bfa <historyRemove+0x56>
            break;
        }
        item = NULL;
 8003be4:	2300      	movs	r3, #0
 8003be6:	617b      	str	r3, [r7, #20]
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 8003be8:	8a7b      	ldrh	r3, [r7, #18]
 8003bea:	3301      	adds	r3, #1
 8003bec:	827b      	strh	r3, [r7, #18]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	891b      	ldrh	r3, [r3, #8]
 8003bf2:	8a7a      	ldrh	r2, [r7, #18]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d9e6      	bls.n	8003bc6 <historyRemove+0x22>
 8003bf8:	e000      	b.n	8003bfc <historyRemove+0x58>
            break;
 8003bfa:	bf00      	nop
    }
    if (item == NULL)
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d027      	beq.n	8003c52 <historyRemove+0xae>
        return;

    --history->itemsCount;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	891b      	ldrh	r3, [r3, #8]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	811a      	strh	r2, [r3, #8]
    if (itemPosition == (history->itemsCount + 1)) {
 8003c0e:	8a7a      	ldrh	r2, [r7, #18]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	891b      	ldrh	r3, [r3, #8]
 8003c14:	3301      	adds	r3, #1
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d01d      	beq.n	8003c56 <historyRemove+0xb2>
        // if this is a last element, nothing is remaining to move
        return;
    }

    size_t len = strlen(item);
 8003c1a:	6978      	ldr	r0, [r7, #20]
 8003c1c:	f7fc fb6a 	bl	80002f4 <strlen>
 8003c20:	60f8      	str	r0, [r7, #12]
    size_t remaining = (size_t) (history->bufferSize - (item + len + 1 - history->buf));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	889b      	ldrh	r3, [r3, #4]
 8003c26:	4619      	mov	r1, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	441a      	add	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	1acb      	subs	r3, r1, r3
 8003c38:	60bb      	str	r3, [r7, #8]
    // move everything to the right of found item
    memmove(item, &item[len + 1], remaining);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	4413      	add	r3, r2
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	4619      	mov	r1, r3
 8003c46:	6978      	ldr	r0, [r7, #20]
 8003c48:	f00e fab2 	bl	80121b0 <memmove>
 8003c4c:	e004      	b.n	8003c58 <historyRemove+0xb4>
        return;
 8003c4e:	bf00      	nop
 8003c50:	e002      	b.n	8003c58 <historyRemove+0xb4>
        return;
 8003c52:	bf00      	nop
 8003c54:	e000      	b.n	8003c58 <historyRemove+0xb4>
        return;
 8003c56:	bf00      	nop
}
 8003c58:	3718      	adds	r7, #24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <getTokenPosition>:

static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos) {
 8003c5e:	b480      	push	{r7}
 8003c60:	b085      	sub	sp, #20
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
 8003c66:	460b      	mov	r3, r1
 8003c68:	807b      	strh	r3, [r7, #2]
    if (tokenizedStr == NULL || pos == 0)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <getTokenPosition+0x18>
 8003c70:	887b      	ldrh	r3, [r7, #2]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d102      	bne.n	8003c7c <getTokenPosition+0x1e>
        return CLI_TOKEN_NPOS;
 8003c76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c7a:	e028      	b.n	8003cce <getTokenPosition+0x70>
    uint16_t i = 0;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	81fb      	strh	r3, [r7, #14]
    uint16_t tokenCount = 1;
 8003c80:	2301      	movs	r3, #1
 8003c82:	81bb      	strh	r3, [r7, #12]
    while (true) {
        if (tokenCount == pos)
 8003c84:	89ba      	ldrh	r2, [r7, #12]
 8003c86:	887b      	ldrh	r3, [r7, #2]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d013      	beq.n	8003cb4 <getTokenPosition+0x56>
            break;

        if (tokenizedStr[i] == '\0') {
 8003c8c:	89fb      	ldrh	r3, [r7, #14]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	4413      	add	r3, r2
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d109      	bne.n	8003cac <getTokenPosition+0x4e>
            ++tokenCount;
 8003c98:	89bb      	ldrh	r3, [r7, #12]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	81bb      	strh	r3, [r7, #12]
            if (tokenizedStr[i + 1] == '\0')
 8003c9e:	89fb      	ldrh	r3, [r7, #14]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d005      	beq.n	8003cb8 <getTokenPosition+0x5a>
                break;
        }

        ++i;
 8003cac:	89fb      	ldrh	r3, [r7, #14]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	81fb      	strh	r3, [r7, #14]
        if (tokenCount == pos)
 8003cb2:	e7e7      	b.n	8003c84 <getTokenPosition+0x26>
            break;
 8003cb4:	bf00      	nop
 8003cb6:	e000      	b.n	8003cba <getTokenPosition+0x5c>
                break;
 8003cb8:	bf00      	nop
    }

    if (tokenizedStr[i] != '\0')
 8003cba:	89fb      	ldrh	r3, [r7, #14]
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <getTokenPosition+0x6c>
        return i;
 8003cc6:	89fb      	ldrh	r3, [r7, #14]
 8003cc8:	e001      	b.n	8003cce <getTokenPosition+0x70>
    else
        return CLI_TOKEN_NPOS;
 8003cca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <findCategoryIndex>:

/*************************************************
 *                   Helper API                  *
 *************************************************/
static int findCategoryIndex(const char* cat, const char* categories[], int catCount) {
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b086      	sub	sp, #24
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	60f8      	str	r0, [r7, #12]
 8003ce2:	60b9      	str	r1, [r7, #8]
 8003ce4:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < catCount; i++) {
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	617b      	str	r3, [r7, #20]
 8003cea:	e010      	b.n	8003d0e <findCategoryIndex+0x34>
        if (strcmp(cat, categories[i]) == 0) {
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f7fc faf1 	bl	80002e0 <strcmp>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <findCategoryIndex+0x2e>
            return i;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	e008      	b.n	8003d1a <findCategoryIndex+0x40>
    for (int i = 0; i < catCount; i++) {
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	617b      	str	r3, [r7, #20]
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	dbea      	blt.n	8003cec <findCategoryIndex+0x12>
        }
    }
    return -1;
 8003d16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3718      	adds	r7, #24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
	...

08003d24 <printAlignedColumn>:

static void printAlignedColumn(EmbeddedCli *cli, const char *str, int colWidth) {
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
    int len = strlen(str);
 8003d30:	68b8      	ldr	r0, [r7, #8]
 8003d32:	f7fc fadf 	bl	80002f4 <strlen>
 8003d36:	4603      	mov	r3, r0
 8003d38:	613b      	str	r3, [r7, #16]
    writeToOutput(cli, str);
 8003d3a:	68b9      	ldr	r1, [r7, #8]
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f7ff fdb0 	bl	80038a2 <writeToOutput>
    for (int i = 0; i < colWidth - len; i++) {
 8003d42:	2300      	movs	r3, #0
 8003d44:	617b      	str	r3, [r7, #20]
 8003d46:	e006      	b.n	8003d56 <printAlignedColumn+0x32>
        writeToOutput(cli, " ");
 8003d48:	4908      	ldr	r1, [pc, #32]	@ (8003d6c <printAlignedColumn+0x48>)
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f7ff fda9 	bl	80038a2 <writeToOutput>
    for (int i = 0; i < colWidth - len; i++) {
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	3301      	adds	r3, #1
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	dbf2      	blt.n	8003d48 <printAlignedColumn+0x24>
    }
}
 8003d62:	bf00      	nop
 8003d64:	bf00      	nop
 8003d66:	3718      	adds	r7, #24
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	08013604 	.word	0x08013604

08003d70 <CMD_Help>:
void CMD_Help(EmbeddedCli *cli, char *tokens, void *context) {
 8003d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d74:	b095      	sub	sp, #84	@ 0x54
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	60f8      	str	r0, [r7, #12]
 8003d7a:	60b9      	str	r1, [r7, #8]
 8003d7c:	607a      	str	r2, [r7, #4]
    UNUSED(context);
    PREPARE_IMPL(cli);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	637b      	str	r3, [r7, #52]	@ 0x34

    if (impl->bindingsCount == 0) {
 8003d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d86:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10a      	bne.n	8003da2 <CMD_Help+0x32>
        writeToOutput(cli, "Help is not available");
 8003d8c:	498c      	ldr	r1, [pc, #560]	@ (8003fc0 <CMD_Help+0x250>)
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f7ff fd87 	bl	80038a2 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8003d94:	4b8b      	ldr	r3, [pc, #556]	@ (8003fc4 <CMD_Help+0x254>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4619      	mov	r1, r3
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f7ff fd81 	bl	80038a2 <writeToOutput>
        return;
 8003da0:	e1ba      	b.n	8004118 <CMD_Help+0x3a8>
    }

    uint16_t tokenCount = embeddedCliGetTokenCount(tokens);
 8003da2:	68b8      	ldr	r0, [r7, #8]
 8003da4:	f7ff f866 	bl	8002e74 <embeddedCliGetTokenCount>
 8003da8:	4603      	mov	r3, r0
 8003daa:	867b      	strh	r3, [r7, #50]	@ 0x32
    if (tokenCount == 0) {
 8003dac:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f040 80f6 	bne.w	8003fa0 <CMD_Help+0x230>
 8003db4:	466b      	mov	r3, sp
 8003db6:	461e      	mov	r6, r3
        const int MAX_CAT = 32;
 8003db8:	2320      	movs	r3, #32
 8003dba:	62bb      	str	r3, [r7, #40]	@ 0x28
        const char* categories[MAX_CAT];
 8003dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	4698      	mov	r8, r3
 8003dc8:	4691      	mov	r9, r2
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	f04f 0300 	mov.w	r3, #0
 8003dd2:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8003dd6:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8003dda:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8003dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de0:	2200      	movs	r2, #0
 8003de2:	461c      	mov	r4, r3
 8003de4:	4615      	mov	r5, r2
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	f04f 0300 	mov.w	r3, #0
 8003dee:	016b      	lsls	r3, r5, #5
 8003df0:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8003df4:	0162      	lsls	r2, r4, #5
 8003df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	3307      	adds	r3, #7
 8003dfc:	08db      	lsrs	r3, r3, #3
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	ebad 0d03 	sub.w	sp, sp, r3
 8003e04:	466b      	mov	r3, sp
 8003e06:	3303      	adds	r3, #3
 8003e08:	089b      	lsrs	r3, r3, #2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	623b      	str	r3, [r7, #32]
        int catCount = 0;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	64fb      	str	r3, [r7, #76]	@ 0x4c

        for (int i = 0; i < impl->bindingsCount; i++) {
 8003e12:	2300      	movs	r3, #0
 8003e14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e16:	e02d      	b.n	8003e74 <CMD_Help+0x104>
            const char* cat = impl->bindings[i].category ? impl->bindings[i].category : "Uncategorized";
 8003e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e1a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003e1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e1e:	4613      	mov	r3, r2
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	4413      	add	r3, r2
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	440b      	add	r3, r1
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d009      	beq.n	8003e42 <CMD_Help+0xd2>
 8003e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e30:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003e32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e34:	4613      	mov	r3, r2
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	4413      	add	r3, r2
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	440b      	add	r3, r1
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	e000      	b.n	8003e44 <CMD_Help+0xd4>
 8003e42:	4b61      	ldr	r3, [pc, #388]	@ (8003fc8 <CMD_Help+0x258>)
 8003e44:	61bb      	str	r3, [r7, #24]
            int idx = findCategoryIndex(cat, categories, catCount);
 8003e46:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e48:	6a39      	ldr	r1, [r7, #32]
 8003e4a:	69b8      	ldr	r0, [r7, #24]
 8003e4c:	f7ff ff45 	bl	8003cda <findCategoryIndex>
 8003e50:	6178      	str	r0, [r7, #20]
            if (idx < 0 && catCount < MAX_CAT) {
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	da0a      	bge.n	8003e6e <CMD_Help+0xfe>
 8003e58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	da06      	bge.n	8003e6e <CMD_Help+0xfe>
                categories[catCount++] = cat;
 8003e60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e62:	1c5a      	adds	r2, r3, #1
 8003e64:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003e66:	6a3a      	ldr	r2, [r7, #32]
 8003e68:	69b9      	ldr	r1, [r7, #24]
 8003e6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (int i = 0; i < impl->bindingsCount; i++) {
 8003e6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e70:	3301      	adds	r3, #1
 8003e72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e76:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e78:	461a      	mov	r2, r3
 8003e7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	dbcb      	blt.n	8003e18 <CMD_Help+0xa8>
            }
        }

        for (int c = 0; c < catCount; c++) {
 8003e80:	2300      	movs	r3, #0
 8003e82:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e84:	e085      	b.n	8003f92 <CMD_Help+0x222>
            writeToOutput(cli, "[");
 8003e86:	4951      	ldr	r1, [pc, #324]	@ (8003fcc <CMD_Help+0x25c>)
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f7ff fd0a 	bl	80038a2 <writeToOutput>
            writeToOutput(cli, categories[c]);
 8003e8e:	6a3b      	ldr	r3, [r7, #32]
 8003e90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e96:	4619      	mov	r1, r3
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f7ff fd02 	bl	80038a2 <writeToOutput>
            writeToOutput(cli, "]");
 8003e9e:	494c      	ldr	r1, [pc, #304]	@ (8003fd0 <CMD_Help+0x260>)
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f7ff fcfe 	bl	80038a2 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8003ea6:	4b47      	ldr	r3, [pc, #284]	@ (8003fc4 <CMD_Help+0x254>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4619      	mov	r1, r3
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f7ff fcf8 	bl	80038a2 <writeToOutput>

            for (int i = 0; i < impl->bindingsCount; i++) {
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003eb6:	e05d      	b.n	8003f74 <CMD_Help+0x204>
                const char* cmdCat = impl->bindings[i].category ? impl->bindings[i].category : "Uncategorized";
 8003eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eba:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003ebc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	4413      	add	r3, r2
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	440b      	add	r3, r1
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d009      	beq.n	8003ee2 <CMD_Help+0x172>
 8003ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ed0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003ed2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	4413      	add	r3, r2
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	440b      	add	r3, r1
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	e000      	b.n	8003ee4 <CMD_Help+0x174>
 8003ee2:	4b39      	ldr	r3, [pc, #228]	@ (8003fc8 <CMD_Help+0x258>)
 8003ee4:	61fb      	str	r3, [r7, #28]
                if (strcmp(cmdCat, categories[c]) == 0) {
 8003ee6:	6a3b      	ldr	r3, [r7, #32]
 8003ee8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eee:	4619      	mov	r1, r3
 8003ef0:	69f8      	ldr	r0, [r7, #28]
 8003ef2:	f7fc f9f5 	bl	80002e0 <strcmp>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d138      	bne.n	8003f6e <CMD_Help+0x1fe>
                	writeToOutput(cli, "    ");
 8003efc:	4935      	ldr	r1, [pc, #212]	@ (8003fd4 <CMD_Help+0x264>)
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f7ff fccf 	bl	80038a2 <writeToOutput>
                	printAlignedColumn(cli, impl->bindings[i].name, CMD_NAME_COL_WIDTH);
 8003f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f06:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003f08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	4413      	add	r3, r2
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	440b      	add	r3, r1
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2210      	movs	r2, #16
 8003f18:	4619      	mov	r1, r3
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f7ff ff02 	bl	8003d24 <printAlignedColumn>
                	writeToOutput(cli, "| ");
 8003f20:	492d      	ldr	r1, [pc, #180]	@ (8003fd8 <CMD_Help+0x268>)
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f7ff fcbd 	bl	80038a2 <writeToOutput>
                	if (impl->bindings[i].help) {
 8003f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f2a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003f2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f2e:	4613      	mov	r3, r2
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	4413      	add	r3, r2
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	440b      	add	r3, r1
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00d      	beq.n	8003f5a <CMD_Help+0x1ea>
                	    writeToOutput(cli, impl->bindings[i].help);
 8003f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f40:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003f42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f44:	4613      	mov	r3, r2
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	4413      	add	r3, r2
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	440b      	add	r3, r1
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	4619      	mov	r1, r3
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f7ff fca5 	bl	80038a2 <writeToOutput>
 8003f58:	e003      	b.n	8003f62 <CMD_Help+0x1f2>
                	} else {
                	    writeToOutput(cli, "(no help)");
 8003f5a:	4920      	ldr	r1, [pc, #128]	@ (8003fdc <CMD_Help+0x26c>)
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f7ff fca0 	bl	80038a2 <writeToOutput>
                	}
                	writeToOutput(cli, lineBreak);
 8003f62:	4b18      	ldr	r3, [pc, #96]	@ (8003fc4 <CMD_Help+0x254>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4619      	mov	r1, r3
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f7ff fc9a 	bl	80038a2 <writeToOutput>
            for (int i = 0; i < impl->bindingsCount; i++) {
 8003f6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f70:	3301      	adds	r3, #1
 8003f72:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f76:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f78:	461a      	mov	r2, r3
 8003f7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	db9b      	blt.n	8003eb8 <CMD_Help+0x148>
                }
            }
            writeToOutput(cli, lineBreak);
 8003f80:	4b10      	ldr	r3, [pc, #64]	@ (8003fc4 <CMD_Help+0x254>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4619      	mov	r1, r3
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f7ff fc8b 	bl	80038a2 <writeToOutput>
        for (int c = 0; c < catCount; c++) {
 8003f8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f8e:	3301      	adds	r3, #1
 8003f90:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f96:	429a      	cmp	r2, r3
 8003f98:	f6ff af75 	blt.w	8003e86 <CMD_Help+0x116>
 8003f9c:	46b5      	mov	sp, r6
 8003f9e:	e0bb      	b.n	8004118 <CMD_Help+0x3a8>
        }
    } else if (tokenCount == 1) {
 8003fa0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	f040 80ae 	bne.w	8004104 <CMD_Help+0x394>
        const char *cmdName = embeddedCliGetToken(tokens, 1);
 8003fa8:	2101      	movs	r1, #1
 8003faa:	68b8      	ldr	r0, [r7, #8]
 8003fac:	f7fe ff2c 	bl	8002e08 <embeddedCliGetToken>
 8003fb0:	62f8      	str	r0, [r7, #44]	@ 0x2c
        bool found = false;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8003fb8:	2300      	movs	r3, #0
 8003fba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003fbc:	e08f      	b.n	80040de <CMD_Help+0x36e>
 8003fbe:	bf00      	nop
 8003fc0:	08013620 	.word	0x08013620
 8003fc4:	2400006c 	.word	0x2400006c
 8003fc8:	08013638 	.word	0x08013638
 8003fcc:	08013648 	.word	0x08013648
 8003fd0:	0801364c 	.word	0x0801364c
 8003fd4:	08013650 	.word	0x08013650
 8003fd8:	08013658 	.word	0x08013658
 8003fdc:	0801365c 	.word	0x0801365c
            if (strcmp(impl->bindings[i].name, cmdName) == 0) {
 8003fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fe2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003fe4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	4413      	add	r3, r2
 8003fec:	00db      	lsls	r3, r3, #3
 8003fee:	440b      	add	r3, r1
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7fc f973 	bl	80002e0 <strcmp>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d16b      	bne.n	80040d8 <CMD_Help+0x368>
                found = true;
 8004000:	2301      	movs	r3, #1
 8004002:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                writeToOutput(cli, "Command: ");
 8004006:	4946      	ldr	r1, [pc, #280]	@ (8004120 <CMD_Help+0x3b0>)
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f7ff fc4a 	bl	80038a2 <writeToOutput>
                writeToOutput(cli, impl->bindings[i].name);
 800400e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004010:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004012:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004014:	4613      	mov	r3, r2
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	4413      	add	r3, r2
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	440b      	add	r3, r1
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	4619      	mov	r1, r3
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f7ff fc3d 	bl	80038a2 <writeToOutput>
                writeToOutput(cli, lineBreak);
 8004028:	4b3e      	ldr	r3, [pc, #248]	@ (8004124 <CMD_Help+0x3b4>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4619      	mov	r1, r3
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f7ff fc37 	bl	80038a2 <writeToOutput>

                writeToOutput(cli, "Category: ");
 8004034:	493c      	ldr	r1, [pc, #240]	@ (8004128 <CMD_Help+0x3b8>)
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f7ff fc33 	bl	80038a2 <writeToOutput>
                writeToOutput(cli, impl->bindings[i].category ? impl->bindings[i].category : "Uncategorized");
 800403c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800403e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004040:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004042:	4613      	mov	r3, r2
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	4413      	add	r3, r2
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	440b      	add	r3, r1
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d009      	beq.n	8004066 <CMD_Help+0x2f6>
 8004052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004054:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004056:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004058:	4613      	mov	r3, r2
 800405a:	005b      	lsls	r3, r3, #1
 800405c:	4413      	add	r3, r2
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	440b      	add	r3, r1
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	e000      	b.n	8004068 <CMD_Help+0x2f8>
 8004066:	4b31      	ldr	r3, [pc, #196]	@ (800412c <CMD_Help+0x3bc>)
 8004068:	4619      	mov	r1, r3
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f7ff fc19 	bl	80038a2 <writeToOutput>
                writeToOutput(cli, lineBreak);
 8004070:	4b2c      	ldr	r3, [pc, #176]	@ (8004124 <CMD_Help+0x3b4>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4619      	mov	r1, r3
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f7ff fc13 	bl	80038a2 <writeToOutput>

                if (impl->bindings[i].help) {
 800407c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800407e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004080:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004082:	4613      	mov	r3, r2
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	4413      	add	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	440b      	add	r3, r1
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d017      	beq.n	80040c2 <CMD_Help+0x352>
                    writeToOutput(cli, "Help: ");
 8004092:	4927      	ldr	r1, [pc, #156]	@ (8004130 <CMD_Help+0x3c0>)
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f7ff fc04 	bl	80038a2 <writeToOutput>
                    writeToOutput(cli, impl->bindings[i].help);
 800409a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800409c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800409e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80040a0:	4613      	mov	r3, r2
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	4413      	add	r3, r2
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	440b      	add	r3, r1
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	4619      	mov	r1, r3
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f7ff fbf7 	bl	80038a2 <writeToOutput>
                    writeToOutput(cli, lineBreak);
 80040b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004124 <CMD_Help+0x3b4>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4619      	mov	r1, r3
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f7ff fbf1 	bl	80038a2 <writeToOutput>
                } else {
                    writeToOutput(cli, "(no help)");
                    writeToOutput(cli, lineBreak);
                }
                break;
 80040c0:	e014      	b.n	80040ec <CMD_Help+0x37c>
                    writeToOutput(cli, "(no help)");
 80040c2:	491c      	ldr	r1, [pc, #112]	@ (8004134 <CMD_Help+0x3c4>)
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f7ff fbec 	bl	80038a2 <writeToOutput>
                    writeToOutput(cli, lineBreak);
 80040ca:	4b16      	ldr	r3, [pc, #88]	@ (8004124 <CMD_Help+0x3b4>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4619      	mov	r1, r3
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f7ff fbe6 	bl	80038a2 <writeToOutput>
                break;
 80040d6:	e009      	b.n	80040ec <CMD_Help+0x37c>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 80040d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040da:	3301      	adds	r3, #1
 80040dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80040e2:	461a      	mov	r2, r3
 80040e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040e6:	4293      	cmp	r3, r2
 80040e8:	f6ff af7a 	blt.w	8003fe0 <CMD_Help+0x270>
            }
        }
        if (!found) {
 80040ec:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80040f0:	f083 0301 	eor.w	r3, r3, #1
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00e      	beq.n	8004118 <CMD_Help+0x3a8>
            onUnknownCommand(cli, cmdName);
 80040fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 f81d 	bl	800413c <onUnknownCommand>
 8004102:	e009      	b.n	8004118 <CMD_Help+0x3a8>
        }
    } else {
        writeToOutput(cli, "Command \"help\" receives one or zero arguments");
 8004104:	490c      	ldr	r1, [pc, #48]	@ (8004138 <CMD_Help+0x3c8>)
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f7ff fbcb 	bl	80038a2 <writeToOutput>
        writeToOutput(cli, lineBreak);
 800410c:	4b05      	ldr	r3, [pc, #20]	@ (8004124 <CMD_Help+0x3b4>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4619      	mov	r1, r3
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f7ff fbc5 	bl	80038a2 <writeToOutput>
    }
}
 8004118:	3754      	adds	r7, #84	@ 0x54
 800411a:	46bd      	mov	sp, r7
 800411c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004120:	08013668 	.word	0x08013668
 8004124:	2400006c 	.word	0x2400006c
 8004128:	08013674 	.word	0x08013674
 800412c:	08013638 	.word	0x08013638
 8004130:	08013680 	.word	0x08013680
 8004134:	0801365c 	.word	0x0801365c
 8004138:	08013688 	.word	0x08013688

0800413c <onUnknownCommand>:

static void onUnknownCommand(EmbeddedCli *cli, const char *name) {
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
    writeToOutput(cli, "Unknown command: \"");
 8004146:	490b      	ldr	r1, [pc, #44]	@ (8004174 <onUnknownCommand+0x38>)
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f7ff fbaa 	bl	80038a2 <writeToOutput>
    writeToOutput(cli, name);
 800414e:	6839      	ldr	r1, [r7, #0]
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f7ff fba6 	bl	80038a2 <writeToOutput>
    writeToOutput(cli, "\". Write \"help\" for a list of available commands");
 8004156:	4908      	ldr	r1, [pc, #32]	@ (8004178 <onUnknownCommand+0x3c>)
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7ff fba2 	bl	80038a2 <writeToOutput>
    writeToOutput(cli, lineBreak);
 800415e:	4b07      	ldr	r3, [pc, #28]	@ (800417c <onUnknownCommand+0x40>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4619      	mov	r1, r3
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7ff fb9c 	bl	80038a2 <writeToOutput>
}
 800416a:	bf00      	nop
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	080136b8 	.word	0x080136b8
 8004178:	080136cc 	.word	0x080136cc
 800417c:	2400006c 	.word	0x2400006c

08004180 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f103 0208 	add.w	r2, r3, #8
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f04f 32ff 	mov.w	r2, #4294967295
 8004198:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f103 0208 	add.w	r2, r3, #8
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f103 0208 	add.w	r2, r3, #8
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80041da:	b480      	push	{r7}
 80041dc:	b085      	sub	sp, #20
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
 80041e2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f0:	d103      	bne.n	80041fa <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	e00c      	b.n	8004214 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	3308      	adds	r3, #8
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	e002      	b.n	8004208 <vListInsert+0x2e>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	429a      	cmp	r2, r3
 8004212:	d2f6      	bcs.n	8004202 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	1c5a      	adds	r2, r3, #1
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8004240:	bf00      	nop
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	6892      	ldr	r2, [r2, #8]
 8004262:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6852      	ldr	r2, [r2, #4]
 800426c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	429a      	cmp	r2, r3
 8004276:	d103      	bne.n	8004280 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	1e5a      	subs	r2, r3, #1
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
}
 8004294:	4618      	mov	r0, r3
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80042aa:	2301      	movs	r3, #1
 80042ac:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10d      	bne.n	80042d4 <xQueueGenericReset+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80042b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042bc:	b672      	cpsid	i
 80042be:	f383 8811 	msr	BASEPRI, r3
 80042c2:	f3bf 8f6f 	isb	sy
 80042c6:	f3bf 8f4f 	dsb	sy
 80042ca:	b662      	cpsie	i
 80042cc:	60fb      	str	r3, [r7, #12]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80042ce:	bf00      	nop
 80042d0:	bf00      	nop
 80042d2:	e7fd      	b.n	80042d0 <xQueueGenericReset+0x30>

    if( ( pxQueue != NULL ) &&
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d05d      	beq.n	8004396 <xQueueGenericReset+0xf6>
        ( pxQueue->uxLength >= 1U ) &&
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d059      	beq.n	8004396 <xQueueGenericReset+0xf6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ea:	2100      	movs	r1, #0
 80042ec:	fba3 2302 	umull	r2, r3, r3, r2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d000      	beq.n	80042f6 <xQueueGenericReset+0x56>
 80042f4:	2101      	movs	r1, #1
 80042f6:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d14c      	bne.n	8004396 <xQueueGenericReset+0xf6>
    {
        taskENTER_CRITICAL();
 80042fc:	f002 ff1a 	bl	8007134 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004308:	6939      	ldr	r1, [r7, #16]
 800430a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800430c:	fb01 f303 	mul.w	r3, r1, r3
 8004310:	441a      	add	r2, r3
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	2200      	movs	r2, #0
 800431a:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800432c:	3b01      	subs	r3, #1
 800432e:	6939      	ldr	r1, [r7, #16]
 8004330:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004332:	fb01 f303 	mul.w	r3, r1, r3
 8004336:	441a      	add	r2, r3
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	22ff      	movs	r2, #255	@ 0xff
 8004340:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	22ff      	movs	r2, #255	@ 0xff
 8004348:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d114      	bne.n	800437c <xQueueGenericReset+0xdc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d01a      	beq.n	8004390 <xQueueGenericReset+0xf0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	3310      	adds	r3, #16
 800435e:	4618      	mov	r0, r3
 8004360:	f001 fdd4 	bl	8005f0c <xTaskRemoveFromEventList>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d012      	beq.n	8004390 <xQueueGenericReset+0xf0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800436a:	4b17      	ldr	r3, [pc, #92]	@ (80043c8 <xQueueGenericReset+0x128>)
 800436c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	f3bf 8f4f 	dsb	sy
 8004376:	f3bf 8f6f 	isb	sy
 800437a:	e009      	b.n	8004390 <xQueueGenericReset+0xf0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	3310      	adds	r3, #16
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff fefd 	bl	8004180 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	3324      	adds	r3, #36	@ 0x24
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff fef8 	bl	8004180 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8004390:	f002 ff06 	bl	80071a0 <vPortExitCritical>
 8004394:	e001      	b.n	800439a <xQueueGenericReset+0xfa>
    }
    else
    {
        xReturn = pdFAIL;
 8004396:	2300      	movs	r3, #0
 8004398:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10d      	bne.n	80043bc <xQueueGenericReset+0x11c>
    __asm volatile
 80043a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a4:	b672      	cpsid	i
 80043a6:	f383 8811 	msr	BASEPRI, r3
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	b662      	cpsie	i
 80043b4:	60bb      	str	r3, [r7, #8]
}
 80043b6:	bf00      	nop
 80043b8:	bf00      	nop
 80043ba:	e7fd      	b.n	80043b8 <xQueueGenericReset+0x118>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 80043bc:	697b      	ldr	r3, [r7, #20]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3718      	adds	r7, #24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	e000ed04 	.word	0xe000ed04

080043cc <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b08c      	sub	sp, #48	@ 0x30
 80043d0:	af02      	add	r7, sp, #8
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
 80043d8:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 80043da:	2300      	movs	r3, #0
 80043dc:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xQueueGenericCreateStatic( uxQueueLength, uxItemSize, pucQueueStorage, pxStaticQueue, ucQueueType );

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d10d      	bne.n	8004400 <xQueueGenericCreateStatic+0x34>
    __asm volatile
 80043e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043e8:	b672      	cpsid	i
 80043ea:	f383 8811 	msr	BASEPRI, r3
 80043ee:	f3bf 8f6f 	isb	sy
 80043f2:	f3bf 8f4f 	dsb	sy
 80043f6:	b662      	cpsie	i
 80043f8:	623b      	str	r3, [r7, #32]
}
 80043fa:	bf00      	nop
 80043fc:	bf00      	nop
 80043fe:	e7fd      	b.n	80043fc <xQueueGenericCreateStatic+0x30>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d033      	beq.n	800446e <xQueueGenericCreateStatic+0xa2>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d030      	beq.n	800446e <xQueueGenericCreateStatic+0xa2>
            ( pxStaticQueue != NULL ) &&
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d002      	beq.n	8004418 <xQueueGenericCreateStatic+0x4c>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0U ) ) ) &&
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d02a      	beq.n	800446e <xQueueGenericCreateStatic+0xa2>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d102      	bne.n	8004424 <xQueueGenericCreateStatic+0x58>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0U ) ) ) )
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d124      	bne.n	800446e <xQueueGenericCreateStatic+0xa2>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 8004424:	2350      	movs	r3, #80	@ 0x50
 8004426:	617b      	str	r3, [r7, #20]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	2b50      	cmp	r3, #80	@ 0x50
 800442c:	d00d      	beq.n	800444a <xQueueGenericCreateStatic+0x7e>
    __asm volatile
 800442e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004432:	b672      	cpsid	i
 8004434:	f383 8811 	msr	BASEPRI, r3
 8004438:	f3bf 8f6f 	isb	sy
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	b662      	cpsie	i
 8004442:	61fb      	str	r3, [r7, #28]
}
 8004444:	bf00      	nop
 8004446:	bf00      	nop
 8004448:	e7fd      	b.n	8004446 <xQueueGenericCreateStatic+0x7a>
                ( void ) xSize;                             /* Prevent unused variable warning when configASSERT() is not defined. */
 800444a:	697b      	ldr	r3, [r7, #20]
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewQueue = ( Queue_t * ) pxStaticQueue;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	627b      	str	r3, [r7, #36]	@ 0x24
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004458:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800445c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	4613      	mov	r3, r2
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	68b9      	ldr	r1, [r7, #8]
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f000 f86c 	bl	8004544 <prvInitialiseNewQueue>
 800446c:	e010      	b.n	8004490 <xQueueGenericCreateStatic+0xc4>
        }
        else
        {
            configASSERT( pxNewQueue );
 800446e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10d      	bne.n	8004490 <xQueueGenericCreateStatic+0xc4>
    __asm volatile
 8004474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004478:	b672      	cpsid	i
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	b662      	cpsie	i
 8004488:	61bb      	str	r3, [r7, #24]
}
 800448a:	bf00      	nop
 800448c:	bf00      	nop
 800448e:	e7fd      	b.n	800448c <xQueueGenericCreateStatic+0xc0>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreateStatic( pxNewQueue );

        return pxNewQueue;
 8004490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8004492:	4618      	mov	r0, r3
 8004494:	3728      	adds	r7, #40	@ 0x28
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800449a:	b580      	push	{r7, lr}
 800449c:	b08a      	sub	sp, #40	@ 0x28
 800449e:	af02      	add	r7, sp, #8
 80044a0:	60f8      	str	r0, [r7, #12]
 80044a2:	60b9      	str	r1, [r7, #8]
 80044a4:	4613      	mov	r3, r2
 80044a6:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80044a8:	2300      	movs	r3, #0
 80044aa:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d032      	beq.n	8004518 <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80044b2:	2100      	movs	r1, #0
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	fba3 2302 	umull	r2, r3, r3, r2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d000      	beq.n	80044c2 <xQueueGenericCreate+0x28>
 80044c0:	2101      	movs	r1, #1
 80044c2:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d127      	bne.n	8004518 <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80044d0:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80044d4:	d820      	bhi.n	8004518 <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	fb02 f303 	mul.w	r3, r2, r3
 80044de:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	3350      	adds	r3, #80	@ 0x50
 80044e4:	4618      	mov	r0, r3
 80044e6:	f002 ff59 	bl	800739c <pvPortMalloc>
 80044ea:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d023      	beq.n	800453a <xQueueGenericCreate+0xa0>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	3350      	adds	r3, #80	@ 0x50
 80044fa:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004504:	79fa      	ldrb	r2, [r7, #7]
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	4613      	mov	r3, r2
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	68b9      	ldr	r1, [r7, #8]
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f000 f817 	bl	8004544 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8004516:	e010      	b.n	800453a <xQueueGenericCreate+0xa0>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10d      	bne.n	800453a <xQueueGenericCreate+0xa0>
    __asm volatile
 800451e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004522:	b672      	cpsid	i
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	b662      	cpsie	i
 8004532:	613b      	str	r3, [r7, #16]
}
 8004534:	bf00      	nop
 8004536:	bf00      	nop
 8004538:	e7fd      	b.n	8004536 <xQueueGenericCreate+0x9c>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 800453a:	69fb      	ldr	r3, [r7, #28]
    }
 800453c:	4618      	mov	r0, r3
 800453e:	3720      	adds	r7, #32
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
 8004550:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d103      	bne.n	8004560 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	e002      	b.n	8004566 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004572:	2101      	movs	r1, #1
 8004574:	69b8      	ldr	r0, [r7, #24]
 8004576:	f7ff fe93 	bl	80042a0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	78fa      	ldrb	r2, [r7, #3]
 800457e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004582:	bf00      	nop
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b08e      	sub	sp, #56	@ 0x38
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
 8004598:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800459a:	2300      	movs	r3, #0
 800459c:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 80045a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10d      	bne.n	80045c4 <xQueueGenericSend+0x38>
    __asm volatile
 80045a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ac:	b672      	cpsid	i
 80045ae:	f383 8811 	msr	BASEPRI, r3
 80045b2:	f3bf 8f6f 	isb	sy
 80045b6:	f3bf 8f4f 	dsb	sy
 80045ba:	b662      	cpsie	i
 80045bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80045be:	bf00      	nop
 80045c0:	bf00      	nop
 80045c2:	e7fd      	b.n	80045c0 <xQueueGenericSend+0x34>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d103      	bne.n	80045d2 <xQueueGenericSend+0x46>
 80045ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <xQueueGenericSend+0x4a>
 80045d2:	2301      	movs	r3, #1
 80045d4:	e000      	b.n	80045d8 <xQueueGenericSend+0x4c>
 80045d6:	2300      	movs	r3, #0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10d      	bne.n	80045f8 <xQueueGenericSend+0x6c>
    __asm volatile
 80045dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e0:	b672      	cpsid	i
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	b662      	cpsie	i
 80045f0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80045f2:	bf00      	nop
 80045f4:	bf00      	nop
 80045f6:	e7fd      	b.n	80045f4 <xQueueGenericSend+0x68>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d103      	bne.n	8004606 <xQueueGenericSend+0x7a>
 80045fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004602:	2b01      	cmp	r3, #1
 8004604:	d101      	bne.n	800460a <xQueueGenericSend+0x7e>
 8004606:	2301      	movs	r3, #1
 8004608:	e000      	b.n	800460c <xQueueGenericSend+0x80>
 800460a:	2300      	movs	r3, #0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10d      	bne.n	800462c <xQueueGenericSend+0xa0>
    __asm volatile
 8004610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004614:	b672      	cpsid	i
 8004616:	f383 8811 	msr	BASEPRI, r3
 800461a:	f3bf 8f6f 	isb	sy
 800461e:	f3bf 8f4f 	dsb	sy
 8004622:	b662      	cpsie	i
 8004624:	623b      	str	r3, [r7, #32]
}
 8004626:	bf00      	nop
 8004628:	bf00      	nop
 800462a:	e7fd      	b.n	8004628 <xQueueGenericSend+0x9c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800462c:	f001 fe9e 	bl	800636c <xTaskGetSchedulerState>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d102      	bne.n	800463c <xQueueGenericSend+0xb0>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <xQueueGenericSend+0xb4>
 800463c:	2301      	movs	r3, #1
 800463e:	e000      	b.n	8004642 <xQueueGenericSend+0xb6>
 8004640:	2300      	movs	r3, #0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10d      	bne.n	8004662 <xQueueGenericSend+0xd6>
    __asm volatile
 8004646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800464a:	b672      	cpsid	i
 800464c:	f383 8811 	msr	BASEPRI, r3
 8004650:	f3bf 8f6f 	isb	sy
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	b662      	cpsie	i
 800465a:	61fb      	str	r3, [r7, #28]
}
 800465c:	bf00      	nop
 800465e:	bf00      	nop
 8004660:	e7fd      	b.n	800465e <xQueueGenericSend+0xd2>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004662:	f002 fd67 	bl	8007134 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004668:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800466a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800466c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800466e:	429a      	cmp	r2, r3
 8004670:	d302      	bcc.n	8004678 <xQueueGenericSend+0xec>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b02      	cmp	r3, #2
 8004676:	d129      	bne.n	80046cc <xQueueGenericSend+0x140>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	68b9      	ldr	r1, [r7, #8]
 800467c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800467e:	f000 fc3e 	bl	8004efe <prvCopyDataToQueue>
 8004682:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004688:	2b00      	cmp	r3, #0
 800468a:	d010      	beq.n	80046ae <xQueueGenericSend+0x122>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800468c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800468e:	3324      	adds	r3, #36	@ 0x24
 8004690:	4618      	mov	r0, r3
 8004692:	f001 fc3b 	bl	8005f0c <xTaskRemoveFromEventList>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d013      	beq.n	80046c4 <xQueueGenericSend+0x138>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800469c:	4b3f      	ldr	r3, [pc, #252]	@ (800479c <xQueueGenericSend+0x210>)
 800469e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	f3bf 8f6f 	isb	sy
 80046ac:	e00a      	b.n	80046c4 <xQueueGenericSend+0x138>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80046ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d007      	beq.n	80046c4 <xQueueGenericSend+0x138>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80046b4:	4b39      	ldr	r3, [pc, #228]	@ (800479c <xQueueGenericSend+0x210>)
 80046b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80046c4:	f002 fd6c 	bl	80071a0 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e063      	b.n	8004794 <xQueueGenericSend+0x208>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d103      	bne.n	80046da <xQueueGenericSend+0x14e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80046d2:	f002 fd65 	bl	80071a0 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 80046d6:	2300      	movs	r3, #0
 80046d8:	e05c      	b.n	8004794 <xQueueGenericSend+0x208>
                }
                else if( xEntryTimeSet == pdFALSE )
 80046da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d106      	bne.n	80046ee <xQueueGenericSend+0x162>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80046e0:	f107 0314 	add.w	r3, r7, #20
 80046e4:	4618      	mov	r0, r3
 80046e6:	f001 fced 	bl	80060c4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80046ea:	2301      	movs	r3, #1
 80046ec:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80046ee:	f002 fd57 	bl	80071a0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80046f2:	f001 f8d9 	bl	80058a8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80046f6:	f002 fd1d 	bl	8007134 <vPortEnterCritical>
 80046fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004700:	b25b      	sxtb	r3, r3
 8004702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004706:	d103      	bne.n	8004710 <xQueueGenericSend+0x184>
 8004708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004712:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004716:	b25b      	sxtb	r3, r3
 8004718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471c:	d103      	bne.n	8004726 <xQueueGenericSend+0x19a>
 800471e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004720:	2200      	movs	r2, #0
 8004722:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004726:	f002 fd3b 	bl	80071a0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800472a:	1d3a      	adds	r2, r7, #4
 800472c:	f107 0314 	add.w	r3, r7, #20
 8004730:	4611      	mov	r1, r2
 8004732:	4618      	mov	r0, r3
 8004734:	f001 fcdc 	bl	80060f0 <xTaskCheckForTimeOut>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d124      	bne.n	8004788 <xQueueGenericSend+0x1fc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800473e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004740:	f000 fcd5 	bl	80050ee <prvIsQueueFull>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d018      	beq.n	800477c <xQueueGenericSend+0x1f0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800474a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800474c:	3310      	adds	r3, #16
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	4611      	mov	r1, r2
 8004752:	4618      	mov	r0, r3
 8004754:	f001 fb6a 	bl	8005e2c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004758:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800475a:	f000 fc60 	bl	800501e <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800475e:	f001 f8b1 	bl	80058c4 <xTaskResumeAll>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	f47f af7c 	bne.w	8004662 <xQueueGenericSend+0xd6>
                {
                    taskYIELD_WITHIN_API();
 800476a:	4b0c      	ldr	r3, [pc, #48]	@ (800479c <xQueueGenericSend+0x210>)
 800476c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	f3bf 8f4f 	dsb	sy
 8004776:	f3bf 8f6f 	isb	sy
 800477a:	e772      	b.n	8004662 <xQueueGenericSend+0xd6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800477c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800477e:	f000 fc4e 	bl	800501e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004782:	f001 f89f 	bl	80058c4 <xTaskResumeAll>
 8004786:	e76c      	b.n	8004662 <xQueueGenericSend+0xd6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004788:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800478a:	f000 fc48 	bl	800501e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800478e:	f001 f899 	bl	80058c4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 8004792:	2300      	movs	r3, #0
        }
    }
}
 8004794:	4618      	mov	r0, r3
 8004796:	3738      	adds	r7, #56	@ 0x38
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	e000ed04 	.word	0xe000ed04

080047a0 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b092      	sub	sp, #72	@ 0x48
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
 80047ac:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	643b      	str	r3, [r7, #64]	@ 0x40

    traceENTER_xQueueGenericSendFromISR( xQueue, pvItemToQueue, pxHigherPriorityTaskWoken, xCopyPosition );

    configASSERT( pxQueue );
 80047b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10d      	bne.n	80047d4 <xQueueGenericSendFromISR+0x34>
    __asm volatile
 80047b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047bc:	b672      	cpsid	i
 80047be:	f383 8811 	msr	BASEPRI, r3
 80047c2:	f3bf 8f6f 	isb	sy
 80047c6:	f3bf 8f4f 	dsb	sy
 80047ca:	b662      	cpsie	i
 80047cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
 80047ce:	bf00      	nop
 80047d0:	bf00      	nop
 80047d2:	e7fd      	b.n	80047d0 <xQueueGenericSendFromISR+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d103      	bne.n	80047e2 <xQueueGenericSendFromISR+0x42>
 80047da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <xQueueGenericSendFromISR+0x46>
 80047e2:	2301      	movs	r3, #1
 80047e4:	e000      	b.n	80047e8 <xQueueGenericSendFromISR+0x48>
 80047e6:	2300      	movs	r3, #0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10d      	bne.n	8004808 <xQueueGenericSendFromISR+0x68>
    __asm volatile
 80047ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f0:	b672      	cpsid	i
 80047f2:	f383 8811 	msr	BASEPRI, r3
 80047f6:	f3bf 8f6f 	isb	sy
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	b662      	cpsie	i
 8004800:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004802:	bf00      	nop
 8004804:	bf00      	nop
 8004806:	e7fd      	b.n	8004804 <xQueueGenericSendFromISR+0x64>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	2b02      	cmp	r3, #2
 800480c:	d103      	bne.n	8004816 <xQueueGenericSendFromISR+0x76>
 800480e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004812:	2b01      	cmp	r3, #1
 8004814:	d101      	bne.n	800481a <xQueueGenericSendFromISR+0x7a>
 8004816:	2301      	movs	r3, #1
 8004818:	e000      	b.n	800481c <xQueueGenericSendFromISR+0x7c>
 800481a:	2300      	movs	r3, #0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10d      	bne.n	800483c <xQueueGenericSendFromISR+0x9c>
    __asm volatile
 8004820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004824:	b672      	cpsid	i
 8004826:	f383 8811 	msr	BASEPRI, r3
 800482a:	f3bf 8f6f 	isb	sy
 800482e:	f3bf 8f4f 	dsb	sy
 8004832:	b662      	cpsie	i
 8004834:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004836:	bf00      	nop
 8004838:	bf00      	nop
 800483a:	e7fd      	b.n	8004838 <xQueueGenericSendFromISR+0x98>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800483c:	f002 fd68 	bl	8007310 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8004840:	f3ef 8211 	mrs	r2, BASEPRI
 8004844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004848:	b672      	cpsid	i
 800484a:	f383 8811 	msr	BASEPRI, r3
 800484e:	f3bf 8f6f 	isb	sy
 8004852:	f3bf 8f4f 	dsb	sy
 8004856:	b662      	cpsie	i
 8004858:	623a      	str	r2, [r7, #32]
 800485a:	61fb      	str	r3, [r7, #28]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 800485c:	6a3b      	ldr	r3, [r7, #32]
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 800485e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004860:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004862:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004864:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004868:	429a      	cmp	r2, r3
 800486a:	d302      	bcc.n	8004872 <xQueueGenericSendFromISR+0xd2>
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	2b02      	cmp	r3, #2
 8004870:	d149      	bne.n	8004906 <xQueueGenericSendFromISR+0x166>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004872:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004874:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004878:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800487c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800487e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004880:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	68b9      	ldr	r1, [r7, #8]
 8004886:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8004888:	f000 fb39 	bl	8004efe <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800488c:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8004890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004894:	d112      	bne.n	80048bc <xQueueGenericSendFromISR+0x11c>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004896:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489a:	2b00      	cmp	r3, #0
 800489c:	d030      	beq.n	8004900 <xQueueGenericSendFromISR+0x160>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800489e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048a0:	3324      	adds	r3, #36	@ 0x24
 80048a2:	4618      	mov	r0, r3
 80048a4:	f001 fb32 	bl	8005f0c <xTaskRemoveFromEventList>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d028      	beq.n	8004900 <xQueueGenericSendFromISR+0x160>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d025      	beq.n	8004900 <xQueueGenericSendFromISR+0x160>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	e021      	b.n	8004900 <xQueueGenericSendFromISR+0x160>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 80048bc:	f001 f92e 	bl	8005b1c <uxTaskGetNumberOfTasks>
 80048c0:	6338      	str	r0, [r7, #48]	@ 0x30
 80048c2:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 80048c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d919      	bls.n	8004900 <xQueueGenericSendFromISR+0x160>
 80048cc:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 80048d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80048d2:	d10d      	bne.n	80048f0 <xQueueGenericSendFromISR+0x150>
    __asm volatile
 80048d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d8:	b672      	cpsid	i
 80048da:	f383 8811 	msr	BASEPRI, r3
 80048de:	f3bf 8f6f 	isb	sy
 80048e2:	f3bf 8f4f 	dsb	sy
 80048e6:	b662      	cpsie	i
 80048e8:	61bb      	str	r3, [r7, #24]
}
 80048ea:	bf00      	nop
 80048ec:	bf00      	nop
 80048ee:	e7fd      	b.n	80048ec <xQueueGenericSendFromISR+0x14c>
 80048f0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80048f4:	3301      	adds	r3, #1
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	b25a      	sxtb	r2, r3
 80048fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8004900:	2301      	movs	r3, #1
 8004902:	647b      	str	r3, [r7, #68]	@ 0x44
        {
 8004904:	e001      	b.n	800490a <xQueueGenericSendFromISR+0x16a>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8004906:	2300      	movs	r3, #0
 8004908:	647b      	str	r3, [r7, #68]	@ 0x44
 800490a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800490c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8004914:	bf00      	nop
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGenericSendFromISR( xReturn );

    return xReturn;
 8004916:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8004918:	4618      	mov	r0, r3
 800491a:	3748      	adds	r7, #72	@ 0x48
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b08c      	sub	sp, #48	@ 0x30
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800492c:	2300      	movs	r3, #0
 800492e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10d      	bne.n	8004956 <xQueueReceive+0x36>
    __asm volatile
 800493a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800493e:	b672      	cpsid	i
 8004940:	f383 8811 	msr	BASEPRI, r3
 8004944:	f3bf 8f6f 	isb	sy
 8004948:	f3bf 8f4f 	dsb	sy
 800494c:	b662      	cpsie	i
 800494e:	623b      	str	r3, [r7, #32]
}
 8004950:	bf00      	nop
 8004952:	bf00      	nop
 8004954:	e7fd      	b.n	8004952 <xQueueReceive+0x32>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d103      	bne.n	8004964 <xQueueReceive+0x44>
 800495c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800495e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <xQueueReceive+0x48>
 8004964:	2301      	movs	r3, #1
 8004966:	e000      	b.n	800496a <xQueueReceive+0x4a>
 8004968:	2300      	movs	r3, #0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10d      	bne.n	800498a <xQueueReceive+0x6a>
    __asm volatile
 800496e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004972:	b672      	cpsid	i
 8004974:	f383 8811 	msr	BASEPRI, r3
 8004978:	f3bf 8f6f 	isb	sy
 800497c:	f3bf 8f4f 	dsb	sy
 8004980:	b662      	cpsie	i
 8004982:	61fb      	str	r3, [r7, #28]
}
 8004984:	bf00      	nop
 8004986:	bf00      	nop
 8004988:	e7fd      	b.n	8004986 <xQueueReceive+0x66>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800498a:	f001 fcef 	bl	800636c <xTaskGetSchedulerState>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d102      	bne.n	800499a <xQueueReceive+0x7a>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <xQueueReceive+0x7e>
 800499a:	2301      	movs	r3, #1
 800499c:	e000      	b.n	80049a0 <xQueueReceive+0x80>
 800499e:	2300      	movs	r3, #0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10d      	bne.n	80049c0 <xQueueReceive+0xa0>
    __asm volatile
 80049a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a8:	b672      	cpsid	i
 80049aa:	f383 8811 	msr	BASEPRI, r3
 80049ae:	f3bf 8f6f 	isb	sy
 80049b2:	f3bf 8f4f 	dsb	sy
 80049b6:	b662      	cpsie	i
 80049b8:	61bb      	str	r3, [r7, #24]
}
 80049ba:	bf00      	nop
 80049bc:	bf00      	nop
 80049be:	e7fd      	b.n	80049bc <xQueueReceive+0x9c>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80049c0:	f002 fbb8 	bl	8007134 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c8:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d01f      	beq.n	8004a10 <xQueueReceive+0xf0>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80049d0:	68b9      	ldr	r1, [r7, #8]
 80049d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049d4:	f000 fafd 	bl	8004fd2 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 80049d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049da:	1e5a      	subs	r2, r3, #1
 80049dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049de:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00f      	beq.n	8004a08 <xQueueReceive+0xe8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ea:	3310      	adds	r3, #16
 80049ec:	4618      	mov	r0, r3
 80049ee:	f001 fa8d 	bl	8005f0c <xTaskRemoveFromEventList>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d007      	beq.n	8004a08 <xQueueReceive+0xe8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80049f8:	4b3c      	ldr	r3, [pc, #240]	@ (8004aec <xQueueReceive+0x1cc>)
 80049fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004a08:	f002 fbca 	bl	80071a0 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e069      	b.n	8004ae4 <xQueueReceive+0x1c4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d103      	bne.n	8004a1e <xQueueReceive+0xfe>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004a16:	f002 fbc3 	bl	80071a0 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	e062      	b.n	8004ae4 <xQueueReceive+0x1c4>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d106      	bne.n	8004a32 <xQueueReceive+0x112>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004a24:	f107 0310 	add.w	r3, r7, #16
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f001 fb4b 	bl	80060c4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004a32:	f002 fbb5 	bl	80071a0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004a36:	f000 ff37 	bl	80058a8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004a3a:	f002 fb7b 	bl	8007134 <vPortEnterCritical>
 8004a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a44:	b25b      	sxtb	r3, r3
 8004a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4a:	d103      	bne.n	8004a54 <xQueueReceive+0x134>
 8004a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a5a:	b25b      	sxtb	r3, r3
 8004a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a60:	d103      	bne.n	8004a6a <xQueueReceive+0x14a>
 8004a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a6a:	f002 fb99 	bl	80071a0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a6e:	1d3a      	adds	r2, r7, #4
 8004a70:	f107 0310 	add.w	r3, r7, #16
 8004a74:	4611      	mov	r1, r2
 8004a76:	4618      	mov	r0, r3
 8004a78:	f001 fb3a 	bl	80060f0 <xTaskCheckForTimeOut>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d123      	bne.n	8004aca <xQueueReceive+0x1aa>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a84:	f000 fb1d 	bl	80050c2 <prvIsQueueEmpty>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d017      	beq.n	8004abe <xQueueReceive+0x19e>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a90:	3324      	adds	r3, #36	@ 0x24
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	4611      	mov	r1, r2
 8004a96:	4618      	mov	r0, r3
 8004a98:	f001 f9c8 	bl	8005e2c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004a9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a9e:	f000 fabe 	bl	800501e <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004aa2:	f000 ff0f 	bl	80058c4 <xTaskResumeAll>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d189      	bne.n	80049c0 <xQueueReceive+0xa0>
                {
                    taskYIELD_WITHIN_API();
 8004aac:	4b0f      	ldr	r3, [pc, #60]	@ (8004aec <xQueueReceive+0x1cc>)
 8004aae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	e780      	b.n	80049c0 <xQueueReceive+0xa0>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004abe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ac0:	f000 faad 	bl	800501e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004ac4:	f000 fefe 	bl	80058c4 <xTaskResumeAll>
 8004ac8:	e77a      	b.n	80049c0 <xQueueReceive+0xa0>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004aca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004acc:	f000 faa7 	bl	800501e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004ad0:	f000 fef8 	bl	80058c4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ad4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ad6:	f000 faf4 	bl	80050c2 <prvIsQueueEmpty>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f43f af6f 	beq.w	80049c0 <xQueueReceive+0xa0>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8004ae2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3730      	adds	r7, #48	@ 0x30
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	e000ed04 	.word	0xe000ed04

08004af0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b08c      	sub	sp, #48	@ 0x30
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004afa:	2300      	movs	r3, #0
 8004afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8004b02:	2300      	movs	r3, #0
 8004b04:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10d      	bne.n	8004b28 <xQueueSemaphoreTake+0x38>
    __asm volatile
 8004b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b10:	b672      	cpsid	i
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	b662      	cpsie	i
 8004b20:	61bb      	str	r3, [r7, #24]
}
 8004b22:	bf00      	nop
 8004b24:	bf00      	nop
 8004b26:	e7fd      	b.n	8004b24 <xQueueSemaphoreTake+0x34>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8004b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00d      	beq.n	8004b4c <xQueueSemaphoreTake+0x5c>
    __asm volatile
 8004b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b34:	b672      	cpsid	i
 8004b36:	f383 8811 	msr	BASEPRI, r3
 8004b3a:	f3bf 8f6f 	isb	sy
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	b662      	cpsie	i
 8004b44:	617b      	str	r3, [r7, #20]
}
 8004b46:	bf00      	nop
 8004b48:	bf00      	nop
 8004b4a:	e7fd      	b.n	8004b48 <xQueueSemaphoreTake+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b4c:	f001 fc0e 	bl	800636c <xTaskGetSchedulerState>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d102      	bne.n	8004b5c <xQueueSemaphoreTake+0x6c>
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <xQueueSemaphoreTake+0x70>
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e000      	b.n	8004b62 <xQueueSemaphoreTake+0x72>
 8004b60:	2300      	movs	r3, #0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10d      	bne.n	8004b82 <xQueueSemaphoreTake+0x92>
    __asm volatile
 8004b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b6a:	b672      	cpsid	i
 8004b6c:	f383 8811 	msr	BASEPRI, r3
 8004b70:	f3bf 8f6f 	isb	sy
 8004b74:	f3bf 8f4f 	dsb	sy
 8004b78:	b662      	cpsie	i
 8004b7a:	613b      	str	r3, [r7, #16]
}
 8004b7c:	bf00      	nop
 8004b7e:	bf00      	nop
 8004b80:	e7fd      	b.n	8004b7e <xQueueSemaphoreTake+0x8e>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004b82:	f002 fad7 	bl	8007134 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b8a:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004b8c:	6a3b      	ldr	r3, [r7, #32]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d024      	beq.n	8004bdc <xQueueSemaphoreTake+0xec>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 8004b92:	6a3b      	ldr	r3, [r7, #32]
 8004b94:	1e5a      	subs	r2, r3, #1
 8004b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b98:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d104      	bne.n	8004bac <xQueueSemaphoreTake+0xbc>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004ba2:	f001 fe0f 	bl	80067c4 <pvTaskIncrementMutexHeldCount>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004baa:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00f      	beq.n	8004bd4 <xQueueSemaphoreTake+0xe4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb6:	3310      	adds	r3, #16
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f001 f9a7 	bl	8005f0c <xTaskRemoveFromEventList>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d007      	beq.n	8004bd4 <xQueueSemaphoreTake+0xe4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004bc4:	4b4c      	ldr	r3, [pc, #304]	@ (8004cf8 <xQueueSemaphoreTake+0x208>)
 8004bc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004bd4:	f002 fae4 	bl	80071a0 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e089      	b.n	8004cf0 <xQueueSemaphoreTake+0x200>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d103      	bne.n	8004bea <xQueueSemaphoreTake+0xfa>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8004be2:	f002 fadd 	bl	80071a0 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8004be6:	2300      	movs	r3, #0
 8004be8:	e082      	b.n	8004cf0 <xQueueSemaphoreTake+0x200>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d106      	bne.n	8004bfe <xQueueSemaphoreTake+0x10e>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004bf0:	f107 0308 	add.w	r3, r7, #8
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f001 fa65 	bl	80060c4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004bfe:	f002 facf 	bl	80071a0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004c02:	f000 fe51 	bl	80058a8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004c06:	f002 fa95 	bl	8007134 <vPortEnterCritical>
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c10:	b25b      	sxtb	r3, r3
 8004c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c16:	d103      	bne.n	8004c20 <xQueueSemaphoreTake+0x130>
 8004c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c26:	b25b      	sxtb	r3, r3
 8004c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2c:	d103      	bne.n	8004c36 <xQueueSemaphoreTake+0x146>
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c36:	f002 fab3 	bl	80071a0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c3a:	463a      	mov	r2, r7
 8004c3c:	f107 0308 	add.w	r3, r7, #8
 8004c40:	4611      	mov	r1, r2
 8004c42:	4618      	mov	r0, r3
 8004c44:	f001 fa54 	bl	80060f0 <xTaskCheckForTimeOut>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d132      	bne.n	8004cb4 <xQueueSemaphoreTake+0x1c4>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c4e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c50:	f000 fa37 	bl	80050c2 <prvIsQueueEmpty>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d026      	beq.n	8004ca8 <xQueueSemaphoreTake+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d109      	bne.n	8004c76 <xQueueSemaphoreTake+0x186>
                    {
                        taskENTER_CRITICAL();
 8004c62:	f002 fa67 	bl	8007134 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f001 fb9c 	bl	80063a8 <xTaskPriorityInherit>
 8004c70:	62b8      	str	r0, [r7, #40]	@ 0x28
                        }
                        taskEXIT_CRITICAL();
 8004c72:	f002 fa95 	bl	80071a0 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c78:	3324      	adds	r3, #36	@ 0x24
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	4611      	mov	r1, r2
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f001 f8d4 	bl	8005e2c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004c84:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c86:	f000 f9ca 	bl	800501e <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004c8a:	f000 fe1b 	bl	80058c4 <xTaskResumeAll>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f47f af76 	bne.w	8004b82 <xQueueSemaphoreTake+0x92>
                {
                    taskYIELD_WITHIN_API();
 8004c96:	4b18      	ldr	r3, [pc, #96]	@ (8004cf8 <xQueueSemaphoreTake+0x208>)
 8004c98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	e76c      	b.n	8004b82 <xQueueSemaphoreTake+0x92>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8004ca8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004caa:	f000 f9b8 	bl	800501e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004cae:	f000 fe09 	bl	80058c4 <xTaskResumeAll>
 8004cb2:	e766      	b.n	8004b82 <xQueueSemaphoreTake+0x92>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8004cb4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004cb6:	f000 f9b2 	bl	800501e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004cba:	f000 fe03 	bl	80058c4 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cbe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004cc0:	f000 f9ff 	bl	80050c2 <prvIsQueueEmpty>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f43f af5b 	beq.w	8004b82 <xQueueSemaphoreTake+0x92>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8004ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00d      	beq.n	8004cee <xQueueSemaphoreTake+0x1fe>
                    {
                        taskENTER_CRITICAL();
 8004cd2:	f002 fa2f 	bl	8007134 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004cd6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004cd8:	f000 f8f9 	bl	8004ece <prvGetDisinheritPriorityAfterTimeout>
 8004cdc:	61f8      	str	r0, [r7, #28]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	69f9      	ldr	r1, [r7, #28]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f001 fcab 	bl	8006640 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8004cea:	f002 fa59 	bl	80071a0 <vPortExitCritical>
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8004cee:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3730      	adds	r7, #48	@ 0x30
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	e000ed04 	.word	0xe000ed04

08004cfc <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b090      	sub	sp, #64	@ 0x40
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	63bb      	str	r3, [r7, #56]	@ 0x38

    traceENTER_xQueueReceiveFromISR( xQueue, pvBuffer, pxHigherPriorityTaskWoken );

    configASSERT( pxQueue );
 8004d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10d      	bne.n	8004d2e <xQueueReceiveFromISR+0x32>
    __asm volatile
 8004d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d16:	b672      	cpsid	i
 8004d18:	f383 8811 	msr	BASEPRI, r3
 8004d1c:	f3bf 8f6f 	isb	sy
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	b662      	cpsie	i
 8004d26:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004d28:	bf00      	nop
 8004d2a:	bf00      	nop
 8004d2c:	e7fd      	b.n	8004d2a <xQueueReceiveFromISR+0x2e>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d103      	bne.n	8004d3c <xQueueReceiveFromISR+0x40>
 8004d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <xQueueReceiveFromISR+0x44>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e000      	b.n	8004d42 <xQueueReceiveFromISR+0x46>
 8004d40:	2300      	movs	r3, #0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10d      	bne.n	8004d62 <xQueueReceiveFromISR+0x66>
    __asm volatile
 8004d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d4a:	b672      	cpsid	i
 8004d4c:	f383 8811 	msr	BASEPRI, r3
 8004d50:	f3bf 8f6f 	isb	sy
 8004d54:	f3bf 8f4f 	dsb	sy
 8004d58:	b662      	cpsie	i
 8004d5a:	623b      	str	r3, [r7, #32]
}
 8004d5c:	bf00      	nop
 8004d5e:	bf00      	nop
 8004d60:	e7fd      	b.n	8004d5e <xQueueReceiveFromISR+0x62>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d62:	f002 fad5 	bl	8007310 <vPortValidateInterruptPriority>
    __asm volatile
 8004d66:	f3ef 8211 	mrs	r2, BASEPRI
 8004d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d6e:	b672      	cpsid	i
 8004d70:	f383 8811 	msr	BASEPRI, r3
 8004d74:	f3bf 8f6f 	isb	sy
 8004d78:	f3bf 8f4f 	dsb	sy
 8004d7c:	b662      	cpsie	i
 8004d7e:	61fa      	str	r2, [r7, #28]
 8004d80:	61bb      	str	r3, [r7, #24]
    return ulOriginalBASEPRI;
 8004d82:	69fb      	ldr	r3, [r7, #28]

    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8004d84:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d8a:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d049      	beq.n	8004e26 <xQueueReceiveFromISR+0x12a>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8004d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d9c:	68b9      	ldr	r1, [r7, #8]
 8004d9e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004da0:	f000 f917 	bl	8004fd2 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8004da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da6:	1e5a      	subs	r2, r3, #1
 8004da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004daa:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8004dac:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db4:	d112      	bne.n	8004ddc <xQueueReceiveFromISR+0xe0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d030      	beq.n	8004e20 <xQueueReceiveFromISR+0x124>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc0:	3310      	adds	r3, #16
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f001 f8a2 	bl	8005f0c <xTaskRemoveFromEventList>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d028      	beq.n	8004e20 <xQueueReceiveFromISR+0x124>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d025      	beq.n	8004e20 <xQueueReceiveFromISR+0x124>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	601a      	str	r2, [r3, #0]
 8004dda:	e021      	b.n	8004e20 <xQueueReceiveFromISR+0x124>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 8004ddc:	f000 fe9e 	bl	8005b1c <uxTaskGetNumberOfTasks>
 8004de0:	62b8      	str	r0, [r7, #40]	@ 0x28
 8004de2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004de6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d919      	bls.n	8004e20 <xQueueReceiveFromISR+0x124>
 8004dec:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004df0:	2b7f      	cmp	r3, #127	@ 0x7f
 8004df2:	d10d      	bne.n	8004e10 <xQueueReceiveFromISR+0x114>
    __asm volatile
 8004df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df8:	b672      	cpsid	i
 8004dfa:	f383 8811 	msr	BASEPRI, r3
 8004dfe:	f3bf 8f6f 	isb	sy
 8004e02:	f3bf 8f4f 	dsb	sy
 8004e06:	b662      	cpsie	i
 8004e08:	617b      	str	r3, [r7, #20]
}
 8004e0a:	bf00      	nop
 8004e0c:	bf00      	nop
 8004e0e:	e7fd      	b.n	8004e0c <xQueueReceiveFromISR+0x110>
 8004e10:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004e14:	3301      	adds	r3, #1
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	b25a      	sxtb	r2, r3
 8004e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 8004e20:	2301      	movs	r3, #1
 8004e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e24:	e001      	b.n	8004e2a <xQueueReceiveFromISR+0x12e>
        }
        else
        {
            xReturn = pdFAIL;
 8004e26:	2300      	movs	r3, #0
 8004e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e2c:	613b      	str	r3, [r7, #16]
    __asm volatile
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	f383 8811 	msr	BASEPRI, r3
}
 8004e34:	bf00      	nop
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueReceiveFromISR( xReturn );

    return xReturn;
 8004e36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3740      	adds	r7, #64	@ 0x40
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    traceENTER_uxQueueMessagesWaiting( xQueue );

    configASSERT( xQueue );
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10d      	bne.n	8004e6a <uxQueueMessagesWaiting+0x2a>
    __asm volatile
 8004e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e52:	b672      	cpsid	i
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	b662      	cpsie	i
 8004e62:	60bb      	str	r3, [r7, #8]
}
 8004e64:	bf00      	nop
 8004e66:	bf00      	nop
 8004e68:	e7fd      	b.n	8004e66 <uxQueueMessagesWaiting+0x26>

    taskENTER_CRITICAL();
 8004e6a:	f002 f963 	bl	8007134 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e72:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8004e74:	f002 f994 	bl	80071a0 <vPortExitCritical>

    traceRETURN_uxQueueMessagesWaiting( uxReturn );

    return uxReturn;
 8004e78:	68fb      	ldr	r3, [r7, #12]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <vQueueDelete>:
    return uxReturn;
}
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b084      	sub	sp, #16
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	60fb      	str	r3, [r7, #12]

    traceENTER_vQueueDelete( xQueue );

    configASSERT( pxQueue );
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10d      	bne.n	8004eb0 <vQueueDelete+0x2e>
    __asm volatile
 8004e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e98:	b672      	cpsid	i
 8004e9a:	f383 8811 	msr	BASEPRI, r3
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	b662      	cpsie	i
 8004ea8:	60bb      	str	r3, [r7, #8]
}
 8004eaa:	bf00      	nop
 8004eac:	bf00      	nop
 8004eae:	e7fd      	b.n	8004eac <vQueueDelete+0x2a>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f000 f987 	bl	80051c4 <vQueueUnregisterQueue>
    }
    #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
    {
        /* The queue could have been allocated statically or dynamically, so
         * check before attempting to free the memory. */
        if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d102      	bne.n	8004ec6 <vQueueDelete+0x44>
        {
            vPortFree( pxQueue );
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f002 fba9 	bl	8007618 <vPortFree>
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

    traceRETURN_vQueueDelete();
}
 8004ec6:	bf00      	nop
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8004ece:	b480      	push	{r7}
 8004ed0:	b085      	sub	sp, #20
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d006      	beq.n	8004eec <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f1c3 0307 	rsb	r3, r3, #7
 8004ee8:	60fb      	str	r3, [r7, #12]
 8004eea:	e001      	b.n	8004ef0 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004eec:	2300      	movs	r3, #0
 8004eee:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
    }
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3714      	adds	r7, #20
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b086      	sub	sp, #24
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	60f8      	str	r0, [r7, #12]
 8004f06:	60b9      	str	r1, [r7, #8]
 8004f08:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f12:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10d      	bne.n	8004f38 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d14d      	bne.n	8004fc0 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f001 fadd 	bl	80064e8 <xTaskPriorityDisinherit>
 8004f2e:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	609a      	str	r2, [r3, #8]
 8004f36:	e043      	b.n	8004fc0 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d119      	bne.n	8004f72 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6858      	ldr	r0, [r3, #4]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f46:	461a      	mov	r2, r3
 8004f48:	68b9      	ldr	r1, [r7, #8]
 8004f4a:	f00d fa08 	bl	801235e <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f56:	441a      	add	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d32b      	bcc.n	8004fc0 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	605a      	str	r2, [r3, #4]
 8004f70:	e026      	b.n	8004fc0 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	68d8      	ldr	r0, [r3, #12]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	68b9      	ldr	r1, [r7, #8]
 8004f7e:	f00d f9ee 	bl	801235e <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8a:	425b      	negs	r3, r3
 8004f8c:	441a      	add	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	68da      	ldr	r2, [r3, #12]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d207      	bcs.n	8004fae <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	689a      	ldr	r2, [r3, #8]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa6:	425b      	negs	r3, r3
 8004fa8:	441a      	add	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d105      	bne.n	8004fc0 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d002      	beq.n	8004fc0 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	1c5a      	adds	r2, r3, #1
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8004fc8:	697b      	ldr	r3, [r7, #20]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b082      	sub	sp, #8
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
 8004fda:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d018      	beq.n	8005016 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68da      	ldr	r2, [r3, #12]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fec:	441a      	add	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d303      	bcc.n	8005006 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68d9      	ldr	r1, [r3, #12]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500e:	461a      	mov	r2, r3
 8005010:	6838      	ldr	r0, [r7, #0]
 8005012:	f00d f9a4 	bl	801235e <memcpy>
    }
}
 8005016:	bf00      	nop
 8005018:	3708      	adds	r7, #8
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b084      	sub	sp, #16
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8005026:	f002 f885 	bl	8007134 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005030:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005032:	e011      	b.n	8005058 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005038:	2b00      	cmp	r3, #0
 800503a:	d012      	beq.n	8005062 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3324      	adds	r3, #36	@ 0x24
 8005040:	4618      	mov	r0, r3
 8005042:	f000 ff63 	bl	8005f0c <xTaskRemoveFromEventList>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d001      	beq.n	8005050 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800504c:	f001 f8b4 	bl	80061b8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8005050:	7bfb      	ldrb	r3, [r7, #15]
 8005052:	3b01      	subs	r3, #1
 8005054:	b2db      	uxtb	r3, r3
 8005056:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800505c:	2b00      	cmp	r3, #0
 800505e:	dce9      	bgt.n	8005034 <prvUnlockQueue+0x16>
 8005060:	e000      	b.n	8005064 <prvUnlockQueue+0x46>
                    break;
 8005062:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	22ff      	movs	r2, #255	@ 0xff
 8005068:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800506c:	f002 f898 	bl	80071a0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8005070:	f002 f860 	bl	8007134 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800507a:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800507c:	e011      	b.n	80050a2 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d012      	beq.n	80050ac <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	3310      	adds	r3, #16
 800508a:	4618      	mov	r0, r3
 800508c:	f000 ff3e 	bl	8005f0c <xTaskRemoveFromEventList>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d001      	beq.n	800509a <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8005096:	f001 f88f 	bl	80061b8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800509a:	7bbb      	ldrb	r3, [r7, #14]
 800509c:	3b01      	subs	r3, #1
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80050a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	dce9      	bgt.n	800507e <prvUnlockQueue+0x60>
 80050aa:	e000      	b.n	80050ae <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80050ac:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	22ff      	movs	r2, #255	@ 0xff
 80050b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80050b6:	f002 f873 	bl	80071a0 <vPortExitCritical>
}
 80050ba:	bf00      	nop
 80050bc:	3710      	adds	r7, #16
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b084      	sub	sp, #16
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80050ca:	f002 f833 	bl	8007134 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d102      	bne.n	80050dc <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80050d6:	2301      	movs	r3, #1
 80050d8:	60fb      	str	r3, [r7, #12]
 80050da:	e001      	b.n	80050e0 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80050dc:	2300      	movs	r3, #0
 80050de:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80050e0:	f002 f85e 	bl	80071a0 <vPortExitCritical>

    return xReturn;
 80050e4:	68fb      	ldr	r3, [r7, #12]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b084      	sub	sp, #16
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80050f6:	f002 f81d 	bl	8007134 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005102:	429a      	cmp	r2, r3
 8005104:	d102      	bne.n	800510c <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005106:	2301      	movs	r3, #1
 8005108:	60fb      	str	r3, [r7, #12]
 800510a:	e001      	b.n	8005110 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800510c:	2300      	movs	r3, #0
 800510e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005110:	f002 f846 	bl	80071a0 <vPortExitCritical>

    return xReturn;
 8005114:	68fb      	ldr	r3, [r7, #12]
}
 8005116:	4618      	mov	r0, r3
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
	...

08005120 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8005120:	b480      	push	{r7}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800512a:	2300      	movs	r3, #0
 800512c:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10d      	bne.n	8005150 <vQueueAddToRegistry+0x30>
    __asm volatile
 8005134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005138:	b672      	cpsid	i
 800513a:	f383 8811 	msr	BASEPRI, r3
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f3bf 8f4f 	dsb	sy
 8005146:	b662      	cpsie	i
 8005148:	60fb      	str	r3, [r7, #12]
}
 800514a:	bf00      	nop
 800514c:	bf00      	nop
 800514e:	e7fd      	b.n	800514c <vQueueAddToRegistry+0x2c>

        if( pcQueueName != NULL )
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d024      	beq.n	80051a0 <vQueueAddToRegistry+0x80>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005156:	2300      	movs	r3, #0
 8005158:	617b      	str	r3, [r7, #20]
 800515a:	e01e      	b.n	800519a <vQueueAddToRegistry+0x7a>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800515c:	4a18      	ldr	r2, [pc, #96]	@ (80051c0 <vQueueAddToRegistry+0xa0>)
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	00db      	lsls	r3, r3, #3
 8005162:	4413      	add	r3, r2
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	429a      	cmp	r2, r3
 800516a:	d105      	bne.n	8005178 <vQueueAddToRegistry+0x58>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	4a13      	ldr	r2, [pc, #76]	@ (80051c0 <vQueueAddToRegistry+0xa0>)
 8005172:	4413      	add	r3, r2
 8005174:	613b      	str	r3, [r7, #16]
                    break;
 8005176:	e013      	b.n	80051a0 <vQueueAddToRegistry+0x80>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10a      	bne.n	8005194 <vQueueAddToRegistry+0x74>
 800517e:	4a10      	ldr	r2, [pc, #64]	@ (80051c0 <vQueueAddToRegistry+0xa0>)
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d104      	bne.n	8005194 <vQueueAddToRegistry+0x74>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	00db      	lsls	r3, r3, #3
 800518e:	4a0c      	ldr	r2, [pc, #48]	@ (80051c0 <vQueueAddToRegistry+0xa0>)
 8005190:	4413      	add	r3, r2
 8005192:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	3301      	adds	r3, #1
 8005198:	617b      	str	r3, [r7, #20]
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	2b07      	cmp	r3, #7
 800519e:	d9dd      	bls.n	800515c <vQueueAddToRegistry+0x3c>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d005      	beq.n	80051b2 <vQueueAddToRegistry+0x92>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 80051b2:	bf00      	nop
 80051b4:	371c      	adds	r7, #28
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	240022f4 	.word	0x240022f4

080051c4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        traceENTER_vQueueUnregisterQueue( xQueue );

        configASSERT( xQueue );
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10d      	bne.n	80051ee <vQueueUnregisterQueue+0x2a>
    __asm volatile
 80051d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d6:	b672      	cpsid	i
 80051d8:	f383 8811 	msr	BASEPRI, r3
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	b662      	cpsie	i
 80051e6:	60bb      	str	r3, [r7, #8]
}
 80051e8:	bf00      	nop
 80051ea:	bf00      	nop
 80051ec:	e7fd      	b.n	80051ea <vQueueUnregisterQueue+0x26>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051ee:	2300      	movs	r3, #0
 80051f0:	60fb      	str	r3, [r7, #12]
 80051f2:	e016      	b.n	8005222 <vQueueUnregisterQueue+0x5e>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 80051f4:	4a10      	ldr	r2, [pc, #64]	@ (8005238 <vQueueUnregisterQueue+0x74>)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	00db      	lsls	r3, r3, #3
 80051fa:	4413      	add	r3, r2
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	429a      	cmp	r2, r3
 8005202:	d10b      	bne.n	800521c <vQueueUnregisterQueue+0x58>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 8005204:	4a0c      	ldr	r2, [pc, #48]	@ (8005238 <vQueueUnregisterQueue+0x74>)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2100      	movs	r1, #0
 800520a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800520e:	4a0a      	ldr	r2, [pc, #40]	@ (8005238 <vQueueUnregisterQueue+0x74>)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	00db      	lsls	r3, r3, #3
 8005214:	4413      	add	r3, r2
 8005216:	2200      	movs	r2, #0
 8005218:	605a      	str	r2, [r3, #4]
                break;
 800521a:	e006      	b.n	800522a <vQueueUnregisterQueue+0x66>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	3301      	adds	r3, #1
 8005220:	60fb      	str	r3, [r7, #12]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2b07      	cmp	r3, #7
 8005226:	d9e5      	bls.n	80051f4 <vQueueUnregisterQueue+0x30>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        traceRETURN_vQueueUnregisterQueue();
    }
 8005228:	bf00      	nop
 800522a:	bf00      	nop
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	240022f4 	.word	0x240022f4

0800523c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800524c:	f001 ff72 	bl	8007134 <vPortEnterCritical>
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005256:	b25b      	sxtb	r3, r3
 8005258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525c:	d103      	bne.n	8005266 <vQueueWaitForMessageRestricted+0x2a>
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800526c:	b25b      	sxtb	r3, r3
 800526e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005272:	d103      	bne.n	800527c <vQueueWaitForMessageRestricted+0x40>
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800527c:	f001 ff90 	bl	80071a0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005284:	2b00      	cmp	r3, #0
 8005286:	d106      	bne.n	8005296 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	3324      	adds	r3, #36	@ 0x24
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	68b9      	ldr	r1, [r7, #8]
 8005290:	4618      	mov	r0, r3
 8005292:	f000 fdf3 	bl	8005e7c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8005296:	6978      	ldr	r0, [r7, #20]
 8005298:	f7ff fec1 	bl	800501e <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 800529c:	bf00      	nop
 800529e:	3718      	adds	r7, #24
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <prvCreateStaticTask>:
                                        void * const pvParameters,
                                        UBaseType_t uxPriority,
                                        StackType_t * const puxStackBuffer,
                                        StaticTask_t * const pxTaskBuffer,
                                        TaskHandle_t * const pxCreatedTask )
    {
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b08e      	sub	sp, #56	@ 0x38
 80052a8:	af04      	add	r7, sp, #16
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
 80052b0:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;

        configASSERT( puxStackBuffer != NULL );
 80052b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10d      	bne.n	80052d4 <prvCreateStaticTask+0x30>
    __asm volatile
 80052b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052bc:	b672      	cpsid	i
 80052be:	f383 8811 	msr	BASEPRI, r3
 80052c2:	f3bf 8f6f 	isb	sy
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	b662      	cpsie	i
 80052cc:	623b      	str	r3, [r7, #32]
}
 80052ce:	bf00      	nop
 80052d0:	bf00      	nop
 80052d2:	e7fd      	b.n	80052d0 <prvCreateStaticTask+0x2c>
        configASSERT( pxTaskBuffer != NULL );
 80052d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10d      	bne.n	80052f6 <prvCreateStaticTask+0x52>
    __asm volatile
 80052da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052de:	b672      	cpsid	i
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	b662      	cpsie	i
 80052ee:	61fb      	str	r3, [r7, #28]
}
 80052f0:	bf00      	nop
 80052f2:	bf00      	nop
 80052f4:	e7fd      	b.n	80052f2 <prvCreateStaticTask+0x4e>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 80052f6:	235c      	movs	r3, #92	@ 0x5c
 80052f8:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	2b5c      	cmp	r3, #92	@ 0x5c
 80052fe:	d00d      	beq.n	800531c <prvCreateStaticTask+0x78>
    __asm volatile
 8005300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005304:	b672      	cpsid	i
 8005306:	f383 8811 	msr	BASEPRI, r3
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	b662      	cpsie	i
 8005314:	61bb      	str	r3, [r7, #24]
}
 8005316:	bf00      	nop
 8005318:	bf00      	nop
 800531a:	e7fd      	b.n	8005318 <prvCreateStaticTask+0x74>
            ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 800531c:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800531e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005320:	2b00      	cmp	r3, #0
 8005322:	d01f      	beq.n	8005364 <prvCreateStaticTask+0xc0>
 8005324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005326:	2b00      	cmp	r3, #0
 8005328:	d01c      	beq.n	8005364 <prvCreateStaticTask+0xc0>
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer;
 800532a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800532c:	627b      	str	r3, [r7, #36]	@ 0x24
            ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800532e:	225c      	movs	r2, #92	@ 0x5c
 8005330:	2100      	movs	r1, #0
 8005332:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005334:	f00c ff56 	bl	80121e4 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800533c:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800533e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005340:	2202      	movs	r2, #2
 8005342:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005346:	2300      	movs	r3, #0
 8005348:	9303      	str	r3, [sp, #12]
 800534a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534c:	9302      	str	r3, [sp, #8]
 800534e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005350:	9301      	str	r3, [sp, #4]
 8005352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	68b9      	ldr	r1, [r7, #8]
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 f88f 	bl	8005480 <prvInitialiseNewTask>
 8005362:	e001      	b.n	8005368 <prvCreateStaticTask+0xc4>
        }
        else
        {
            pxNewTCB = NULL;
 8005364:	2300      	movs	r3, #0
 8005366:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return pxNewTCB;
 8005368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800536a:	4618      	mov	r0, r3
 800536c:	3728      	adds	r7, #40	@ 0x28
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <xTaskCreateStatic>:
                                    const configSTACK_DEPTH_TYPE uxStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8005372:	b580      	push	{r7, lr}
 8005374:	b08a      	sub	sp, #40	@ 0x28
 8005376:	af04      	add	r7, sp, #16
 8005378:	60f8      	str	r0, [r7, #12]
 800537a:	60b9      	str	r1, [r7, #8]
 800537c:	607a      	str	r2, [r7, #4]
 800537e:	603b      	str	r3, [r7, #0]
        TaskHandle_t xReturn = NULL;
 8005380:	2300      	movs	r3, #0
 8005382:	613b      	str	r3, [r7, #16]
        TCB_t * pxNewTCB;

        traceENTER_xTaskCreateStatic( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );

        pxNewTCB = prvCreateStaticTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer, &xReturn );
 8005384:	f107 0310 	add.w	r3, r7, #16
 8005388:	9303      	str	r3, [sp, #12]
 800538a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800538c:	9302      	str	r3, [sp, #8]
 800538e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005390:	9301      	str	r3, [sp, #4]
 8005392:	6a3b      	ldr	r3, [r7, #32]
 8005394:	9300      	str	r3, [sp, #0]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	68b9      	ldr	r1, [r7, #8]
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f7ff ff81 	bl	80052a4 <prvCreateStaticTask>
 80053a2:	6178      	str	r0, [r7, #20]

        if( pxNewTCB != NULL )
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d002      	beq.n	80053b0 <xTaskCreateStatic+0x3e>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80053aa:	6978      	ldr	r0, [r7, #20]
 80053ac:	f000 f8fc 	bl	80055a8 <prvAddNewTaskToReadyList>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskCreateStatic( xReturn );

        return xReturn;
 80053b0:	693b      	ldr	r3, [r7, #16]
    }
 80053b2:	4618      	mov	r0, r3
 80053b4:	3718      	adds	r7, #24
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b08a      	sub	sp, #40	@ 0x28
 80053be:	af04      	add	r7, sp, #16
 80053c0:	60f8      	str	r0, [r7, #12]
 80053c2:	60b9      	str	r1, [r7, #8]
 80053c4:	607a      	str	r2, [r7, #4]
 80053c6:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4618      	mov	r0, r3
 80053ce:	f001 ffe5 	bl	800739c <pvPortMalloc>
 80053d2:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d013      	beq.n	8005402 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80053da:	205c      	movs	r0, #92	@ 0x5c
 80053dc:	f001 ffde 	bl	800739c <pvPortMalloc>
 80053e0:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d008      	beq.n	80053fa <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80053e8:	225c      	movs	r2, #92	@ 0x5c
 80053ea:	2100      	movs	r1, #0
 80053ec:	6978      	ldr	r0, [r7, #20]
 80053ee:	f00c fef9 	bl	80121e4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80053f8:	e005      	b.n	8005406 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80053fa:	6938      	ldr	r0, [r7, #16]
 80053fc:	f002 f90c 	bl	8007618 <vPortFree>
 8005400:	e001      	b.n	8005406 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8005402:	2300      	movs	r3, #0
 8005404:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d011      	beq.n	8005430 <prvCreateTask+0x76>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005414:	2300      	movs	r3, #0
 8005416:	9303      	str	r3, [sp, #12]
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	9302      	str	r3, [sp, #8]
 800541c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541e:	9301      	str	r3, [sp, #4]
 8005420:	6a3b      	ldr	r3, [r7, #32]
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	68b9      	ldr	r1, [r7, #8]
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f000 f828 	bl	8005480 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8005430:	697b      	ldr	r3, [r7, #20]
    }
 8005432:	4618      	mov	r0, r3
 8005434:	3718      	adds	r7, #24
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800543a:	b580      	push	{r7, lr}
 800543c:	b088      	sub	sp, #32
 800543e:	af02      	add	r7, sp, #8
 8005440:	60f8      	str	r0, [r7, #12]
 8005442:	60b9      	str	r1, [r7, #8]
 8005444:	607a      	str	r2, [r7, #4]
 8005446:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8005448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544a:	9301      	str	r3, [sp, #4]
 800544c:	6a3b      	ldr	r3, [r7, #32]
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	68b9      	ldr	r1, [r7, #8]
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f7ff ffaf 	bl	80053ba <prvCreateTask>
 800545c:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d005      	beq.n	8005470 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8005464:	6938      	ldr	r0, [r7, #16]
 8005466:	f000 f89f 	bl	80055a8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800546a:	2301      	movs	r3, #1
 800546c:	617b      	str	r3, [r7, #20]
 800546e:	e002      	b.n	8005476 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005470:	f04f 33ff 	mov.w	r3, #4294967295
 8005474:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8005476:	697b      	ldr	r3, [r7, #20]
    }
 8005478:	4618      	mov	r0, r3
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b088      	sub	sp, #32
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
 800548c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 800548e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005490:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	461a      	mov	r2, r3
 8005498:	21a5      	movs	r1, #165	@ 0xa5
 800549a:	f00c fea3 	bl	80121e4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 800549e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054a2:	6879      	ldr	r1, [r7, #4]
 80054a4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80054a8:	440b      	add	r3, r1
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4413      	add	r3, r2
 80054ae:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	f023 0307 	bic.w	r3, r3, #7
 80054b6:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	f003 0307 	and.w	r3, r3, #7
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00d      	beq.n	80054de <prvInitialiseNewTask+0x5e>
    __asm volatile
 80054c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c6:	b672      	cpsid	i
 80054c8:	f383 8811 	msr	BASEPRI, r3
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	b662      	cpsie	i
 80054d6:	617b      	str	r3, [r7, #20]
}
 80054d8:	bf00      	nop
 80054da:	bf00      	nop
 80054dc:	e7fd      	b.n	80054da <prvInitialiseNewTask+0x5a>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d01e      	beq.n	8005522 <prvInitialiseNewTask+0xa2>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054e4:	2300      	movs	r3, #0
 80054e6:	61fb      	str	r3, [r7, #28]
 80054e8:	e012      	b.n	8005510 <prvInitialiseNewTask+0x90>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	4413      	add	r3, r2
 80054f0:	7819      	ldrb	r1, [r3, #0]
 80054f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	4413      	add	r3, r2
 80054f8:	3334      	adds	r3, #52	@ 0x34
 80054fa:	460a      	mov	r2, r1
 80054fc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	4413      	add	r3, r2
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d006      	beq.n	8005518 <prvInitialiseNewTask+0x98>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	3301      	adds	r3, #1
 800550e:	61fb      	str	r3, [r7, #28]
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	2b0f      	cmp	r3, #15
 8005514:	d9e9      	bls.n	80054ea <prvInitialiseNewTask+0x6a>
 8005516:	e000      	b.n	800551a <prvInitialiseNewTask+0x9a>
            {
                break;
 8005518:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 800551a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8005522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005524:	2b06      	cmp	r3, #6
 8005526:	d90d      	bls.n	8005544 <prvInitialiseNewTask+0xc4>
    __asm volatile
 8005528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800552c:	b672      	cpsid	i
 800552e:	f383 8811 	msr	BASEPRI, r3
 8005532:	f3bf 8f6f 	isb	sy
 8005536:	f3bf 8f4f 	dsb	sy
 800553a:	b662      	cpsie	i
 800553c:	613b      	str	r3, [r7, #16]
}
 800553e:	bf00      	nop
 8005540:	bf00      	nop
 8005542:	e7fd      	b.n	8005540 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005546:	2b06      	cmp	r3, #6
 8005548:	d901      	bls.n	800554e <prvInitialiseNewTask+0xce>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800554a:	2306      	movs	r3, #6
 800554c:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800554e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005550:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005552:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8005554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005556:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005558:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800555a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555c:	3304      	adds	r3, #4
 800555e:	4618      	mov	r0, r3
 8005560:	f7fe fe2e 	bl	80041c0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005566:	3318      	adds	r3, #24
 8005568:	4618      	mov	r0, r3
 800556a:	f7fe fe29 	bl	80041c0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800556e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005570:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005572:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8005574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005576:	f1c3 0207 	rsb	r2, r3, #7
 800557a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800557e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005580:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005582:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	68f9      	ldr	r1, [r7, #12]
 8005588:	69b8      	ldr	r0, [r7, #24]
 800558a:	f001 fc73 	bl	8006e74 <pxPortInitialiseStack>
 800558e:	4602      	mov	r2, r0
 8005590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005592:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8005594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005596:	2b00      	cmp	r3, #0
 8005598:	d002      	beq.n	80055a0 <prvInitialiseNewTask+0x120>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800559a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800559c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800559e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80055a0:	bf00      	nop
 80055a2:	3720      	adds	r7, #32
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 80055b0:	f001 fdc0 	bl	8007134 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80055b4:	4b41      	ldr	r3, [pc, #260]	@ (80056bc <prvAddNewTaskToReadyList+0x114>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	3301      	adds	r3, #1
 80055ba:	4a40      	ldr	r2, [pc, #256]	@ (80056bc <prvAddNewTaskToReadyList+0x114>)
 80055bc:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80055be:	4b40      	ldr	r3, [pc, #256]	@ (80056c0 <prvAddNewTaskToReadyList+0x118>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d109      	bne.n	80055da <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80055c6:	4a3e      	ldr	r2, [pc, #248]	@ (80056c0 <prvAddNewTaskToReadyList+0x118>)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80055cc:	4b3b      	ldr	r3, [pc, #236]	@ (80056bc <prvAddNewTaskToReadyList+0x114>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d110      	bne.n	80055f6 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80055d4:	f000 fe14 	bl	8006200 <prvInitialiseTaskLists>
 80055d8:	e00d      	b.n	80055f6 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80055da:	4b3a      	ldr	r3, [pc, #232]	@ (80056c4 <prvAddNewTaskToReadyList+0x11c>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d109      	bne.n	80055f6 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80055e2:	4b37      	ldr	r3, [pc, #220]	@ (80056c0 <prvAddNewTaskToReadyList+0x118>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d802      	bhi.n	80055f6 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80055f0:	4a33      	ldr	r2, [pc, #204]	@ (80056c0 <prvAddNewTaskToReadyList+0x118>)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80055f6:	4b34      	ldr	r3, [pc, #208]	@ (80056c8 <prvAddNewTaskToReadyList+0x120>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	3301      	adds	r3, #1
 80055fc:	4a32      	ldr	r2, [pc, #200]	@ (80056c8 <prvAddNewTaskToReadyList+0x120>)
 80055fe:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005600:	4b31      	ldr	r3, [pc, #196]	@ (80056c8 <prvAddNewTaskToReadyList+0x120>)
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800560c:	2201      	movs	r2, #1
 800560e:	409a      	lsls	r2, r3
 8005610:	4b2e      	ldr	r3, [pc, #184]	@ (80056cc <prvAddNewTaskToReadyList+0x124>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4313      	orrs	r3, r2
 8005616:	4a2d      	ldr	r2, [pc, #180]	@ (80056cc <prvAddNewTaskToReadyList+0x124>)
 8005618:	6013      	str	r3, [r2, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800561e:	492c      	ldr	r1, [pc, #176]	@ (80056d0 <prvAddNewTaskToReadyList+0x128>)
 8005620:	4613      	mov	r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	440b      	add	r3, r1
 800562a:	3304      	adds	r3, #4
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	609a      	str	r2, [r3, #8]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	689a      	ldr	r2, [r3, #8]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	60da      	str	r2, [r3, #12]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	3204      	adds	r2, #4
 8005646:	605a      	str	r2, [r3, #4]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	1d1a      	adds	r2, r3, #4
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	609a      	str	r2, [r3, #8]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005654:	4613      	mov	r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	4413      	add	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4a1c      	ldr	r2, [pc, #112]	@ (80056d0 <prvAddNewTaskToReadyList+0x128>)
 800565e:	441a      	add	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	615a      	str	r2, [r3, #20]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005668:	4919      	ldr	r1, [pc, #100]	@ (80056d0 <prvAddNewTaskToReadyList+0x128>)
 800566a:	4613      	mov	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	440b      	add	r3, r1
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800567a:	1c59      	adds	r1, r3, #1
 800567c:	4814      	ldr	r0, [pc, #80]	@ (80056d0 <prvAddNewTaskToReadyList+0x128>)
 800567e:	4613      	mov	r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4413      	add	r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4403      	add	r3, r0
 8005688:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800568a:	f001 fd89 	bl	80071a0 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800568e:	4b0d      	ldr	r3, [pc, #52]	@ (80056c4 <prvAddNewTaskToReadyList+0x11c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00e      	beq.n	80056b4 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8005696:	4b0a      	ldr	r3, [pc, #40]	@ (80056c0 <prvAddNewTaskToReadyList+0x118>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d207      	bcs.n	80056b4 <prvAddNewTaskToReadyList+0x10c>
 80056a4:	4b0b      	ldr	r3, [pc, #44]	@ (80056d4 <prvAddNewTaskToReadyList+0x12c>)
 80056a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056aa:	601a      	str	r2, [r3, #0]
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80056b4:	bf00      	nop
 80056b6:	3710      	adds	r7, #16
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	24002420 	.word	0x24002420
 80056c0:	24002334 	.word	0x24002334
 80056c4:	2400242c 	.word	0x2400242c
 80056c8:	2400243c 	.word	0x2400243c
 80056cc:	24002428 	.word	0x24002428
 80056d0:	24002338 	.word	0x24002338
 80056d4:	e000ed04 	.word	0xe000ed04

080056d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80056e0:	2300      	movs	r3, #0
 80056e2:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d01a      	beq.n	8005720 <vTaskDelay+0x48>
        {
            vTaskSuspendAll();
 80056ea:	f000 f8dd 	bl	80058a8 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 80056ee:	4b14      	ldr	r3, [pc, #80]	@ (8005740 <vTaskDelay+0x68>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d00d      	beq.n	8005712 <vTaskDelay+0x3a>
    __asm volatile
 80056f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056fa:	b672      	cpsid	i
 80056fc:	f383 8811 	msr	BASEPRI, r3
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	b662      	cpsie	i
 800570a:	60bb      	str	r3, [r7, #8]
}
 800570c:	bf00      	nop
 800570e:	bf00      	nop
 8005710:	e7fd      	b.n	800570e <vTaskDelay+0x36>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005712:	2100      	movs	r1, #0
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f001 f86d 	bl	80067f4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800571a:	f000 f8d3 	bl	80058c4 <xTaskResumeAll>
 800571e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d107      	bne.n	8005736 <vTaskDelay+0x5e>
        {
            taskYIELD_WITHIN_API();
 8005726:	4b07      	ldr	r3, [pc, #28]	@ (8005744 <vTaskDelay+0x6c>)
 8005728:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 8005736:	bf00      	nop
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	24002448 	.word	0x24002448
 8005744:	e000ed04 	.word	0xe000ed04

08005748 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b090      	sub	sp, #64	@ 0x40
 800574c:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdPASS;
 800574e:	2301      	movs	r3, #1
 8005750:	62fb      	str	r3, [r7, #44]	@ 0x2c
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8005752:	2300      	movs	r3, #0
 8005754:	623b      	str	r3, [r7, #32]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8005756:	2300      	movs	r3, #0
 8005758:	627b      	str	r3, [r7, #36]	@ 0x24
 800575a:	e013      	b.n	8005784 <prvCreateIdleTasks+0x3c>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 800575c:	4a2b      	ldr	r2, [pc, #172]	@ (800580c <prvCreateIdleTasks+0xc4>)
 800575e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005760:	4413      	add	r3, r2
 8005762:	7819      	ldrb	r1, [r3, #0]
 8005764:	f107 0210 	add.w	r2, r7, #16
 8005768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576a:	4413      	add	r3, r2
 800576c:	460a      	mov	r2, r1
 800576e:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8005770:	f107 0210 	add.w	r2, r7, #16
 8005774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005776:	4413      	add	r3, r2
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d006      	beq.n	800578c <prvCreateIdleTasks+0x44>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800577e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005780:	3301      	adds	r3, #1
 8005782:	627b      	str	r3, [r7, #36]	@ 0x24
 8005784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005786:	2b0f      	cmp	r3, #15
 8005788:	dde8      	ble.n	800575c <prvCreateIdleTasks+0x14>
 800578a:	e000      	b.n	800578e <prvCreateIdleTasks+0x46>
        {
            break;
 800578c:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800578e:	2300      	movs	r3, #0
 8005790:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005792:	e031      	b.n	80057f8 <prvCreateIdleTasks+0xb0>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8005794:	4b1e      	ldr	r3, [pc, #120]	@ (8005810 <prvCreateIdleTasks+0xc8>)
 8005796:	623b      	str	r3, [r7, #32]
        }
        #endif /* if ( configNUMBER_OF_CORES > 1 ) */

        #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8005798:	2300      	movs	r3, #0
 800579a:	60fb      	str	r3, [r7, #12]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 800579c:	2300      	movs	r3, #0
 800579e:	60bb      	str	r3, [r7, #8]

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            #if ( configNUMBER_OF_CORES == 1 )
            {
                vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize );
 80057a0:	1d3a      	adds	r2, r7, #4
 80057a2:	f107 0108 	add.w	r1, r7, #8
 80057a6:	f107 030c 	add.w	r3, r7, #12
 80057aa:	4618      	mov	r0, r3
 80057ac:	f001 f878 	bl	80068a0 <vApplicationGetIdleTaskMemory>
                {
                    vApplicationGetPassiveIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize, ( BaseType_t ) ( xCoreID - 1 ) );
                }
            }
            #endif /* if ( configNUMBER_OF_CORES == 1 ) */
            xIdleTaskHandles[ xCoreID ] = xTaskCreateStatic( pxIdleTaskFunction,
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	f107 0110 	add.w	r1, r7, #16
 80057ba:	9202      	str	r2, [sp, #8]
 80057bc:	9301      	str	r3, [sp, #4]
 80057be:	2300      	movs	r3, #0
 80057c0:	9300      	str	r3, [sp, #0]
 80057c2:	2300      	movs	r3, #0
 80057c4:	4602      	mov	r2, r0
 80057c6:	6a38      	ldr	r0, [r7, #32]
 80057c8:	f7ff fdd3 	bl	8005372 <xTaskCreateStatic>
 80057cc:	4602      	mov	r2, r0
 80057ce:	4911      	ldr	r1, [pc, #68]	@ (8005814 <prvCreateIdleTasks+0xcc>)
 80057d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                                             ( void * ) NULL,
                                                             portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                             pxIdleTaskStackBuffer,
                                                             pxIdleTaskTCBBuffer );

            if( xIdleTaskHandles[ xCoreID ] != NULL )
 80057d6:	4a0f      	ldr	r2, [pc, #60]	@ (8005814 <prvCreateIdleTasks+0xcc>)
 80057d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d002      	beq.n	80057e8 <prvCreateIdleTasks+0xa0>
            {
                xReturn = pdPASS;
 80057e2:	2301      	movs	r3, #1
 80057e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057e6:	e001      	b.n	80057ec <prvCreateIdleTasks+0xa4>
            }
            else
            {
                xReturn = pdFAIL;
 80057e8:	2300      	movs	r3, #0
 80057ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 80057ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d006      	beq.n	8005800 <prvCreateIdleTasks+0xb8>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80057f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f4:	3301      	adds	r3, #1
 80057f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	ddca      	ble.n	8005794 <prvCreateIdleTasks+0x4c>
 80057fe:	e000      	b.n	8005802 <prvCreateIdleTasks+0xba>
        {
            break;
 8005800:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8005802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005804:	4618      	mov	r0, r3
 8005806:	3730      	adds	r7, #48	@ 0x30
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	08013700 	.word	0x08013700
 8005810:	080061d1 	.word	0x080061d1
 8005814:	24002444 	.word	0x24002444

08005818 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 800581e:	f7ff ff93 	bl	8005748 <prvCreateIdleTasks>
 8005822:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d102      	bne.n	8005830 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 800582a:	f001 f86d 	bl	8006908 <xTimerCreateTimerTask>
 800582e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d118      	bne.n	8005868 <vTaskStartScheduler+0x50>
    __asm volatile
 8005836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800583a:	b672      	cpsid	i
 800583c:	f383 8811 	msr	BASEPRI, r3
 8005840:	f3bf 8f6f 	isb	sy
 8005844:	f3bf 8f4f 	dsb	sy
 8005848:	b662      	cpsie	i
 800584a:	60bb      	str	r3, [r7, #8]
}
 800584c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800584e:	4b12      	ldr	r3, [pc, #72]	@ (8005898 <vTaskStartScheduler+0x80>)
 8005850:	f04f 32ff 	mov.w	r2, #4294967295
 8005854:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005856:	4b11      	ldr	r3, [pc, #68]	@ (800589c <vTaskStartScheduler+0x84>)
 8005858:	2201      	movs	r2, #1
 800585a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800585c:	4b10      	ldr	r3, [pc, #64]	@ (80058a0 <vTaskStartScheduler+0x88>)
 800585e:	2200      	movs	r2, #0
 8005860:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8005862:	f001 fb97 	bl	8006f94 <xPortStartScheduler>
 8005866:	e011      	b.n	800588c <vTaskStartScheduler+0x74>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586e:	d10d      	bne.n	800588c <vTaskStartScheduler+0x74>
    __asm volatile
 8005870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005874:	b672      	cpsid	i
 8005876:	f383 8811 	msr	BASEPRI, r3
 800587a:	f3bf 8f6f 	isb	sy
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	b662      	cpsie	i
 8005884:	607b      	str	r3, [r7, #4]
}
 8005886:	bf00      	nop
 8005888:	bf00      	nop
 800588a:	e7fd      	b.n	8005888 <vTaskStartScheduler+0x70>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800588c:	4b05      	ldr	r3, [pc, #20]	@ (80058a4 <vTaskStartScheduler+0x8c>)
 800588e:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8005890:	bf00      	nop
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	24002440 	.word	0x24002440
 800589c:	2400242c 	.word	0x2400242c
 80058a0:	24002424 	.word	0x24002424
 80058a4:	080145b0 	.word	0x080145b0

080058a8 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80058a8:	b480      	push	{r7}
 80058aa:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 80058ac:	4b04      	ldr	r3, [pc, #16]	@ (80058c0 <vTaskSuspendAll+0x18>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	3301      	adds	r3, #1
 80058b2:	4a03      	ldr	r2, [pc, #12]	@ (80058c0 <vTaskSuspendAll+0x18>)
 80058b4:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 80058b6:	bf00      	nop
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr
 80058c0:	24002448 	.word	0x24002448

080058c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b088      	sub	sp, #32
 80058c8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80058ca:	2300      	movs	r3, #0
 80058cc:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80058ce:	2300      	movs	r3, #0
 80058d0:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 80058d2:	f001 fc2f 	bl	8007134 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80058d6:	2300      	movs	r3, #0
 80058d8:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80058da:	4b76      	ldr	r3, [pc, #472]	@ (8005ab4 <xTaskResumeAll+0x1f0>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10d      	bne.n	80058fe <xTaskResumeAll+0x3a>
    __asm volatile
 80058e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e6:	b672      	cpsid	i
 80058e8:	f383 8811 	msr	BASEPRI, r3
 80058ec:	f3bf 8f6f 	isb	sy
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	b662      	cpsie	i
 80058f6:	603b      	str	r3, [r7, #0]
}
 80058f8:	bf00      	nop
 80058fa:	bf00      	nop
 80058fc:	e7fd      	b.n	80058fa <xTaskResumeAll+0x36>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80058fe:	4b6d      	ldr	r3, [pc, #436]	@ (8005ab4 <xTaskResumeAll+0x1f0>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3b01      	subs	r3, #1
 8005904:	4a6b      	ldr	r2, [pc, #428]	@ (8005ab4 <xTaskResumeAll+0x1f0>)
 8005906:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005908:	4b6a      	ldr	r3, [pc, #424]	@ (8005ab4 <xTaskResumeAll+0x1f0>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	f040 80ca 	bne.w	8005aa6 <xTaskResumeAll+0x1e2>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005912:	4b69      	ldr	r3, [pc, #420]	@ (8005ab8 <xTaskResumeAll+0x1f4>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	f000 80c5 	beq.w	8005aa6 <xTaskResumeAll+0x1e2>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800591c:	e08e      	b.n	8005a3c <xTaskResumeAll+0x178>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800591e:	4b67      	ldr	r3, [pc, #412]	@ (8005abc <xTaskResumeAll+0x1f8>)
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	69fa      	ldr	r2, [r7, #28]
 8005932:	6a12      	ldr	r2, [r2, #32]
 8005934:	609a      	str	r2, [r3, #8]
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	69fa      	ldr	r2, [r7, #28]
 800593c:	69d2      	ldr	r2, [r2, #28]
 800593e:	605a      	str	r2, [r3, #4]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	685a      	ldr	r2, [r3, #4]
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	3318      	adds	r3, #24
 8005948:	429a      	cmp	r2, r3
 800594a:	d103      	bne.n	8005954 <xTaskResumeAll+0x90>
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	6a1a      	ldr	r2, [r3, #32]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	605a      	str	r2, [r3, #4]
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	2200      	movs	r2, #0
 8005958:	629a      	str	r2, [r3, #40]	@ 0x28
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	1e5a      	subs	r2, r3, #1
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	60bb      	str	r3, [r7, #8]
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	69fa      	ldr	r2, [r7, #28]
 8005970:	68d2      	ldr	r2, [r2, #12]
 8005972:	609a      	str	r2, [r3, #8]
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	69fa      	ldr	r2, [r7, #28]
 800597a:	6892      	ldr	r2, [r2, #8]
 800597c:	605a      	str	r2, [r3, #4]
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	3304      	adds	r3, #4
 8005986:	429a      	cmp	r2, r3
 8005988:	d103      	bne.n	8005992 <xTaskResumeAll+0xce>
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	68da      	ldr	r2, [r3, #12]
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	605a      	str	r2, [r3, #4]
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	2200      	movs	r2, #0
 8005996:	615a      	str	r2, [r3, #20]
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	1e5a      	subs	r2, r3, #1
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a6:	2201      	movs	r2, #1
 80059a8:	409a      	lsls	r2, r3
 80059aa:	4b45      	ldr	r3, [pc, #276]	@ (8005ac0 <xTaskResumeAll+0x1fc>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	4a43      	ldr	r2, [pc, #268]	@ (8005ac0 <xTaskResumeAll+0x1fc>)
 80059b2:	6013      	str	r3, [r2, #0]
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059b8:	4942      	ldr	r1, [pc, #264]	@ (8005ac4 <xTaskResumeAll+0x200>)
 80059ba:	4613      	mov	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	440b      	add	r3, r1
 80059c4:	3304      	adds	r3, #4
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	607b      	str	r3, [r7, #4]
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	609a      	str	r2, [r3, #8]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	689a      	ldr	r2, [r3, #8]
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	60da      	str	r2, [r3, #12]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	69fa      	ldr	r2, [r7, #28]
 80059de:	3204      	adds	r2, #4
 80059e0:	605a      	str	r2, [r3, #4]
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	1d1a      	adds	r2, r3, #4
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	609a      	str	r2, [r3, #8]
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059ee:	4613      	mov	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4413      	add	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4a33      	ldr	r2, [pc, #204]	@ (8005ac4 <xTaskResumeAll+0x200>)
 80059f8:	441a      	add	r2, r3
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	615a      	str	r2, [r3, #20]
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a02:	4930      	ldr	r1, [pc, #192]	@ (8005ac4 <xTaskResumeAll+0x200>)
 8005a04:	4613      	mov	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	440b      	add	r3, r1
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	69fa      	ldr	r2, [r7, #28]
 8005a12:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005a14:	1c59      	adds	r1, r3, #1
 8005a16:	482b      	ldr	r0, [pc, #172]	@ (8005ac4 <xTaskResumeAll+0x200>)
 8005a18:	4613      	mov	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4403      	add	r3, r0
 8005a22:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a28:	4b27      	ldr	r3, [pc, #156]	@ (8005ac8 <xTaskResumeAll+0x204>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d904      	bls.n	8005a3c <xTaskResumeAll+0x178>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8005a32:	4a26      	ldr	r2, [pc, #152]	@ (8005acc <xTaskResumeAll+0x208>)
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	2101      	movs	r1, #1
 8005a38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a3c:	4b1f      	ldr	r3, [pc, #124]	@ (8005abc <xTaskResumeAll+0x1f8>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f47f af6c 	bne.w	800591e <xTaskResumeAll+0x5a>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d001      	beq.n	8005a50 <xTaskResumeAll+0x18c>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8005a4c:	f000 fc72 	bl	8006334 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005a50:	4b1f      	ldr	r3, [pc, #124]	@ (8005ad0 <xTaskResumeAll+0x20c>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d012      	beq.n	8005a82 <xTaskResumeAll+0x1be>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8005a5c:	f000 f86a 	bl	8005b34 <xTaskIncrementTick>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d004      	beq.n	8005a70 <xTaskResumeAll+0x1ac>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8005a66:	4a19      	ldr	r2, [pc, #100]	@ (8005acc <xTaskResumeAll+0x208>)
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	2101      	movs	r1, #1
 8005a6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	3b01      	subs	r3, #1
 8005a74:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1ef      	bne.n	8005a5c <xTaskResumeAll+0x198>

                            xPendedTicks = 0;
 8005a7c:	4b14      	ldr	r3, [pc, #80]	@ (8005ad0 <xTaskResumeAll+0x20c>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8005a82:	4a12      	ldr	r2, [pc, #72]	@ (8005acc <xTaskResumeAll+0x208>)
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00b      	beq.n	8005aa6 <xTaskResumeAll+0x1e2>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8005a92:	4b0d      	ldr	r3, [pc, #52]	@ (8005ac8 <xTaskResumeAll+0x204>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4b0f      	ldr	r3, [pc, #60]	@ (8005ad4 <xTaskResumeAll+0x210>)
 8005a98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a9c:	601a      	str	r2, [r3, #0]
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005aa6:	f001 fb7b 	bl	80071a0 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8005aaa:	69bb      	ldr	r3, [r7, #24]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3720      	adds	r7, #32
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	24002448 	.word	0x24002448
 8005ab8:	24002420 	.word	0x24002420
 8005abc:	240023f4 	.word	0x240023f4
 8005ac0:	24002428 	.word	0x24002428
 8005ac4:	24002338 	.word	0x24002338
 8005ac8:	24002334 	.word	0x24002334
 8005acc:	24002434 	.word	0x24002434
 8005ad0:	24002430 	.word	0x24002430
 8005ad4:	e000ed04 	.word	0xe000ed04

08005ad8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005ade:	4b05      	ldr	r3, [pc, #20]	@ (8005af4 <xTaskGetTickCount+0x1c>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8005ae4:	687b      	ldr	r3, [r7, #4]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	24002424 	.word	0x24002424

08005af8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005afe:	f001 fc07 	bl	8007310 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005b02:	2300      	movs	r3, #0
 8005b04:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8005b06:	4b04      	ldr	r3, [pc, #16]	@ (8005b18 <xTaskGetTickCountFromISR+0x20>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );

    return xReturn;
 8005b0c:	683b      	ldr	r3, [r7, #0]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3708      	adds	r7, #8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	24002424 	.word	0x24002424

08005b1c <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	af00      	add	r7, sp, #0

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );

    return uxCurrentNumberOfTasks;
 8005b20:	4b03      	ldr	r3, [pc, #12]	@ (8005b30 <uxTaskGetNumberOfTasks+0x14>)
 8005b22:	681b      	ldr	r3, [r3, #0]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	24002420 	.word	0x24002420

08005b34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b08a      	sub	sp, #40	@ 0x28
 8005b38:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005b3e:	4b80      	ldr	r3, [pc, #512]	@ (8005d40 <xTaskIncrementTick+0x20c>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f040 80f1 	bne.w	8005d2a <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b48:	4b7e      	ldr	r3, [pc, #504]	@ (8005d44 <xTaskIncrementTick+0x210>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005b50:	4a7c      	ldr	r2, [pc, #496]	@ (8005d44 <xTaskIncrementTick+0x210>)
 8005b52:	6a3b      	ldr	r3, [r7, #32]
 8005b54:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d123      	bne.n	8005ba4 <xTaskIncrementTick+0x70>
        {
            taskSWITCH_DELAYED_LISTS();
 8005b5c:	4b7a      	ldr	r3, [pc, #488]	@ (8005d48 <xTaskIncrementTick+0x214>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00d      	beq.n	8005b82 <xTaskIncrementTick+0x4e>
    __asm volatile
 8005b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b6a:	b672      	cpsid	i
 8005b6c:	f383 8811 	msr	BASEPRI, r3
 8005b70:	f3bf 8f6f 	isb	sy
 8005b74:	f3bf 8f4f 	dsb	sy
 8005b78:	b662      	cpsie	i
 8005b7a:	607b      	str	r3, [r7, #4]
}
 8005b7c:	bf00      	nop
 8005b7e:	bf00      	nop
 8005b80:	e7fd      	b.n	8005b7e <xTaskIncrementTick+0x4a>
 8005b82:	4b71      	ldr	r3, [pc, #452]	@ (8005d48 <xTaskIncrementTick+0x214>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	61fb      	str	r3, [r7, #28]
 8005b88:	4b70      	ldr	r3, [pc, #448]	@ (8005d4c <xTaskIncrementTick+0x218>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a6e      	ldr	r2, [pc, #440]	@ (8005d48 <xTaskIncrementTick+0x214>)
 8005b8e:	6013      	str	r3, [r2, #0]
 8005b90:	4a6e      	ldr	r2, [pc, #440]	@ (8005d4c <xTaskIncrementTick+0x218>)
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	6013      	str	r3, [r2, #0]
 8005b96:	4b6e      	ldr	r3, [pc, #440]	@ (8005d50 <xTaskIncrementTick+0x21c>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	4a6c      	ldr	r2, [pc, #432]	@ (8005d50 <xTaskIncrementTick+0x21c>)
 8005b9e:	6013      	str	r3, [r2, #0]
 8005ba0:	f000 fbc8 	bl	8006334 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005ba4:	4b6b      	ldr	r3, [pc, #428]	@ (8005d54 <xTaskIncrementTick+0x220>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6a3a      	ldr	r2, [r7, #32]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	f0c0 80a8 	bcc.w	8005d00 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bb0:	4b65      	ldr	r3, [pc, #404]	@ (8005d48 <xTaskIncrementTick+0x214>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d104      	bne.n	8005bc4 <xTaskIncrementTick+0x90>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8005bba:	4b66      	ldr	r3, [pc, #408]	@ (8005d54 <xTaskIncrementTick+0x220>)
 8005bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8005bc0:	601a      	str	r2, [r3, #0]
                    break;
 8005bc2:	e09d      	b.n	8005d00 <xTaskIncrementTick+0x1cc>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005bc4:	4b60      	ldr	r3, [pc, #384]	@ (8005d48 <xTaskIncrementTick+0x214>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8005bd4:	6a3a      	ldr	r2, [r7, #32]
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d203      	bcs.n	8005be4 <xTaskIncrementTick+0xb0>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005bdc:	4a5d      	ldr	r2, [pc, #372]	@ (8005d54 <xTaskIncrementTick+0x220>)
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	6013      	str	r3, [r2, #0]
                        break;
 8005be2:	e08d      	b.n	8005d00 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	613b      	str	r3, [r7, #16]
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	69ba      	ldr	r2, [r7, #24]
 8005bf0:	68d2      	ldr	r2, [r2, #12]
 8005bf2:	609a      	str	r2, [r3, #8]
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	6892      	ldr	r2, [r2, #8]
 8005bfc:	605a      	str	r2, [r3, #4]
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	3304      	adds	r3, #4
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d103      	bne.n	8005c12 <xTaskIncrementTick+0xde>
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	68da      	ldr	r2, [r3, #12]
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	605a      	str	r2, [r3, #4]
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	2200      	movs	r2, #0
 8005c16:	615a      	str	r2, [r3, #20]
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	1e5a      	subs	r2, r3, #1
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d01e      	beq.n	8005c68 <xTaskIncrementTick+0x134>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c2e:	60fb      	str	r3, [r7, #12]
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	69db      	ldr	r3, [r3, #28]
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	6a12      	ldr	r2, [r2, #32]
 8005c38:	609a      	str	r2, [r3, #8]
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	69ba      	ldr	r2, [r7, #24]
 8005c40:	69d2      	ldr	r2, [r2, #28]
 8005c42:	605a      	str	r2, [r3, #4]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	3318      	adds	r3, #24
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d103      	bne.n	8005c58 <xTaskIncrementTick+0x124>
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	6a1a      	ldr	r2, [r3, #32]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	605a      	str	r2, [r3, #4]
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	1e5a      	subs	r2, r3, #1
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	409a      	lsls	r2, r3
 8005c70:	4b39      	ldr	r3, [pc, #228]	@ (8005d58 <xTaskIncrementTick+0x224>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	4a38      	ldr	r2, [pc, #224]	@ (8005d58 <xTaskIncrementTick+0x224>)
 8005c78:	6013      	str	r3, [r2, #0]
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c7e:	4937      	ldr	r1, [pc, #220]	@ (8005d5c <xTaskIncrementTick+0x228>)
 8005c80:	4613      	mov	r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4413      	add	r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	440b      	add	r3, r1
 8005c8a:	3304      	adds	r3, #4
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	60bb      	str	r3, [r7, #8]
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	609a      	str	r2, [r3, #8]
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	689a      	ldr	r2, [r3, #8]
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	60da      	str	r2, [r3, #12]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	3204      	adds	r2, #4
 8005ca6:	605a      	str	r2, [r3, #4]
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	1d1a      	adds	r2, r3, #4
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	609a      	str	r2, [r3, #8]
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4413      	add	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4a27      	ldr	r2, [pc, #156]	@ (8005d5c <xTaskIncrementTick+0x228>)
 8005cbe:	441a      	add	r2, r3
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	615a      	str	r2, [r3, #20]
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cc8:	4924      	ldr	r1, [pc, #144]	@ (8005d5c <xTaskIncrementTick+0x228>)
 8005cca:	4613      	mov	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4413      	add	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	440b      	add	r3, r1
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	69ba      	ldr	r2, [r7, #24]
 8005cd8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005cda:	1c59      	adds	r1, r3, #1
 8005cdc:	481f      	ldr	r0, [pc, #124]	@ (8005d5c <xTaskIncrementTick+0x228>)
 8005cde:	4613      	mov	r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4413      	add	r3, r2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4403      	add	r3, r0
 8005ce8:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cee:	4b1c      	ldr	r3, [pc, #112]	@ (8005d60 <xTaskIncrementTick+0x22c>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	f67f af5b 	bls.w	8005bb0 <xTaskIncrementTick+0x7c>
                            {
                                xSwitchRequired = pdTRUE;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cfe:	e757      	b.n	8005bb0 <xTaskIncrementTick+0x7c>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8005d00:	4b17      	ldr	r3, [pc, #92]	@ (8005d60 <xTaskIncrementTick+0x22c>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d06:	4915      	ldr	r1, [pc, #84]	@ (8005d5c <xTaskIncrementTick+0x228>)
 8005d08:	4613      	mov	r3, r2
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4413      	add	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	440b      	add	r3, r1
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d901      	bls.n	8005d1c <xTaskIncrementTick+0x1e8>
                {
                    xSwitchRequired = pdTRUE;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8005d1c:	4b11      	ldr	r3, [pc, #68]	@ (8005d64 <xTaskIncrementTick+0x230>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d007      	beq.n	8005d34 <xTaskIncrementTick+0x200>
                {
                    xSwitchRequired = pdTRUE;
 8005d24:	2301      	movs	r3, #1
 8005d26:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d28:	e004      	b.n	8005d34 <xTaskIncrementTick+0x200>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8005d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8005d68 <xTaskIncrementTick+0x234>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	4a0d      	ldr	r2, [pc, #52]	@ (8005d68 <xTaskIncrementTick+0x234>)
 8005d32:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8005d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3728      	adds	r7, #40	@ 0x28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	24002448 	.word	0x24002448
 8005d44:	24002424 	.word	0x24002424
 8005d48:	240023ec 	.word	0x240023ec
 8005d4c:	240023f0 	.word	0x240023f0
 8005d50:	24002438 	.word	0x24002438
 8005d54:	24002440 	.word	0x24002440
 8005d58:	24002428 	.word	0x24002428
 8005d5c:	24002338 	.word	0x24002338
 8005d60:	24002334 	.word	0x24002334
 8005d64:	24002434 	.word	0x24002434
 8005d68:	24002430 	.word	0x24002430

08005d6c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8005d6c:	b480      	push	{r7}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8005d72:	4b29      	ldr	r3, [pc, #164]	@ (8005e18 <vTaskSwitchContext+0xac>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d003      	beq.n	8005d82 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8005d7a:	4b28      	ldr	r3, [pc, #160]	@ (8005e1c <vTaskSwitchContext+0xb0>)
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8005d80:	e043      	b.n	8005e0a <vTaskSwitchContext+0x9e>
            xYieldPendings[ 0 ] = pdFALSE;
 8005d82:	4b26      	ldr	r3, [pc, #152]	@ (8005e1c <vTaskSwitchContext+0xb0>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8005d88:	4b25      	ldr	r3, [pc, #148]	@ (8005e20 <vTaskSwitchContext+0xb4>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	fab3 f383 	clz	r3, r3
 8005d94:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8005d96:	7afb      	ldrb	r3, [r7, #11]
 8005d98:	f1c3 031f 	rsb	r3, r3, #31
 8005d9c:	617b      	str	r3, [r7, #20]
 8005d9e:	4921      	ldr	r1, [pc, #132]	@ (8005e24 <vTaskSwitchContext+0xb8>)
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	4613      	mov	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4413      	add	r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	440b      	add	r3, r1
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10d      	bne.n	8005dce <vTaskSwitchContext+0x62>
    __asm volatile
 8005db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db6:	b672      	cpsid	i
 8005db8:	f383 8811 	msr	BASEPRI, r3
 8005dbc:	f3bf 8f6f 	isb	sy
 8005dc0:	f3bf 8f4f 	dsb	sy
 8005dc4:	b662      	cpsie	i
 8005dc6:	607b      	str	r3, [r7, #4]
}
 8005dc8:	bf00      	nop
 8005dca:	bf00      	nop
 8005dcc:	e7fd      	b.n	8005dca <vTaskSwitchContext+0x5e>
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4413      	add	r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4a12      	ldr	r2, [pc, #72]	@ (8005e24 <vTaskSwitchContext+0xb8>)
 8005dda:	4413      	add	r3, r2
 8005ddc:	613b      	str	r3, [r7, #16]
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	605a      	str	r2, [r3, #4]
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	3308      	adds	r3, #8
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d103      	bne.n	8005dfc <vTaskSwitchContext+0x90>
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	68da      	ldr	r2, [r3, #12]
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	605a      	str	r2, [r3, #4]
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	4a09      	ldr	r2, [pc, #36]	@ (8005e28 <vTaskSwitchContext+0xbc>)
 8005e04:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8005e06:	4b08      	ldr	r3, [pc, #32]	@ (8005e28 <vTaskSwitchContext+0xbc>)
 8005e08:	681b      	ldr	r3, [r3, #0]
    }
 8005e0a:	bf00      	nop
 8005e0c:	371c      	adds	r7, #28
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	24002448 	.word	0x24002448
 8005e1c:	24002434 	.word	0x24002434
 8005e20:	24002428 	.word	0x24002428
 8005e24:	24002338 	.word	0x24002338
 8005e28:	24002334 	.word	0x24002334

08005e2c <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10d      	bne.n	8005e58 <vTaskPlaceOnEventList+0x2c>
    __asm volatile
 8005e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e40:	b672      	cpsid	i
 8005e42:	f383 8811 	msr	BASEPRI, r3
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	b662      	cpsie	i
 8005e50:	60fb      	str	r3, [r7, #12]
}
 8005e52:	bf00      	nop
 8005e54:	bf00      	nop
 8005e56:	e7fd      	b.n	8005e54 <vTaskPlaceOnEventList+0x28>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e58:	4b07      	ldr	r3, [pc, #28]	@ (8005e78 <vTaskPlaceOnEventList+0x4c>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	3318      	adds	r3, #24
 8005e5e:	4619      	mov	r1, r3
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f7fe f9ba 	bl	80041da <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e66:	2101      	movs	r1, #1
 8005e68:	6838      	ldr	r0, [r7, #0]
 8005e6a:	f000 fcc3 	bl	80067f4 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8005e6e:	bf00      	nop
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	24002334 	.word	0x24002334

08005e7c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10d      	bne.n	8005eaa <vTaskPlaceOnEventListRestricted+0x2e>
    __asm volatile
 8005e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e92:	b672      	cpsid	i
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	b662      	cpsie	i
 8005ea2:	613b      	str	r3, [r7, #16]
}
 8005ea4:	bf00      	nop
 8005ea6:	bf00      	nop
 8005ea8:	e7fd      	b.n	8005ea6 <vTaskPlaceOnEventListRestricted+0x2a>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	617b      	str	r3, [r7, #20]
 8005eb0:	4b15      	ldr	r3, [pc, #84]	@ (8005f08 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	61da      	str	r2, [r3, #28]
 8005eb8:	4b13      	ldr	r3, [pc, #76]	@ (8005f08 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	6892      	ldr	r2, [r2, #8]
 8005ec0:	621a      	str	r2, [r3, #32]
 8005ec2:	4b11      	ldr	r3, [pc, #68]	@ (8005f08 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	3218      	adds	r2, #24
 8005ecc:	605a      	str	r2, [r3, #4]
 8005ece:	4b0e      	ldr	r3, [pc, #56]	@ (8005f08 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f103 0218 	add.w	r2, r3, #24
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	609a      	str	r2, [r3, #8]
 8005eda:	4b0b      	ldr	r3, [pc, #44]	@ (8005f08 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	1c5a      	adds	r2, r3, #1
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d002      	beq.n	8005ef8 <vTaskPlaceOnEventListRestricted+0x7c>
        {
            xTicksToWait = portMAX_DELAY;
 8005ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ef6:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005ef8:	6879      	ldr	r1, [r7, #4]
 8005efa:	68b8      	ldr	r0, [r7, #8]
 8005efc:	f000 fc7a 	bl	80067f4 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 8005f00:	bf00      	nop
 8005f02:	3718      	adds	r7, #24
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	24002334 	.word	0x24002334

08005f0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b08b      	sub	sp, #44	@ 0x2c
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10d      	bne.n	8005f3e <xTaskRemoveFromEventList+0x32>
    __asm volatile
 8005f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f26:	b672      	cpsid	i
 8005f28:	f383 8811 	msr	BASEPRI, r3
 8005f2c:	f3bf 8f6f 	isb	sy
 8005f30:	f3bf 8f4f 	dsb	sy
 8005f34:	b662      	cpsie	i
 8005f36:	60fb      	str	r3, [r7, #12]
}
 8005f38:	bf00      	nop
 8005f3a:	bf00      	nop
 8005f3c:	e7fd      	b.n	8005f3a <xTaskRemoveFromEventList+0x2e>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8005f3e:	6a3b      	ldr	r3, [r7, #32]
 8005f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f42:	61fb      	str	r3, [r7, #28]
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	69db      	ldr	r3, [r3, #28]
 8005f48:	6a3a      	ldr	r2, [r7, #32]
 8005f4a:	6a12      	ldr	r2, [r2, #32]
 8005f4c:	609a      	str	r2, [r3, #8]
 8005f4e:	6a3b      	ldr	r3, [r7, #32]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	6a3a      	ldr	r2, [r7, #32]
 8005f54:	69d2      	ldr	r2, [r2, #28]
 8005f56:	605a      	str	r2, [r3, #4]
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	6a3b      	ldr	r3, [r7, #32]
 8005f5e:	3318      	adds	r3, #24
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d103      	bne.n	8005f6c <xTaskRemoveFromEventList+0x60>
 8005f64:	6a3b      	ldr	r3, [r7, #32]
 8005f66:	6a1a      	ldr	r2, [r3, #32]
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	605a      	str	r2, [r3, #4]
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	1e5a      	subs	r2, r3, #1
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005f7c:	4b4b      	ldr	r3, [pc, #300]	@ (80060ac <xTaskRemoveFromEventList+0x1a0>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d160      	bne.n	8006046 <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	617b      	str	r3, [r7, #20]
 8005f8a:	6a3b      	ldr	r3, [r7, #32]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	6a3a      	ldr	r2, [r7, #32]
 8005f90:	68d2      	ldr	r2, [r2, #12]
 8005f92:	609a      	str	r2, [r3, #8]
 8005f94:	6a3b      	ldr	r3, [r7, #32]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	6a3a      	ldr	r2, [r7, #32]
 8005f9a:	6892      	ldr	r2, [r2, #8]
 8005f9c:	605a      	str	r2, [r3, #4]
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	685a      	ldr	r2, [r3, #4]
 8005fa2:	6a3b      	ldr	r3, [r7, #32]
 8005fa4:	3304      	adds	r3, #4
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d103      	bne.n	8005fb2 <xTaskRemoveFromEventList+0xa6>
 8005faa:	6a3b      	ldr	r3, [r7, #32]
 8005fac:	68da      	ldr	r2, [r3, #12]
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	605a      	str	r2, [r3, #4]
 8005fb2:	6a3b      	ldr	r3, [r7, #32]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	615a      	str	r2, [r3, #20]
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	1e5a      	subs	r2, r3, #1
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	409a      	lsls	r2, r3
 8005fca:	4b39      	ldr	r3, [pc, #228]	@ (80060b0 <xTaskRemoveFromEventList+0x1a4>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	4a37      	ldr	r2, [pc, #220]	@ (80060b0 <xTaskRemoveFromEventList+0x1a4>)
 8005fd2:	6013      	str	r3, [r2, #0]
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fd8:	4936      	ldr	r1, [pc, #216]	@ (80060b4 <xTaskRemoveFromEventList+0x1a8>)
 8005fda:	4613      	mov	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	440b      	add	r3, r1
 8005fe4:	3304      	adds	r3, #4
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	613b      	str	r3, [r7, #16]
 8005fea:	6a3b      	ldr	r3, [r7, #32]
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	609a      	str	r2, [r3, #8]
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	689a      	ldr	r2, [r3, #8]
 8005ff4:	6a3b      	ldr	r3, [r7, #32]
 8005ff6:	60da      	str	r2, [r3, #12]
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	6a3a      	ldr	r2, [r7, #32]
 8005ffe:	3204      	adds	r2, #4
 8006000:	605a      	str	r2, [r3, #4]
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	1d1a      	adds	r2, r3, #4
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	609a      	str	r2, [r3, #8]
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800600e:	4613      	mov	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4a27      	ldr	r2, [pc, #156]	@ (80060b4 <xTaskRemoveFromEventList+0x1a8>)
 8006018:	441a      	add	r2, r3
 800601a:	6a3b      	ldr	r3, [r7, #32]
 800601c:	615a      	str	r2, [r3, #20]
 800601e:	6a3b      	ldr	r3, [r7, #32]
 8006020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006022:	4924      	ldr	r1, [pc, #144]	@ (80060b4 <xTaskRemoveFromEventList+0x1a8>)
 8006024:	4613      	mov	r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	4413      	add	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	440b      	add	r3, r1
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6a3a      	ldr	r2, [r7, #32]
 8006032:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006034:	1c59      	adds	r1, r3, #1
 8006036:	481f      	ldr	r0, [pc, #124]	@ (80060b4 <xTaskRemoveFromEventList+0x1a8>)
 8006038:	4613      	mov	r3, r2
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4413      	add	r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4403      	add	r3, r0
 8006042:	6019      	str	r1, [r3, #0]
 8006044:	e01b      	b.n	800607e <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006046:	4b1c      	ldr	r3, [pc, #112]	@ (80060b8 <xTaskRemoveFromEventList+0x1ac>)
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	61bb      	str	r3, [r7, #24]
 800604c:	6a3b      	ldr	r3, [r7, #32]
 800604e:	69ba      	ldr	r2, [r7, #24]
 8006050:	61da      	str	r2, [r3, #28]
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	689a      	ldr	r2, [r3, #8]
 8006056:	6a3b      	ldr	r3, [r7, #32]
 8006058:	621a      	str	r2, [r3, #32]
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	6a3a      	ldr	r2, [r7, #32]
 8006060:	3218      	adds	r2, #24
 8006062:	605a      	str	r2, [r3, #4]
 8006064:	6a3b      	ldr	r3, [r7, #32]
 8006066:	f103 0218 	add.w	r2, r3, #24
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	609a      	str	r2, [r3, #8]
 800606e:	6a3b      	ldr	r3, [r7, #32]
 8006070:	4a11      	ldr	r2, [pc, #68]	@ (80060b8 <xTaskRemoveFromEventList+0x1ac>)
 8006072:	629a      	str	r2, [r3, #40]	@ 0x28
 8006074:	4b10      	ldr	r3, [pc, #64]	@ (80060b8 <xTaskRemoveFromEventList+0x1ac>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	3301      	adds	r3, #1
 800607a:	4a0f      	ldr	r2, [pc, #60]	@ (80060b8 <xTaskRemoveFromEventList+0x1ac>)
 800607c:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800607e:	6a3b      	ldr	r3, [r7, #32]
 8006080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006082:	4b0e      	ldr	r3, [pc, #56]	@ (80060bc <xTaskRemoveFromEventList+0x1b0>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006088:	429a      	cmp	r2, r3
 800608a:	d905      	bls.n	8006098 <xTaskRemoveFromEventList+0x18c>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 800608c:	2301      	movs	r3, #1
 800608e:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8006090:	4b0b      	ldr	r3, [pc, #44]	@ (80060c0 <xTaskRemoveFromEventList+0x1b4>)
 8006092:	2201      	movs	r2, #1
 8006094:	601a      	str	r2, [r3, #0]
 8006096:	e001      	b.n	800609c <xTaskRemoveFromEventList+0x190>
        }
        else
        {
            xReturn = pdFALSE;
 8006098:	2300      	movs	r3, #0
 800609a:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 800609c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800609e:	4618      	mov	r0, r3
 80060a0:	372c      	adds	r7, #44	@ 0x2c
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	24002448 	.word	0x24002448
 80060b0:	24002428 	.word	0x24002428
 80060b4:	24002338 	.word	0x24002338
 80060b8:	240023f4 	.word	0x240023f4
 80060bc:	24002334 	.word	0x24002334
 80060c0:	24002434 	.word	0x24002434

080060c4 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80060cc:	4b06      	ldr	r3, [pc, #24]	@ (80060e8 <vTaskInternalSetTimeOutState+0x24>)
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80060d4:	4b05      	ldr	r3, [pc, #20]	@ (80060ec <vTaskInternalSetTimeOutState+0x28>)
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	24002438 	.word	0x24002438
 80060ec:	24002424 	.word	0x24002424

080060f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b088      	sub	sp, #32
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10d      	bne.n	800611c <xTaskCheckForTimeOut+0x2c>
    __asm volatile
 8006100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006104:	b672      	cpsid	i
 8006106:	f383 8811 	msr	BASEPRI, r3
 800610a:	f3bf 8f6f 	isb	sy
 800610e:	f3bf 8f4f 	dsb	sy
 8006112:	b662      	cpsie	i
 8006114:	613b      	str	r3, [r7, #16]
}
 8006116:	bf00      	nop
 8006118:	bf00      	nop
 800611a:	e7fd      	b.n	8006118 <xTaskCheckForTimeOut+0x28>
    configASSERT( pxTicksToWait );
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10d      	bne.n	800613e <xTaskCheckForTimeOut+0x4e>
    __asm volatile
 8006122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006126:	b672      	cpsid	i
 8006128:	f383 8811 	msr	BASEPRI, r3
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	b662      	cpsie	i
 8006136:	60fb      	str	r3, [r7, #12]
}
 8006138:	bf00      	nop
 800613a:	bf00      	nop
 800613c:	e7fd      	b.n	800613a <xTaskCheckForTimeOut+0x4a>

    taskENTER_CRITICAL();
 800613e:	f000 fff9 	bl	8007134 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8006142:	4b1b      	ldr	r3, [pc, #108]	@ (80061b0 <xTaskCheckForTimeOut+0xc0>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	69ba      	ldr	r2, [r7, #24]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	617b      	str	r3, [r7, #20]
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	4b17      	ldr	r3, [pc, #92]	@ (80061b4 <xTaskCheckForTimeOut+0xc4>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	429a      	cmp	r2, r3
 800615c:	d00a      	beq.n	8006174 <xTaskCheckForTimeOut+0x84>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	69ba      	ldr	r2, [r7, #24]
 8006164:	429a      	cmp	r2, r3
 8006166:	d305      	bcc.n	8006174 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006168:	2301      	movs	r3, #1
 800616a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	2200      	movs	r2, #0
 8006170:	601a      	str	r2, [r3, #0]
 8006172:	e015      	b.n	80061a0 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	429a      	cmp	r2, r3
 800617c:	d20b      	bcs.n	8006196 <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	1ad2      	subs	r2, r2, r3
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f7ff ff9a 	bl	80060c4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006190:	2300      	movs	r3, #0
 8006192:	61fb      	str	r3, [r7, #28]
 8006194:	e004      	b.n	80061a0 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	2200      	movs	r2, #0
 800619a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800619c:	2301      	movs	r3, #1
 800619e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80061a0:	f000 fffe 	bl	80071a0 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 80061a4:	69fb      	ldr	r3, [r7, #28]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3720      	adds	r7, #32
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	24002424 	.word	0x24002424
 80061b4:	24002438 	.word	0x24002438

080061b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80061b8:	b480      	push	{r7}
 80061ba:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 80061bc:	4b03      	ldr	r3, [pc, #12]	@ (80061cc <vTaskMissedYield+0x14>)
 80061be:	2201      	movs	r2, #1
 80061c0:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 80061c2:	bf00      	nop
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr
 80061cc:	24002434 	.word	0x24002434

080061d0 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80061d8:	f000 f84c 	bl	8006274 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 80061dc:	4b06      	ldr	r3, [pc, #24]	@ (80061f8 <prvIdleTask+0x28>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d9f9      	bls.n	80061d8 <prvIdleTask+0x8>
            {
                taskYIELD();
 80061e4:	4b05      	ldr	r3, [pc, #20]	@ (80061fc <prvIdleTask+0x2c>)
 80061e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061ea:	601a      	str	r2, [r3, #0]
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80061f4:	e7f0      	b.n	80061d8 <prvIdleTask+0x8>
 80061f6:	bf00      	nop
 80061f8:	24002338 	.word	0x24002338
 80061fc:	e000ed04 	.word	0xe000ed04

08006200 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006206:	2300      	movs	r3, #0
 8006208:	607b      	str	r3, [r7, #4]
 800620a:	e00c      	b.n	8006226 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	4613      	mov	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	4a10      	ldr	r2, [pc, #64]	@ (8006258 <prvInitialiseTaskLists+0x58>)
 8006218:	4413      	add	r3, r2
 800621a:	4618      	mov	r0, r3
 800621c:	f7fd ffb0 	bl	8004180 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	3301      	adds	r3, #1
 8006224:	607b      	str	r3, [r7, #4]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2b06      	cmp	r3, #6
 800622a:	d9ef      	bls.n	800620c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800622c:	480b      	ldr	r0, [pc, #44]	@ (800625c <prvInitialiseTaskLists+0x5c>)
 800622e:	f7fd ffa7 	bl	8004180 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8006232:	480b      	ldr	r0, [pc, #44]	@ (8006260 <prvInitialiseTaskLists+0x60>)
 8006234:	f7fd ffa4 	bl	8004180 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006238:	480a      	ldr	r0, [pc, #40]	@ (8006264 <prvInitialiseTaskLists+0x64>)
 800623a:	f7fd ffa1 	bl	8004180 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800623e:	480a      	ldr	r0, [pc, #40]	@ (8006268 <prvInitialiseTaskLists+0x68>)
 8006240:	f7fd ff9e 	bl	8004180 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006244:	4b09      	ldr	r3, [pc, #36]	@ (800626c <prvInitialiseTaskLists+0x6c>)
 8006246:	4a05      	ldr	r2, [pc, #20]	@ (800625c <prvInitialiseTaskLists+0x5c>)
 8006248:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800624a:	4b09      	ldr	r3, [pc, #36]	@ (8006270 <prvInitialiseTaskLists+0x70>)
 800624c:	4a04      	ldr	r2, [pc, #16]	@ (8006260 <prvInitialiseTaskLists+0x60>)
 800624e:	601a      	str	r2, [r3, #0]
}
 8006250:	bf00      	nop
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	24002338 	.word	0x24002338
 800625c:	240023c4 	.word	0x240023c4
 8006260:	240023d8 	.word	0x240023d8
 8006264:	240023f4 	.word	0x240023f4
 8006268:	24002408 	.word	0x24002408
 800626c:	240023ec 	.word	0x240023ec
 8006270:	240023f0 	.word	0x240023f0

08006274 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800627a:	e019      	b.n	80062b0 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 800627c:	f000 ff5a 	bl	8007134 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006280:	4b10      	ldr	r3, [pc, #64]	@ (80062c4 <prvCheckTasksWaitingTermination+0x50>)
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	3304      	adds	r3, #4
 800628c:	4618      	mov	r0, r3
 800628e:	f7fd ffdd 	bl	800424c <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8006292:	4b0d      	ldr	r3, [pc, #52]	@ (80062c8 <prvCheckTasksWaitingTermination+0x54>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	3b01      	subs	r3, #1
 8006298:	4a0b      	ldr	r2, [pc, #44]	@ (80062c8 <prvCheckTasksWaitingTermination+0x54>)
 800629a:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 800629c:	4b0b      	ldr	r3, [pc, #44]	@ (80062cc <prvCheckTasksWaitingTermination+0x58>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	3b01      	subs	r3, #1
 80062a2:	4a0a      	ldr	r2, [pc, #40]	@ (80062cc <prvCheckTasksWaitingTermination+0x58>)
 80062a4:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 80062a6:	f000 ff7b 	bl	80071a0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f810 	bl	80062d0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062b0:	4b06      	ldr	r3, [pc, #24]	@ (80062cc <prvCheckTasksWaitingTermination+0x58>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1e1      	bne.n	800627c <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80062b8:	bf00      	nop
 80062ba:	bf00      	nop
 80062bc:	3708      	adds	r7, #8
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	24002408 	.word	0x24002408
 80062c8:	24002420 	.word	0x24002420
 80062cc:	2400241c 	.word	0x2400241c

080062d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d108      	bne.n	80062f4 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e6:	4618      	mov	r0, r3
 80062e8:	f001 f996 	bl	8007618 <vPortFree>
                vPortFree( pxTCB );
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f001 f993 	bl	8007618 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80062f2:	e01b      	b.n	800632c <prvDeleteTCB+0x5c>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d103      	bne.n	8006306 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f001 f98a 	bl	8007618 <vPortFree>
    }
 8006304:	e012      	b.n	800632c <prvDeleteTCB+0x5c>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800630c:	2b02      	cmp	r3, #2
 800630e:	d00d      	beq.n	800632c <prvDeleteTCB+0x5c>
    __asm volatile
 8006310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006314:	b672      	cpsid	i
 8006316:	f383 8811 	msr	BASEPRI, r3
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	f3bf 8f4f 	dsb	sy
 8006322:	b662      	cpsie	i
 8006324:	60fb      	str	r3, [r7, #12]
}
 8006326:	bf00      	nop
 8006328:	bf00      	nop
 800632a:	e7fd      	b.n	8006328 <prvDeleteTCB+0x58>
    }
 800632c:	bf00      	nop
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006334:	b480      	push	{r7}
 8006336:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006338:	4b0a      	ldr	r3, [pc, #40]	@ (8006364 <prvResetNextTaskUnblockTime+0x30>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d104      	bne.n	800634c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8006342:	4b09      	ldr	r3, [pc, #36]	@ (8006368 <prvResetNextTaskUnblockTime+0x34>)
 8006344:	f04f 32ff 	mov.w	r2, #4294967295
 8006348:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800634a:	e005      	b.n	8006358 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800634c:	4b05      	ldr	r3, [pc, #20]	@ (8006364 <prvResetNextTaskUnblockTime+0x30>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a04      	ldr	r2, [pc, #16]	@ (8006368 <prvResetNextTaskUnblockTime+0x34>)
 8006356:	6013      	str	r3, [r2, #0]
}
 8006358:	bf00      	nop
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	240023ec 	.word	0x240023ec
 8006368:	24002440 	.word	0x24002440

0800636c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8006372:	4b0b      	ldr	r3, [pc, #44]	@ (80063a0 <xTaskGetSchedulerState+0x34>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d102      	bne.n	8006380 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800637a:	2301      	movs	r3, #1
 800637c:	607b      	str	r3, [r7, #4]
 800637e:	e008      	b.n	8006392 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8006380:	4b08      	ldr	r3, [pc, #32]	@ (80063a4 <xTaskGetSchedulerState+0x38>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d102      	bne.n	800638e <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8006388:	2302      	movs	r3, #2
 800638a:	607b      	str	r3, [r7, #4]
 800638c:	e001      	b.n	8006392 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 800638e:	2300      	movs	r3, #0
 8006390:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 8006392:	687b      	ldr	r3, [r7, #4]
    }
 8006394:	4618      	mov	r0, r3
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr
 80063a0:	2400242c 	.word	0x2400242c
 80063a4:	24002448 	.word	0x24002448

080063a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80063b4:	2300      	movs	r3, #0
 80063b6:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f000 8089 	beq.w	80064d2 <xTaskPriorityInherit+0x12a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063c4:	4b45      	ldr	r3, [pc, #276]	@ (80064dc <xTaskPriorityInherit+0x134>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d278      	bcs.n	80064c0 <xTaskPriorityInherit+0x118>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	db06      	blt.n	80063e4 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 80063d6:	4b41      	ldr	r3, [pc, #260]	@ (80064dc <xTaskPriorityInherit+0x134>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063dc:	f1c3 0207 	rsb	r2, r3, #7
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	6959      	ldr	r1, [r3, #20]
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063ec:	4613      	mov	r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	4413      	add	r3, r2
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	4a3a      	ldr	r2, [pc, #232]	@ (80064e0 <xTaskPriorityInherit+0x138>)
 80063f6:	4413      	add	r3, r2
 80063f8:	4299      	cmp	r1, r3
 80063fa:	d159      	bne.n	80064b0 <xTaskPriorityInherit+0x108>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	3304      	adds	r3, #4
 8006400:	4618      	mov	r0, r3
 8006402:	f7fd ff23 	bl	800424c <uxListRemove>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10a      	bne.n	8006422 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006410:	2201      	movs	r2, #1
 8006412:	fa02 f303 	lsl.w	r3, r2, r3
 8006416:	43da      	mvns	r2, r3
 8006418:	4b32      	ldr	r3, [pc, #200]	@ (80064e4 <xTaskPriorityInherit+0x13c>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4013      	ands	r3, r2
 800641e:	4a31      	ldr	r2, [pc, #196]	@ (80064e4 <xTaskPriorityInherit+0x13c>)
 8006420:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006422:	4b2e      	ldr	r3, [pc, #184]	@ (80064dc <xTaskPriorityInherit+0x134>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006430:	2201      	movs	r2, #1
 8006432:	409a      	lsls	r2, r3
 8006434:	4b2b      	ldr	r3, [pc, #172]	@ (80064e4 <xTaskPriorityInherit+0x13c>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4313      	orrs	r3, r2
 800643a:	4a2a      	ldr	r2, [pc, #168]	@ (80064e4 <xTaskPriorityInherit+0x13c>)
 800643c:	6013      	str	r3, [r2, #0]
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006442:	4927      	ldr	r1, [pc, #156]	@ (80064e0 <xTaskPriorityInherit+0x138>)
 8006444:	4613      	mov	r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4413      	add	r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	440b      	add	r3, r1
 800644e:	3304      	adds	r3, #4
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	60fb      	str	r3, [r7, #12]
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	609a      	str	r2, [r3, #8]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	689a      	ldr	r2, [r3, #8]
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	60da      	str	r2, [r3, #12]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	3204      	adds	r2, #4
 800646a:	605a      	str	r2, [r3, #4]
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	1d1a      	adds	r2, r3, #4
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	609a      	str	r2, [r3, #8]
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006478:	4613      	mov	r3, r2
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	4413      	add	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4a17      	ldr	r2, [pc, #92]	@ (80064e0 <xTaskPriorityInherit+0x138>)
 8006482:	441a      	add	r2, r3
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	615a      	str	r2, [r3, #20]
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800648c:	4914      	ldr	r1, [pc, #80]	@ (80064e0 <xTaskPriorityInherit+0x138>)
 800648e:	4613      	mov	r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	4413      	add	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	440b      	add	r3, r1
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	693a      	ldr	r2, [r7, #16]
 800649c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800649e:	1c59      	adds	r1, r3, #1
 80064a0:	480f      	ldr	r0, [pc, #60]	@ (80064e0 <xTaskPriorityInherit+0x138>)
 80064a2:	4613      	mov	r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4413      	add	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4403      	add	r3, r0
 80064ac:	6019      	str	r1, [r3, #0]
 80064ae:	e004      	b.n	80064ba <xTaskPriorityInherit+0x112>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80064b0:	4b0a      	ldr	r3, [pc, #40]	@ (80064dc <xTaskPriorityInherit+0x134>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80064ba:	2301      	movs	r3, #1
 80064bc:	617b      	str	r3, [r7, #20]
 80064be:	e008      	b.n	80064d2 <xTaskPriorityInherit+0x12a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80064c4:	4b05      	ldr	r3, [pc, #20]	@ (80064dc <xTaskPriorityInherit+0x134>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d201      	bcs.n	80064d2 <xTaskPriorityInherit+0x12a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80064ce:	2301      	movs	r3, #1
 80064d0:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );

        return xReturn;
 80064d2:	697b      	ldr	r3, [r7, #20]
    }
 80064d4:	4618      	mov	r0, r3
 80064d6:	3718      	adds	r7, #24
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	24002334 	.word	0x24002334
 80064e0:	24002338 	.word	0x24002338
 80064e4:	24002428 	.word	0x24002428

080064e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b088      	sub	sp, #32
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 80064f4:	2300      	movs	r3, #0
 80064f6:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f000 8094 	beq.w	8006628 <xTaskPriorityDisinherit+0x140>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8006500:	4b4c      	ldr	r3, [pc, #304]	@ (8006634 <xTaskPriorityDisinherit+0x14c>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	69ba      	ldr	r2, [r7, #24]
 8006506:	429a      	cmp	r2, r3
 8006508:	d00d      	beq.n	8006526 <xTaskPriorityDisinherit+0x3e>
    __asm volatile
 800650a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800650e:	b672      	cpsid	i
 8006510:	f383 8811 	msr	BASEPRI, r3
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	b662      	cpsie	i
 800651e:	613b      	str	r3, [r7, #16]
}
 8006520:	bf00      	nop
 8006522:	bf00      	nop
 8006524:	e7fd      	b.n	8006522 <xTaskPriorityDisinherit+0x3a>
            configASSERT( pxTCB->uxMutexesHeld );
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10d      	bne.n	800654a <xTaskPriorityDisinherit+0x62>
    __asm volatile
 800652e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006532:	b672      	cpsid	i
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	b662      	cpsie	i
 8006542:	60fb      	str	r3, [r7, #12]
}
 8006544:	bf00      	nop
 8006546:	bf00      	nop
 8006548:	e7fd      	b.n	8006546 <xTaskPriorityDisinherit+0x5e>
            ( pxTCB->uxMutexesHeld )--;
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800654e:	1e5a      	subs	r2, r3, #1
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800655c:	429a      	cmp	r2, r3
 800655e:	d063      	beq.n	8006628 <xTaskPriorityDisinherit+0x140>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006564:	2b00      	cmp	r3, #0
 8006566:	d15f      	bne.n	8006628 <xTaskPriorityDisinherit+0x140>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	3304      	adds	r3, #4
 800656c:	4618      	mov	r0, r3
 800656e:	f7fd fe6d 	bl	800424c <uxListRemove>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10a      	bne.n	800658e <xTaskPriorityDisinherit+0xa6>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800657c:	2201      	movs	r2, #1
 800657e:	fa02 f303 	lsl.w	r3, r2, r3
 8006582:	43da      	mvns	r2, r3
 8006584:	4b2c      	ldr	r3, [pc, #176]	@ (8006638 <xTaskPriorityDisinherit+0x150>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4013      	ands	r3, r2
 800658a:	4a2b      	ldr	r2, [pc, #172]	@ (8006638 <xTaskPriorityDisinherit+0x150>)
 800658c:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800659a:	f1c3 0207 	rsb	r2, r3, #7
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a6:	2201      	movs	r2, #1
 80065a8:	409a      	lsls	r2, r3
 80065aa:	4b23      	ldr	r3, [pc, #140]	@ (8006638 <xTaskPriorityDisinherit+0x150>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	4a21      	ldr	r2, [pc, #132]	@ (8006638 <xTaskPriorityDisinherit+0x150>)
 80065b2:	6013      	str	r3, [r2, #0]
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065b8:	4920      	ldr	r1, [pc, #128]	@ (800663c <xTaskPriorityDisinherit+0x154>)
 80065ba:	4613      	mov	r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	4413      	add	r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	440b      	add	r3, r1
 80065c4:	3304      	adds	r3, #4
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	617b      	str	r3, [r7, #20]
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	697a      	ldr	r2, [r7, #20]
 80065ce:	609a      	str	r2, [r3, #8]
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	689a      	ldr	r2, [r3, #8]
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	60da      	str	r2, [r3, #12]
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	69ba      	ldr	r2, [r7, #24]
 80065de:	3204      	adds	r2, #4
 80065e0:	605a      	str	r2, [r3, #4]
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	1d1a      	adds	r2, r3, #4
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	609a      	str	r2, [r3, #8]
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065ee:	4613      	mov	r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4a11      	ldr	r2, [pc, #68]	@ (800663c <xTaskPriorityDisinherit+0x154>)
 80065f8:	441a      	add	r2, r3
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	615a      	str	r2, [r3, #20]
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006602:	490e      	ldr	r1, [pc, #56]	@ (800663c <xTaskPriorityDisinherit+0x154>)
 8006604:	4613      	mov	r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4413      	add	r3, r2
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	440b      	add	r3, r1
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	69ba      	ldr	r2, [r7, #24]
 8006612:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006614:	1c59      	adds	r1, r3, #1
 8006616:	4809      	ldr	r0, [pc, #36]	@ (800663c <xTaskPriorityDisinherit+0x154>)
 8006618:	4613      	mov	r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4413      	add	r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	4403      	add	r3, r0
 8006622:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8006624:	2301      	movs	r3, #1
 8006626:	61fb      	str	r3, [r7, #28]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8006628:	69fb      	ldr	r3, [r7, #28]
    }
 800662a:	4618      	mov	r0, r3
 800662c:	3720      	adds	r7, #32
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	24002334 	.word	0x24002334
 8006638:	24002428 	.word	0x24002428
 800663c:	24002338 	.word	0x24002338

08006640 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8006640:	b580      	push	{r7, lr}
 8006642:	b08a      	sub	sp, #40	@ 0x28
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800664e:	2301      	movs	r3, #1
 8006650:	61fb      	str	r3, [r7, #28]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2b00      	cmp	r3, #0
 8006656:	f000 80aa 	beq.w	80067ae <vTaskPriorityDisinheritAfterTimeout+0x16e>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800665a:	6a3b      	ldr	r3, [r7, #32]
 800665c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10d      	bne.n	800667e <vTaskPriorityDisinheritAfterTimeout+0x3e>
    __asm volatile
 8006662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006666:	b672      	cpsid	i
 8006668:	f383 8811 	msr	BASEPRI, r3
 800666c:	f3bf 8f6f 	isb	sy
 8006670:	f3bf 8f4f 	dsb	sy
 8006674:	b662      	cpsie	i
 8006676:	613b      	str	r3, [r7, #16]
}
 8006678:	bf00      	nop
 800667a:	bf00      	nop
 800667c:	e7fd      	b.n	800667a <vTaskPriorityDisinheritAfterTimeout+0x3a>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006682:	683a      	ldr	r2, [r7, #0]
 8006684:	429a      	cmp	r2, r3
 8006686:	d902      	bls.n	800668e <vTaskPriorityDisinheritAfterTimeout+0x4e>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	627b      	str	r3, [r7, #36]	@ 0x24
 800668c:	e002      	b.n	8006694 <vTaskPriorityDisinheritAfterTimeout+0x54>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800668e:	6a3b      	ldr	r3, [r7, #32]
 8006690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006692:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8006694:	6a3b      	ldr	r3, [r7, #32]
 8006696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006698:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800669a:	429a      	cmp	r2, r3
 800669c:	f000 8087 	beq.w	80067ae <vTaskPriorityDisinheritAfterTimeout+0x16e>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80066a0:	6a3b      	ldr	r3, [r7, #32]
 80066a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066a4:	69fa      	ldr	r2, [r7, #28]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	f040 8081 	bne.w	80067ae <vTaskPriorityDisinheritAfterTimeout+0x16e>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80066ac:	4b42      	ldr	r3, [pc, #264]	@ (80067b8 <vTaskPriorityDisinheritAfterTimeout+0x178>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	6a3a      	ldr	r2, [r7, #32]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d10d      	bne.n	80066d2 <vTaskPriorityDisinheritAfterTimeout+0x92>
    __asm volatile
 80066b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ba:	b672      	cpsid	i
 80066bc:	f383 8811 	msr	BASEPRI, r3
 80066c0:	f3bf 8f6f 	isb	sy
 80066c4:	f3bf 8f4f 	dsb	sy
 80066c8:	b662      	cpsie	i
 80066ca:	60fb      	str	r3, [r7, #12]
}
 80066cc:	bf00      	nop
 80066ce:	bf00      	nop
 80066d0:	e7fd      	b.n	80066ce <vTaskPriorityDisinheritAfterTimeout+0x8e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066d6:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066dc:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 80066de:	6a3b      	ldr	r3, [r7, #32]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	db04      	blt.n	80066f0 <vTaskPriorityDisinheritAfterTimeout+0xb0>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 80066e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e8:	f1c3 0207 	rsb	r2, r3, #7
 80066ec:	6a3b      	ldr	r3, [r7, #32]
 80066ee:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80066f0:	6a3b      	ldr	r3, [r7, #32]
 80066f2:	6959      	ldr	r1, [r3, #20]
 80066f4:	69ba      	ldr	r2, [r7, #24]
 80066f6:	4613      	mov	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	4a2f      	ldr	r2, [pc, #188]	@ (80067bc <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8006700:	4413      	add	r3, r2
 8006702:	4299      	cmp	r1, r3
 8006704:	d153      	bne.n	80067ae <vTaskPriorityDisinheritAfterTimeout+0x16e>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006706:	6a3b      	ldr	r3, [r7, #32]
 8006708:	3304      	adds	r3, #4
 800670a:	4618      	mov	r0, r3
 800670c:	f7fd fd9e 	bl	800424c <uxListRemove>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10a      	bne.n	800672c <vTaskPriorityDisinheritAfterTimeout+0xec>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006716:	6a3b      	ldr	r3, [r7, #32]
 8006718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800671a:	2201      	movs	r2, #1
 800671c:	fa02 f303 	lsl.w	r3, r2, r3
 8006720:	43da      	mvns	r2, r3
 8006722:	4b27      	ldr	r3, [pc, #156]	@ (80067c0 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4013      	ands	r3, r2
 8006728:	4a25      	ldr	r2, [pc, #148]	@ (80067c0 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 800672a:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800672c:	6a3b      	ldr	r3, [r7, #32]
 800672e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006730:	2201      	movs	r2, #1
 8006732:	409a      	lsls	r2, r3
 8006734:	4b22      	ldr	r3, [pc, #136]	@ (80067c0 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4313      	orrs	r3, r2
 800673a:	4a21      	ldr	r2, [pc, #132]	@ (80067c0 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 800673c:	6013      	str	r3, [r2, #0]
 800673e:	6a3b      	ldr	r3, [r7, #32]
 8006740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006742:	491e      	ldr	r1, [pc, #120]	@ (80067bc <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8006744:	4613      	mov	r3, r2
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	4413      	add	r3, r2
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	440b      	add	r3, r1
 800674e:	3304      	adds	r3, #4
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	617b      	str	r3, [r7, #20]
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	609a      	str	r2, [r3, #8]
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	689a      	ldr	r2, [r3, #8]
 800675e:	6a3b      	ldr	r3, [r7, #32]
 8006760:	60da      	str	r2, [r3, #12]
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	6a3a      	ldr	r2, [r7, #32]
 8006768:	3204      	adds	r2, #4
 800676a:	605a      	str	r2, [r3, #4]
 800676c:	6a3b      	ldr	r3, [r7, #32]
 800676e:	1d1a      	adds	r2, r3, #4
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	609a      	str	r2, [r3, #8]
 8006774:	6a3b      	ldr	r3, [r7, #32]
 8006776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006778:	4613      	mov	r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4413      	add	r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	4a0e      	ldr	r2, [pc, #56]	@ (80067bc <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8006782:	441a      	add	r2, r3
 8006784:	6a3b      	ldr	r3, [r7, #32]
 8006786:	615a      	str	r2, [r3, #20]
 8006788:	6a3b      	ldr	r3, [r7, #32]
 800678a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800678c:	490b      	ldr	r1, [pc, #44]	@ (80067bc <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 800678e:	4613      	mov	r3, r2
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	4413      	add	r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	440b      	add	r3, r1
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	6a3a      	ldr	r2, [r7, #32]
 800679c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800679e:	1c59      	adds	r1, r3, #1
 80067a0:	4806      	ldr	r0, [pc, #24]	@ (80067bc <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 80067a2:	4613      	mov	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	4403      	add	r3, r0
 80067ac:	6019      	str	r1, [r3, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
    }
 80067ae:	bf00      	nop
 80067b0:	3728      	adds	r7, #40	@ 0x28
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	24002334 	.word	0x24002334
 80067bc:	24002338 	.word	0x24002338
 80067c0:	24002428 	.word	0x24002428

080067c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 80067ca:	4b09      	ldr	r3, [pc, #36]	@ (80067f0 <pvTaskIncrementMutexHeldCount+0x2c>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d004      	beq.n	80067e0 <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067da:	1c5a      	adds	r2, r3, #1
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );

        return pxTCB;
 80067e0:	687b      	ldr	r3, [r7, #4]
    }
 80067e2:	4618      	mov	r0, r3
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	24002334 	.word	0x24002334

080067f4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80067fe:	4b22      	ldr	r3, [pc, #136]	@ (8006888 <prvAddCurrentTaskToDelayedList+0x94>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	617b      	str	r3, [r7, #20]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8006804:	4b21      	ldr	r3, [pc, #132]	@ (800688c <prvAddCurrentTaskToDelayedList+0x98>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	613b      	str	r3, [r7, #16]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800680a:	4b21      	ldr	r3, [pc, #132]	@ (8006890 <prvAddCurrentTaskToDelayedList+0x9c>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	60fb      	str	r3, [r7, #12]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006810:	4b20      	ldr	r3, [pc, #128]	@ (8006894 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	3304      	adds	r3, #4
 8006816:	4618      	mov	r0, r3
 8006818:	f7fd fd18 	bl	800424c <uxListRemove>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10b      	bne.n	800683a <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006822:	4b1c      	ldr	r3, [pc, #112]	@ (8006894 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006828:	2201      	movs	r2, #1
 800682a:	fa02 f303 	lsl.w	r3, r2, r3
 800682e:	43da      	mvns	r2, r3
 8006830:	4b19      	ldr	r3, [pc, #100]	@ (8006898 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4013      	ands	r3, r2
 8006836:	4a18      	ldr	r2, [pc, #96]	@ (8006898 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006838:	6013      	str	r3, [r2, #0]
    #else /* INCLUDE_vTaskSuspend */
    {
        /* Calculate the time at which the task should be woken if the event
         * does not occur.  This may overflow but this doesn't matter, the kernel
         * will manage it correctly. */
        xTimeToWake = xConstTickCount + xTicksToWait;
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4413      	add	r3, r2
 8006840:	60bb      	str	r3, [r7, #8]

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006842:	4b14      	ldr	r3, [pc, #80]	@ (8006894 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	605a      	str	r2, [r3, #4]

        if( xTimeToWake < xConstTickCount )
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	429a      	cmp	r2, r3
 8006850:	d207      	bcs.n	8006862 <prvAddCurrentTaskToDelayedList+0x6e>
        {
            traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8006852:	4b10      	ldr	r3, [pc, #64]	@ (8006894 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	3304      	adds	r3, #4
 8006858:	4619      	mov	r1, r3
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f7fd fcbd 	bl	80041da <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006860:	e00e      	b.n	8006880 <prvAddCurrentTaskToDelayedList+0x8c>
            vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8006862:	4b0c      	ldr	r3, [pc, #48]	@ (8006894 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	3304      	adds	r3, #4
 8006868:	4619      	mov	r1, r3
 800686a:	6938      	ldr	r0, [r7, #16]
 800686c:	f7fd fcb5 	bl	80041da <vListInsert>
            if( xTimeToWake < xNextTaskUnblockTime )
 8006870:	4b0a      	ldr	r3, [pc, #40]	@ (800689c <prvAddCurrentTaskToDelayedList+0xa8>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	429a      	cmp	r2, r3
 8006878:	d202      	bcs.n	8006880 <prvAddCurrentTaskToDelayedList+0x8c>
                xNextTaskUnblockTime = xTimeToWake;
 800687a:	4a08      	ldr	r2, [pc, #32]	@ (800689c <prvAddCurrentTaskToDelayedList+0xa8>)
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	6013      	str	r3, [r2, #0]
}
 8006880:	bf00      	nop
 8006882:	3718      	adds	r7, #24
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	24002424 	.word	0x24002424
 800688c:	240023ec 	.word	0x240023ec
 8006890:	240023f0 	.word	0x240023f0
 8006894:	24002334 	.word	0x24002334
 8006898:	24002428 	.word	0x24002428
 800689c:	24002440 	.word	0x24002440

080068a0 <vApplicationGetIdleTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer,
                                        StackType_t ** ppxIdleTaskStackBuffer,
                                        configSTACK_DEPTH_TYPE * puxIdleTaskStackSize )
    {
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]
        static StaticTask_t xIdleTaskTCB;
        static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

        *ppxIdleTaskTCBBuffer = &( xIdleTaskTCB );
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	4a07      	ldr	r2, [pc, #28]	@ (80068cc <vApplicationGetIdleTaskMemory+0x2c>)
 80068b0:	601a      	str	r2, [r3, #0]
        *ppxIdleTaskStackBuffer = &( uxIdleTaskStack[ 0 ] );
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	4a06      	ldr	r2, [pc, #24]	@ (80068d0 <vApplicationGetIdleTaskMemory+0x30>)
 80068b6:	601a      	str	r2, [r3, #0]
        *puxIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2280      	movs	r2, #128	@ 0x80
 80068bc:	601a      	str	r2, [r3, #0]
    }
 80068be:	bf00      	nop
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	2400244c 	.word	0x2400244c
 80068d0:	240024a8 	.word	0x240024a8

080068d4 <vApplicationGetTimerTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetTimerTaskMemory( StaticTask_t ** ppxTimerTaskTCBBuffer,
                                         StackType_t ** ppxTimerTaskStackBuffer,
                                         configSTACK_DEPTH_TYPE * puxTimerTaskStackSize )
    {
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
        static StaticTask_t xTimerTaskTCB;
        static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

        *ppxTimerTaskTCBBuffer = &( xTimerTaskTCB );
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	4a07      	ldr	r2, [pc, #28]	@ (8006900 <vApplicationGetTimerTaskMemory+0x2c>)
 80068e4:	601a      	str	r2, [r3, #0]
        *ppxTimerTaskStackBuffer = &( uxTimerTaskStack[ 0 ] );
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	4a06      	ldr	r2, [pc, #24]	@ (8006904 <vApplicationGetTimerTaskMemory+0x30>)
 80068ea:	601a      	str	r2, [r3, #0]
        *puxTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80068f2:	601a      	str	r2, [r3, #0]
    }
 80068f4:	bf00      	nop
 80068f6:	3714      	adds	r7, #20
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr
 8006900:	240026a8 	.word	0x240026a8
 8006904:	24002704 	.word	0x24002704

08006908 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006908:	b580      	push	{r7, lr}
 800690a:	b08a      	sub	sp, #40	@ 0x28
 800690c:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800690e:	2300      	movs	r3, #0
 8006910:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006912:	f000 fa6f 	bl	8006df4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006916:	4b1e      	ldr	r3, [pc, #120]	@ (8006990 <xTimerCreateTimerTask+0x88>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d021      	beq.n	8006962 <xTimerCreateTimerTask+0x5a>
            }
            #else /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
            {
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800691e:	2300      	movs	r3, #0
 8006920:	60fb      	str	r3, [r7, #12]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 8006922:	2300      	movs	r3, #0
 8006924:	60bb      	str	r3, [r7, #8]
                    configSTACK_DEPTH_TYPE uxTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &uxTimerTaskStackSize );
 8006926:	1d3a      	adds	r2, r7, #4
 8006928:	f107 0108 	add.w	r1, r7, #8
 800692c:	f107 030c 	add.w	r3, r7, #12
 8006930:	4618      	mov	r0, r3
 8006932:	f7ff ffcf 	bl	80068d4 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8006936:	6879      	ldr	r1, [r7, #4]
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	9202      	str	r2, [sp, #8]
 800693e:	9301      	str	r3, [sp, #4]
 8006940:	2302      	movs	r3, #2
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	2300      	movs	r3, #0
 8006946:	460a      	mov	r2, r1
 8006948:	4912      	ldr	r1, [pc, #72]	@ (8006994 <xTimerCreateTimerTask+0x8c>)
 800694a:	4813      	ldr	r0, [pc, #76]	@ (8006998 <xTimerCreateTimerTask+0x90>)
 800694c:	f7fe fd11 	bl	8005372 <xTaskCreateStatic>
 8006950:	4603      	mov	r3, r0
 8006952:	4a12      	ldr	r2, [pc, #72]	@ (800699c <xTimerCreateTimerTask+0x94>)
 8006954:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 8006956:	4b11      	ldr	r3, [pc, #68]	@ (800699c <xTimerCreateTimerTask+0x94>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d001      	beq.n	8006962 <xTimerCreateTimerTask+0x5a>
                    {
                        xReturn = pdPASS;
 800695e:	2301      	movs	r3, #1
 8006960:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d10d      	bne.n	8006984 <xTimerCreateTimerTask+0x7c>
    __asm volatile
 8006968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800696c:	b672      	cpsid	i
 800696e:	f383 8811 	msr	BASEPRI, r3
 8006972:	f3bf 8f6f 	isb	sy
 8006976:	f3bf 8f4f 	dsb	sy
 800697a:	b662      	cpsie	i
 800697c:	613b      	str	r3, [r7, #16]
}
 800697e:	bf00      	nop
 8006980:	bf00      	nop
 8006982:	e7fd      	b.n	8006980 <xTimerCreateTimerTask+0x78>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 8006984:	697b      	ldr	r3, [r7, #20]
    }
 8006986:	4618      	mov	r0, r3
 8006988:	3718      	adds	r7, #24
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	24002b34 	.word	0x24002b34
 8006994:	08013708 	.word	0x08013708
 8006998:	08006a45 	.word	0x08006a45
 800699c:	24002b38 	.word	0x24002b38

080069a0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80069ac:	e008      	b.n	80069c0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	4413      	add	r3, r2
 80069b6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6a1b      	ldr	r3, [r3, #32]
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	699a      	ldr	r2, [r3, #24]
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	18d1      	adds	r1, r2, r3
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f000 f8df 	bl	8006b90 <prvInsertTimerInActiveList>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d1ea      	bne.n	80069ae <prvReloadTimer+0xe>
        }
    }
 80069d8:	bf00      	nop
 80069da:	bf00      	nop
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
	...

080069e4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069ee:	4b14      	ldr	r3, [pc, #80]	@ (8006a40 <prvProcessExpiredTimer+0x5c>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	3304      	adds	r3, #4
 80069fc:	4618      	mov	r0, r3
 80069fe:	f7fd fc25 	bl	800424c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a08:	f003 0304 	and.w	r3, r3, #4
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d005      	beq.n	8006a1c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	6879      	ldr	r1, [r7, #4]
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f7ff ffc3 	bl	80069a0 <prvReloadTimer>
 8006a1a:	e008      	b.n	8006a2e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a22:	f023 0301 	bic.w	r3, r3, #1
 8006a26:	b2da      	uxtb	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6a1b      	ldr	r3, [r3, #32]
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	4798      	blx	r3
    }
 8006a36:	bf00      	nop
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	24002b2c 	.word	0x24002b2c

08006a44 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a4c:	f107 0308 	add.w	r3, r7, #8
 8006a50:	4618      	mov	r0, r3
 8006a52:	f000 f859 	bl	8006b08 <prvGetNextExpireTime>
 8006a56:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f000 f805 	bl	8006a6c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006a62:	f000 f8d7 	bl	8006c14 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a66:	bf00      	nop
 8006a68:	e7f0      	b.n	8006a4c <prvTimerTask+0x8>
	...

08006a6c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006a76:	f7fe ff17 	bl	80058a8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a7a:	f107 0308 	add.w	r3, r7, #8
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f000 f866 	bl	8006b50 <prvSampleTimeNow>
 8006a84:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d130      	bne.n	8006aee <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10a      	bne.n	8006aa8 <prvProcessTimerOrBlockTask+0x3c>
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d806      	bhi.n	8006aa8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006a9a:	f7fe ff13 	bl	80058c4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a9e:	68f9      	ldr	r1, [r7, #12]
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f7ff ff9f 	bl	80069e4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006aa6:	e024      	b.n	8006af2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d008      	beq.n	8006ac0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006aae:	4b13      	ldr	r3, [pc, #76]	@ (8006afc <prvProcessTimerOrBlockTask+0x90>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d101      	bne.n	8006abc <prvProcessTimerOrBlockTask+0x50>
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e000      	b.n	8006abe <prvProcessTimerOrBlockTask+0x52>
 8006abc:	2300      	movs	r3, #0
 8006abe:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8006b00 <prvProcessTimerOrBlockTask+0x94>)
 8006ac2:	6818      	ldr	r0, [r3, #0]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	683a      	ldr	r2, [r7, #0]
 8006acc:	4619      	mov	r1, r3
 8006ace:	f7fe fbb5 	bl	800523c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006ad2:	f7fe fef7 	bl	80058c4 <xTaskResumeAll>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10a      	bne.n	8006af2 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8006adc:	4b09      	ldr	r3, [pc, #36]	@ (8006b04 <prvProcessTimerOrBlockTask+0x98>)
 8006ade:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	f3bf 8f6f 	isb	sy
    }
 8006aec:	e001      	b.n	8006af2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006aee:	f7fe fee9 	bl	80058c4 <xTaskResumeAll>
    }
 8006af2:	bf00      	nop
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	24002b30 	.word	0x24002b30
 8006b00:	24002b34 	.word	0x24002b34
 8006b04:	e000ed04 	.word	0xe000ed04

08006b08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b10:	4b0e      	ldr	r3, [pc, #56]	@ (8006b4c <prvGetNextExpireTime+0x44>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d101      	bne.n	8006b1e <prvGetNextExpireTime+0x16>
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	e000      	b.n	8006b20 <prvGetNextExpireTime+0x18>
 8006b1e:	2200      	movs	r2, #0
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d105      	bne.n	8006b38 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b2c:	4b07      	ldr	r3, [pc, #28]	@ (8006b4c <prvGetNextExpireTime+0x44>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	60fb      	str	r3, [r7, #12]
 8006b36:	e001      	b.n	8006b3c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
    }
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3714      	adds	r7, #20
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	24002b2c 	.word	0x24002b2c

08006b50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8006b58:	f7fe ffbe 	bl	8005ad8 <xTaskGetTickCount>
 8006b5c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8006b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8006b8c <prvSampleTimeNow+0x3c>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d205      	bcs.n	8006b74 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006b68:	f000 f91e 	bl	8006da8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	601a      	str	r2, [r3, #0]
 8006b72:	e002      	b.n	8006b7a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006b7a:	4a04      	ldr	r2, [pc, #16]	@ (8006b8c <prvSampleTimeNow+0x3c>)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006b80:	68fb      	ldr	r3, [r7, #12]
    }
 8006b82:	4618      	mov	r0, r3
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	24002b3c 	.word	0x24002b3c

08006b90 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b086      	sub	sp, #24
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	607a      	str	r2, [r7, #4]
 8006b9c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	68ba      	ldr	r2, [r7, #8]
 8006ba6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006bae:	68ba      	ldr	r2, [r7, #8]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d812      	bhi.n	8006bdc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	1ad2      	subs	r2, r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d302      	bcc.n	8006bca <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	617b      	str	r3, [r7, #20]
 8006bc8:	e01b      	b.n	8006c02 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006bca:	4b10      	ldr	r3, [pc, #64]	@ (8006c0c <prvInsertTimerInActiveList+0x7c>)
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	3304      	adds	r3, #4
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	4610      	mov	r0, r2
 8006bd6:	f7fd fb00 	bl	80041da <vListInsert>
 8006bda:	e012      	b.n	8006c02 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d206      	bcs.n	8006bf2 <prvInsertTimerInActiveList+0x62>
 8006be4:	68ba      	ldr	r2, [r7, #8]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d302      	bcc.n	8006bf2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006bec:	2301      	movs	r3, #1
 8006bee:	617b      	str	r3, [r7, #20]
 8006bf0:	e007      	b.n	8006c02 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006bf2:	4b07      	ldr	r3, [pc, #28]	@ (8006c10 <prvInsertTimerInActiveList+0x80>)
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	3304      	adds	r3, #4
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	4610      	mov	r0, r2
 8006bfe:	f7fd faec 	bl	80041da <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006c02:	697b      	ldr	r3, [r7, #20]
    }
 8006c04:	4618      	mov	r0, r3
 8006c06:	3718      	adds	r7, #24
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	24002b30 	.word	0x24002b30
 8006c10:	24002b2c 	.word	0x24002b2c

08006c14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b088      	sub	sp, #32
 8006c18:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8006c1a:	f107 0308 	add.w	r3, r7, #8
 8006c1e:	2200      	movs	r2, #0
 8006c20:	601a      	str	r2, [r3, #0]
 8006c22:	605a      	str	r2, [r3, #4]
 8006c24:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8006c26:	e0ab      	b.n	8006d80 <prvProcessReceivedCommands+0x16c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	f2c0 80a8 	blt.w	8006d80 <prvProcessReceivedCommands+0x16c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	695b      	ldr	r3, [r3, #20]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d004      	beq.n	8006c46 <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	3304      	adds	r3, #4
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7fd fb03 	bl	800424c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c46:	1d3b      	adds	r3, r7, #4
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7ff ff81 	bl	8006b50 <prvSampleTimeNow>
 8006c4e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	3b01      	subs	r3, #1
 8006c54:	2b08      	cmp	r3, #8
 8006c56:	f200 8090 	bhi.w	8006d7a <prvProcessReceivedCommands+0x166>
 8006c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c60 <prvProcessReceivedCommands+0x4c>)
 8006c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c60:	08006c85 	.word	0x08006c85
 8006c64:	08006c85 	.word	0x08006c85
 8006c68:	08006ced 	.word	0x08006ced
 8006c6c:	08006d01 	.word	0x08006d01
 8006c70:	08006d51 	.word	0x08006d51
 8006c74:	08006c85 	.word	0x08006c85
 8006c78:	08006c85 	.word	0x08006c85
 8006c7c:	08006ced 	.word	0x08006ced
 8006c80:	08006d01 	.word	0x08006d01
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c8a:	f043 0301 	orr.w	r3, r3, #1
 8006c8e:	b2da      	uxtb	r2, r3
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	18d1      	adds	r1, r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	69ba      	ldr	r2, [r7, #24]
 8006ca2:	69f8      	ldr	r0, [r7, #28]
 8006ca4:	f7ff ff74 	bl	8006b90 <prvInsertTimerInActiveList>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d067      	beq.n	8006d7e <prvProcessReceivedCommands+0x16a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cb4:	f003 0304 	and.w	r3, r3, #4
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d009      	beq.n	8006cd0 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	69ba      	ldr	r2, [r7, #24]
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	69f8      	ldr	r0, [r7, #28]
 8006cca:	f7ff fe69 	bl	80069a0 <prvReloadTimer>
 8006cce:	e008      	b.n	8006ce2 <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cd6:	f023 0301 	bic.w	r3, r3, #1
 8006cda:	b2da      	uxtb	r2, r3
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	69f8      	ldr	r0, [r7, #28]
 8006ce8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8006cea:	e048      	b.n	8006d7e <prvProcessReceivedCommands+0x16a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cf2:	f023 0301 	bic.w	r3, r3, #1
 8006cf6:	b2da      	uxtb	r2, r3
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8006cfe:	e03f      	b.n	8006d80 <prvProcessReceivedCommands+0x16c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d06:	f043 0301 	orr.w	r3, r3, #1
 8006d0a:	b2da      	uxtb	r2, r3
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	699b      	ldr	r3, [r3, #24]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d10d      	bne.n	8006d3c <prvProcessReceivedCommands+0x128>
    __asm volatile
 8006d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d24:	b672      	cpsid	i
 8006d26:	f383 8811 	msr	BASEPRI, r3
 8006d2a:	f3bf 8f6f 	isb	sy
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	b662      	cpsie	i
 8006d34:	617b      	str	r3, [r7, #20]
}
 8006d36:	bf00      	nop
 8006d38:	bf00      	nop
 8006d3a:	e7fd      	b.n	8006d38 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	699a      	ldr	r2, [r3, #24]
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	18d1      	adds	r1, r2, r3
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	69ba      	ldr	r2, [r7, #24]
 8006d48:	69f8      	ldr	r0, [r7, #28]
 8006d4a:	f7ff ff21 	bl	8006b90 <prvInsertTimerInActiveList>
                        break;
 8006d4e:	e017      	b.n	8006d80 <prvProcessReceivedCommands+0x16c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d56:	f003 0302 	and.w	r3, r3, #2
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d103      	bne.n	8006d66 <prvProcessReceivedCommands+0x152>
                            {
                                vPortFree( pxTimer );
 8006d5e:	69f8      	ldr	r0, [r7, #28]
 8006d60:	f000 fc5a 	bl	8007618 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006d64:	e00c      	b.n	8006d80 <prvProcessReceivedCommands+0x16c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d6c:	f023 0301 	bic.w	r3, r3, #1
 8006d70:	b2da      	uxtb	r2, r3
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8006d78:	e002      	b.n	8006d80 <prvProcessReceivedCommands+0x16c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8006d7a:	bf00      	nop
 8006d7c:	e000      	b.n	8006d80 <prvProcessReceivedCommands+0x16c>
                        break;
 8006d7e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8006d80:	4b08      	ldr	r3, [pc, #32]	@ (8006da4 <prvProcessReceivedCommands+0x190>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f107 0108 	add.w	r1, r7, #8
 8006d88:	2200      	movs	r2, #0
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7fd fdc8 	bl	8004920 <xQueueReceive>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f47f af48 	bne.w	8006c28 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8006d98:	bf00      	nop
 8006d9a:	bf00      	nop
 8006d9c:	3720      	adds	r7, #32
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	24002b34 	.word	0x24002b34

08006da8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006dae:	e009      	b.n	8006dc4 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006db0:	4b0e      	ldr	r3, [pc, #56]	@ (8006dec <prvSwitchTimerLists+0x44>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8006dba:	f04f 31ff 	mov.w	r1, #4294967295
 8006dbe:	6838      	ldr	r0, [r7, #0]
 8006dc0:	f7ff fe10 	bl	80069e4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006dc4:	4b09      	ldr	r3, [pc, #36]	@ (8006dec <prvSwitchTimerLists+0x44>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1f0      	bne.n	8006db0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8006dce:	4b07      	ldr	r3, [pc, #28]	@ (8006dec <prvSwitchTimerLists+0x44>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8006dd4:	4b06      	ldr	r3, [pc, #24]	@ (8006df0 <prvSwitchTimerLists+0x48>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a04      	ldr	r2, [pc, #16]	@ (8006dec <prvSwitchTimerLists+0x44>)
 8006dda:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006ddc:	4a04      	ldr	r2, [pc, #16]	@ (8006df0 <prvSwitchTimerLists+0x48>)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6013      	str	r3, [r2, #0]
    }
 8006de2:	bf00      	nop
 8006de4:	3708      	adds	r7, #8
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	24002b2c 	.word	0x24002b2c
 8006df0:	24002b30 	.word	0x24002b30

08006df4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006dfa:	f000 f99b 	bl	8007134 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006dfe:	4b15      	ldr	r3, [pc, #84]	@ (8006e54 <prvCheckForValidListAndQueue+0x60>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d120      	bne.n	8006e48 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 8006e06:	4814      	ldr	r0, [pc, #80]	@ (8006e58 <prvCheckForValidListAndQueue+0x64>)
 8006e08:	f7fd f9ba 	bl	8004180 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006e0c:	4813      	ldr	r0, [pc, #76]	@ (8006e5c <prvCheckForValidListAndQueue+0x68>)
 8006e0e:	f7fd f9b7 	bl	8004180 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006e12:	4b13      	ldr	r3, [pc, #76]	@ (8006e60 <prvCheckForValidListAndQueue+0x6c>)
 8006e14:	4a10      	ldr	r2, [pc, #64]	@ (8006e58 <prvCheckForValidListAndQueue+0x64>)
 8006e16:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006e18:	4b12      	ldr	r3, [pc, #72]	@ (8006e64 <prvCheckForValidListAndQueue+0x70>)
 8006e1a:	4a10      	ldr	r2, [pc, #64]	@ (8006e5c <prvCheckForValidListAndQueue+0x68>)
 8006e1c:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ];

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e1e:	2300      	movs	r3, #0
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	4b11      	ldr	r3, [pc, #68]	@ (8006e68 <prvCheckForValidListAndQueue+0x74>)
 8006e24:	4a11      	ldr	r2, [pc, #68]	@ (8006e6c <prvCheckForValidListAndQueue+0x78>)
 8006e26:	210c      	movs	r1, #12
 8006e28:	200a      	movs	r0, #10
 8006e2a:	f7fd facf 	bl	80043cc <xQueueGenericCreateStatic>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	4a08      	ldr	r2, [pc, #32]	@ (8006e54 <prvCheckForValidListAndQueue+0x60>)
 8006e32:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8006e34:	4b07      	ldr	r3, [pc, #28]	@ (8006e54 <prvCheckForValidListAndQueue+0x60>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d005      	beq.n	8006e48 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006e3c:	4b05      	ldr	r3, [pc, #20]	@ (8006e54 <prvCheckForValidListAndQueue+0x60>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	490b      	ldr	r1, [pc, #44]	@ (8006e70 <prvCheckForValidListAndQueue+0x7c>)
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7fe f96c 	bl	8005120 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006e48:	f000 f9aa 	bl	80071a0 <vPortExitCritical>
    }
 8006e4c:	bf00      	nop
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	24002b34 	.word	0x24002b34
 8006e58:	24002b04 	.word	0x24002b04
 8006e5c:	24002b18 	.word	0x24002b18
 8006e60:	24002b2c 	.word	0x24002b2c
 8006e64:	24002b30 	.word	0x24002b30
 8006e68:	24002bb8 	.word	0x24002bb8
 8006e6c:	24002b40 	.word	0x24002b40
 8006e70:	08013710 	.word	0x08013710

08006e74 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	3b04      	subs	r3, #4
 8006e84:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006e8c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	3b04      	subs	r3, #4
 8006e92:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	f023 0201 	bic.w	r2, r3, #1
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	3b04      	subs	r3, #4
 8006ea2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006ea4:	4a0c      	ldr	r2, [pc, #48]	@ (8006ed8 <pxPortInitialiseStack+0x64>)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	3b14      	subs	r3, #20
 8006eae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	3b04      	subs	r3, #4
 8006eba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f06f 0202 	mvn.w	r2, #2
 8006ec2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	3b20      	subs	r3, #32
 8006ec8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006eca:	68fb      	ldr	r3, [r7, #12]
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3714      	adds	r7, #20
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr
 8006ed8:	08006edd 	.word	0x08006edd

08006edc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006ee6:	4b15      	ldr	r3, [pc, #84]	@ (8006f3c <prvTaskExitError+0x60>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eee:	d00d      	beq.n	8006f0c <prvTaskExitError+0x30>
    __asm volatile
 8006ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef4:	b672      	cpsid	i
 8006ef6:	f383 8811 	msr	BASEPRI, r3
 8006efa:	f3bf 8f6f 	isb	sy
 8006efe:	f3bf 8f4f 	dsb	sy
 8006f02:	b662      	cpsie	i
 8006f04:	60fb      	str	r3, [r7, #12]
}
 8006f06:	bf00      	nop
 8006f08:	bf00      	nop
 8006f0a:	e7fd      	b.n	8006f08 <prvTaskExitError+0x2c>
    __asm volatile
 8006f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f10:	b672      	cpsid	i
 8006f12:	f383 8811 	msr	BASEPRI, r3
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	b662      	cpsie	i
 8006f20:	60bb      	str	r3, [r7, #8]
}
 8006f22:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006f24:	bf00      	nop
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d0fc      	beq.n	8006f26 <prvTaskExitError+0x4a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006f2c:	bf00      	nop
 8006f2e:	bf00      	nop
 8006f30:	3714      	adds	r7, #20
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	24000088 	.word	0x24000088

08006f40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006f40:	4b07      	ldr	r3, [pc, #28]	@ (8006f60 <pxCurrentTCBConst2>)
 8006f42:	6819      	ldr	r1, [r3, #0]
 8006f44:	6808      	ldr	r0, [r1, #0]
 8006f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f4a:	f380 8809 	msr	PSP, r0
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f04f 0000 	mov.w	r0, #0
 8006f56:	f380 8811 	msr	BASEPRI, r0
 8006f5a:	4770      	bx	lr
 8006f5c:	f3af 8000 	nop.w

08006f60 <pxCurrentTCBConst2>:
 8006f60:	24002334 	.word	0x24002334
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8006f64:	bf00      	nop
 8006f66:	bf00      	nop

08006f68 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006f68:	4808      	ldr	r0, [pc, #32]	@ (8006f8c <prvPortStartFirstTask+0x24>)
 8006f6a:	6800      	ldr	r0, [r0, #0]
 8006f6c:	6800      	ldr	r0, [r0, #0]
 8006f6e:	f380 8808 	msr	MSP, r0
 8006f72:	f04f 0000 	mov.w	r0, #0
 8006f76:	f380 8814 	msr	CONTROL, r0
 8006f7a:	b662      	cpsie	i
 8006f7c:	b661      	cpsie	f
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	df00      	svc	0
 8006f88:	bf00      	nop
 8006f8a:	0000      	.short	0x0000
 8006f8c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8006f90:	bf00      	nop
 8006f92:	bf00      	nop

08006f94 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b08a      	sub	sp, #40	@ 0x28
 8006f98:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8006f9a:	4b5c      	ldr	r3, [pc, #368]	@ (800710c <xPortStartScheduler+0x178>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	627b      	str	r3, [r7, #36]	@ 0x24
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8006fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa2:	332c      	adds	r3, #44	@ 0x2c
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a5a      	ldr	r2, [pc, #360]	@ (8007110 <xPortStartScheduler+0x17c>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d00d      	beq.n	8006fc8 <xPortStartScheduler+0x34>
    __asm volatile
 8006fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb0:	b672      	cpsid	i
 8006fb2:	f383 8811 	msr	BASEPRI, r3
 8006fb6:	f3bf 8f6f 	isb	sy
 8006fba:	f3bf 8f4f 	dsb	sy
 8006fbe:	b662      	cpsie	i
 8006fc0:	61bb      	str	r3, [r7, #24]
}
 8006fc2:	bf00      	nop
 8006fc4:	bf00      	nop
 8006fc6:	e7fd      	b.n	8006fc4 <xPortStartScheduler+0x30>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fca:	3338      	adds	r3, #56	@ 0x38
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a51      	ldr	r2, [pc, #324]	@ (8007114 <xPortStartScheduler+0x180>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d00d      	beq.n	8006ff0 <xPortStartScheduler+0x5c>
    __asm volatile
 8006fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd8:	b672      	cpsid	i
 8006fda:	f383 8811 	msr	BASEPRI, r3
 8006fde:	f3bf 8f6f 	isb	sy
 8006fe2:	f3bf 8f4f 	dsb	sy
 8006fe6:	b662      	cpsie	i
 8006fe8:	61fb      	str	r3, [r7, #28]
}
 8006fea:	bf00      	nop
 8006fec:	bf00      	nop
 8006fee:	e7fd      	b.n	8006fec <xPortStartScheduler+0x58>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ff4:	4b48      	ldr	r3, [pc, #288]	@ (8007118 <xPortStartScheduler+0x184>)
 8006ff6:	623b      	str	r3, [r7, #32]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8006ff8:	6a3b      	ldr	r3, [r7, #32]
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007000:	6a3b      	ldr	r3, [r7, #32]
 8007002:	22ff      	movs	r2, #255	@ 0xff
 8007004:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007006:	6a3b      	ldr	r3, [r7, #32]
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	b2db      	uxtb	r3, r3
 800700c:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800700e:	79fb      	ldrb	r3, [r7, #7]
 8007010:	b2db      	uxtb	r3, r3
 8007012:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007016:	b2da      	uxtb	r2, r3
 8007018:	4b40      	ldr	r3, [pc, #256]	@ (800711c <xPortStartScheduler+0x188>)
 800701a:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 800701c:	4b3f      	ldr	r3, [pc, #252]	@ (800711c <xPortStartScheduler+0x188>)
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10d      	bne.n	8007040 <xPortStartScheduler+0xac>
    __asm volatile
 8007024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007028:	b672      	cpsid	i
 800702a:	f383 8811 	msr	BASEPRI, r3
 800702e:	f3bf 8f6f 	isb	sy
 8007032:	f3bf 8f4f 	dsb	sy
 8007036:	b662      	cpsie	i
 8007038:	617b      	str	r3, [r7, #20]
}
 800703a:	bf00      	nop
 800703c:	bf00      	nop
 800703e:	e7fd      	b.n	800703c <xPortStartScheduler+0xa8>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8007040:	79fb      	ldrb	r3, [r7, #7]
 8007042:	b2db      	uxtb	r3, r3
 8007044:	43db      	mvns	r3, r3
 8007046:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800704a:	2b00      	cmp	r3, #0
 800704c:	d015      	beq.n	800707a <xPortStartScheduler+0xe6>
    __asm volatile
 800704e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007052:	b672      	cpsid	i
 8007054:	f383 8811 	msr	BASEPRI, r3
 8007058:	f3bf 8f6f 	isb	sy
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	b662      	cpsie	i
 8007062:	613b      	str	r3, [r7, #16]
}
 8007064:	bf00      	nop
 8007066:	bf00      	nop
 8007068:	e7fd      	b.n	8007066 <xPortStartScheduler+0xd2>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	3301      	adds	r3, #1
 800706e:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007070:	79fb      	ldrb	r3, [r7, #7]
 8007072:	b2db      	uxtb	r3, r3
 8007074:	005b      	lsls	r3, r3, #1
 8007076:	b2db      	uxtb	r3, r3
 8007078:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800707a:	79fb      	ldrb	r3, [r7, #7]
 800707c:	b2db      	uxtb	r3, r3
 800707e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007082:	2b80      	cmp	r3, #128	@ 0x80
 8007084:	d0f1      	beq.n	800706a <xPortStartScheduler+0xd6>
        }

        if( ulImplementedPrioBits == 8 )
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	2b08      	cmp	r3, #8
 800708a:	d103      	bne.n	8007094 <xPortStartScheduler+0x100>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 800708c:	4b24      	ldr	r3, [pc, #144]	@ (8007120 <xPortStartScheduler+0x18c>)
 800708e:	2200      	movs	r2, #0
 8007090:	601a      	str	r2, [r3, #0]
 8007092:	e004      	b.n	800709e <xPortStartScheduler+0x10a>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	f1c3 0307 	rsb	r3, r3, #7
 800709a:	4a21      	ldr	r2, [pc, #132]	@ (8007120 <xPortStartScheduler+0x18c>)
 800709c:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800709e:	4b20      	ldr	r3, [pc, #128]	@ (8007120 <xPortStartScheduler+0x18c>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	021b      	lsls	r3, r3, #8
 80070a4:	4a1e      	ldr	r2, [pc, #120]	@ (8007120 <xPortStartScheduler+0x18c>)
 80070a6:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80070a8:	4b1d      	ldr	r3, [pc, #116]	@ (8007120 <xPortStartScheduler+0x18c>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80070b0:	4a1b      	ldr	r2, [pc, #108]	@ (8007120 <xPortStartScheduler+0x18c>)
 80070b2:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80070b4:	7bfb      	ldrb	r3, [r7, #15]
 80070b6:	b2da      	uxtb	r2, r3
 80070b8:	6a3b      	ldr	r3, [r7, #32]
 80070ba:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80070bc:	4b19      	ldr	r3, [pc, #100]	@ (8007124 <xPortStartScheduler+0x190>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a18      	ldr	r2, [pc, #96]	@ (8007124 <xPortStartScheduler+0x190>)
 80070c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070c6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80070c8:	4b16      	ldr	r3, [pc, #88]	@ (8007124 <xPortStartScheduler+0x190>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a15      	ldr	r2, [pc, #84]	@ (8007124 <xPortStartScheduler+0x190>)
 80070ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070d2:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80070d4:	4b14      	ldr	r3, [pc, #80]	@ (8007128 <xPortStartScheduler+0x194>)
 80070d6:	2200      	movs	r2, #0
 80070d8:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80070da:	f000 f8e9 	bl	80072b0 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80070de:	4b13      	ldr	r3, [pc, #76]	@ (800712c <xPortStartScheduler+0x198>)
 80070e0:	2200      	movs	r2, #0
 80070e2:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80070e4:	f000 f908 	bl	80072f8 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80070e8:	4b11      	ldr	r3, [pc, #68]	@ (8007130 <xPortStartScheduler+0x19c>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a10      	ldr	r2, [pc, #64]	@ (8007130 <xPortStartScheduler+0x19c>)
 80070ee:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80070f2:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80070f4:	f7ff ff38 	bl	8006f68 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80070f8:	f7fe fe38 	bl	8005d6c <vTaskSwitchContext>
    prvTaskExitError();
 80070fc:	f7ff feee 	bl	8006edc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3728      	adds	r7, #40	@ 0x28
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	e000ed08 	.word	0xe000ed08
 8007110:	08006f41 	.word	0x08006f41
 8007114:	08007201 	.word	0x08007201
 8007118:	e000e400 	.word	0xe000e400
 800711c:	24002c08 	.word	0x24002c08
 8007120:	24002c0c 	.word	0x24002c0c
 8007124:	e000ed20 	.word	0xe000ed20
 8007128:	e000ed1c 	.word	0xe000ed1c
 800712c:	24000088 	.word	0x24000088
 8007130:	e000ef34 	.word	0xe000ef34

08007134 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
    __asm volatile
 800713a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800713e:	b672      	cpsid	i
 8007140:	f383 8811 	msr	BASEPRI, r3
 8007144:	f3bf 8f6f 	isb	sy
 8007148:	f3bf 8f4f 	dsb	sy
 800714c:	b662      	cpsie	i
 800714e:	607b      	str	r3, [r7, #4]
}
 8007150:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007152:	4b11      	ldr	r3, [pc, #68]	@ (8007198 <vPortEnterCritical+0x64>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	3301      	adds	r3, #1
 8007158:	4a0f      	ldr	r2, [pc, #60]	@ (8007198 <vPortEnterCritical+0x64>)
 800715a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800715c:	4b0e      	ldr	r3, [pc, #56]	@ (8007198 <vPortEnterCritical+0x64>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d112      	bne.n	800718a <vPortEnterCritical+0x56>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007164:	4b0d      	ldr	r3, [pc, #52]	@ (800719c <vPortEnterCritical+0x68>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	b2db      	uxtb	r3, r3
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00d      	beq.n	800718a <vPortEnterCritical+0x56>
    __asm volatile
 800716e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007172:	b672      	cpsid	i
 8007174:	f383 8811 	msr	BASEPRI, r3
 8007178:	f3bf 8f6f 	isb	sy
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	b662      	cpsie	i
 8007182:	603b      	str	r3, [r7, #0]
}
 8007184:	bf00      	nop
 8007186:	bf00      	nop
 8007188:	e7fd      	b.n	8007186 <vPortEnterCritical+0x52>
    }
}
 800718a:	bf00      	nop
 800718c:	370c      	adds	r7, #12
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	24000088 	.word	0x24000088
 800719c:	e000ed04 	.word	0xe000ed04

080071a0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80071a6:	4b13      	ldr	r3, [pc, #76]	@ (80071f4 <vPortExitCritical+0x54>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10d      	bne.n	80071ca <vPortExitCritical+0x2a>
    __asm volatile
 80071ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b2:	b672      	cpsid	i
 80071b4:	f383 8811 	msr	BASEPRI, r3
 80071b8:	f3bf 8f6f 	isb	sy
 80071bc:	f3bf 8f4f 	dsb	sy
 80071c0:	b662      	cpsie	i
 80071c2:	607b      	str	r3, [r7, #4]
}
 80071c4:	bf00      	nop
 80071c6:	bf00      	nop
 80071c8:	e7fd      	b.n	80071c6 <vPortExitCritical+0x26>
    uxCriticalNesting--;
 80071ca:	4b0a      	ldr	r3, [pc, #40]	@ (80071f4 <vPortExitCritical+0x54>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	3b01      	subs	r3, #1
 80071d0:	4a08      	ldr	r2, [pc, #32]	@ (80071f4 <vPortExitCritical+0x54>)
 80071d2:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80071d4:	4b07      	ldr	r3, [pc, #28]	@ (80071f4 <vPortExitCritical+0x54>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d105      	bne.n	80071e8 <vPortExitCritical+0x48>
 80071dc:	2300      	movs	r3, #0
 80071de:	603b      	str	r3, [r7, #0]
    __asm volatile
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	f383 8811 	msr	BASEPRI, r3
}
 80071e6:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80071e8:	bf00      	nop
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr
 80071f4:	24000088 	.word	0x24000088
	...

08007200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007200:	f3ef 8009 	mrs	r0, PSP
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	4b15      	ldr	r3, [pc, #84]	@ (8007260 <pxCurrentTCBConst>)
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	f01e 0f10 	tst.w	lr, #16
 8007210:	bf08      	it	eq
 8007212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800721a:	6010      	str	r0, [r2, #0]
 800721c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007220:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007224:	b672      	cpsid	i
 8007226:	f380 8811 	msr	BASEPRI, r0
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	f3bf 8f6f 	isb	sy
 8007232:	b662      	cpsie	i
 8007234:	f7fe fd9a 	bl	8005d6c <vTaskSwitchContext>
 8007238:	f04f 0000 	mov.w	r0, #0
 800723c:	f380 8811 	msr	BASEPRI, r0
 8007240:	bc09      	pop	{r0, r3}
 8007242:	6819      	ldr	r1, [r3, #0]
 8007244:	6808      	ldr	r0, [r1, #0]
 8007246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800724a:	f01e 0f10 	tst.w	lr, #16
 800724e:	bf08      	it	eq
 8007250:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007254:	f380 8809 	msr	PSP, r0
 8007258:	f3bf 8f6f 	isb	sy
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop

08007260 <pxCurrentTCBConst>:
 8007260:	24002334 	.word	0x24002334
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007264:	bf00      	nop
 8007266:	bf00      	nop

08007268 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
    __asm volatile
 800726e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007272:	b672      	cpsid	i
 8007274:	f383 8811 	msr	BASEPRI, r3
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	b662      	cpsie	i
 8007282:	607b      	str	r3, [r7, #4]
}
 8007284:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007286:	f7fe fc55 	bl	8005b34 <xTaskIncrementTick>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d003      	beq.n	8007298 <xPortSysTickHandler+0x30>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007290:	4b06      	ldr	r3, [pc, #24]	@ (80072ac <xPortSysTickHandler+0x44>)
 8007292:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007296:	601a      	str	r2, [r3, #0]
 8007298:	2300      	movs	r3, #0
 800729a:	603b      	str	r3, [r7, #0]
    __asm volatile
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	f383 8811 	msr	BASEPRI, r3
}
 80072a2:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 80072a4:	bf00      	nop
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	e000ed04 	.word	0xe000ed04

080072b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80072b0:	b480      	push	{r7}
 80072b2:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80072b4:	4b0b      	ldr	r3, [pc, #44]	@ (80072e4 <vPortSetupTimerInterrupt+0x34>)
 80072b6:	2200      	movs	r2, #0
 80072b8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80072ba:	4b0b      	ldr	r3, [pc, #44]	@ (80072e8 <vPortSetupTimerInterrupt+0x38>)
 80072bc:	2200      	movs	r2, #0
 80072be:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80072c0:	4b0a      	ldr	r3, [pc, #40]	@ (80072ec <vPortSetupTimerInterrupt+0x3c>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a0a      	ldr	r2, [pc, #40]	@ (80072f0 <vPortSetupTimerInterrupt+0x40>)
 80072c6:	fba2 2303 	umull	r2, r3, r2, r3
 80072ca:	099b      	lsrs	r3, r3, #6
 80072cc:	4a09      	ldr	r2, [pc, #36]	@ (80072f4 <vPortSetupTimerInterrupt+0x44>)
 80072ce:	3b01      	subs	r3, #1
 80072d0:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80072d2:	4b04      	ldr	r3, [pc, #16]	@ (80072e4 <vPortSetupTimerInterrupt+0x34>)
 80072d4:	2207      	movs	r2, #7
 80072d6:	601a      	str	r2, [r3, #0]
}
 80072d8:	bf00      	nop
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	e000e010 	.word	0xe000e010
 80072e8:	e000e018 	.word	0xe000e018
 80072ec:	24000000 	.word	0x24000000
 80072f0:	10624dd3 	.word	0x10624dd3
 80072f4:	e000e014 	.word	0xe000e014

080072f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80072f8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007308 <vPortEnableVFP+0x10>
 80072fc:	6801      	ldr	r1, [r0, #0]
 80072fe:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007302:	6001      	str	r1, [r0, #0]
 8007304:	4770      	bx	lr
 8007306:	0000      	.short	0x0000
 8007308:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 800730c:	bf00      	nop
 800730e:	bf00      	nop

08007310 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007316:	f3ef 8305 	mrs	r3, IPSR
 800731a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2b0f      	cmp	r3, #15
 8007320:	d917      	bls.n	8007352 <vPortValidateInterruptPriority+0x42>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007322:	4a1a      	ldr	r2, [pc, #104]	@ (800738c <vPortValidateInterruptPriority+0x7c>)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	4413      	add	r3, r2
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800732c:	4b18      	ldr	r3, [pc, #96]	@ (8007390 <vPortValidateInterruptPriority+0x80>)
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	7afa      	ldrb	r2, [r7, #11]
 8007332:	429a      	cmp	r2, r3
 8007334:	d20d      	bcs.n	8007352 <vPortValidateInterruptPriority+0x42>
    __asm volatile
 8007336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800733a:	b672      	cpsid	i
 800733c:	f383 8811 	msr	BASEPRI, r3
 8007340:	f3bf 8f6f 	isb	sy
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	b662      	cpsie	i
 800734a:	607b      	str	r3, [r7, #4]
}
 800734c:	bf00      	nop
 800734e:	bf00      	nop
 8007350:	e7fd      	b.n	800734e <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007352:	4b10      	ldr	r3, [pc, #64]	@ (8007394 <vPortValidateInterruptPriority+0x84>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800735a:	4b0f      	ldr	r3, [pc, #60]	@ (8007398 <vPortValidateInterruptPriority+0x88>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	429a      	cmp	r2, r3
 8007360:	d90d      	bls.n	800737e <vPortValidateInterruptPriority+0x6e>
    __asm volatile
 8007362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007366:	b672      	cpsid	i
 8007368:	f383 8811 	msr	BASEPRI, r3
 800736c:	f3bf 8f6f 	isb	sy
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	b662      	cpsie	i
 8007376:	603b      	str	r3, [r7, #0]
}
 8007378:	bf00      	nop
 800737a:	bf00      	nop
 800737c:	e7fd      	b.n	800737a <vPortValidateInterruptPriority+0x6a>
    }
 800737e:	bf00      	nop
 8007380:	3714      	adds	r7, #20
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	e000e3f0 	.word	0xe000e3f0
 8007390:	24002c08 	.word	0x24002c08
 8007394:	e000ed0c 	.word	0xe000ed0c
 8007398:	24002c0c 	.word	0x24002c0c

0800739c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b08e      	sub	sp, #56	@ 0x38
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80073a4:	2300      	movs	r3, #0
 80073a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d022      	beq.n	80073f4 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 80073ae:	2308      	movs	r3, #8
 80073b0:	43db      	mvns	r3, r3
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d81b      	bhi.n	80073f0 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 80073b8:	2208      	movs	r2, #8
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4413      	add	r3, r2
 80073be:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f003 0307 	and.w	r3, r3, #7
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d014      	beq.n	80073f4 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f003 0307 	and.w	r3, r3, #7
 80073d0:	f1c3 0308 	rsb	r3, r3, #8
 80073d4:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80073d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d8:	43db      	mvns	r3, r3
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d804      	bhi.n	80073ea <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073e4:	4413      	add	r3, r2
 80073e6:	607b      	str	r3, [r7, #4]
 80073e8:	e004      	b.n	80073f4 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 80073ea:	2300      	movs	r3, #0
 80073ec:	607b      	str	r3, [r7, #4]
 80073ee:	e001      	b.n	80073f4 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 80073f0:	2300      	movs	r3, #0
 80073f2:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 80073f4:	f7fe fa58 	bl	80058a8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80073f8:	4b80      	ldr	r3, [pc, #512]	@ (80075fc <pvPortMalloc+0x260>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d101      	bne.n	8007404 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8007400:	f000 f986 	bl	8007710 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2b00      	cmp	r3, #0
 8007408:	f2c0 80de 	blt.w	80075c8 <pvPortMalloc+0x22c>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	f000 80da 	beq.w	80075c8 <pvPortMalloc+0x22c>
 8007414:	4b7a      	ldr	r3, [pc, #488]	@ (8007600 <pvPortMalloc+0x264>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	429a      	cmp	r2, r3
 800741c:	f200 80d4 	bhi.w	80075c8 <pvPortMalloc+0x22c>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007420:	4b78      	ldr	r3, [pc, #480]	@ (8007604 <pvPortMalloc+0x268>)
 8007422:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8007424:	4b77      	ldr	r3, [pc, #476]	@ (8007604 <pvPortMalloc+0x268>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800742a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800742c:	4a76      	ldr	r2, [pc, #472]	@ (8007608 <pvPortMalloc+0x26c>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d305      	bcc.n	800743e <pvPortMalloc+0xa2>
 8007432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007434:	4a75      	ldr	r2, [pc, #468]	@ (800760c <pvPortMalloc+0x270>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d801      	bhi.n	800743e <pvPortMalloc+0xa2>
 800743a:	2301      	movs	r3, #1
 800743c:	e000      	b.n	8007440 <pvPortMalloc+0xa4>
 800743e:	2300      	movs	r3, #0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d12d      	bne.n	80074a0 <pvPortMalloc+0x104>
    __asm volatile
 8007444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007448:	b672      	cpsid	i
 800744a:	f383 8811 	msr	BASEPRI, r3
 800744e:	f3bf 8f6f 	isb	sy
 8007452:	f3bf 8f4f 	dsb	sy
 8007456:	b662      	cpsie	i
 8007458:	623b      	str	r3, [r7, #32]
}
 800745a:	bf00      	nop
 800745c:	bf00      	nop
 800745e:	e7fd      	b.n	800745c <pvPortMalloc+0xc0>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8007460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007462:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8007464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800746a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800746c:	4a66      	ldr	r2, [pc, #408]	@ (8007608 <pvPortMalloc+0x26c>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d305      	bcc.n	800747e <pvPortMalloc+0xe2>
 8007472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007474:	4a65      	ldr	r2, [pc, #404]	@ (800760c <pvPortMalloc+0x270>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d801      	bhi.n	800747e <pvPortMalloc+0xe2>
 800747a:	2301      	movs	r3, #1
 800747c:	e000      	b.n	8007480 <pvPortMalloc+0xe4>
 800747e:	2300      	movs	r3, #0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d10d      	bne.n	80074a0 <pvPortMalloc+0x104>
    __asm volatile
 8007484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007488:	b672      	cpsid	i
 800748a:	f383 8811 	msr	BASEPRI, r3
 800748e:	f3bf 8f6f 	isb	sy
 8007492:	f3bf 8f4f 	dsb	sy
 8007496:	b662      	cpsie	i
 8007498:	61fb      	str	r3, [r7, #28]
}
 800749a:	bf00      	nop
 800749c:	bf00      	nop
 800749e:	e7fd      	b.n	800749c <pvPortMalloc+0x100>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80074a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d903      	bls.n	80074b2 <pvPortMalloc+0x116>
 80074aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1d6      	bne.n	8007460 <pvPortMalloc+0xc4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80074b2:	4b52      	ldr	r3, [pc, #328]	@ (80075fc <pvPortMalloc+0x260>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80074b8:	429a      	cmp	r2, r3
 80074ba:	f000 8085 	beq.w	80075c8 <pvPortMalloc+0x22c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 80074be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2208      	movs	r2, #8
 80074c4:	4413      	add	r3, r2
 80074c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 80074c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ca:	4a4f      	ldr	r2, [pc, #316]	@ (8007608 <pvPortMalloc+0x26c>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d305      	bcc.n	80074dc <pvPortMalloc+0x140>
 80074d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074d2:	4a4e      	ldr	r2, [pc, #312]	@ (800760c <pvPortMalloc+0x270>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d801      	bhi.n	80074dc <pvPortMalloc+0x140>
 80074d8:	2301      	movs	r3, #1
 80074da:	e000      	b.n	80074de <pvPortMalloc+0x142>
 80074dc:	2300      	movs	r3, #0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d10d      	bne.n	80074fe <pvPortMalloc+0x162>
    __asm volatile
 80074e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e6:	b672      	cpsid	i
 80074e8:	f383 8811 	msr	BASEPRI, r3
 80074ec:	f3bf 8f6f 	isb	sy
 80074f0:	f3bf 8f4f 	dsb	sy
 80074f4:	b662      	cpsie	i
 80074f6:	61bb      	str	r3, [r7, #24]
}
 80074f8:	bf00      	nop
 80074fa:	bf00      	nop
 80074fc:	e7fd      	b.n	80074fa <pvPortMalloc+0x15e>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80074fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007504:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8007506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	429a      	cmp	r2, r3
 800750e:	d90d      	bls.n	800752c <pvPortMalloc+0x190>
    __asm volatile
 8007510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007514:	b672      	cpsid	i
 8007516:	f383 8811 	msr	BASEPRI, r3
 800751a:	f3bf 8f6f 	isb	sy
 800751e:	f3bf 8f4f 	dsb	sy
 8007522:	b662      	cpsie	i
 8007524:	617b      	str	r3, [r7, #20]
}
 8007526:	bf00      	nop
 8007528:	bf00      	nop
 800752a:	e7fd      	b.n	8007528 <pvPortMalloc+0x18c>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800752c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800752e:	685a      	ldr	r2, [r3, #4]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	1ad2      	subs	r2, r2, r3
 8007534:	2308      	movs	r3, #8
 8007536:	005b      	lsls	r3, r3, #1
 8007538:	429a      	cmp	r2, r3
 800753a:	d926      	bls.n	800758a <pvPortMalloc+0x1ee>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800753c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4413      	add	r3, r2
 8007542:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007546:	f003 0307 	and.w	r3, r3, #7
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00d      	beq.n	800756a <pvPortMalloc+0x1ce>
    __asm volatile
 800754e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007552:	b672      	cpsid	i
 8007554:	f383 8811 	msr	BASEPRI, r3
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	b662      	cpsie	i
 8007562:	613b      	str	r3, [r7, #16]
}
 8007564:	bf00      	nop
 8007566:	bf00      	nop
 8007568:	e7fd      	b.n	8007566 <pvPortMalloc+0x1ca>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800756a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800756c:	685a      	ldr	r2, [r3, #4]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	1ad2      	subs	r2, r2, r3
 8007572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007574:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800757c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007582:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8007584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007588:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800758a:	4b1d      	ldr	r3, [pc, #116]	@ (8007600 <pvPortMalloc+0x264>)
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	1ad3      	subs	r3, r2, r3
 8007594:	4a1a      	ldr	r2, [pc, #104]	@ (8007600 <pvPortMalloc+0x264>)
 8007596:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007598:	4b19      	ldr	r3, [pc, #100]	@ (8007600 <pvPortMalloc+0x264>)
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	4b1c      	ldr	r3, [pc, #112]	@ (8007610 <pvPortMalloc+0x274>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d203      	bcs.n	80075ac <pvPortMalloc+0x210>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80075a4:	4b16      	ldr	r3, [pc, #88]	@ (8007600 <pvPortMalloc+0x264>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a19      	ldr	r2, [pc, #100]	@ (8007610 <pvPortMalloc+0x274>)
 80075aa:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80075ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80075b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075b6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80075b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ba:	2200      	movs	r2, #0
 80075bc:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80075be:	4b15      	ldr	r3, [pc, #84]	@ (8007614 <pvPortMalloc+0x278>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	3301      	adds	r3, #1
 80075c4:	4a13      	ldr	r2, [pc, #76]	@ (8007614 <pvPortMalloc+0x278>)
 80075c6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80075c8:	f7fe f97c 	bl	80058c4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80075cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ce:	f003 0307 	and.w	r3, r3, #7
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00d      	beq.n	80075f2 <pvPortMalloc+0x256>
    __asm volatile
 80075d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075da:	b672      	cpsid	i
 80075dc:	f383 8811 	msr	BASEPRI, r3
 80075e0:	f3bf 8f6f 	isb	sy
 80075e4:	f3bf 8f4f 	dsb	sy
 80075e8:	b662      	cpsie	i
 80075ea:	60fb      	str	r3, [r7, #12]
}
 80075ec:	bf00      	nop
 80075ee:	bf00      	nop
 80075f0:	e7fd      	b.n	80075ee <pvPortMalloc+0x252>
    return pvReturn;
 80075f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3738      	adds	r7, #56	@ 0x38
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	24042c18 	.word	0x24042c18
 8007600:	24042c1c 	.word	0x24042c1c
 8007604:	24042c10 	.word	0x24042c10
 8007608:	24002c10 	.word	0x24002c10
 800760c:	24042c0f 	.word	0x24042c0f
 8007610:	24042c20 	.word	0x24042c20
 8007614:	24042c24 	.word	0x24042c24

08007618 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b088      	sub	sp, #32
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d066      	beq.n	80076f8 <vPortFree+0xe0>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800762a:	2308      	movs	r3, #8
 800762c:	425b      	negs	r3, r3
 800762e:	69fa      	ldr	r2, [r7, #28]
 8007630:	4413      	add	r3, r2
 8007632:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	4a31      	ldr	r2, [pc, #196]	@ (8007700 <vPortFree+0xe8>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d305      	bcc.n	800764c <vPortFree+0x34>
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	4a30      	ldr	r2, [pc, #192]	@ (8007704 <vPortFree+0xec>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d801      	bhi.n	800764c <vPortFree+0x34>
 8007648:	2301      	movs	r3, #1
 800764a:	e000      	b.n	800764e <vPortFree+0x36>
 800764c:	2300      	movs	r3, #0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d10d      	bne.n	800766e <vPortFree+0x56>
    __asm volatile
 8007652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007656:	b672      	cpsid	i
 8007658:	f383 8811 	msr	BASEPRI, r3
 800765c:	f3bf 8f6f 	isb	sy
 8007660:	f3bf 8f4f 	dsb	sy
 8007664:	b662      	cpsie	i
 8007666:	617b      	str	r3, [r7, #20]
}
 8007668:	bf00      	nop
 800766a:	bf00      	nop
 800766c:	e7fd      	b.n	800766a <vPortFree+0x52>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	2b00      	cmp	r3, #0
 8007674:	db0d      	blt.n	8007692 <vPortFree+0x7a>
    __asm volatile
 8007676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800767a:	b672      	cpsid	i
 800767c:	f383 8811 	msr	BASEPRI, r3
 8007680:	f3bf 8f6f 	isb	sy
 8007684:	f3bf 8f4f 	dsb	sy
 8007688:	b662      	cpsie	i
 800768a:	613b      	str	r3, [r7, #16]
}
 800768c:	bf00      	nop
 800768e:	bf00      	nop
 8007690:	e7fd      	b.n	800768e <vPortFree+0x76>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00d      	beq.n	80076b6 <vPortFree+0x9e>
    __asm volatile
 800769a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800769e:	b672      	cpsid	i
 80076a0:	f383 8811 	msr	BASEPRI, r3
 80076a4:	f3bf 8f6f 	isb	sy
 80076a8:	f3bf 8f4f 	dsb	sy
 80076ac:	b662      	cpsie	i
 80076ae:	60fb      	str	r3, [r7, #12]
}
 80076b0:	bf00      	nop
 80076b2:	bf00      	nop
 80076b4:	e7fd      	b.n	80076b2 <vPortFree+0x9a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	da1c      	bge.n	80076f8 <vPortFree+0xe0>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d118      	bne.n	80076f8 <vPortFree+0xe0>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 80076d2:	f7fe f8e9 	bl	80058a8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	685a      	ldr	r2, [r3, #4]
 80076da:	4b0b      	ldr	r3, [pc, #44]	@ (8007708 <vPortFree+0xf0>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4413      	add	r3, r2
 80076e0:	4a09      	ldr	r2, [pc, #36]	@ (8007708 <vPortFree+0xf0>)
 80076e2:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80076e4:	69b8      	ldr	r0, [r7, #24]
 80076e6:	f000 f86d 	bl	80077c4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80076ea:	4b08      	ldr	r3, [pc, #32]	@ (800770c <vPortFree+0xf4>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	3301      	adds	r3, #1
 80076f0:	4a06      	ldr	r2, [pc, #24]	@ (800770c <vPortFree+0xf4>)
 80076f2:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80076f4:	f7fe f8e6 	bl	80058c4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80076f8:	bf00      	nop
 80076fa:	3720      	adds	r7, #32
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	24002c10 	.word	0x24002c10
 8007704:	24042c0f 	.word	0x24042c0f
 8007708:	24042c1c 	.word	0x24042c1c
 800770c:	24042c28 	.word	0x24042c28

08007710 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007716:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800771a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800771c:	4b24      	ldr	r3, [pc, #144]	@ (80077b0 <prvHeapInit+0xa0>)
 800771e:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f003 0307 	and.w	r3, r3, #7
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00c      	beq.n	8007744 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	3307      	adds	r3, #7
 800772e:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f023 0307 	bic.w	r3, r3, #7
 8007736:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8007738:	68ba      	ldr	r2, [r7, #8]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	1ad3      	subs	r3, r2, r3
 800773e:	4a1c      	ldr	r2, [pc, #112]	@ (80077b0 <prvHeapInit+0xa0>)
 8007740:	4413      	add	r3, r2
 8007742:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	4a1b      	ldr	r2, [pc, #108]	@ (80077b4 <prvHeapInit+0xa4>)
 8007748:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800774a:	4b1a      	ldr	r3, [pc, #104]	@ (80077b4 <prvHeapInit+0xa4>)
 800774c:	2200      	movs	r2, #0
 800774e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	4413      	add	r3, r2
 8007756:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8007758:	2208      	movs	r2, #8
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	1a9b      	subs	r3, r3, r2
 800775e:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f023 0307 	bic.w	r3, r3, #7
 8007766:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a13      	ldr	r2, [pc, #76]	@ (80077b8 <prvHeapInit+0xa8>)
 800776c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800776e:	4b12      	ldr	r3, [pc, #72]	@ (80077b8 <prvHeapInit+0xa8>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2200      	movs	r2, #0
 8007774:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8007776:	4b10      	ldr	r3, [pc, #64]	@ (80077b8 <prvHeapInit+0xa8>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2200      	movs	r2, #0
 800777c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	1ad2      	subs	r2, r2, r3
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 800778c:	4b0a      	ldr	r3, [pc, #40]	@ (80077b8 <prvHeapInit+0xa8>)
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	4a08      	ldr	r2, [pc, #32]	@ (80077bc <prvHeapInit+0xac>)
 800779a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	4a07      	ldr	r2, [pc, #28]	@ (80077c0 <prvHeapInit+0xb0>)
 80077a2:	6013      	str	r3, [r2, #0]
}
 80077a4:	bf00      	nop
 80077a6:	3714      	adds	r7, #20
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr
 80077b0:	24002c10 	.word	0x24002c10
 80077b4:	24042c10 	.word	0x24042c10
 80077b8:	24042c18 	.word	0x24042c18
 80077bc:	24042c20 	.word	0x24042c20
 80077c0:	24042c1c 	.word	0x24042c1c

080077c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80077c4:	b480      	push	{r7}
 80077c6:	b087      	sub	sp, #28
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80077cc:	4b37      	ldr	r3, [pc, #220]	@ (80078ac <prvInsertBlockIntoFreeList+0xe8>)
 80077ce:	617b      	str	r3, [r7, #20]
 80077d0:	e002      	b.n	80077d8 <prvInsertBlockIntoFreeList+0x14>
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	617b      	str	r3, [r7, #20]
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d8f7      	bhi.n	80077d2 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	4a31      	ldr	r2, [pc, #196]	@ (80078ac <prvInsertBlockIntoFreeList+0xe8>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d01a      	beq.n	8007820 <prvInsertBlockIntoFreeList+0x5c>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	4a30      	ldr	r2, [pc, #192]	@ (80078b0 <prvInsertBlockIntoFreeList+0xec>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d305      	bcc.n	80077fe <prvInsertBlockIntoFreeList+0x3a>
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	4a2f      	ldr	r2, [pc, #188]	@ (80078b4 <prvInsertBlockIntoFreeList+0xf0>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d801      	bhi.n	80077fe <prvInsertBlockIntoFreeList+0x3a>
 80077fa:	2301      	movs	r3, #1
 80077fc:	e000      	b.n	8007800 <prvInsertBlockIntoFreeList+0x3c>
 80077fe:	2300      	movs	r3, #0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d10d      	bne.n	8007820 <prvInsertBlockIntoFreeList+0x5c>
    __asm volatile
 8007804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007808:	b672      	cpsid	i
 800780a:	f383 8811 	msr	BASEPRI, r3
 800780e:	f3bf 8f6f 	isb	sy
 8007812:	f3bf 8f4f 	dsb	sy
 8007816:	b662      	cpsie	i
 8007818:	60fb      	str	r3, [r7, #12]
}
 800781a:	bf00      	nop
 800781c:	bf00      	nop
 800781e:	e7fd      	b.n	800781c <prvInsertBlockIntoFreeList+0x58>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	693a      	ldr	r2, [r7, #16]
 800782a:	4413      	add	r3, r2
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	429a      	cmp	r2, r3
 8007830:	d108      	bne.n	8007844 <prvInsertBlockIntoFreeList+0x80>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	685a      	ldr	r2, [r3, #4]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	441a      	add	r2, r3
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	441a      	add	r2, r3
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	429a      	cmp	r2, r3
 8007856:	d118      	bne.n	800788a <prvInsertBlockIntoFreeList+0xc6>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	4b16      	ldr	r3, [pc, #88]	@ (80078b8 <prvInsertBlockIntoFreeList+0xf4>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	429a      	cmp	r2, r3
 8007862:	d00d      	beq.n	8007880 <prvInsertBlockIntoFreeList+0xbc>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	685a      	ldr	r2, [r3, #4]
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	441a      	add	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	601a      	str	r2, [r3, #0]
 800787e:	e008      	b.n	8007892 <prvInsertBlockIntoFreeList+0xce>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8007880:	4b0d      	ldr	r3, [pc, #52]	@ (80078b8 <prvInsertBlockIntoFreeList+0xf4>)
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	601a      	str	r2, [r3, #0]
 8007888:	e003      	b.n	8007892 <prvInsertBlockIntoFreeList+0xce>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007892:	697a      	ldr	r2, [r7, #20]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	429a      	cmp	r2, r3
 8007898:	d002      	beq.n	80078a0 <prvInsertBlockIntoFreeList+0xdc>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80078a0:	bf00      	nop
 80078a2:	371c      	adds	r7, #28
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr
 80078ac:	24042c10 	.word	0x24042c10
 80078b0:	24002c10 	.word	0x24002c10
 80078b4:	24042c0f 	.word	0x24042c0f
 80078b8:	24042c18 	.word	0x24042c18

080078bc <csp_get_uptime_s>:

#include <csp/arch/csp_time.h>

static uint32_t uptime_s_offset = 0;

uint32_t csp_get_uptime_s(void) {
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0

	uint32_t seconds = csp_get_s();
 80078c2:	f000 f9af 	bl	8007c24 <csp_get_s>
 80078c6:	6078      	str	r0, [r7, #4]
	if (uptime_s_offset == 0) {
 80078c8:	4b07      	ldr	r3, [pc, #28]	@ (80078e8 <csp_get_uptime_s+0x2c>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d102      	bne.n	80078d6 <csp_get_uptime_s+0x1a>
		uptime_s_offset = seconds;
 80078d0:	4a05      	ldr	r2, [pc, #20]	@ (80078e8 <csp_get_uptime_s+0x2c>)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6013      	str	r3, [r2, #0]
	}
	return (seconds - uptime_s_offset);
 80078d6:	4b04      	ldr	r3, [pc, #16]	@ (80078e8 <csp_get_uptime_s+0x2c>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	1ad3      	subs	r3, r2, r3
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3708      	adds	r7, #8
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	24042c2c 	.word	0x24042c2c

080078ec <csp_malloc>:

#include <string.h>

#include <FreeRTOS.h>

void * csp_malloc(size_t size) {
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
	return pvPortMalloc(size);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f7ff fd51 	bl	800739c <pvPortMalloc>
 80078fa:	4603      	mov	r3, r0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3708      	adds	r7, #8
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <csp_calloc>:

void * csp_calloc(size_t nmemb, size_t size) {
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
	size = (nmemb * size); 
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	fb02 f303 	mul.w	r3, r2, r3
 8007916:	603b      	str	r3, [r7, #0]
	void * ptr = csp_malloc(size);
 8007918:	6838      	ldr	r0, [r7, #0]
 800791a:	f7ff ffe7 	bl	80078ec <csp_malloc>
 800791e:	60f8      	str	r0, [r7, #12]
	if (ptr) {
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d004      	beq.n	8007930 <csp_calloc+0x2c>
		memset(ptr, 0, size);
 8007926:	683a      	ldr	r2, [r7, #0]
 8007928:	2100      	movs	r1, #0
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f00a fc5a 	bl	80121e4 <memset>
	}
	return ptr;
 8007930:	68fb      	ldr	r3, [r7, #12]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <csp_free>:

void csp_free(void *ptr) {
 800793a:	b580      	push	{r7, lr}
 800793c:	b082      	sub	sp, #8
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
	vPortFree(ptr);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f7ff fe68 	bl	8007618 <vPortFree>
}
 8007948:	bf00      	nop
 800794a:	3708      	adds	r7, #8
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <csp_queue_create>:
#include <csp/arch/csp_queue.h>

#include <FreeRTOS.h>
#include <queue.h> // FreeRTOS

csp_queue_handle_t csp_queue_create(int length, size_t item_size) {
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
	return xQueueCreate(length, item_size);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	6839      	ldr	r1, [r7, #0]
 8007960:	4618      	mov	r0, r3
 8007962:	f7fc fd9a 	bl	800449a <xQueueGenericCreate>
 8007966:	4603      	mov	r3, r0
}
 8007968:	4618      	mov	r0, r3
 800796a:	3708      	adds	r7, #8
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <csp_queue_remove>:

void csp_queue_remove(csp_queue_handle_t queue) {
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
	vQueueDelete(queue);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f7fd fa82 	bl	8004e82 <vQueueDelete>
}
 800797e:	bf00      	nop
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <csp_queue_enqueue>:

int csp_queue_enqueue(csp_queue_handle_t handle, const void * value, uint32_t timeout) {
 8007986:	b580      	push	{r7, lr}
 8007988:	b084      	sub	sp, #16
 800798a:	af00      	add	r7, sp, #0
 800798c:	60f8      	str	r0, [r7, #12]
 800798e:	60b9      	str	r1, [r7, #8]
 8007990:	607a      	str	r2, [r7, #4]
	if (timeout != CSP_MAX_TIMEOUT)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f1b3 3fff 	cmp.w	r3, #4294967295
		timeout = timeout / portTICK_RATE_MS;
	return xQueueSendToBack(handle, value, timeout);
 8007998:	2300      	movs	r3, #0
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	68b9      	ldr	r1, [r7, #8]
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f7fc fdf4 	bl	800458c <xQueueGenericSend>
 80079a4:	4603      	mov	r3, r0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <csp_queue_enqueue_isr>:

int csp_queue_enqueue_isr(csp_queue_handle_t handle, const void * value, CSP_BASE_TYPE * task_woken) {
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b084      	sub	sp, #16
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	60f8      	str	r0, [r7, #12]
 80079b6:	60b9      	str	r1, [r7, #8]
 80079b8:	607a      	str	r2, [r7, #4]
	return xQueueSendToBackFromISR(handle, value, task_woken);
 80079ba:	2300      	movs	r3, #0
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	68b9      	ldr	r1, [r7, #8]
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	f7fc feed 	bl	80047a0 <xQueueGenericSendFromISR>
 80079c6:	4603      	mov	r3, r0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3710      	adds	r7, #16
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <csp_queue_dequeue>:

int csp_queue_dequeue(csp_queue_handle_t handle, void * buf, uint32_t timeout) {
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	607a      	str	r2, [r7, #4]
	if (timeout != CSP_MAX_TIMEOUT)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f1b3 3fff 	cmp.w	r3, #4294967295
		timeout = timeout / portTICK_RATE_MS;
	return xQueueReceive(handle, buf, timeout);
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	68b9      	ldr	r1, [r7, #8]
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	f7fc ff9a 	bl	8004920 <xQueueReceive>
 80079ec:	4603      	mov	r3, r0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <csp_queue_dequeue_isr>:

int csp_queue_dequeue_isr(csp_queue_handle_t handle, void * buf, CSP_BASE_TYPE * task_woken) {
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b084      	sub	sp, #16
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	60f8      	str	r0, [r7, #12]
 80079fe:	60b9      	str	r1, [r7, #8]
 8007a00:	607a      	str	r2, [r7, #4]
	return xQueueReceiveFromISR(handle, buf, task_woken);
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	68b9      	ldr	r1, [r7, #8]
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f7fd f978 	bl	8004cfc <xQueueReceiveFromISR>
 8007a0c:	4603      	mov	r3, r0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <csp_queue_size>:

int csp_queue_size(csp_queue_handle_t handle) {
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b082      	sub	sp, #8
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
	return uxQueueMessagesWaiting(handle);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f7fd fa0e 	bl	8004e40 <uxQueueMessagesWaiting>
 8007a24:	4603      	mov	r3, r0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3708      	adds	r7, #8
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}

08007a2e <csp_bin_sem_create>:

int csp_mutex_unlock(csp_mutex_t * mutex) {
	return csp_bin_sem_post(mutex);
}

int csp_bin_sem_create(csp_bin_sem_handle_t * sem) {
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b082      	sub	sp, #8
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
	vSemaphoreCreateBinary(*sem);
 8007a36:	2203      	movs	r2, #3
 8007a38:	2100      	movs	r1, #0
 8007a3a:	2001      	movs	r0, #1
 8007a3c:	f7fc fd2d 	bl	800449a <xQueueGenericCreate>
 8007a40:	4602      	mov	r2, r0
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	601a      	str	r2, [r3, #0]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d006      	beq.n	8007a5c <csp_bin_sem_create+0x2e>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6818      	ldr	r0, [r3, #0]
 8007a52:	2300      	movs	r3, #0
 8007a54:	2200      	movs	r2, #0
 8007a56:	2100      	movs	r1, #0
 8007a58:	f7fc fd98 	bl	800458c <xQueueGenericSend>
	return CSP_SEMAPHORE_OK;
 8007a5c:	2301      	movs	r3, #1
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3708      	adds	r7, #8
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
	...

08007a68 <csp_bin_sem_wait>:
		vSemaphoreDelete(*sem);
	}
	return CSP_SEMAPHORE_OK;
}

int csp_bin_sem_wait(csp_bin_sem_handle_t * sem, uint32_t timeout) {
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
	csp_log_lock("Wait: %p", sem);
 8007a72:	4b0e      	ldr	r3, [pc, #56]	@ (8007aac <csp_bin_sem_wait+0x44>)
 8007a74:	799b      	ldrb	r3, [r3, #6]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d004      	beq.n	8007a84 <csp_bin_sem_wait+0x1c>
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	490c      	ldr	r1, [pc, #48]	@ (8007ab0 <csp_bin_sem_wait+0x48>)
 8007a7e:	2006      	movs	r0, #6
 8007a80:	f000 fe46 	bl	8008710 <do_csp_debug>
	if (timeout != CSP_MAX_TIMEOUT) {
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	f1b3 3fff 	cmp.w	r3, #4294967295
		timeout = timeout / portTICK_RATE_MS;
	}
	if (xSemaphoreTake(*sem, timeout) == pdPASS) {
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	6839      	ldr	r1, [r7, #0]
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7fd f82d 	bl	8004af0 <xQueueSemaphoreTake>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d101      	bne.n	8007aa0 <csp_bin_sem_wait+0x38>
		return CSP_SEMAPHORE_OK;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e000      	b.n	8007aa2 <csp_bin_sem_wait+0x3a>
	}
	return CSP_SEMAPHORE_ERROR;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	2400008c 	.word	0x2400008c
 8007ab0:	08013718 	.word	0x08013718

08007ab4 <csp_bin_sem_post>:

int csp_bin_sem_post(csp_bin_sem_handle_t * sem) {
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
	csp_log_lock("Post: %p", sem);
 8007abc:	4b0c      	ldr	r3, [pc, #48]	@ (8007af0 <csp_bin_sem_post+0x3c>)
 8007abe:	799b      	ldrb	r3, [r3, #6]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d004      	beq.n	8007ace <csp_bin_sem_post+0x1a>
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	490b      	ldr	r1, [pc, #44]	@ (8007af4 <csp_bin_sem_post+0x40>)
 8007ac8:	2006      	movs	r0, #6
 8007aca:	f000 fe21 	bl	8008710 <do_csp_debug>
	if (xSemaphoreGive(*sem) == pdPASS) {
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6818      	ldr	r0, [r3, #0]
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	f7fc fd58 	bl	800458c <xQueueGenericSend>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d101      	bne.n	8007ae6 <csp_bin_sem_post+0x32>
		return CSP_SEMAPHORE_OK;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e000      	b.n	8007ae8 <csp_bin_sem_post+0x34>
	}
	return CSP_SEMAPHORE_ERROR;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	2400008c 	.word	0x2400008c
 8007af4:	08013724 	.word	0x08013724

08007af8 <csp_sys_set_color>:

	return (uint32_t) xPortGetFreeHeapSize();

}

void csp_sys_set_color(csp_color_t color) {
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	4603      	mov	r3, r0
 8007b00:	71fb      	strb	r3, [r7, #7]

	unsigned int color_code, modifier_code;
	switch (color & COLOR_MASK_COLOR) {
 8007b02:	79fb      	ldrb	r3, [r7, #7]
 8007b04:	f003 030f 	and.w	r3, r3, #15
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	2b07      	cmp	r3, #7
 8007b0c:	d82a      	bhi.n	8007b64 <csp_sys_set_color+0x6c>
 8007b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b14 <csp_sys_set_color+0x1c>)
 8007b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b14:	08007b35 	.word	0x08007b35
 8007b18:	08007b3b 	.word	0x08007b3b
 8007b1c:	08007b41 	.word	0x08007b41
 8007b20:	08007b47 	.word	0x08007b47
 8007b24:	08007b4d 	.word	0x08007b4d
 8007b28:	08007b53 	.word	0x08007b53
 8007b2c:	08007b59 	.word	0x08007b59
 8007b30:	08007b5f 	.word	0x08007b5f
		case COLOR_BLACK:
			color_code = 30; break;
 8007b34:	231e      	movs	r3, #30
 8007b36:	60fb      	str	r3, [r7, #12]
 8007b38:	e017      	b.n	8007b6a <csp_sys_set_color+0x72>
		case COLOR_RED:
			color_code = 31; break;
 8007b3a:	231f      	movs	r3, #31
 8007b3c:	60fb      	str	r3, [r7, #12]
 8007b3e:	e014      	b.n	8007b6a <csp_sys_set_color+0x72>
		case COLOR_GREEN:
			color_code = 32; break;
 8007b40:	2320      	movs	r3, #32
 8007b42:	60fb      	str	r3, [r7, #12]
 8007b44:	e011      	b.n	8007b6a <csp_sys_set_color+0x72>
		case COLOR_YELLOW:
			color_code = 33; break;
 8007b46:	2321      	movs	r3, #33	@ 0x21
 8007b48:	60fb      	str	r3, [r7, #12]
 8007b4a:	e00e      	b.n	8007b6a <csp_sys_set_color+0x72>
		case COLOR_BLUE:
			color_code = 34; break;
 8007b4c:	2322      	movs	r3, #34	@ 0x22
 8007b4e:	60fb      	str	r3, [r7, #12]
 8007b50:	e00b      	b.n	8007b6a <csp_sys_set_color+0x72>
		case COLOR_MAGENTA:
			color_code = 35; break;
 8007b52:	2323      	movs	r3, #35	@ 0x23
 8007b54:	60fb      	str	r3, [r7, #12]
 8007b56:	e008      	b.n	8007b6a <csp_sys_set_color+0x72>
		case COLOR_CYAN:
			color_code = 36; break;
 8007b58:	2324      	movs	r3, #36	@ 0x24
 8007b5a:	60fb      	str	r3, [r7, #12]
 8007b5c:	e005      	b.n	8007b6a <csp_sys_set_color+0x72>
		case COLOR_WHITE:
			color_code = 37; break;
 8007b5e:	2325      	movs	r3, #37	@ 0x25
 8007b60:	60fb      	str	r3, [r7, #12]
 8007b62:	e002      	b.n	8007b6a <csp_sys_set_color+0x72>
		case COLOR_RESET:
		default:
			color_code = 0; break;
 8007b64:	2300      	movs	r3, #0
 8007b66:	60fb      	str	r3, [r7, #12]
 8007b68:	bf00      	nop
	}
	
	switch (color & COLOR_MASK_MODIFIER) {
 8007b6a:	79fb      	ldrb	r3, [r7, #7]
 8007b6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007b70:	2b40      	cmp	r3, #64	@ 0x40
 8007b72:	d013      	beq.n	8007b9c <csp_sys_set_color+0xa4>
 8007b74:	2b40      	cmp	r3, #64	@ 0x40
 8007b76:	dc14      	bgt.n	8007ba2 <csp_sys_set_color+0xaa>
 8007b78:	2b30      	cmp	r3, #48	@ 0x30
 8007b7a:	d00c      	beq.n	8007b96 <csp_sys_set_color+0x9e>
 8007b7c:	2b30      	cmp	r3, #48	@ 0x30
 8007b7e:	dc10      	bgt.n	8007ba2 <csp_sys_set_color+0xaa>
 8007b80:	2b10      	cmp	r3, #16
 8007b82:	d002      	beq.n	8007b8a <csp_sys_set_color+0x92>
 8007b84:	2b20      	cmp	r3, #32
 8007b86:	d003      	beq.n	8007b90 <csp_sys_set_color+0x98>
 8007b88:	e00b      	b.n	8007ba2 <csp_sys_set_color+0xaa>
		case COLOR_BOLD:
			modifier_code = 1; break;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	60bb      	str	r3, [r7, #8]
 8007b8e:	e00b      	b.n	8007ba8 <csp_sys_set_color+0xb0>
		case COLOR_UNDERLINE:
			modifier_code = 2; break;
 8007b90:	2302      	movs	r3, #2
 8007b92:	60bb      	str	r3, [r7, #8]
 8007b94:	e008      	b.n	8007ba8 <csp_sys_set_color+0xb0>
		case COLOR_BLINK:
			modifier_code = 3; break;
 8007b96:	2303      	movs	r3, #3
 8007b98:	60bb      	str	r3, [r7, #8]
 8007b9a:	e005      	b.n	8007ba8 <csp_sys_set_color+0xb0>
		case COLOR_HIDE:
			modifier_code = 4; break;
 8007b9c:	2304      	movs	r3, #4
 8007b9e:	60bb      	str	r3, [r7, #8]
 8007ba0:	e002      	b.n	8007ba8 <csp_sys_set_color+0xb0>
		case COLOR_NORMAL:
		default:
			modifier_code = 0; break;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	60bb      	str	r3, [r7, #8]
 8007ba6:	bf00      	nop
	}

	printf("\033[%u;%um", modifier_code, color_code);
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	68b9      	ldr	r1, [r7, #8]
 8007bac:	4803      	ldr	r0, [pc, #12]	@ (8007bbc <csp_sys_set_color+0xc4>)
 8007bae:	f00a f955 	bl	8011e5c <iprintf>
}
 8007bb2:	bf00      	nop
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	08013730 	.word	0x08013730

08007bc0 <csp_thread_create>:
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <csp/arch/csp_thread.h>

int csp_thread_create(csp_thread_func_t routine, const char * const thread_name, unsigned int stack_size, void * parameters, unsigned int priority, csp_thread_handle_t * return_handle) {
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b088      	sub	sp, #32
 8007bc4:	af02      	add	r7, sp, #8
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
 8007bcc:	603b      	str	r3, [r7, #0]

	csp_thread_handle_t handle;
#if (tskKERNEL_VERSION_MAJOR >= 8)
	portBASE_TYPE ret = xTaskCreate(routine, thread_name, stack_size, parameters, priority, &handle);
 8007bce:	f107 0310 	add.w	r3, r7, #16
 8007bd2:	9301      	str	r3, [sp, #4]
 8007bd4:	6a3b      	ldr	r3, [r7, #32]
 8007bd6:	9300      	str	r3, [sp, #0]
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	68b9      	ldr	r1, [r7, #8]
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	f7fd fc2b 	bl	800543a <xTaskCreate>
 8007be4:	6178      	str	r0, [r7, #20]
#else
	portBASE_TYPE ret = xTaskCreate(routine, (signed char *) thread_name, stack_size, parameters, priority, &handle);
#endif
	if (ret != pdTRUE) {
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d002      	beq.n	8007bf2 <csp_thread_create+0x32>
		return CSP_ERR_NOMEM;
 8007bec:	f04f 33ff 	mov.w	r3, #4294967295
 8007bf0:	e006      	b.n	8007c00 <csp_thread_create+0x40>
	}
	if (return_handle) {
 8007bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d002      	beq.n	8007bfe <csp_thread_create+0x3e>
		*return_handle = handle;
 8007bf8:	693a      	ldr	r2, [r7, #16]
 8007bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfc:	601a      	str	r2, [r3, #0]
	}
	return CSP_ERR_NONE;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3718      	adds	r7, #24
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <csp_get_ms>:
#include <csp/arch/csp_time.h>

#include <FreeRTOS.h>
#include <task.h> // FreeRTOS

uint32_t csp_get_ms(void) {
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	af00      	add	r7, sp, #0
	return (uint32_t)(xTaskGetTickCount() * (1000/configTICK_RATE_HZ));
 8007c0c:	f7fd ff64 	bl	8005ad8 <xTaskGetTickCount>
 8007c10:	4603      	mov	r3, r0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <csp_get_ms_isr>:

uint32_t csp_get_ms_isr(void) {
 8007c16:	b580      	push	{r7, lr}
 8007c18:	af00      	add	r7, sp, #0
	return (uint32_t)(xTaskGetTickCountFromISR() * (1000/configTICK_RATE_HZ));
 8007c1a:	f7fd ff6d 	bl	8005af8 <xTaskGetTickCountFromISR>
 8007c1e:	4603      	mov	r3, r0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <csp_get_s>:

uint32_t csp_get_s(void) {
 8007c24:	b580      	push	{r7, lr}
 8007c26:	af00      	add	r7, sp, #0
	return (uint32_t)(xTaskGetTickCount()/configTICK_RATE_HZ);
 8007c28:	f7fd ff56 	bl	8005ad8 <xTaskGetTickCount>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	4a03      	ldr	r2, [pc, #12]	@ (8007c3c <csp_get_s+0x18>)
 8007c30:	fba2 2303 	umull	r2, r3, r2, r3
 8007c34:	099b      	lsrs	r3, r3, #6
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	10624dd3 	.word	0x10624dd3

08007c40 <csp_buffer_init>:
CSP_STATIC_ASSERT(sizeof(csp_packet_t) == 16, csp_packet);
CSP_STATIC_ASSERT(offsetof(csp_packet_t, length) == 10, length_field_misaligned);
CSP_STATIC_ASSERT(offsetof(csp_packet_t, id) == 12, csp_id_field_misaligned);
CSP_STATIC_ASSERT(offsetof(csp_packet_t, data) == 16, data_field_misaligned);

int csp_buffer_init(void) {
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0

	// calculate total size and ensure correct alignment (int *) for buffers
	const unsigned int skbfsize = CSP_BUFFER_ALIGN * ((sizeof(csp_skbf_t) + csp_buffer_size() + (CSP_BUFFER_ALIGN - 1)) / CSP_BUFFER_ALIGN);
 8007c46:	f000 f9b5 	bl	8007fb4 <csp_buffer_size>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	330b      	adds	r3, #11
 8007c4e:	f023 0303 	bic.w	r3, r3, #3
 8007c52:	60bb      	str	r3, [r7, #8]

	csp_buffer_pool = csp_malloc(csp_conf.buffers * skbfsize);
 8007c54:	4b23      	ldr	r3, [pc, #140]	@ (8007ce4 <csp_buffer_init+0xa4>)
 8007c56:	8adb      	ldrh	r3, [r3, #22]
 8007c58:	461a      	mov	r2, r3
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	fb02 f303 	mul.w	r3, r2, r3
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7ff fe43 	bl	80078ec <csp_malloc>
 8007c66:	4603      	mov	r3, r0
 8007c68:	4a1f      	ldr	r2, [pc, #124]	@ (8007ce8 <csp_buffer_init+0xa8>)
 8007c6a:	6013      	str	r3, [r2, #0]
	if (csp_buffer_pool == NULL)
 8007c6c:	4b1e      	ldr	r3, [pc, #120]	@ (8007ce8 <csp_buffer_init+0xa8>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d030      	beq.n	8007cd6 <csp_buffer_init+0x96>
		goto fail_malloc;

	csp_buffers = csp_queue_create(csp_conf.buffers, sizeof(void *));
 8007c74:	4b1b      	ldr	r3, [pc, #108]	@ (8007ce4 <csp_buffer_init+0xa4>)
 8007c76:	8adb      	ldrh	r3, [r3, #22]
 8007c78:	2104      	movs	r1, #4
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7ff fe68 	bl	8007950 <csp_queue_create>
 8007c80:	4603      	mov	r3, r0
 8007c82:	4a1a      	ldr	r2, [pc, #104]	@ (8007cec <csp_buffer_init+0xac>)
 8007c84:	6013      	str	r3, [r2, #0]
	if (!csp_buffers)
 8007c86:	4b19      	ldr	r3, [pc, #100]	@ (8007cec <csp_buffer_init+0xac>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d01f      	beq.n	8007cce <csp_buffer_init+0x8e>
		goto fail_queue;

	for (unsigned int i = 0; i < csp_conf.buffers; i++) {
 8007c8e:	2300      	movs	r3, #0
 8007c90:	60fb      	str	r3, [r7, #12]
 8007c92:	e014      	b.n	8007cbe <csp_buffer_init+0x7e>
		csp_skbf_t * buf = (void *) &csp_buffer_pool[i * skbfsize];
 8007c94:	4b14      	ldr	r3, [pc, #80]	@ (8007ce8 <csp_buffer_init+0xa8>)
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	68b9      	ldr	r1, [r7, #8]
 8007c9c:	fb01 f303 	mul.w	r3, r1, r3
 8007ca0:	4413      	add	r3, r2
 8007ca2:	607b      	str	r3, [r7, #4]
		buf->skbf_addr = buf;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	605a      	str	r2, [r3, #4]
		csp_queue_enqueue(csp_buffers, &buf, 0);
 8007caa:	4b10      	ldr	r3, [pc, #64]	@ (8007cec <csp_buffer_init+0xac>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	1d39      	adds	r1, r7, #4
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7ff fe67 	bl	8007986 <csp_queue_enqueue>
	for (unsigned int i = 0; i < csp_conf.buffers; i++) {
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	60fb      	str	r3, [r7, #12]
 8007cbe:	4b09      	ldr	r3, [pc, #36]	@ (8007ce4 <csp_buffer_init+0xa4>)
 8007cc0:	8adb      	ldrh	r3, [r3, #22]
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d3e4      	bcc.n	8007c94 <csp_buffer_init+0x54>
	}

	return CSP_ERR_NONE;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	e006      	b.n	8007cdc <csp_buffer_init+0x9c>
		goto fail_queue;
 8007cce:	bf00      	nop

fail_queue:
	csp_buffer_free_resources();
 8007cd0:	f000 f80e 	bl	8007cf0 <csp_buffer_free_resources>
 8007cd4:	e000      	b.n	8007cd8 <csp_buffer_init+0x98>
		goto fail_malloc;
 8007cd6:	bf00      	nop
fail_malloc:
	return CSP_ERR_NOMEM;
 8007cd8:	f04f 33ff 	mov.w	r3, #4294967295

}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	24042c54 	.word	0x24042c54
 8007ce8:	24042c34 	.word	0x24042c34
 8007cec:	24042c30 	.word	0x24042c30

08007cf0 <csp_buffer_free_resources>:

void csp_buffer_free_resources(void) {
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	af00      	add	r7, sp, #0

	if (csp_buffers) {
 8007cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8007d20 <csp_buffer_free_resources+0x30>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d007      	beq.n	8007d0c <csp_buffer_free_resources+0x1c>
		csp_queue_remove(csp_buffers);
 8007cfc:	4b08      	ldr	r3, [pc, #32]	@ (8007d20 <csp_buffer_free_resources+0x30>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4618      	mov	r0, r3
 8007d02:	f7ff fe35 	bl	8007970 <csp_queue_remove>
		csp_buffers = NULL;
 8007d06:	4b06      	ldr	r3, [pc, #24]	@ (8007d20 <csp_buffer_free_resources+0x30>)
 8007d08:	2200      	movs	r2, #0
 8007d0a:	601a      	str	r2, [r3, #0]
	}
	csp_free(csp_buffer_pool);
 8007d0c:	4b05      	ldr	r3, [pc, #20]	@ (8007d24 <csp_buffer_free_resources+0x34>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7ff fe12 	bl	800793a <csp_free>
	csp_buffer_pool = NULL;
 8007d16:	4b03      	ldr	r3, [pc, #12]	@ (8007d24 <csp_buffer_free_resources+0x34>)
 8007d18:	2200      	movs	r2, #0
 8007d1a:	601a      	str	r2, [r3, #0]

}
 8007d1c:	bf00      	nop
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	24042c30 	.word	0x24042c30
 8007d24:	24042c34 	.word	0x24042c34

08007d28 <csp_buffer_get_isr>:

void *csp_buffer_get_isr(size_t _data_size) {
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]

	if (_data_size > csp_conf.buffer_data_size)
 8007d30:	4b14      	ldr	r3, [pc, #80]	@ (8007d84 <csp_buffer_get_isr+0x5c>)
 8007d32:	8b1b      	ldrh	r3, [r3, #24]
 8007d34:	461a      	mov	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d901      	bls.n	8007d40 <csp_buffer_get_isr+0x18>
		return NULL;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	e01d      	b.n	8007d7c <csp_buffer_get_isr+0x54>

	csp_skbf_t * buffer = NULL;
 8007d40:	2300      	movs	r3, #0
 8007d42:	60fb      	str	r3, [r7, #12]
	CSP_BASE_TYPE task_woken = 0;
 8007d44:	2300      	movs	r3, #0
 8007d46:	60bb      	str	r3, [r7, #8]
	csp_queue_dequeue_isr(csp_buffers, &buffer, &task_woken);
 8007d48:	4b0f      	ldr	r3, [pc, #60]	@ (8007d88 <csp_buffer_get_isr+0x60>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f107 0208 	add.w	r2, r7, #8
 8007d50:	f107 010c 	add.w	r1, r7, #12
 8007d54:	4618      	mov	r0, r3
 8007d56:	f7ff fe4e 	bl	80079f6 <csp_queue_dequeue_isr>
	if (buffer == NULL)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d101      	bne.n	8007d64 <csp_buffer_get_isr+0x3c>
		return NULL;
 8007d60:	2300      	movs	r3, #0
 8007d62:	e00b      	b.n	8007d7c <csp_buffer_get_isr+0x54>

	if (buffer != buffer->skbf_addr)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	685a      	ldr	r2, [r3, #4]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d001      	beq.n	8007d72 <csp_buffer_get_isr+0x4a>
		return NULL;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	e004      	b.n	8007d7c <csp_buffer_get_isr+0x54>

	buffer->refcount = 1;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2201      	movs	r2, #1
 8007d76:	601a      	str	r2, [r3, #0]
	return buffer->skbf_data;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	3308      	adds	r3, #8

}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	24042c54 	.word	0x24042c54
 8007d88:	24042c30 	.word	0x24042c30

08007d8c <csp_buffer_get>:

void *csp_buffer_get(size_t _data_size) {
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]

	if (_data_size > csp_conf.buffer_data_size) {
 8007d94:	4b27      	ldr	r3, [pc, #156]	@ (8007e34 <csp_buffer_get+0xa8>)
 8007d96:	8b1b      	ldrh	r3, [r3, #24]
 8007d98:	461a      	mov	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d90c      	bls.n	8007dba <csp_buffer_get+0x2e>
		csp_log_error("GET: Attempt to allocate too large data size %u > max %u", (unsigned int) _data_size, (unsigned int) csp_conf.buffer_data_size);
 8007da0:	4b25      	ldr	r3, [pc, #148]	@ (8007e38 <csp_buffer_get+0xac>)
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d006      	beq.n	8007db6 <csp_buffer_get+0x2a>
 8007da8:	4b22      	ldr	r3, [pc, #136]	@ (8007e34 <csp_buffer_get+0xa8>)
 8007daa:	8b1b      	ldrh	r3, [r3, #24]
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	4923      	ldr	r1, [pc, #140]	@ (8007e3c <csp_buffer_get+0xb0>)
 8007db0:	2000      	movs	r0, #0
 8007db2:	f000 fcad 	bl	8008710 <do_csp_debug>
		return NULL;
 8007db6:	2300      	movs	r3, #0
 8007db8:	e037      	b.n	8007e2a <csp_buffer_get+0x9e>
	}

	csp_skbf_t * buffer = NULL;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	60fb      	str	r3, [r7, #12]
	csp_queue_dequeue(csp_buffers, &buffer, 0);
 8007dbe:	4b20      	ldr	r3, [pc, #128]	@ (8007e40 <csp_buffer_get+0xb4>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f107 010c 	add.w	r1, r7, #12
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7ff fe01 	bl	80079d0 <csp_queue_dequeue>
	if (buffer == NULL) {
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d109      	bne.n	8007de8 <csp_buffer_get+0x5c>
		csp_log_error("GET: Out of buffers");
 8007dd4:	4b18      	ldr	r3, [pc, #96]	@ (8007e38 <csp_buffer_get+0xac>)
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d003      	beq.n	8007de4 <csp_buffer_get+0x58>
 8007ddc:	4919      	ldr	r1, [pc, #100]	@ (8007e44 <csp_buffer_get+0xb8>)
 8007dde:	2000      	movs	r0, #0
 8007de0:	f000 fc96 	bl	8008710 <do_csp_debug>
		return NULL;
 8007de4:	2300      	movs	r3, #0
 8007de6:	e020      	b.n	8007e2a <csp_buffer_get+0x9e>
	}

	if (buffer != buffer->skbf_addr) {
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	685a      	ldr	r2, [r3, #4]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d00c      	beq.n	8007e0c <csp_buffer_get+0x80>
		csp_log_error("GET: Corrupt CSP buffer %p != %p", buffer, buffer->skbf_addr);
 8007df2:	4b11      	ldr	r3, [pc, #68]	@ (8007e38 <csp_buffer_get+0xac>)
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d006      	beq.n	8007e08 <csp_buffer_get+0x7c>
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	4911      	ldr	r1, [pc, #68]	@ (8007e48 <csp_buffer_get+0xbc>)
 8007e02:	2000      	movs	r0, #0
 8007e04:	f000 fc84 	bl	8008710 <do_csp_debug>
		return NULL;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	e00e      	b.n	8007e2a <csp_buffer_get+0x9e>
	}

	csp_log_buffer("GET: %p", buffer);
 8007e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8007e38 <csp_buffer_get+0xac>)
 8007e0e:	78db      	ldrb	r3, [r3, #3]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d005      	beq.n	8007e20 <csp_buffer_get+0x94>
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	461a      	mov	r2, r3
 8007e18:	490c      	ldr	r1, [pc, #48]	@ (8007e4c <csp_buffer_get+0xc0>)
 8007e1a:	2003      	movs	r0, #3
 8007e1c:	f000 fc78 	bl	8008710 <do_csp_debug>

	buffer->refcount = 1;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2201      	movs	r2, #1
 8007e24:	601a      	str	r2, [r3, #0]
	return buffer->skbf_data;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	3308      	adds	r3, #8
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3710      	adds	r7, #16
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	24042c54 	.word	0x24042c54
 8007e38:	2400008c 	.word	0x2400008c
 8007e3c:	0801373c 	.word	0x0801373c
 8007e40:	24042c30 	.word	0x24042c30
 8007e44:	08013778 	.word	0x08013778
 8007e48:	0801378c 	.word	0x0801378c
 8007e4c:	080137b0 	.word	0x080137b0

08007e50 <csp_buffer_free_isr>:

void csp_buffer_free_isr(void *packet) {
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]

	if (packet == NULL) {
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d023      	beq.n	8007ea6 <csp_buffer_free_isr+0x56>
		// freeing a NULL pointer is OK, e.g. standard free()
		return;
	}

	csp_skbf_t * buf = (void*)(((uint8_t*)packet) - sizeof(csp_skbf_t));
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	3b08      	subs	r3, #8
 8007e62:	60fb      	str	r3, [r7, #12]

	if (((uintptr_t) buf % CSP_BUFFER_ALIGN) > 0) {
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f003 0303 	and.w	r3, r3, #3
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d11d      	bne.n	8007eaa <csp_buffer_free_isr+0x5a>
		return;
	}

	if (buf->skbf_addr != buf) {
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	685a      	ldr	r2, [r3, #4]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d11a      	bne.n	8007eae <csp_buffer_free_isr+0x5e>
		return;
	}

	if (buf->refcount == 0) {
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d018      	beq.n	8007eb2 <csp_buffer_free_isr+0x62>
		return;
	}

	if (--(buf->refcount) > 0) {
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	3a01      	subs	r2, #1
 8007e86:	601a      	str	r2, [r3, #0]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d113      	bne.n	8007eb6 <csp_buffer_free_isr+0x66>
		return;
	}

	CSP_BASE_TYPE task_woken = 0;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	60bb      	str	r3, [r7, #8]
	csp_queue_enqueue_isr(csp_buffers, &buf, &task_woken);
 8007e92:	4b0b      	ldr	r3, [pc, #44]	@ (8007ec0 <csp_buffer_free_isr+0x70>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f107 0208 	add.w	r2, r7, #8
 8007e9a:	f107 010c 	add.w	r1, r7, #12
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7ff fd85 	bl	80079ae <csp_queue_enqueue_isr>
 8007ea4:	e008      	b.n	8007eb8 <csp_buffer_free_isr+0x68>
		return;
 8007ea6:	bf00      	nop
 8007ea8:	e006      	b.n	8007eb8 <csp_buffer_free_isr+0x68>
		return;
 8007eaa:	bf00      	nop
 8007eac:	e004      	b.n	8007eb8 <csp_buffer_free_isr+0x68>
		return;
 8007eae:	bf00      	nop
 8007eb0:	e002      	b.n	8007eb8 <csp_buffer_free_isr+0x68>
		return;
 8007eb2:	bf00      	nop
 8007eb4:	e000      	b.n	8007eb8 <csp_buffer_free_isr+0x68>
		return;
 8007eb6:	bf00      	nop

}
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	24042c30 	.word	0x24042c30

08007ec4 <csp_buffer_free>:

void csp_buffer_free(void *packet) {
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]

	if (packet == NULL) {
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d055      	beq.n	8007f7e <csp_buffer_free+0xba>
		/* freeing a NULL pointer is OK, e.g. standard free() */
		return;
	}

	csp_skbf_t * buf = (void*)(((uint8_t*)packet) - sizeof(csp_skbf_t));
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	3b08      	subs	r3, #8
 8007ed6:	60fb      	str	r3, [r7, #12]

	if (((uintptr_t) buf % CSP_BUFFER_ALIGN) > 0) {
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f003 0303 	and.w	r3, r3, #3
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d009      	beq.n	8007ef6 <csp_buffer_free+0x32>
		csp_log_error("FREE: Unaligned CSP buffer pointer %p", packet);
 8007ee2:	4b2d      	ldr	r3, [pc, #180]	@ (8007f98 <csp_buffer_free+0xd4>)
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d04b      	beq.n	8007f82 <csp_buffer_free+0xbe>
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	492b      	ldr	r1, [pc, #172]	@ (8007f9c <csp_buffer_free+0xd8>)
 8007eee:	2000      	movs	r0, #0
 8007ef0:	f000 fc0e 	bl	8008710 <do_csp_debug>
		return;
 8007ef4:	e045      	b.n	8007f82 <csp_buffer_free+0xbe>
	}

	if (buf->skbf_addr != buf) {
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	685a      	ldr	r2, [r3, #4]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d009      	beq.n	8007f14 <csp_buffer_free+0x50>
		csp_log_error("FREE: Invalid CSP buffer pointer %p", packet);
 8007f00:	4b25      	ldr	r3, [pc, #148]	@ (8007f98 <csp_buffer_free+0xd4>)
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d03e      	beq.n	8007f86 <csp_buffer_free+0xc2>
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	4925      	ldr	r1, [pc, #148]	@ (8007fa0 <csp_buffer_free+0xdc>)
 8007f0c:	2000      	movs	r0, #0
 8007f0e:	f000 fbff 	bl	8008710 <do_csp_debug>
		return;
 8007f12:	e038      	b.n	8007f86 <csp_buffer_free+0xc2>
	}

	if (buf->refcount == 0) {
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d10a      	bne.n	8007f32 <csp_buffer_free+0x6e>
		csp_log_error("FREE: Buffer already free %p", buf);
 8007f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8007f98 <csp_buffer_free+0xd4>)
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d032      	beq.n	8007f8a <csp_buffer_free+0xc6>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	461a      	mov	r2, r3
 8007f28:	491e      	ldr	r1, [pc, #120]	@ (8007fa4 <csp_buffer_free+0xe0>)
 8007f2a:	2000      	movs	r0, #0
 8007f2c:	f000 fbf0 	bl	8008710 <do_csp_debug>
		return;
 8007f30:	e02b      	b.n	8007f8a <csp_buffer_free+0xc6>
	}

	if (--(buf->refcount) > 0) {
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	3a01      	subs	r2, #1
 8007f38:	601a      	str	r2, [r3, #0]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00b      	beq.n	8007f58 <csp_buffer_free+0x94>
		csp_log_error("FREE: Buffer %p in use by %u users", buf, buf->refcount);
 8007f40:	4b15      	ldr	r3, [pc, #84]	@ (8007f98 <csp_buffer_free+0xd4>)
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d022      	beq.n	8007f8e <csp_buffer_free+0xca>
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4916      	ldr	r1, [pc, #88]	@ (8007fa8 <csp_buffer_free+0xe4>)
 8007f50:	2000      	movs	r0, #0
 8007f52:	f000 fbdd 	bl	8008710 <do_csp_debug>
		return;
 8007f56:	e01a      	b.n	8007f8e <csp_buffer_free+0xca>
	}

	csp_log_buffer("FREE: %p", buf);
 8007f58:	4b0f      	ldr	r3, [pc, #60]	@ (8007f98 <csp_buffer_free+0xd4>)
 8007f5a:	78db      	ldrb	r3, [r3, #3]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d005      	beq.n	8007f6c <csp_buffer_free+0xa8>
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	461a      	mov	r2, r3
 8007f64:	4911      	ldr	r1, [pc, #68]	@ (8007fac <csp_buffer_free+0xe8>)
 8007f66:	2003      	movs	r0, #3
 8007f68:	f000 fbd2 	bl	8008710 <do_csp_debug>
	csp_queue_enqueue(csp_buffers, &buf, 0);
 8007f6c:	4b10      	ldr	r3, [pc, #64]	@ (8007fb0 <csp_buffer_free+0xec>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f107 010c 	add.w	r1, r7, #12
 8007f74:	2200      	movs	r2, #0
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7ff fd05 	bl	8007986 <csp_queue_enqueue>
 8007f7c:	e008      	b.n	8007f90 <csp_buffer_free+0xcc>
		return;
 8007f7e:	bf00      	nop
 8007f80:	e006      	b.n	8007f90 <csp_buffer_free+0xcc>
		return;
 8007f82:	bf00      	nop
 8007f84:	e004      	b.n	8007f90 <csp_buffer_free+0xcc>
		return;
 8007f86:	bf00      	nop
 8007f88:	e002      	b.n	8007f90 <csp_buffer_free+0xcc>
		return;
 8007f8a:	bf00      	nop
 8007f8c:	e000      	b.n	8007f90 <csp_buffer_free+0xcc>
		return;
 8007f8e:	bf00      	nop

}
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	2400008c 	.word	0x2400008c
 8007f9c:	080137b8 	.word	0x080137b8
 8007fa0:	080137e0 	.word	0x080137e0
 8007fa4:	08013804 	.word	0x08013804
 8007fa8:	08013824 	.word	0x08013824
 8007fac:	08013848 	.word	0x08013848
 8007fb0:	24042c30 	.word	0x24042c30

08007fb4 <csp_buffer_size>:

int csp_buffer_remaining(void) {
	return csp_queue_size(csp_buffers);
}

size_t csp_buffer_size(void) {
 8007fb4:	b480      	push	{r7}
 8007fb6:	af00      	add	r7, sp, #0
	return (csp_conf.buffer_data_size + CSP_BUFFER_PACKET_OVERHEAD);
 8007fb8:	4b03      	ldr	r3, [pc, #12]	@ (8007fc8 <csp_buffer_size+0x14>)
 8007fba:	8b1b      	ldrh	r3, [r3, #24]
 8007fbc:	3310      	adds	r3, #16
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr
 8007fc8:	24042c54 	.word	0x24042c54

08007fcc <csp_buffer_data_size>:

size_t csp_buffer_data_size(void) {
 8007fcc:	b480      	push	{r7}
 8007fce:	af00      	add	r7, sp, #0
	return csp_conf.buffer_data_size;
 8007fd0:	4b03      	ldr	r3, [pc, #12]	@ (8007fe0 <csp_buffer_data_size+0x14>)
 8007fd2:	8b1b      	ldrh	r3, [r3, #24]
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	24042c54 	.word	0x24042c54

08007fe4 <csp_conn_get_rxq>:
		}
	}
#endif
}

int csp_conn_get_rxq(int prio) {
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]

#if (CSP_USE_QOS)
	return prio;
#else
	return 0;
 8007fec:	2300      	movs	r3, #0
#endif

}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	370c      	adds	r7, #12
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
	...

08007ffc <csp_conn_enqueue_packet>:

int csp_conn_enqueue_packet(csp_conn_t * conn, csp_packet_t * packet) {
 8007ffc:	b590      	push	{r4, r7, lr}
 8007ffe:	b085      	sub	sp, #20
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]

	if (!conn)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d102      	bne.n	8008012 <csp_conn_enqueue_packet+0x16>
		return CSP_ERR_INVAL;
 800800c:	f06f 0301 	mvn.w	r3, #1
 8008010:	e039      	b.n	8008086 <csp_conn_enqueue_packet+0x8a>

	int rxq;
	if (packet != NULL) {
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d009      	beq.n	800802c <csp_conn_enqueue_packet+0x30>
		rxq = csp_conn_get_rxq(packet->id.pri);
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	7bdb      	ldrb	r3, [r3, #15]
 800801c:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8008020:	b2db      	uxtb	r3, r3
 8008022:	4618      	mov	r0, r3
 8008024:	f7ff ffde 	bl	8007fe4 <csp_conn_get_rxq>
 8008028:	60f8      	str	r0, [r7, #12]
 800802a:	e001      	b.n	8008030 <csp_conn_enqueue_packet+0x34>
	} else {
		rxq = CSP_RX_QUEUES - 1;
 800802c:	2300      	movs	r3, #0
 800802e:	60fb      	str	r3, [r7, #12]
	}

	if (csp_queue_enqueue(conn->rx_queue[rxq], &packet, 0) != CSP_QUEUE_OK) {
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	3302      	adds	r3, #2
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	4413      	add	r3, r2
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	4639      	mov	r1, r7
 800803e:	2200      	movs	r2, #0
 8008040:	4618      	mov	r0, r3
 8008042:	f7ff fca0 	bl	8007986 <csp_queue_enqueue>
 8008046:	4603      	mov	r3, r0
 8008048:	2b01      	cmp	r3, #1
 800804a:	d01b      	beq.n	8008084 <csp_conn_enqueue_packet+0x88>
		csp_log_error("RX queue %p full with %u items", conn->rx_queue[rxq], csp_queue_size(conn->rx_queue[rxq]));
 800804c:	4b10      	ldr	r3, [pc, #64]	@ (8008090 <csp_conn_enqueue_packet+0x94>)
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d014      	beq.n	800807e <csp_conn_enqueue_packet+0x82>
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	3302      	adds	r3, #2
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	4413      	add	r3, r2
 800805e:	685c      	ldr	r4, [r3, #4]
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	3302      	adds	r3, #2
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	4413      	add	r3, r2
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	4618      	mov	r0, r3
 800806e:	f7ff fcd2 	bl	8007a16 <csp_queue_size>
 8008072:	4603      	mov	r3, r0
 8008074:	4622      	mov	r2, r4
 8008076:	4907      	ldr	r1, [pc, #28]	@ (8008094 <csp_conn_enqueue_packet+0x98>)
 8008078:	2000      	movs	r0, #0
 800807a:	f000 fb49 	bl	8008710 <do_csp_debug>
		return CSP_ERR_NOMEM;
 800807e:	f04f 33ff 	mov.w	r3, #4294967295
 8008082:	e000      	b.n	8008086 <csp_conn_enqueue_packet+0x8a>
		csp_log_error("QOS event queue full");
		return CSP_ERR_NOMEM;
	}
#endif

	return CSP_ERR_NONE;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3714      	adds	r7, #20
 800808a:	46bd      	mov	sp, r7
 800808c:	bd90      	pop	{r4, r7, pc}
 800808e:	bf00      	nop
 8008090:	2400008c 	.word	0x2400008c
 8008094:	08013854 	.word	0x08013854

08008098 <csp_conn_init>:

int csp_conn_init(void) {
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0

	arr_conn = csp_calloc(csp_conf.conn_max, sizeof(*arr_conn));
 800809e:	4b4d      	ldr	r3, [pc, #308]	@ (80081d4 <csp_conn_init+0x13c>)
 80080a0:	7c1b      	ldrb	r3, [r3, #16]
 80080a2:	211c      	movs	r1, #28
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7ff fc2d 	bl	8007904 <csp_calloc>
 80080aa:	4603      	mov	r3, r0
 80080ac:	4a4a      	ldr	r2, [pc, #296]	@ (80081d8 <csp_conn_init+0x140>)
 80080ae:	6013      	str	r3, [r2, #0]
	if (arr_conn == NULL) {
 80080b0:	4b49      	ldr	r3, [pc, #292]	@ (80081d8 <csp_conn_init+0x140>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d10d      	bne.n	80080d4 <csp_conn_init+0x3c>
		csp_log_error("Allocation for %u connections failed", csp_conf.conn_max);
 80080b8:	4b48      	ldr	r3, [pc, #288]	@ (80081dc <csp_conn_init+0x144>)
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d006      	beq.n	80080ce <csp_conn_init+0x36>
 80080c0:	4b44      	ldr	r3, [pc, #272]	@ (80081d4 <csp_conn_init+0x13c>)
 80080c2:	7c1b      	ldrb	r3, [r3, #16]
 80080c4:	461a      	mov	r2, r3
 80080c6:	4946      	ldr	r1, [pc, #280]	@ (80081e0 <csp_conn_init+0x148>)
 80080c8:	2000      	movs	r0, #0
 80080ca:	f000 fb21 	bl	8008710 <do_csp_debug>
		return CSP_ERR_NOMEM;
 80080ce:	f04f 33ff 	mov.w	r3, #4294967295
 80080d2:	e07b      	b.n	80081cc <csp_conn_init+0x134>
	}

	if (csp_bin_sem_create(&conn_lock) != CSP_SEMAPHORE_OK) {
 80080d4:	4843      	ldr	r0, [pc, #268]	@ (80081e4 <csp_conn_init+0x14c>)
 80080d6:	f7ff fcaa 	bl	8007a2e <csp_bin_sem_create>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d00a      	beq.n	80080f6 <csp_conn_init+0x5e>
		csp_log_error("csp_bin_sem_create(&conn_lock) failed");
 80080e0:	4b3e      	ldr	r3, [pc, #248]	@ (80081dc <csp_conn_init+0x144>)
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d003      	beq.n	80080f0 <csp_conn_init+0x58>
 80080e8:	493f      	ldr	r1, [pc, #252]	@ (80081e8 <csp_conn_init+0x150>)
 80080ea:	2000      	movs	r0, #0
 80080ec:	f000 fb10 	bl	8008710 <do_csp_debug>
		return CSP_ERR_NOMEM;
 80080f0:	f04f 33ff 	mov.w	r3, #4294967295
 80080f4:	e06a      	b.n	80081cc <csp_conn_init+0x134>
	}

	/* Initialize source port */
	srand(csp_get_ms());
 80080f6:	f7ff fd87 	bl	8007c08 <csp_get_ms>
 80080fa:	4603      	mov	r3, r0
 80080fc:	4618      	mov	r0, r3
 80080fe:	f009 fcfb 	bl	8011af8 <srand>
	sport = (rand() % (CSP_ID_PORT_MAX - csp_conf.port_max_bind)) + (csp_conf.port_max_bind + 1);
 8008102:	f009 fd27 	bl	8011b54 <rand>
 8008106:	4602      	mov	r2, r0
 8008108:	4b32      	ldr	r3, [pc, #200]	@ (80081d4 <csp_conn_init+0x13c>)
 800810a:	7cdb      	ldrb	r3, [r3, #19]
 800810c:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8008110:	fb92 f1f3 	sdiv	r1, r2, r3
 8008114:	fb01 f303 	mul.w	r3, r1, r3
 8008118:	1ad3      	subs	r3, r2, r3
 800811a:	b2da      	uxtb	r2, r3
 800811c:	4b2d      	ldr	r3, [pc, #180]	@ (80081d4 <csp_conn_init+0x13c>)
 800811e:	7cdb      	ldrb	r3, [r3, #19]
 8008120:	4413      	add	r3, r2
 8008122:	b2db      	uxtb	r3, r3
 8008124:	3301      	adds	r3, #1
 8008126:	b2da      	uxtb	r2, r3
 8008128:	4b30      	ldr	r3, [pc, #192]	@ (80081ec <csp_conn_init+0x154>)
 800812a:	701a      	strb	r2, [r3, #0]

	if (csp_bin_sem_create(&sport_lock) != CSP_SEMAPHORE_OK) {
 800812c:	4830      	ldr	r0, [pc, #192]	@ (80081f0 <csp_conn_init+0x158>)
 800812e:	f7ff fc7e 	bl	8007a2e <csp_bin_sem_create>
 8008132:	4603      	mov	r3, r0
 8008134:	2b01      	cmp	r3, #1
 8008136:	d00a      	beq.n	800814e <csp_conn_init+0xb6>
		csp_log_error("csp_bin_sem_create(&sport_lock) failed");
 8008138:	4b28      	ldr	r3, [pc, #160]	@ (80081dc <csp_conn_init+0x144>)
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d003      	beq.n	8008148 <csp_conn_init+0xb0>
 8008140:	492c      	ldr	r1, [pc, #176]	@ (80081f4 <csp_conn_init+0x15c>)
 8008142:	2000      	movs	r0, #0
 8008144:	f000 fae4 	bl	8008710 <do_csp_debug>
		return CSP_ERR_NOMEM;
 8008148:	f04f 33ff 	mov.w	r3, #4294967295
 800814c:	e03e      	b.n	80081cc <csp_conn_init+0x134>
	}

	for (int i = 0; i < csp_conf.conn_max; i++) {
 800814e:	2300      	movs	r3, #0
 8008150:	60fb      	str	r3, [r7, #12]
 8008152:	e034      	b.n	80081be <csp_conn_init+0x126>
		csp_conn_t * conn = &arr_conn[i];
 8008154:	4b20      	ldr	r3, [pc, #128]	@ (80081d8 <csp_conn_init+0x140>)
 8008156:	6819      	ldr	r1, [r3, #0]
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	4613      	mov	r3, r2
 800815c:	00db      	lsls	r3, r3, #3
 800815e:	1a9b      	subs	r3, r3, r2
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	440b      	add	r3, r1
 8008164:	607b      	str	r3, [r7, #4]
		for (int prio = 0; prio < CSP_RX_QUEUES; prio++) {
 8008166:	2300      	movs	r3, #0
 8008168:	60bb      	str	r3, [r7, #8]
 800816a:	e022      	b.n	80081b2 <csp_conn_init+0x11a>
			conn->rx_queue[prio] = csp_queue_create(csp_conf.conn_queue_length, sizeof(csp_packet_t *));
 800816c:	4b19      	ldr	r3, [pc, #100]	@ (80081d4 <csp_conn_init+0x13c>)
 800816e:	7c5b      	ldrb	r3, [r3, #17]
 8008170:	2104      	movs	r1, #4
 8008172:	4618      	mov	r0, r3
 8008174:	f7ff fbec 	bl	8007950 <csp_queue_create>
 8008178:	4601      	mov	r1, r0
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	3302      	adds	r3, #2
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	4413      	add	r3, r2
 8008184:	6059      	str	r1, [r3, #4]
			if (conn->rx_queue[prio] == NULL) {
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	3302      	adds	r3, #2
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	4413      	add	r3, r2
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d10a      	bne.n	80081ac <csp_conn_init+0x114>
				csp_log_error("rx_queue = csp_queue_create() failed");
 8008196:	4b11      	ldr	r3, [pc, #68]	@ (80081dc <csp_conn_init+0x144>)
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d003      	beq.n	80081a6 <csp_conn_init+0x10e>
 800819e:	4916      	ldr	r1, [pc, #88]	@ (80081f8 <csp_conn_init+0x160>)
 80081a0:	2000      	movs	r0, #0
 80081a2:	f000 fab5 	bl	8008710 <do_csp_debug>
				return CSP_ERR_NOMEM;
 80081a6:	f04f 33ff 	mov.w	r3, #4294967295
 80081aa:	e00f      	b.n	80081cc <csp_conn_init+0x134>
		for (int prio = 0; prio < CSP_RX_QUEUES; prio++) {
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	3301      	adds	r3, #1
 80081b0:	60bb      	str	r3, [r7, #8]
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	ddd9      	ble.n	800816c <csp_conn_init+0xd4>
	for (int i = 0; i < csp_conf.conn_max; i++) {
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	3301      	adds	r3, #1
 80081bc:	60fb      	str	r3, [r7, #12]
 80081be:	4b05      	ldr	r3, [pc, #20]	@ (80081d4 <csp_conn_init+0x13c>)
 80081c0:	7c1b      	ldrb	r3, [r3, #16]
 80081c2:	461a      	mov	r2, r3
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	4293      	cmp	r3, r2
 80081c8:	dbc4      	blt.n	8008154 <csp_conn_init+0xbc>
			return CSP_ERR_NOMEM;
		}
#endif
	}

	return CSP_ERR_NONE;
 80081ca:	2300      	movs	r3, #0

}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3710      	adds	r7, #16
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	24042c54 	.word	0x24042c54
 80081d8:	24042c38 	.word	0x24042c38
 80081dc:	2400008c 	.word	0x2400008c
 80081e0:	08013874 	.word	0x08013874
 80081e4:	24042c3c 	.word	0x24042c3c
 80081e8:	0801389c 	.word	0x0801389c
 80081ec:	24042c40 	.word	0x24042c40
 80081f0:	24042c44 	.word	0x24042c44
 80081f4:	080138c4 	.word	0x080138c4
 80081f8:	080138ec 	.word	0x080138ec

080081fc <csp_conn_find>:

        sport = 0;
    }
}

csp_conn_t * csp_conn_find(uint32_t id, uint32_t mask) {
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]

	/* Search for matching connection */
	id = (id & mask);
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	4013      	ands	r3, r2
 800820c:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < csp_conf.conn_max; i++) {
 800820e:	2300      	movs	r3, #0
 8008210:	60fb      	str	r3, [r7, #12]
 8008212:	e01c      	b.n	800824e <csp_conn_find+0x52>
		csp_conn_t * conn = &arr_conn[i];
 8008214:	4b14      	ldr	r3, [pc, #80]	@ (8008268 <csp_conn_find+0x6c>)
 8008216:	6819      	ldr	r1, [r3, #0]
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	4613      	mov	r3, r2
 800821c:	00db      	lsls	r3, r3, #3
 800821e:	1a9b      	subs	r3, r3, r2
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	440b      	add	r3, r1
 8008224:	60bb      	str	r3, [r7, #8]
		if ((conn->state == CONN_OPEN) && (conn->type == CONN_CLIENT) && ((conn->idin.ext & mask) == id)) {
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	785b      	ldrb	r3, [r3, #1]
 800822a:	2b01      	cmp	r3, #1
 800822c:	d10c      	bne.n	8008248 <csp_conn_find+0x4c>
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d108      	bne.n	8008248 <csp_conn_find+0x4c>
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	685a      	ldr	r2, [r3, #4]
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	4013      	ands	r3, r2
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	429a      	cmp	r2, r3
 8008242:	d101      	bne.n	8008248 <csp_conn_find+0x4c>
			return conn;
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	e009      	b.n	800825c <csp_conn_find+0x60>
	for (int i = 0; i < csp_conf.conn_max; i++) {
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	3301      	adds	r3, #1
 800824c:	60fb      	str	r3, [r7, #12]
 800824e:	4b07      	ldr	r3, [pc, #28]	@ (800826c <csp_conn_find+0x70>)
 8008250:	7c1b      	ldrb	r3, [r3, #16]
 8008252:	461a      	mov	r2, r3
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	4293      	cmp	r3, r2
 8008258:	dbdc      	blt.n	8008214 <csp_conn_find+0x18>
		}
	}
	
	return NULL;
 800825a:	2300      	movs	r3, #0

}
 800825c:	4618      	mov	r0, r3
 800825e:	3714      	adds	r7, #20
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr
 8008268:	24042c38 	.word	0x24042c38
 800826c:	24042c54 	.word	0x24042c54

08008270 <csp_conn_flush_rx_queue>:

static int csp_conn_flush_rx_queue(csp_conn_t * conn) {
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
	csp_packet_t * packet;

	int prio;

	/* Flush packet queues */
	for (prio = 0; prio < CSP_RX_QUEUES; prio++) {
 8008278:	2300      	movs	r3, #0
 800827a:	60fb      	str	r3, [r7, #12]
 800827c:	e018      	b.n	80082b0 <csp_conn_flush_rx_queue+0x40>
		while (csp_queue_dequeue(conn->rx_queue[prio], &packet, 0) == CSP_QUEUE_OK)
			if (packet != NULL)
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d003      	beq.n	800828c <csp_conn_flush_rx_queue+0x1c>
				csp_buffer_free(packet);
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	4618      	mov	r0, r3
 8008288:	f7ff fe1c 	bl	8007ec4 <csp_buffer_free>
		while (csp_queue_dequeue(conn->rx_queue[prio], &packet, 0) == CSP_QUEUE_OK)
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	3302      	adds	r3, #2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	4413      	add	r3, r2
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	f107 0108 	add.w	r1, r7, #8
 800829c:	2200      	movs	r2, #0
 800829e:	4618      	mov	r0, r3
 80082a0:	f7ff fb96 	bl	80079d0 <csp_queue_dequeue>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d0e9      	beq.n	800827e <csp_conn_flush_rx_queue+0xe>
	for (prio = 0; prio < CSP_RX_QUEUES; prio++) {
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	3301      	adds	r3, #1
 80082ae:	60fb      	str	r3, [r7, #12]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	ddea      	ble.n	800828c <csp_conn_flush_rx_queue+0x1c>
#if (CSP_USE_QOS)
	int event;
	while (csp_queue_dequeue(conn->rx_event, &event, 0) == CSP_QUEUE_OK);
#endif

	return CSP_ERR_NONE;
 80082b6:	2300      	movs	r3, #0

}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <csp_conn_allocate>:

csp_conn_t * csp_conn_allocate(csp_conn_type_t type) {
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b086      	sub	sp, #24
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	4603      	mov	r3, r0
 80082c8:	71fb      	strb	r3, [r7, #7]

	static uint8_t csp_conn_last_given = 0;

	if (csp_bin_sem_wait(&conn_lock, CSP_MAX_TIMEOUT) != CSP_SEMAPHORE_OK) {
 80082ca:	f04f 31ff 	mov.w	r1, #4294967295
 80082ce:	4838      	ldr	r0, [pc, #224]	@ (80083b0 <csp_conn_allocate+0xf0>)
 80082d0:	f7ff fbca 	bl	8007a68 <csp_bin_sem_wait>
 80082d4:	4603      	mov	r3, r0
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d009      	beq.n	80082ee <csp_conn_allocate+0x2e>
		csp_log_error("Failed to lock conn array");
 80082da:	4b36      	ldr	r3, [pc, #216]	@ (80083b4 <csp_conn_allocate+0xf4>)
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d003      	beq.n	80082ea <csp_conn_allocate+0x2a>
 80082e2:	4935      	ldr	r1, [pc, #212]	@ (80083b8 <csp_conn_allocate+0xf8>)
 80082e4:	2000      	movs	r0, #0
 80082e6:	f000 fa13 	bl	8008710 <do_csp_debug>
		return NULL;
 80082ea:	2300      	movs	r3, #0
 80082ec:	e05b      	b.n	80083a6 <csp_conn_allocate+0xe6>
	}

	/* Search for free connection */
	csp_conn_t * conn = NULL;
 80082ee:	2300      	movs	r3, #0
 80082f0:	617b      	str	r3, [r7, #20]
	int i = csp_conn_last_given;
 80082f2:	4b32      	ldr	r3, [pc, #200]	@ (80083bc <csp_conn_allocate+0xfc>)
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	613b      	str	r3, [r7, #16]
	for (int j = 0; j < csp_conf.conn_max; j++) {
 80082f8:	2300      	movs	r3, #0
 80082fa:	60fb      	str	r3, [r7, #12]
 80082fc:	e019      	b.n	8008332 <csp_conn_allocate+0x72>
		i = (i + 1) % csp_conf.conn_max;
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	3301      	adds	r3, #1
 8008302:	4a2f      	ldr	r2, [pc, #188]	@ (80083c0 <csp_conn_allocate+0x100>)
 8008304:	7c12      	ldrb	r2, [r2, #16]
 8008306:	fb93 f1f2 	sdiv	r1, r3, r2
 800830a:	fb01 f202 	mul.w	r2, r1, r2
 800830e:	1a9b      	subs	r3, r3, r2
 8008310:	613b      	str	r3, [r7, #16]
		conn = &arr_conn[i];
 8008312:	4b2c      	ldr	r3, [pc, #176]	@ (80083c4 <csp_conn_allocate+0x104>)
 8008314:	6819      	ldr	r1, [r3, #0]
 8008316:	693a      	ldr	r2, [r7, #16]
 8008318:	4613      	mov	r3, r2
 800831a:	00db      	lsls	r3, r3, #3
 800831c:	1a9b      	subs	r3, r3, r2
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	440b      	add	r3, r1
 8008322:	617b      	str	r3, [r7, #20]
		if (conn->state == CONN_CLOSED) {
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	785b      	ldrb	r3, [r3, #1]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d009      	beq.n	8008340 <csp_conn_allocate+0x80>
	for (int j = 0; j < csp_conf.conn_max; j++) {
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	3301      	adds	r3, #1
 8008330:	60fb      	str	r3, [r7, #12]
 8008332:	4b23      	ldr	r3, [pc, #140]	@ (80083c0 <csp_conn_allocate+0x100>)
 8008334:	7c1b      	ldrb	r3, [r3, #16]
 8008336:	461a      	mov	r2, r3
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	4293      	cmp	r3, r2
 800833c:	dbdf      	blt.n	80082fe <csp_conn_allocate+0x3e>
 800833e:	e000      	b.n	8008342 <csp_conn_allocate+0x82>
			break;
 8008340:	bf00      	nop
		}
	}

	if (conn && (conn->state == CONN_CLOSED)) {
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d01a      	beq.n	800837e <csp_conn_allocate+0xbe>
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	785b      	ldrb	r3, [r3, #1]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d116      	bne.n	800837e <csp_conn_allocate+0xbe>
		conn->idin.ext = 0;
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	2200      	movs	r2, #0
 8008354:	605a      	str	r2, [r3, #4]
		conn->idout.ext = 0;
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	2200      	movs	r2, #0
 800835a:	609a      	str	r2, [r3, #8]
		conn->socket = NULL;
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	2200      	movs	r2, #0
 8008360:	611a      	str	r2, [r3, #16]
		conn->timestamp = 0;
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	2200      	movs	r2, #0
 8008366:	615a      	str	r2, [r3, #20]
		conn->type = type;
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	79fa      	ldrb	r2, [r7, #7]
 800836c:	701a      	strb	r2, [r3, #0]
		conn->state = CONN_OPEN;
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	2201      	movs	r2, #1
 8008372:	705a      	strb	r2, [r3, #1]
		csp_conn_last_given = i;
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	b2da      	uxtb	r2, r3
 8008378:	4b10      	ldr	r3, [pc, #64]	@ (80083bc <csp_conn_allocate+0xfc>)
 800837a:	701a      	strb	r2, [r3, #0]
 800837c:	e001      	b.n	8008382 <csp_conn_allocate+0xc2>
	} else {
		// no free connections
		conn = NULL;
 800837e:	2300      	movs	r3, #0
 8008380:	617b      	str	r3, [r7, #20]
	}

	csp_bin_sem_post(&conn_lock);
 8008382:	480b      	ldr	r0, [pc, #44]	@ (80083b0 <csp_conn_allocate+0xf0>)
 8008384:	f7ff fb96 	bl	8007ab4 <csp_bin_sem_post>

	if (conn == NULL) {
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d10a      	bne.n	80083a4 <csp_conn_allocate+0xe4>
		csp_log_error("No free connections, max %u", csp_conf.conn_max);
 800838e:	4b09      	ldr	r3, [pc, #36]	@ (80083b4 <csp_conn_allocate+0xf4>)
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d006      	beq.n	80083a4 <csp_conn_allocate+0xe4>
 8008396:	4b0a      	ldr	r3, [pc, #40]	@ (80083c0 <csp_conn_allocate+0x100>)
 8008398:	7c1b      	ldrb	r3, [r3, #16]
 800839a:	461a      	mov	r2, r3
 800839c:	490a      	ldr	r1, [pc, #40]	@ (80083c8 <csp_conn_allocate+0x108>)
 800839e:	2000      	movs	r0, #0
 80083a0:	f000 f9b6 	bl	8008710 <do_csp_debug>
	}

	return conn;
 80083a4:	697b      	ldr	r3, [r7, #20]

}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3718      	adds	r7, #24
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	24042c3c 	.word	0x24042c3c
 80083b4:	2400008c 	.word	0x2400008c
 80083b8:	08013914 	.word	0x08013914
 80083bc:	24042c48 	.word	0x24042c48
 80083c0:	24042c54 	.word	0x24042c54
 80083c4:	24042c38 	.word	0x24042c38
 80083c8:	08013930 	.word	0x08013930

080083cc <csp_conn_new>:

csp_conn_t * csp_conn_new(csp_id_t idin, csp_id_t idout) {
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]

	/* Allocate connection structure */
	csp_conn_t * conn = csp_conn_allocate(CONN_CLIENT);
 80083d6:	2000      	movs	r0, #0
 80083d8:	f7ff ff72 	bl	80082c0 <csp_conn_allocate>
 80083dc:	60f8      	str	r0, [r7, #12]

	if (conn) {
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d00d      	beq.n	8008400 <csp_conn_new+0x34>
		/* No lock is needed here, because nobody else *
		 * has a reference to this connection yet.     */
		conn->idin.ext = idin.ext;
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	605a      	str	r2, [r3, #4]
		conn->idout.ext = idout.ext;
 80083ea:	683a      	ldr	r2, [r7, #0]
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	609a      	str	r2, [r3, #8]
		conn->timestamp = csp_get_ms();
 80083f0:	f7ff fc0a 	bl	8007c08 <csp_get_ms>
 80083f4:	4602      	mov	r2, r0
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	615a      	str	r2, [r3, #20]

		/* Ensure connection queue is empty */
		csp_conn_flush_rx_queue(conn);
 80083fa:	68f8      	ldr	r0, [r7, #12]
 80083fc:	f7ff ff38 	bl	8008270 <csp_conn_flush_rx_queue>
	}

	return conn;
 8008400:	68fb      	ldr	r3, [r7, #12]

}
 8008402:	4618      	mov	r0, r3
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <csp_close>:

int csp_close(csp_conn_t * conn) {
 800840a:	b580      	push	{r7, lr}
 800840c:	b082      	sub	sp, #8
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
    return csp_conn_close(conn, CSP_RDP_CLOSED_BY_USERSPACE);
 8008412:	2101      	movs	r1, #1
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f805 	bl	8008424 <csp_conn_close>
 800841a:	4603      	mov	r3, r0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3708      	adds	r7, #8
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <csp_conn_close>:

int csp_conn_close(csp_conn_t * conn, uint8_t closed_by) {
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	460b      	mov	r3, r1
 800842e:	70fb      	strb	r3, [r7, #3]

	if (conn == NULL) {
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d101      	bne.n	800843a <csp_conn_close+0x16>
		return CSP_ERR_NONE;
 8008436:	2300      	movs	r3, #0
 8008438:	e040      	b.n	80084bc <csp_conn_close+0x98>
	}

	if (conn->state == CONN_CLOSED) {
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	785b      	ldrb	r3, [r3, #1]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d109      	bne.n	8008456 <csp_conn_close+0x32>
		csp_log_protocol("Conn already closed");
 8008442:	4b20      	ldr	r3, [pc, #128]	@ (80084c4 <csp_conn_close+0xa0>)
 8008444:	795b      	ldrb	r3, [r3, #5]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d003      	beq.n	8008452 <csp_conn_close+0x2e>
 800844a:	491f      	ldr	r1, [pc, #124]	@ (80084c8 <csp_conn_close+0xa4>)
 800844c:	2005      	movs	r0, #5
 800844e:	f000 f95f 	bl	8008710 <do_csp_debug>
		return CSP_ERR_NONE;
 8008452:	2300      	movs	r3, #0
 8008454:	e032      	b.n	80084bc <csp_conn_close+0x98>
		}
	}
#endif

	/* Lock connection array while closing connection */
	if (csp_bin_sem_wait(&conn_lock, CSP_MAX_TIMEOUT) != CSP_SEMAPHORE_OK) {
 8008456:	f04f 31ff 	mov.w	r1, #4294967295
 800845a:	481c      	ldr	r0, [pc, #112]	@ (80084cc <csp_conn_close+0xa8>)
 800845c:	f7ff fb04 	bl	8007a68 <csp_bin_sem_wait>
 8008460:	4603      	mov	r3, r0
 8008462:	2b01      	cmp	r3, #1
 8008464:	d00a      	beq.n	800847c <csp_conn_close+0x58>
		csp_log_error("Failed to lock conn array");
 8008466:	4b17      	ldr	r3, [pc, #92]	@ (80084c4 <csp_conn_close+0xa0>)
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d003      	beq.n	8008476 <csp_conn_close+0x52>
 800846e:	4918      	ldr	r1, [pc, #96]	@ (80084d0 <csp_conn_close+0xac>)
 8008470:	2000      	movs	r0, #0
 8008472:	f000 f94d 	bl	8008710 <do_csp_debug>
		return CSP_ERR_TIMEDOUT;
 8008476:	f06f 0302 	mvn.w	r3, #2
 800847a:	e01f      	b.n	80084bc <csp_conn_close+0x98>
	}

	/* Set to closed */
	conn->state = CONN_CLOSED;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	705a      	strb	r2, [r3, #1]

	/* Ensure connection queue is empty */
	csp_conn_flush_rx_queue(conn);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7ff fef4 	bl	8008270 <csp_conn_flush_rx_queue>

        if (conn->socket && (conn->type == CONN_SERVER) && (conn->opts & (CSP_SO_CONN_LESS | CSP_SO_INTERNAL_LISTEN))) {
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d011      	beq.n	80084b4 <csp_conn_close+0x90>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	2b01      	cmp	r3, #1
 8008496:	d10d      	bne.n	80084b4 <csp_conn_close+0x90>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	699b      	ldr	r3, [r3, #24]
 800849c:	f403 5388 	and.w	r3, r3, #4352	@ 0x1100
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d007      	beq.n	80084b4 <csp_conn_close+0x90>
		csp_queue_remove(conn->socket);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7ff fa61 	bl	8007970 <csp_queue_remove>
		conn->socket = NULL;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	611a      	str	r2, [r3, #16]
		csp_rdp_flush_all(conn);
	}
#endif

	/* Unlock connection array */
	csp_bin_sem_post(&conn_lock);
 80084b4:	4805      	ldr	r0, [pc, #20]	@ (80084cc <csp_conn_close+0xa8>)
 80084b6:	f7ff fafd 	bl	8007ab4 <csp_bin_sem_post>

	return CSP_ERR_NONE;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3708      	adds	r7, #8
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	2400008c 	.word	0x2400008c
 80084c8:	0801394c 	.word	0x0801394c
 80084cc:	24042c3c 	.word	0x24042c3c
 80084d0:	08013914 	.word	0x08013914

080084d4 <csp_connect>:

csp_conn_t * csp_connect(uint8_t prio, uint8_t dest, uint8_t dport, uint32_t timeout, uint32_t opts) {
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b086      	sub	sp, #24
 80084d8:	af00      	add	r7, sp, #0
 80084da:	603b      	str	r3, [r7, #0]
 80084dc:	4603      	mov	r3, r0
 80084de:	71fb      	strb	r3, [r7, #7]
 80084e0:	460b      	mov	r3, r1
 80084e2:	71bb      	strb	r3, [r7, #6]
 80084e4:	4613      	mov	r3, r2
 80084e6:	717b      	strb	r3, [r7, #5]

	/* Force options on all connections */
	opts |= csp_conf.conn_dfl_so;
 80084e8:	4b72      	ldr	r3, [pc, #456]	@ (80086b4 <csp_connect+0x1e0>)
 80084ea:	69db      	ldr	r3, [r3, #28]
 80084ec:	6a3a      	ldr	r2, [r7, #32]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	623b      	str	r3, [r7, #32]

	/* Generate identifier */
	csp_id_t incoming_id, outgoing_id;
	incoming_id.pri = prio;
 80084f2:	79fb      	ldrb	r3, [r7, #7]
 80084f4:	f003 0303 	and.w	r3, r3, #3
 80084f8:	b2da      	uxtb	r2, r3
 80084fa:	7bfb      	ldrb	r3, [r7, #15]
 80084fc:	f362 1387 	bfi	r3, r2, #6, #2
 8008500:	73fb      	strb	r3, [r7, #15]
	incoming_id.dst = csp_conf.address;
 8008502:	4b6c      	ldr	r3, [pc, #432]	@ (80086b4 <csp_connect+0x1e0>)
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	f003 031f 	and.w	r3, r3, #31
 800850a:	b2da      	uxtb	r2, r3
 800850c:	89fb      	ldrh	r3, [r7, #14]
 800850e:	f362 1308 	bfi	r3, r2, #4, #5
 8008512:	81fb      	strh	r3, [r7, #14]
	incoming_id.src = dest;
 8008514:	79bb      	ldrb	r3, [r7, #6]
 8008516:	f003 031f 	and.w	r3, r3, #31
 800851a:	b2da      	uxtb	r2, r3
 800851c:	7bfb      	ldrb	r3, [r7, #15]
 800851e:	f362 0345 	bfi	r3, r2, #1, #5
 8008522:	73fb      	strb	r3, [r7, #15]
	incoming_id.sport = dport;
 8008524:	797b      	ldrb	r3, [r7, #5]
 8008526:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800852a:	b2da      	uxtb	r2, r3
 800852c:	7b7b      	ldrb	r3, [r7, #13]
 800852e:	f362 0305 	bfi	r3, r2, #0, #6
 8008532:	737b      	strb	r3, [r7, #13]
	incoming_id.flags = 0;
 8008534:	2300      	movs	r3, #0
 8008536:	733b      	strb	r3, [r7, #12]
	outgoing_id.pri = prio;
 8008538:	79fb      	ldrb	r3, [r7, #7]
 800853a:	f003 0303 	and.w	r3, r3, #3
 800853e:	b2da      	uxtb	r2, r3
 8008540:	7afb      	ldrb	r3, [r7, #11]
 8008542:	f362 1387 	bfi	r3, r2, #6, #2
 8008546:	72fb      	strb	r3, [r7, #11]
	outgoing_id.dst = dest;
 8008548:	79bb      	ldrb	r3, [r7, #6]
 800854a:	f003 031f 	and.w	r3, r3, #31
 800854e:	b2da      	uxtb	r2, r3
 8008550:	897b      	ldrh	r3, [r7, #10]
 8008552:	f362 1308 	bfi	r3, r2, #4, #5
 8008556:	817b      	strh	r3, [r7, #10]
	outgoing_id.src = csp_conf.address;
 8008558:	4b56      	ldr	r3, [pc, #344]	@ (80086b4 <csp_connect+0x1e0>)
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	f003 031f 	and.w	r3, r3, #31
 8008560:	b2da      	uxtb	r2, r3
 8008562:	7afb      	ldrb	r3, [r7, #11]
 8008564:	f362 0345 	bfi	r3, r2, #1, #5
 8008568:	72fb      	strb	r3, [r7, #11]
	outgoing_id.dport = dport;
 800856a:	797b      	ldrb	r3, [r7, #5]
 800856c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008570:	b2da      	uxtb	r2, r3
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	f362 3393 	bfi	r3, r2, #14, #6
 8008578:	60bb      	str	r3, [r7, #8]
	outgoing_id.flags = 0;
 800857a:	2300      	movs	r3, #0
 800857c:	723b      	strb	r3, [r7, #8]

	/* Set connection options */
	if (opts & CSP_O_NOCRC32) {
 800857e:	6a3b      	ldr	r3, [r7, #32]
 8008580:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008584:	2b00      	cmp	r3, #0
 8008586:	d003      	beq.n	8008590 <csp_connect+0xbc>
		opts &= ~CSP_O_CRC32;
 8008588:	6a3b      	ldr	r3, [r7, #32]
 800858a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800858e:	623b      	str	r3, [r7, #32]
	}

	if (opts & CSP_O_RDP) {
 8008590:	6a3b      	ldr	r3, [r7, #32]
 8008592:	f003 0301 	and.w	r3, r3, #1
 8008596:	2b00      	cmp	r3, #0
 8008598:	d009      	beq.n	80085ae <csp_connect+0xda>
#if (CSP_USE_RDP)
		incoming_id.flags |= CSP_FRDP;
		outgoing_id.flags |= CSP_FRDP;
#else
		csp_log_error("Attempt to create RDP connection, but CSP was compiled without RDP support");
 800859a:	4b47      	ldr	r3, [pc, #284]	@ (80086b8 <csp_connect+0x1e4>)
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d003      	beq.n	80085aa <csp_connect+0xd6>
 80085a2:	4946      	ldr	r1, [pc, #280]	@ (80086bc <csp_connect+0x1e8>)
 80085a4:	2000      	movs	r0, #0
 80085a6:	f000 f8b3 	bl	8008710 <do_csp_debug>
		return NULL;
 80085aa:	2300      	movs	r3, #0
 80085ac:	e07e      	b.n	80086ac <csp_connect+0x1d8>
#endif
	}

	if (opts & CSP_O_HMAC) {
 80085ae:	6a3b      	ldr	r3, [r7, #32]
 80085b0:	f003 0304 	and.w	r3, r3, #4
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d009      	beq.n	80085cc <csp_connect+0xf8>
#if (CSP_USE_HMAC)
		outgoing_id.flags |= CSP_FHMAC;
		incoming_id.flags |= CSP_FHMAC;
#else
		csp_log_error("Attempt to create HMAC authenticated connection, but CSP was compiled without HMAC support");
 80085b8:	4b3f      	ldr	r3, [pc, #252]	@ (80086b8 <csp_connect+0x1e4>)
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d003      	beq.n	80085c8 <csp_connect+0xf4>
 80085c0:	493f      	ldr	r1, [pc, #252]	@ (80086c0 <csp_connect+0x1ec>)
 80085c2:	2000      	movs	r0, #0
 80085c4:	f000 f8a4 	bl	8008710 <do_csp_debug>
		return NULL;
 80085c8:	2300      	movs	r3, #0
 80085ca:	e06f      	b.n	80086ac <csp_connect+0x1d8>
#endif
	}

	if (opts & CSP_O_XTEA) {
 80085cc:	6a3b      	ldr	r3, [r7, #32]
 80085ce:	f003 0310 	and.w	r3, r3, #16
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d009      	beq.n	80085ea <csp_connect+0x116>
#if (CSP_USE_XTEA)
		outgoing_id.flags |= CSP_FXTEA;
		incoming_id.flags |= CSP_FXTEA;
#else
		csp_log_error("Attempt to create XTEA encrypted connection, but CSP was compiled without XTEA support");
 80085d6:	4b38      	ldr	r3, [pc, #224]	@ (80086b8 <csp_connect+0x1e4>)
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d003      	beq.n	80085e6 <csp_connect+0x112>
 80085de:	4939      	ldr	r1, [pc, #228]	@ (80086c4 <csp_connect+0x1f0>)
 80085e0:	2000      	movs	r0, #0
 80085e2:	f000 f895 	bl	8008710 <do_csp_debug>
		return NULL;
 80085e6:	2300      	movs	r3, #0
 80085e8:	e060      	b.n	80086ac <csp_connect+0x1d8>
#endif
	}

	if (opts & CSP_O_CRC32) {
 80085ea:	6a3b      	ldr	r3, [r7, #32]
 80085ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d009      	beq.n	8008608 <csp_connect+0x134>
#if (CSP_USE_CRC32)
		outgoing_id.flags |= CSP_FCRC32;
		incoming_id.flags |= CSP_FCRC32;
#else
		csp_log_error("Attempt to create CRC32 validated connection, but CSP was compiled without CRC32 support");
 80085f4:	4b30      	ldr	r3, [pc, #192]	@ (80086b8 <csp_connect+0x1e4>)
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d003      	beq.n	8008604 <csp_connect+0x130>
 80085fc:	4932      	ldr	r1, [pc, #200]	@ (80086c8 <csp_connect+0x1f4>)
 80085fe:	2000      	movs	r0, #0
 8008600:	f000 f886 	bl	8008710 <do_csp_debug>
		return NULL;
 8008604:	2300      	movs	r3, #0
 8008606:	e051      	b.n	80086ac <csp_connect+0x1d8>
#endif
	}

	/* Find an unused ephemeral port */
	csp_conn_t * conn = NULL;
 8008608:	2300      	movs	r3, #0
 800860a:	617b      	str	r3, [r7, #20]

	/* Wait for sport lock - note that csp_conn_new(..) is called inside the lock! */
	if (csp_bin_sem_wait(&sport_lock, CSP_MAX_TIMEOUT) != CSP_SEMAPHORE_OK) {
 800860c:	f04f 31ff 	mov.w	r1, #4294967295
 8008610:	482e      	ldr	r0, [pc, #184]	@ (80086cc <csp_connect+0x1f8>)
 8008612:	f7ff fa29 	bl	8007a68 <csp_bin_sem_wait>
 8008616:	4603      	mov	r3, r0
 8008618:	2b01      	cmp	r3, #1
 800861a:	d001      	beq.n	8008620 <csp_connect+0x14c>
		return NULL;
 800861c:	2300      	movs	r3, #0
 800861e:	e045      	b.n	80086ac <csp_connect+0x1d8>
	}

	const uint8_t start = sport;
 8008620:	4b2b      	ldr	r3, [pc, #172]	@ (80086d0 <csp_connect+0x1fc>)
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	74fb      	strb	r3, [r7, #19]
	while (++sport != start) {
 8008626:	e02a      	b.n	800867e <csp_connect+0x1aa>
		if (sport > CSP_ID_PORT_MAX)
 8008628:	4b29      	ldr	r3, [pc, #164]	@ (80086d0 <csp_connect+0x1fc>)
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	2b3f      	cmp	r3, #63	@ 0x3f
 800862e:	d905      	bls.n	800863c <csp_connect+0x168>
			sport = csp_conf.port_max_bind + 1;
 8008630:	4b20      	ldr	r3, [pc, #128]	@ (80086b4 <csp_connect+0x1e0>)
 8008632:	7cdb      	ldrb	r3, [r3, #19]
 8008634:	3301      	adds	r3, #1
 8008636:	b2da      	uxtb	r2, r3
 8008638:	4b25      	ldr	r3, [pc, #148]	@ (80086d0 <csp_connect+0x1fc>)
 800863a:	701a      	strb	r2, [r3, #0]

		outgoing_id.sport = sport;
 800863c:	4b24      	ldr	r3, [pc, #144]	@ (80086d0 <csp_connect+0x1fc>)
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008644:	b2da      	uxtb	r2, r3
 8008646:	7a7b      	ldrb	r3, [r7, #9]
 8008648:	f362 0305 	bfi	r3, r2, #0, #6
 800864c:	727b      	strb	r3, [r7, #9]
		incoming_id.dport = sport;
 800864e:	4b20      	ldr	r3, [pc, #128]	@ (80086d0 <csp_connect+0x1fc>)
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008656:	b2da      	uxtb	r2, r3
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f362 3393 	bfi	r3, r2, #14, #6
 800865e:	60fb      	str	r3, [r7, #12]

		/* Match on destination port of _incoming_ identifier */
		if (csp_conn_find(incoming_id.ext, CSP_ID_DPORT_MASK) == NULL) {
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f44f 217c 	mov.w	r1, #1032192	@ 0xfc000
 8008666:	4618      	mov	r0, r3
 8008668:	f7ff fdc8 	bl	80081fc <csp_conn_find>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d105      	bne.n	800867e <csp_connect+0x1aa>
			/* Break - we found an unused ephemeral port
                           allocate connection while locked to mark port in use */
			conn = csp_conn_new(incoming_id, outgoing_id);
 8008672:	68b9      	ldr	r1, [r7, #8]
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f7ff fea9 	bl	80083cc <csp_conn_new>
 800867a:	6178      	str	r0, [r7, #20]
			break;
 800867c:	e00a      	b.n	8008694 <csp_connect+0x1c0>
	while (++sport != start) {
 800867e:	4b14      	ldr	r3, [pc, #80]	@ (80086d0 <csp_connect+0x1fc>)
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	3301      	adds	r3, #1
 8008684:	b2da      	uxtb	r2, r3
 8008686:	4b12      	ldr	r3, [pc, #72]	@ (80086d0 <csp_connect+0x1fc>)
 8008688:	701a      	strb	r2, [r3, #0]
 800868a:	4b11      	ldr	r3, [pc, #68]	@ (80086d0 <csp_connect+0x1fc>)
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	7cfa      	ldrb	r2, [r7, #19]
 8008690:	429a      	cmp	r2, r3
 8008692:	d1c9      	bne.n	8008628 <csp_connect+0x154>
		}
	}

	/* Post sport lock */
	csp_bin_sem_post(&sport_lock);
 8008694:	480d      	ldr	r0, [pc, #52]	@ (80086cc <csp_connect+0x1f8>)
 8008696:	f7ff fa0d 	bl	8007ab4 <csp_bin_sem_post>

	if (conn == NULL) {
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d101      	bne.n	80086a4 <csp_connect+0x1d0>
		return NULL;
 80086a0:	2300      	movs	r3, #0
 80086a2:	e003      	b.n	80086ac <csp_connect+0x1d8>
	}

	/* Set connection options */
	conn->opts = opts;
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	6a3a      	ldr	r2, [r7, #32]
 80086a8:	619a      	str	r2, [r3, #24]
		}
	}
#endif

	/* We have a successful connection */
	return conn;
 80086aa:	697b      	ldr	r3, [r7, #20]

}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3718      	adds	r7, #24
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	24042c54 	.word	0x24042c54
 80086b8:	2400008c 	.word	0x2400008c
 80086bc:	08013960 	.word	0x08013960
 80086c0:	080139ac 	.word	0x080139ac
 80086c4:	08013a08 	.word	0x08013a08
 80086c8:	08013a60 	.word	0x08013a60
 80086cc:	24042c44 	.word	0x24042c44
 80086d0:	24042c40 	.word	0x24042c40

080086d4 <csp_conn_dport>:

int csp_conn_dport(csp_conn_t * conn) {
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]

	return conn->idin.dport;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	f3c3 3385 	ubfx	r3, r3, #14, #6
 80086e4:	b2db      	uxtb	r3, r3

}
 80086e6:	4618      	mov	r0, r3
 80086e8:	370c      	adds	r7, #12
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr

080086f2 <csp_conn_src>:

	return conn->idin.dst;

}

int csp_conn_src(csp_conn_t * conn) {
 80086f2:	b480      	push	{r7}
 80086f4:	b083      	sub	sp, #12
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]

	return conn->idin.src;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	79db      	ldrb	r3, [r3, #7]
 80086fe:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8008702:	b2db      	uxtb	r3, r3

}
 8008704:	4618      	mov	r0, r3
 8008706:	370c      	adds	r7, #12
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr

08008710 <do_csp_debug>:
void csp_debug_hook_set(csp_debug_hook_func_t f) {

	csp_debug_hook_func = f;
}

void do_csp_debug(csp_debug_level_t level, const char *format, ...) {
 8008710:	b40e      	push	{r1, r2, r3}
 8008712:	b580      	push	{r7, lr}
 8008714:	b085      	sub	sp, #20
 8008716:	af00      	add	r7, sp, #0
 8008718:	4603      	mov	r3, r0
 800871a:	71fb      	strb	r3, [r7, #7]

	int color = COLOR_RESET;
 800871c:	23f0      	movs	r3, #240	@ 0xf0
 800871e:	60fb      	str	r3, [r7, #12]
	va_list args;

	/* Don't print anything if log level is disabled */
	if (level > CSP_LOCK || !csp_debug_level_enabled[level])
 8008720:	79fb      	ldrb	r3, [r7, #7]
 8008722:	2b06      	cmp	r3, #6
 8008724:	d84f      	bhi.n	80087c6 <do_csp_debug+0xb6>
 8008726:	79fb      	ldrb	r3, [r7, #7]
 8008728:	4a2b      	ldr	r2, [pc, #172]	@ (80087d8 <do_csp_debug+0xc8>)
 800872a:	5cd3      	ldrb	r3, [r2, r3]
 800872c:	f083 0301 	eor.w	r3, r3, #1
 8008730:	b2db      	uxtb	r3, r3
 8008732:	2b00      	cmp	r3, #0
 8008734:	d147      	bne.n	80087c6 <do_csp_debug+0xb6>
		return;

	switch(level) {
 8008736:	79fb      	ldrb	r3, [r7, #7]
 8008738:	2b06      	cmp	r3, #6
 800873a:	d846      	bhi.n	80087ca <do_csp_debug+0xba>
 800873c:	a201      	add	r2, pc, #4	@ (adr r2, 8008744 <do_csp_debug+0x34>)
 800873e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008742:	bf00      	nop
 8008744:	08008767 	.word	0x08008767
 8008748:	0800876d 	.word	0x0800876d
 800874c:	08008761 	.word	0x08008761
 8008750:	08008773 	.word	0x08008773
 8008754:	08008779 	.word	0x08008779
 8008758:	0800877f 	.word	0x0800877f
 800875c:	08008785 	.word	0x08008785
	case CSP_INFO:
		color = COLOR_GREEN | COLOR_BOLD;
 8008760:	2313      	movs	r3, #19
 8008762:	60fb      	str	r3, [r7, #12]
		break;
 8008764:	e011      	b.n	800878a <do_csp_debug+0x7a>
	case CSP_ERROR:
		color = COLOR_RED | COLOR_BOLD;
 8008766:	2312      	movs	r3, #18
 8008768:	60fb      	str	r3, [r7, #12]
		break;
 800876a:	e00e      	b.n	800878a <do_csp_debug+0x7a>
	case CSP_WARN:
		color = COLOR_YELLOW | COLOR_BOLD;
 800876c:	2314      	movs	r3, #20
 800876e:	60fb      	str	r3, [r7, #12]
		break;
 8008770:	e00b      	b.n	800878a <do_csp_debug+0x7a>
	case CSP_BUFFER:
		color = COLOR_MAGENTA;
 8008772:	2306      	movs	r3, #6
 8008774:	60fb      	str	r3, [r7, #12]
		break;
 8008776:	e008      	b.n	800878a <do_csp_debug+0x7a>
	case CSP_PACKET:
		color = COLOR_GREEN;
 8008778:	2303      	movs	r3, #3
 800877a:	60fb      	str	r3, [r7, #12]
		break;
 800877c:	e005      	b.n	800878a <do_csp_debug+0x7a>
	case CSP_PROTOCOL:
		color = COLOR_BLUE;
 800877e:	2305      	movs	r3, #5
 8008780:	60fb      	str	r3, [r7, #12]
		break;
 8008782:	e002      	b.n	800878a <do_csp_debug+0x7a>
	case CSP_LOCK:
		color = COLOR_CYAN;
 8008784:	2307      	movs	r3, #7
 8008786:	60fb      	str	r3, [r7, #12]
		break;
 8008788:	bf00      	nop
	default:
		return;
	}

	va_start(args, format);
 800878a:	f107 0320 	add.w	r3, r7, #32
 800878e:	60bb      	str	r3, [r7, #8]

	/* If csp_debug_hook symbol is defined, pass on the message.
	 * Otherwise, just print with pretty colors ... */
	if (csp_debug_hook_func) {
 8008790:	4b12      	ldr	r3, [pc, #72]	@ (80087dc <do_csp_debug+0xcc>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d006      	beq.n	80087a6 <do_csp_debug+0x96>
		csp_debug_hook_func(level, format, args);
 8008798:	4b10      	ldr	r3, [pc, #64]	@ (80087dc <do_csp_debug+0xcc>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	79f8      	ldrb	r0, [r7, #7]
 800879e:	68ba      	ldr	r2, [r7, #8]
 80087a0:	69f9      	ldr	r1, [r7, #28]
 80087a2:	4798      	blx	r3
 80087a4:	e012      	b.n	80087cc <do_csp_debug+0xbc>
	} else {
		csp_sys_set_color(color);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7ff f9a4 	bl	8007af8 <csp_sys_set_color>
                printf("%u.%06u ", ts.tv_sec, ts.tv_nsec / 1000U);
#endif
#ifdef __AVR__
		vfprintf_P(stdout, format, args);
#else
		vprintf(format, args);
 80087b0:	68b9      	ldr	r1, [r7, #8]
 80087b2:	69f8      	ldr	r0, [r7, #28]
 80087b4:	f009 fc5e 	bl	8012074 <viprintf>
#endif
		printf("\r\n");
 80087b8:	4809      	ldr	r0, [pc, #36]	@ (80087e0 <do_csp_debug+0xd0>)
 80087ba:	f009 fbb7 	bl	8011f2c <puts>
		csp_sys_set_color(COLOR_RESET);
 80087be:	20f0      	movs	r0, #240	@ 0xf0
 80087c0:	f7ff f99a 	bl	8007af8 <csp_sys_set_color>
 80087c4:	e002      	b.n	80087cc <do_csp_debug+0xbc>
		return;
 80087c6:	bf00      	nop
 80087c8:	e000      	b.n	80087cc <do_csp_debug+0xbc>
		return;
 80087ca:	bf00      	nop
	}

	va_end(args);
}
 80087cc:	3714      	adds	r7, #20
 80087ce:	46bd      	mov	sp, r7
 80087d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80087d4:	b003      	add	sp, #12
 80087d6:	4770      	bx	lr
 80087d8:	2400008c 	.word	0x2400008c
 80087dc:	24042c4c 	.word	0x24042c4c
 80087e0:	08013b1c 	.word	0x08013b1c

080087e4 <csp_hton16>:
*/

#include <csp/csp_endian.h>

/* Convert 16-bit number from host byte order to network byte order */
inline uint16_t __attribute__ ((__const__)) csp_hton16(uint16_t h16) {
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	4603      	mov	r3, r0
 80087ec:	80fb      	strh	r3, [r7, #6]
#if (CSP_BIG_ENDIAN)
	return h16;
#else
	return (((h16 & 0xff00) >> 8) |
 80087ee:	88fb      	ldrh	r3, [r7, #6]
 80087f0:	0a1b      	lsrs	r3, r3, #8
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	b21a      	sxth	r2, r3
 80087f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80087fa:	021b      	lsls	r3, r3, #8
 80087fc:	b21b      	sxth	r3, r3
 80087fe:	4313      	orrs	r3, r2
 8008800:	b21b      	sxth	r3, r3
 8008802:	b29b      	uxth	r3, r3
			((h16 & 0x00ff) << 8));
#endif
}
 8008804:	4618      	mov	r0, r3
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <csp_ntoh16>:

/* Convert 16-bit number from network byte order to host byte order */
inline uint16_t __attribute__ ((__const__)) csp_ntoh16(uint16_t n16) {
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	4603      	mov	r3, r0
 8008818:	80fb      	strh	r3, [r7, #6]
	return csp_hton16(n16);
 800881a:	88fb      	ldrh	r3, [r7, #6]
 800881c:	4618      	mov	r0, r3
 800881e:	f7ff ffe1 	bl	80087e4 <csp_hton16>
 8008822:	4603      	mov	r3, r0
}
 8008824:	4618      	mov	r0, r3
 8008826:	3708      	adds	r7, #8
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <csp_hton32>:

/* Convert 32-bit number from host byte order to network byte order */
inline uint32_t __attribute__ ((__const__)) csp_hton32(uint32_t h32) {
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
#if (CSP_BIG_ENDIAN)
	return h32;
#else
	return (((h32 & 0xff000000) >> 24) |
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	0e1a      	lsrs	r2, r3, #24
			((h32 & 0x000000ff) << 24) |
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	061b      	lsls	r3, r3, #24
	return (((h32 & 0xff000000) >> 24) |
 800883c:	431a      	orrs	r2, r3
			((h32 & 0x0000ff00) <<  8) |
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	021b      	lsls	r3, r3, #8
 8008842:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
			((h32 & 0x000000ff) << 24) |
 8008846:	431a      	orrs	r2, r3
			((h32 & 0x00ff0000) >>  8));
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	0a1b      	lsrs	r3, r3, #8
 800884c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
			((h32 & 0x0000ff00) <<  8) |
 8008850:	4313      	orrs	r3, r2
#endif
}
 8008852:	4618      	mov	r0, r3
 8008854:	370c      	adds	r7, #12
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr

0800885e <csp_ntoh32>:

/* Convert 32-bit number from network byte order to host byte order */
inline uint32_t __attribute__ ((__const__)) csp_ntoh32(uint32_t n32) {
 800885e:	b580      	push	{r7, lr}
 8008860:	b082      	sub	sp, #8
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
	return csp_hton32(n32);
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f7ff ffe0 	bl	800882c <csp_hton32>
 800886c:	4603      	mov	r3, r0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3708      	adds	r7, #8
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
	...

08008878 <csp_iflist_add>:
		ifc = ifc->next;
	}
	return ifc;
}

int csp_iflist_add(csp_iface_t *ifc) {
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]

	ifc->next = NULL;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	63da      	str	r2, [r3, #60]	@ 0x3c

	/* Add interface to pool */
	if (interfaces == NULL) {
 8008886:	4b18      	ldr	r3, [pc, #96]	@ (80088e8 <csp_iflist_add+0x70>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d103      	bne.n	8008896 <csp_iflist_add+0x1e>
		/* This is the first interface to be added */
		interfaces = ifc;
 800888e:	4a16      	ldr	r2, [pc, #88]	@ (80088e8 <csp_iflist_add+0x70>)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6013      	str	r3, [r2, #0]
 8008894:	e022      	b.n	80088dc <csp_iflist_add+0x64>
	} else {
		/* Insert interface last if not already in pool */
		csp_iface_t * last = NULL;
 8008896:	2300      	movs	r3, #0
 8008898:	60fb      	str	r3, [r7, #12]
		for (csp_iface_t * i = interfaces; i != NULL; i = i->next) {
 800889a:	4b13      	ldr	r3, [pc, #76]	@ (80088e8 <csp_iflist_add+0x70>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	60bb      	str	r3, [r7, #8]
 80088a0:	e016      	b.n	80088d0 <csp_iflist_add+0x58>
			if ((i == ifc) || (strncasecmp(ifc->name, i->name, CSP_IFLIST_NAME_MAX) == 0)) {
 80088a2:	68ba      	ldr	r2, [r7, #8]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d00a      	beq.n	80088c0 <csp_iflist_add+0x48>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6818      	ldr	r0, [r3, #0]
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	220a      	movs	r2, #10
 80088b4:	4619      	mov	r1, r3
 80088b6:	f009 fcab 	bl	8012210 <strncasecmp>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d102      	bne.n	80088c6 <csp_iflist_add+0x4e>
				return CSP_ERR_ALREADY;
 80088c0:	f06f 0306 	mvn.w	r3, #6
 80088c4:	e00b      	b.n	80088de <csp_iflist_add+0x66>
			}
			last = i;
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	60fb      	str	r3, [r7, #12]
		for (csp_iface_t * i = interfaces; i != NULL; i = i->next) {
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088ce:	60bb      	str	r3, [r7, #8]
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d1e5      	bne.n	80088a2 <csp_iflist_add+0x2a>
		}

		last->next = ifc;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	63da      	str	r2, [r3, #60]	@ 0x3c
	}

	return CSP_ERR_NONE;
 80088dc:	2300      	movs	r3, #0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	24042c50 	.word	0x24042c50

080088ec <csp_route_set>:
   @param[in] dest_address destination address.
   @param[in] ifc interface.
   @param[in] via assosicated via address.
   @return #CSP_ERR_NONE on success, or an error code.
*/
static inline int csp_route_set(uint8_t dest_address, csp_iface_t *ifc, uint8_t via) {
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b082      	sub	sp, #8
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	4603      	mov	r3, r0
 80088f4:	6039      	str	r1, [r7, #0]
 80088f6:	71fb      	strb	r3, [r7, #7]
 80088f8:	4613      	mov	r3, r2
 80088fa:	71bb      	strb	r3, [r7, #6]
    return csp_rtable_set(dest_address, CSP_ID_HOST_SIZE, ifc, via);
 80088fc:	79bb      	ldrb	r3, [r7, #6]
 80088fe:	79f8      	ldrb	r0, [r7, #7]
 8008900:	683a      	ldr	r2, [r7, #0]
 8008902:	2105      	movs	r1, #5
 8008904:	f001 fa1e 	bl	8009d44 <csp_rtable_set>
 8008908:	4603      	mov	r3, r0
}
 800890a:	4618      	mov	r0, r3
 800890c:	3708      	adds	r7, #8
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
	...

08008914 <csp_init>:
uint8_t csp_get_address(void) {

	return csp_conf.address;
}

int csp_init(const csp_conf_t * conf) {
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]

	/* make offset first time, so uptime is counted from process/task boot */
	csp_get_uptime_s();
 800891c:	f7fe ffce 	bl	80078bc <csp_get_uptime_s>

	/* Make a copy of the configuration
	 * The copy is kept hidden for the user in csp_init.h
	 * Configuration cannot be changed after calling init
	 * unless specific get/set functions are made */
	memcpy(&csp_conf, conf, sizeof(csp_conf));
 8008920:	2220      	movs	r2, #32
 8008922:	6879      	ldr	r1, [r7, #4]
 8008924:	481b      	ldr	r0, [pc, #108]	@ (8008994 <csp_init+0x80>)
 8008926:	f009 fd1a 	bl	801235e <memcpy>

	int ret = csp_buffer_init();
 800892a:	f7ff f989 	bl	8007c40 <csp_buffer_init>
 800892e:	60f8      	str	r0, [r7, #12]
	if (ret != CSP_ERR_NONE) {
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d001      	beq.n	800893a <csp_init+0x26>
		return ret;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	e027      	b.n	800898a <csp_init+0x76>
	}

	ret = csp_conn_init();
 800893a:	f7ff fbad 	bl	8008098 <csp_conn_init>
 800893e:	60f8      	str	r0, [r7, #12]
	if (ret != CSP_ERR_NONE) {
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d001      	beq.n	800894a <csp_init+0x36>
		return ret;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	e01f      	b.n	800898a <csp_init+0x76>
	}

	ret = csp_port_init();
 800894a:	f000 fa4f 	bl	8008dec <csp_port_init>
 800894e:	60f8      	str	r0, [r7, #12]
	if (ret != CSP_ERR_NONE) {
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d001      	beq.n	800895a <csp_init+0x46>
		return ret;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	e017      	b.n	800898a <csp_init+0x76>
	}

	ret = csp_qfifo_init();
 800895a:	f000 faed 	bl	8008f38 <csp_qfifo_init>
 800895e:	60f8      	str	r0, [r7, #12]
	if (ret != CSP_ERR_NONE) {
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d001      	beq.n	800896a <csp_init+0x56>
		return ret;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	e00f      	b.n	800898a <csp_init+0x76>
	}

	/* Loopback */
	csp_iflist_add(&csp_if_lo);
 800896a:	480b      	ldr	r0, [pc, #44]	@ (8008998 <csp_init+0x84>)
 800896c:	f7ff ff84 	bl	8008878 <csp_iflist_add>

	/* Register loopback route */
	csp_route_set(csp_conf.address, &csp_if_lo, CSP_NO_VIA_ADDRESS);
 8008970:	4b08      	ldr	r3, [pc, #32]	@ (8008994 <csp_init+0x80>)
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	22ff      	movs	r2, #255	@ 0xff
 8008976:	4908      	ldr	r1, [pc, #32]	@ (8008998 <csp_init+0x84>)
 8008978:	4618      	mov	r0, r3
 800897a:	f7ff ffb7 	bl	80088ec <csp_route_set>

	/* Also register loopback as default, until user redefines default route */
	csp_route_set(CSP_DEFAULT_ROUTE, &csp_if_lo, CSP_NO_VIA_ADDRESS);
 800897e:	22ff      	movs	r2, #255	@ 0xff
 8008980:	4905      	ldr	r1, [pc, #20]	@ (8008998 <csp_init+0x84>)
 8008982:	2020      	movs	r0, #32
 8008984:	f7ff ffb2 	bl	80088ec <csp_route_set>

	return CSP_ERR_NONE;
 8008988:	2300      	movs	r3, #0

}
 800898a:	4618      	mov	r0, r3
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	24042c54 	.word	0x24042c54
 8008998:	24000094 	.word	0x24000094

0800899c <csp_socket>:

#if (CSP_USE_PROMISC)
extern csp_queue_handle_t csp_promisc_queue;
#endif

csp_socket_t * csp_socket(uint32_t opts) {
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
	
	/* Validate socket options */
#if (CSP_USE_RDP == 0)
	if (opts & CSP_SO_RDPREQ) {
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f003 0301 	and.w	r3, r3, #1
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d009      	beq.n	80089c2 <csp_socket+0x26>
		csp_log_error("Attempt to create socket that requires RDP, but CSP was compiled without RDP support");
 80089ae:	4b38      	ldr	r3, [pc, #224]	@ (8008a90 <csp_socket+0xf4>)
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d003      	beq.n	80089be <csp_socket+0x22>
 80089b6:	4937      	ldr	r1, [pc, #220]	@ (8008a94 <csp_socket+0xf8>)
 80089b8:	2000      	movs	r0, #0
 80089ba:	f7ff fea9 	bl	8008710 <do_csp_debug>
		return NULL;
 80089be:	2300      	movs	r3, #0
 80089c0:	e062      	b.n	8008a88 <csp_socket+0xec>
	}
#endif

#if (CSP_USE_XTEA == 0)
	if (opts & CSP_SO_XTEAREQ) {
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f003 0310 	and.w	r3, r3, #16
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d009      	beq.n	80089e0 <csp_socket+0x44>
		csp_log_error("Attempt to create socket that requires XTEA, but CSP was compiled without XTEA support");
 80089cc:	4b30      	ldr	r3, [pc, #192]	@ (8008a90 <csp_socket+0xf4>)
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d003      	beq.n	80089dc <csp_socket+0x40>
 80089d4:	4930      	ldr	r1, [pc, #192]	@ (8008a98 <csp_socket+0xfc>)
 80089d6:	2000      	movs	r0, #0
 80089d8:	f7ff fe9a 	bl	8008710 <do_csp_debug>
		return NULL;
 80089dc:	2300      	movs	r3, #0
 80089de:	e053      	b.n	8008a88 <csp_socket+0xec>
	}
#endif

#if (CSP_USE_HMAC == 0)
	if (opts & CSP_SO_HMACREQ) {
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f003 0304 	and.w	r3, r3, #4
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d009      	beq.n	80089fe <csp_socket+0x62>
		csp_log_error("Attempt to create socket that requires HMAC, but CSP was compiled without HMAC support");
 80089ea:	4b29      	ldr	r3, [pc, #164]	@ (8008a90 <csp_socket+0xf4>)
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d003      	beq.n	80089fa <csp_socket+0x5e>
 80089f2:	492a      	ldr	r1, [pc, #168]	@ (8008a9c <csp_socket+0x100>)
 80089f4:	2000      	movs	r0, #0
 80089f6:	f7ff fe8b 	bl	8008710 <do_csp_debug>
		return NULL;
 80089fa:	2300      	movs	r3, #0
 80089fc:	e044      	b.n	8008a88 <csp_socket+0xec>
	} 
#endif

#if (CSP_USE_CRC32 == 0)
	if (opts & CSP_SO_CRC32REQ) {
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d009      	beq.n	8008a1c <csp_socket+0x80>
		csp_log_error("Attempt to create socket that requires CRC32, but CSP was compiled without CRC32 support");
 8008a08:	4b21      	ldr	r3, [pc, #132]	@ (8008a90 <csp_socket+0xf4>)
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d003      	beq.n	8008a18 <csp_socket+0x7c>
 8008a10:	4923      	ldr	r1, [pc, #140]	@ (8008aa0 <csp_socket+0x104>)
 8008a12:	2000      	movs	r0, #0
 8008a14:	f7ff fe7c 	bl	8008710 <do_csp_debug>
		return NULL;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	e035      	b.n	8008a88 <csp_socket+0xec>
	} 
#endif
	
	/* Drop packet if reserved flags are set */
	if (opts & ~(CSP_SO_RDPREQ | CSP_SO_XTEAREQ | CSP_SO_HMACREQ | CSP_SO_CRC32REQ | CSP_SO_CONN_LESS)) {
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	4b21      	ldr	r3, [pc, #132]	@ (8008aa4 <csp_socket+0x108>)
 8008a20:	4013      	ands	r3, r2
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d009      	beq.n	8008a3a <csp_socket+0x9e>
		csp_log_error("Invalid socket option");
 8008a26:	4b1a      	ldr	r3, [pc, #104]	@ (8008a90 <csp_socket+0xf4>)
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d003      	beq.n	8008a36 <csp_socket+0x9a>
 8008a2e:	491e      	ldr	r1, [pc, #120]	@ (8008aa8 <csp_socket+0x10c>)
 8008a30:	2000      	movs	r0, #0
 8008a32:	f7ff fe6d 	bl	8008710 <do_csp_debug>
		return NULL;
 8008a36:	2300      	movs	r3, #0
 8008a38:	e026      	b.n	8008a88 <csp_socket+0xec>
	}

	/* Use CSP buffers instead? */
	csp_socket_t * sock = csp_conn_allocate(CONN_SERVER);
 8008a3a:	2001      	movs	r0, #1
 8008a3c:	f7ff fc40 	bl	80082c0 <csp_conn_allocate>
 8008a40:	60f8      	str	r0, [r7, #12]
	if (sock == NULL)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d101      	bne.n	8008a4c <csp_socket+0xb0>
		return NULL;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	e01d      	b.n	8008a88 <csp_socket+0xec>

	/* If connectionless, init the queue to a pre-defined size
	 * if not, the user must init the queue using csp_listen */
	if (opts & CSP_SO_CONN_LESS) {
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d011      	beq.n	8008a7a <csp_socket+0xde>
		sock->socket = csp_queue_create(csp_conf.conn_queue_length, sizeof(csp_packet_t *));
 8008a56:	4b15      	ldr	r3, [pc, #84]	@ (8008aac <csp_socket+0x110>)
 8008a58:	7c5b      	ldrb	r3, [r3, #17]
 8008a5a:	2104      	movs	r1, #4
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f7fe ff77 	bl	8007950 <csp_queue_create>
 8008a62:	4602      	mov	r2, r0
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	611a      	str	r2, [r3, #16]
		if (sock->socket == NULL) {
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	691b      	ldr	r3, [r3, #16]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d107      	bne.n	8008a80 <csp_socket+0xe4>
			csp_close(sock);
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	f7ff fcca 	bl	800840a <csp_close>
			return NULL;
 8008a76:	2300      	movs	r3, #0
 8008a78:	e006      	b.n	8008a88 <csp_socket+0xec>
                }
	} else {
		sock->socket = NULL;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	611a      	str	r2, [r3, #16]
	}
	sock->opts = opts;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	619a      	str	r2, [r3, #24]

	return sock;
 8008a86:	68fb      	ldr	r3, [r7, #12]

}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3710      	adds	r7, #16
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	2400008c 	.word	0x2400008c
 8008a94:	08013b20 	.word	0x08013b20
 8008a98:	08013b78 	.word	0x08013b78
 8008a9c:	08013bd0 	.word	0x08013bd0
 8008aa0:	08013c28 	.word	0x08013c28
 8008aa4:	fffffeaa 	.word	0xfffffeaa
 8008aa8:	08013c84 	.word	0x08013c84
 8008aac:	24042c54 	.word	0x24042c54

08008ab0 <csp_accept>:

csp_conn_t * csp_accept(csp_socket_t * sock, uint32_t timeout) {
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]

	if (sock == NULL)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d101      	bne.n	8008ac4 <csp_accept+0x14>
		return NULL;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	e013      	b.n	8008aec <csp_accept+0x3c>

	if (sock->socket == NULL)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d101      	bne.n	8008ad0 <csp_accept+0x20>
		return NULL;
 8008acc:	2300      	movs	r3, #0
 8008ace:	e00d      	b.n	8008aec <csp_accept+0x3c>

	csp_conn_t * conn;
	if (csp_queue_dequeue(sock->socket, &conn, timeout) == CSP_QUEUE_OK)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	691b      	ldr	r3, [r3, #16]
 8008ad4:	f107 010c 	add.w	r1, r7, #12
 8008ad8:	683a      	ldr	r2, [r7, #0]
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7fe ff78 	bl	80079d0 <csp_queue_dequeue>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d101      	bne.n	8008aea <csp_accept+0x3a>
		return conn;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	e000      	b.n	8008aec <csp_accept+0x3c>

	return NULL;
 8008aea:	2300      	movs	r3, #0

}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3710      	adds	r7, #16
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <csp_read>:

csp_packet_t * csp_read(csp_conn_t * conn, uint32_t timeout) {
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]

	csp_packet_t * packet = NULL;
 8008afe:	2300      	movs	r3, #0
 8008b00:	60fb      	str	r3, [r7, #12]

	if ((conn == NULL) || (conn->state != CONN_OPEN)) {
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d003      	beq.n	8008b10 <csp_read+0x1c>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	785b      	ldrb	r3, [r3, #1]
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d001      	beq.n	8008b14 <csp_read+0x20>
		return NULL;
 8008b10:	2300      	movs	r3, #0
 8008b12:	e00d      	b.n	8008b30 <csp_read+0x3c>
		if (csp_queue_dequeue(conn->rx_queue[prio], &packet, 0) == CSP_QUEUE_OK) {
			break;
		}
	}
#else
	if (csp_queue_dequeue(conn->rx_queue[0], &packet, timeout) != CSP_QUEUE_OK) {
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	68db      	ldr	r3, [r3, #12]
 8008b18:	f107 010c 	add.w	r1, r7, #12
 8008b1c:	683a      	ldr	r2, [r7, #0]
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7fe ff56 	bl	80079d0 <csp_queue_dequeue>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d001      	beq.n	8008b2e <csp_read+0x3a>
		return NULL;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	e000      	b.n	8008b30 <csp_read+0x3c>
	if ((conn->idin.flags & CSP_FRDP) && conn->rdp.delayed_acks) {
		csp_rdp_check_ack(conn);
	}
#endif

	return packet;
 8008b2e:	68fb      	ldr	r3, [r7, #12]

}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3710      	adds	r7, #16
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <csp_send_direct>:

int csp_send_direct(csp_id_t idout, csp_packet_t * packet, const csp_route_t * ifroute, uint32_t timeout) {
 8008b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b3a:	b08f      	sub	sp, #60	@ 0x3c
 8008b3c:	af08      	add	r7, sp, #32
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	607a      	str	r2, [r7, #4]
 8008b44:	603b      	str	r3, [r7, #0]

	if (packet == NULL) {
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d109      	bne.n	8008b60 <csp_send_direct+0x28>
		csp_log_error("csp_send_direct called with NULL packet");
 8008b4c:	4b66      	ldr	r3, [pc, #408]	@ (8008ce8 <csp_send_direct+0x1b0>)
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	f000 80c0 	beq.w	8008cd6 <csp_send_direct+0x19e>
 8008b56:	4965      	ldr	r1, [pc, #404]	@ (8008cec <csp_send_direct+0x1b4>)
 8008b58:	2000      	movs	r0, #0
 8008b5a:	f7ff fdd9 	bl	8008710 <do_csp_debug>
		goto err;
 8008b5e:	e0ba      	b.n	8008cd6 <csp_send_direct+0x19e>
	}

	if (ifroute == NULL) {
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d10f      	bne.n	8008b86 <csp_send_direct+0x4e>
		csp_log_error("No route to host: %u (0x%08"PRIx32")", idout.dst, idout.ext);
 8008b66:	4b60      	ldr	r3, [pc, #384]	@ (8008ce8 <csp_send_direct+0x1b0>)
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f000 80b5 	beq.w	8008cda <csp_send_direct+0x1a2>
 8008b70:	89fb      	ldrh	r3, [r7, #14]
 8008b72:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	461a      	mov	r2, r3
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	495c      	ldr	r1, [pc, #368]	@ (8008cf0 <csp_send_direct+0x1b8>)
 8008b7e:	2000      	movs	r0, #0
 8008b80:	f7ff fdc6 	bl	8008710 <do_csp_debug>
		goto err;
 8008b84:	e0a9      	b.n	8008cda <csp_send_direct+0x1a2>
	}

	csp_iface_t * ifout = ifroute->iface;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	617b      	str	r3, [r7, #20]

	csp_log_packet("OUT: S %u, D %u, Dp %u, Sp %u, Pr %u, Fl 0x%02X, Sz %u VIA: %s (%u)",
 8008b8c:	4b56      	ldr	r3, [pc, #344]	@ (8008ce8 <csp_send_direct+0x1b0>)
 8008b8e:	791b      	ldrb	r3, [r3, #4]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d037      	beq.n	8008c04 <csp_send_direct+0xcc>
 8008b94:	7bfb      	ldrb	r3, [r7, #15]
 8008b96:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	469c      	mov	ip, r3
 8008b9e:	89fb      	ldrh	r3, [r7, #14]
 8008ba0:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	469e      	mov	lr, r3
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f3c3 3385 	ubfx	r3, r3, #14, #6
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	7b7b      	ldrb	r3, [r7, #13]
 8008bb4:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	4618      	mov	r0, r3
 8008bbc:	7bfb      	ldrb	r3, [r7, #15]
 8008bbe:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	461c      	mov	r4, r3
 8008bc6:	7b3b      	ldrb	r3, [r7, #12]
 8008bc8:	461d      	mov	r5, r3
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	895b      	ldrh	r3, [r3, #10]
 8008bce:	461e      	mov	r6, r3
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	7912      	ldrb	r2, [r2, #4]
 8008bd8:	2aff      	cmp	r2, #255	@ 0xff
 8008bda:	d002      	beq.n	8008be2 <csp_send_direct+0xaa>
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	7912      	ldrb	r2, [r2, #4]
 8008be0:	e003      	b.n	8008bea <csp_send_direct+0xb2>
 8008be2:	89fa      	ldrh	r2, [r7, #14]
 8008be4:	f3c2 1204 	ubfx	r2, r2, #4, #5
 8008be8:	b2d2      	uxtb	r2, r2
 8008bea:	9206      	str	r2, [sp, #24]
 8008bec:	9305      	str	r3, [sp, #20]
 8008bee:	9604      	str	r6, [sp, #16]
 8008bf0:	9503      	str	r5, [sp, #12]
 8008bf2:	9402      	str	r4, [sp, #8]
 8008bf4:	9001      	str	r0, [sp, #4]
 8008bf6:	9100      	str	r1, [sp, #0]
 8008bf8:	4673      	mov	r3, lr
 8008bfa:	4662      	mov	r2, ip
 8008bfc:	493d      	ldr	r1, [pc, #244]	@ (8008cf4 <csp_send_direct+0x1bc>)
 8008bfe:	2004      	movs	r0, #4
 8008c00:	f7ff fd86 	bl	8008710 <do_csp_debug>
                       idout.src, idout.dst, idout.dport, idout.sport, idout.pri, idout.flags, packet->length, ifout->name, (ifroute->via != CSP_NO_VIA_ADDRESS) ? ifroute->via : idout.dst);

	/* Copy identifier to packet (before crc, xtea and hmac) */
	packet->id.ext = idout.ext;
 8008c04:	68fa      	ldr	r2, [r7, #12]
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	60da      	str	r2, [r3, #12]
		csp_promisc_add(packet);
	}
#endif

	/* Only encrypt packets from the current node */
	if (idout.src == csp_conf.address) {
 8008c0a:	7bfb      	ldrb	r3, [r7, #15]
 8008c0c:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	461a      	mov	r2, r3
 8008c14:	4b38      	ldr	r3, [pc, #224]	@ (8008cf8 <csp_send_direct+0x1c0>)
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d12d      	bne.n	8008c78 <csp_send_direct+0x140>
		/* Append HMAC */
		if (idout.flags & CSP_FHMAC) {
 8008c1c:	7b3b      	ldrb	r3, [r7, #12]
 8008c1e:	f003 0308 	and.w	r3, r3, #8
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d008      	beq.n	8008c38 <csp_send_direct+0x100>
				/* HMAC append failed */
				csp_log_warn("HMAC append failed!");
				goto tx_err;
			}
#else
			csp_log_warn("Attempt to send packet with HMAC, but CSP was compiled without HMAC support. Discarding packet");
 8008c26:	4b30      	ldr	r3, [pc, #192]	@ (8008ce8 <csp_send_direct+0x1b0>)
 8008c28:	785b      	ldrb	r3, [r3, #1]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d046      	beq.n	8008cbc <csp_send_direct+0x184>
 8008c2e:	4933      	ldr	r1, [pc, #204]	@ (8008cfc <csp_send_direct+0x1c4>)
 8008c30:	2001      	movs	r0, #1
 8008c32:	f7ff fd6d 	bl	8008710 <do_csp_debug>
			goto tx_err;
 8008c36:	e041      	b.n	8008cbc <csp_send_direct+0x184>
#endif
		}

		/* Append CRC32 */
		if (idout.flags & CSP_FCRC32) {
 8008c38:	7b3b      	ldrb	r3, [r7, #12]
 8008c3a:	f003 0301 	and.w	r3, r3, #1
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00c      	beq.n	8008c5c <csp_send_direct+0x124>
				/* CRC32 append failed */
				csp_log_warn("CRC32 append failed!");
				goto tx_err;
			}
#else
			csp_log_warn("Attempt to send packet with CRC32, but CSP was compiled without CRC32 support. Sending without CRC32r");
 8008c42:	4b29      	ldr	r3, [pc, #164]	@ (8008ce8 <csp_send_direct+0x1b0>)
 8008c44:	785b      	ldrb	r3, [r3, #1]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d003      	beq.n	8008c52 <csp_send_direct+0x11a>
 8008c4a:	492d      	ldr	r1, [pc, #180]	@ (8008d00 <csp_send_direct+0x1c8>)
 8008c4c:	2001      	movs	r0, #1
 8008c4e:	f7ff fd5f 	bl	8008710 <do_csp_debug>
			idout.flags &= ~(CSP_FCRC32);
 8008c52:	7b3b      	ldrb	r3, [r7, #12]
 8008c54:	f023 0301 	bic.w	r3, r3, #1
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	733b      	strb	r3, [r7, #12]
#endif
		}

		if (idout.flags & CSP_FXTEA) {
 8008c5c:	7b3b      	ldrb	r3, [r7, #12]
 8008c5e:	f003 0304 	and.w	r3, r3, #4
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d008      	beq.n	8008c78 <csp_send_direct+0x140>
				/* Encryption failed */
				csp_log_warn("XTEA Encryption failed!");
				goto tx_err;
			}
#else
			csp_log_warn("Attempt to send XTEA encrypted packet, but CSP was compiled without XTEA support. Discarding packet");
 8008c66:	4b20      	ldr	r3, [pc, #128]	@ (8008ce8 <csp_send_direct+0x1b0>)
 8008c68:	785b      	ldrb	r3, [r3, #1]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d028      	beq.n	8008cc0 <csp_send_direct+0x188>
 8008c6e:	4925      	ldr	r1, [pc, #148]	@ (8008d04 <csp_send_direct+0x1cc>)
 8008c70:	2001      	movs	r0, #1
 8008c72:	f7ff fd4d 	bl	8008710 <do_csp_debug>
			goto tx_err;
 8008c76:	e023      	b.n	8008cc0 <csp_send_direct+0x188>
#endif
		}
	}

	/* Store length before passing to interface */
	uint16_t bytes = packet->length;
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	895b      	ldrh	r3, [r3, #10]
 8008c7c:	827b      	strh	r3, [r7, #18]
	uint16_t mtu = ifout->mtu;
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	8a1b      	ldrh	r3, [r3, #16]
 8008c82:	823b      	strh	r3, [r7, #16]

	if (mtu > 0 && bytes > mtu)
 8008c84:	8a3b      	ldrh	r3, [r7, #16]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d003      	beq.n	8008c92 <csp_send_direct+0x15a>
 8008c8a:	8a7a      	ldrh	r2, [r7, #18]
 8008c8c:	8a3b      	ldrh	r3, [r7, #16]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d818      	bhi.n	8008cc4 <csp_send_direct+0x18c>
		goto tx_err;

	if ((*ifout->nexthop)(ifroute, packet) != CSP_ERR_NONE)
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	68b9      	ldr	r1, [r7, #8]
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	4798      	blx	r3
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d112      	bne.n	8008cc8 <csp_send_direct+0x190>
		goto tx_err;

	ifout->tx++;
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	695b      	ldr	r3, [r3, #20]
 8008ca6:	1c5a      	adds	r2, r3, #1
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	615a      	str	r2, [r3, #20]
	ifout->txbytes += bytes;
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008cb0:	8a7b      	ldrh	r3, [r7, #18]
 8008cb2:	441a      	add	r2, r3
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	631a      	str	r2, [r3, #48]	@ 0x30
	return CSP_ERR_NONE;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	e011      	b.n	8008ce0 <csp_send_direct+0x1a8>
			goto tx_err;
 8008cbc:	bf00      	nop
 8008cbe:	e004      	b.n	8008cca <csp_send_direct+0x192>
			goto tx_err;
 8008cc0:	bf00      	nop
 8008cc2:	e002      	b.n	8008cca <csp_send_direct+0x192>
		goto tx_err;
 8008cc4:	bf00      	nop
 8008cc6:	e000      	b.n	8008cca <csp_send_direct+0x192>
		goto tx_err;
 8008cc8:	bf00      	nop

tx_err:
	ifout->tx_error++;
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	69db      	ldr	r3, [r3, #28]
 8008cce:	1c5a      	adds	r2, r3, #1
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	61da      	str	r2, [r3, #28]
 8008cd4:	e002      	b.n	8008cdc <csp_send_direct+0x1a4>
		goto err;
 8008cd6:	bf00      	nop
 8008cd8:	e000      	b.n	8008cdc <csp_send_direct+0x1a4>
		goto err;
 8008cda:	bf00      	nop
err:
	return CSP_ERR_TX;
 8008cdc:	f06f 0309 	mvn.w	r3, #9

}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	371c      	adds	r7, #28
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ce8:	2400008c 	.word	0x2400008c
 8008cec:	08013c9c 	.word	0x08013c9c
 8008cf0:	08013cc4 	.word	0x08013cc4
 8008cf4:	08013ce4 	.word	0x08013ce4
 8008cf8:	24042c54 	.word	0x24042c54
 8008cfc:	08013d28 	.word	0x08013d28
 8008d00:	08013d88 	.word	0x08013d88
 8008d04:	08013df0 	.word	0x08013df0

08008d08 <csp_send>:

int csp_send(csp_conn_t * conn, csp_packet_t * packet, uint32_t timeout) {
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b086      	sub	sp, #24
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	60b9      	str	r1, [r7, #8]
 8008d12:	607a      	str	r2, [r7, #4]

	if ((conn == NULL) || (packet == NULL) || (conn->state != CONN_OPEN)) {
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d006      	beq.n	8008d28 <csp_send+0x20>
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d003      	beq.n	8008d28 <csp_send+0x20>
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	785b      	ldrb	r3, [r3, #1]
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d009      	beq.n	8008d3c <csp_send+0x34>
		csp_log_error("Invalid call to csp_send");
 8008d28:	4b11      	ldr	r3, [pc, #68]	@ (8008d70 <csp_send+0x68>)
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d003      	beq.n	8008d38 <csp_send+0x30>
 8008d30:	4910      	ldr	r1, [pc, #64]	@ (8008d74 <csp_send+0x6c>)
 8008d32:	2000      	movs	r0, #0
 8008d34:	f7ff fcec 	bl	8008710 <do_csp_debug>
		return 0;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	e015      	b.n	8008d68 <csp_send+0x60>
			return 0;
		}
	}
#endif

	int ret = csp_send_direct(conn->idout, packet, csp_rtable_find_route(conn->idout.dst), timeout);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	895b      	ldrh	r3, [r3, #10]
 8008d40:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	4618      	mov	r0, r3
 8008d48:	f001 f89e 	bl	8009e88 <csp_rtable_find_route>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	68f8      	ldr	r0, [r7, #12]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	68b9      	ldr	r1, [r7, #8]
 8008d54:	6880      	ldr	r0, [r0, #8]
 8008d56:	f7ff feef 	bl	8008b38 <csp_send_direct>
 8008d5a:	6178      	str	r0, [r7, #20]

	return (ret == CSP_ERR_NONE) ? 1 : 0;
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	bf0c      	ite	eq
 8008d62:	2301      	moveq	r3, #1
 8008d64:	2300      	movne	r3, #0
 8008d66:	b2db      	uxtb	r3, r3

}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3718      	adds	r7, #24
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	2400008c 	.word	0x2400008c
 8008d74:	08013e54 	.word	0x08013e54

08008d78 <csp_port_get_socket>:
#include "csp_init.h"

/* Dynamic allocated port array */
static csp_port_t * ports;

csp_socket_t * csp_port_get_socket(unsigned int port) {
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]

	if (port > csp_conf.port_max_bind) {
 8008d80:	4b18      	ldr	r3, [pc, #96]	@ (8008de4 <csp_port_get_socket+0x6c>)
 8008d82:	7cdb      	ldrb	r3, [r3, #19]
 8008d84:	461a      	mov	r2, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d901      	bls.n	8008d90 <csp_port_get_socket+0x18>
		return NULL;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	e022      	b.n	8008dd6 <csp_port_get_socket+0x5e>
	}

	/* Match dport to socket or local "catch all" port number */
	if (ports[port].state == PORT_OPEN) {
 8008d90:	4b15      	ldr	r3, [pc, #84]	@ (8008de8 <csp_port_get_socket+0x70>)
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	00db      	lsls	r3, r3, #3
 8008d98:	4413      	add	r3, r2
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d106      	bne.n	8008dae <csp_port_get_socket+0x36>
		return ports[port].socket;
 8008da0:	4b11      	ldr	r3, [pc, #68]	@ (8008de8 <csp_port_get_socket+0x70>)
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	00db      	lsls	r3, r3, #3
 8008da8:	4413      	add	r3, r2
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	e013      	b.n	8008dd6 <csp_port_get_socket+0x5e>
	}

	if (ports[csp_conf.port_max_bind + 1].state == PORT_OPEN) {
 8008dae:	4b0e      	ldr	r3, [pc, #56]	@ (8008de8 <csp_port_get_socket+0x70>)
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	4b0c      	ldr	r3, [pc, #48]	@ (8008de4 <csp_port_get_socket+0x6c>)
 8008db4:	7cdb      	ldrb	r3, [r3, #19]
 8008db6:	3301      	adds	r3, #1
 8008db8:	00db      	lsls	r3, r3, #3
 8008dba:	4413      	add	r3, r2
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d108      	bne.n	8008dd4 <csp_port_get_socket+0x5c>
		return ports[csp_conf.port_max_bind + 1].socket;
 8008dc2:	4b09      	ldr	r3, [pc, #36]	@ (8008de8 <csp_port_get_socket+0x70>)
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	4b07      	ldr	r3, [pc, #28]	@ (8008de4 <csp_port_get_socket+0x6c>)
 8008dc8:	7cdb      	ldrb	r3, [r3, #19]
 8008dca:	3301      	adds	r3, #1
 8008dcc:	00db      	lsls	r3, r3, #3
 8008dce:	4413      	add	r3, r2
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	e000      	b.n	8008dd6 <csp_port_get_socket+0x5e>
	}

	return NULL;
 8008dd4:	2300      	movs	r3, #0

}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	370c      	adds	r7, #12
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr
 8008de2:	bf00      	nop
 8008de4:	24042c54 	.word	0x24042c54
 8008de8:	24042c74 	.word	0x24042c74

08008dec <csp_port_init>:

int csp_port_init(void) {
 8008dec:	b580      	push	{r7, lr}
 8008dee:	af00      	add	r7, sp, #0

	ports = csp_calloc(csp_conf.port_max_bind + 2, sizeof(*ports)); // +2 for max port and CSP_ANY
 8008df0:	4b09      	ldr	r3, [pc, #36]	@ (8008e18 <csp_port_init+0x2c>)
 8008df2:	7cdb      	ldrb	r3, [r3, #19]
 8008df4:	3302      	adds	r3, #2
 8008df6:	2108      	movs	r1, #8
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7fe fd83 	bl	8007904 <csp_calloc>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	4a06      	ldr	r2, [pc, #24]	@ (8008e1c <csp_port_init+0x30>)
 8008e02:	6013      	str	r3, [r2, #0]
	if (ports == NULL) {
 8008e04:	4b05      	ldr	r3, [pc, #20]	@ (8008e1c <csp_port_init+0x30>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d102      	bne.n	8008e12 <csp_port_init+0x26>
		return CSP_ERR_NOMEM;
 8008e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e10:	e000      	b.n	8008e14 <csp_port_init+0x28>
	}

	return CSP_ERR_NONE;
 8008e12:	2300      	movs	r3, #0

}
 8008e14:	4618      	mov	r0, r3
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	24042c54 	.word	0x24042c54
 8008e1c:	24042c74 	.word	0x24042c74

08008e20 <csp_listen>:

	csp_free(ports);
	ports = NULL;
}

int csp_listen(csp_socket_t * socket, size_t backlog) {
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
	
	if (socket == NULL)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d102      	bne.n	8008e36 <csp_listen+0x16>
		return CSP_ERR_INVAL;
 8008e30:	f06f 0301 	mvn.w	r3, #1
 8008e34:	e015      	b.n	8008e62 <csp_listen+0x42>

	socket->socket = csp_queue_create(backlog, sizeof(csp_conn_t *));
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	2104      	movs	r1, #4
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7fe fd88 	bl	8007950 <csp_queue_create>
 8008e40:	4602      	mov	r2, r0
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	611a      	str	r2, [r3, #16]
	if (socket->socket == NULL)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d102      	bne.n	8008e54 <csp_listen+0x34>
		return CSP_ERR_NOMEM;
 8008e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8008e52:	e006      	b.n	8008e62 <csp_listen+0x42>

        socket->opts |= CSP_SO_INTERNAL_LISTEN;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	699b      	ldr	r3, [r3, #24]
 8008e58:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	619a      	str	r2, [r3, #24]

	return CSP_ERR_NONE;
 8008e60:	2300      	movs	r3, #0

}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3708      	adds	r7, #8
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
	...

08008e6c <csp_bind>:

int csp_bind(csp_socket_t * socket, uint8_t port) {
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	460b      	mov	r3, r1
 8008e76:	70fb      	strb	r3, [r7, #3]
	
	if (socket == NULL)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d102      	bne.n	8008e84 <csp_bind+0x18>
		return CSP_ERR_INVAL;
 8008e7e:	f06f 0301 	mvn.w	r3, #1
 8008e82:	e048      	b.n	8008f16 <csp_bind+0xaa>

	if (port == CSP_ANY) {
 8008e84:	78fb      	ldrb	r3, [r7, #3]
 8008e86:	2bff      	cmp	r3, #255	@ 0xff
 8008e88:	d104      	bne.n	8008e94 <csp_bind+0x28>
		port = csp_conf.port_max_bind + 1;
 8008e8a:	4b25      	ldr	r3, [pc, #148]	@ (8008f20 <csp_bind+0xb4>)
 8008e8c:	7cdb      	ldrb	r3, [r3, #19]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	70fb      	strb	r3, [r7, #3]
 8008e92:	e012      	b.n	8008eba <csp_bind+0x4e>
	} else if (port > csp_conf.port_max_bind) {
 8008e94:	4b22      	ldr	r3, [pc, #136]	@ (8008f20 <csp_bind+0xb4>)
 8008e96:	7cdb      	ldrb	r3, [r3, #19]
 8008e98:	78fa      	ldrb	r2, [r7, #3]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d90d      	bls.n	8008eba <csp_bind+0x4e>
		csp_log_error("csp_bind: invalid port %u, only ports from 0-%u (+ CSP_ANY for default) are available for incoming ports", port, csp_conf.port_max_bind);
 8008e9e:	4b21      	ldr	r3, [pc, #132]	@ (8008f24 <csp_bind+0xb8>)
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d006      	beq.n	8008eb4 <csp_bind+0x48>
 8008ea6:	78fa      	ldrb	r2, [r7, #3]
 8008ea8:	4b1d      	ldr	r3, [pc, #116]	@ (8008f20 <csp_bind+0xb4>)
 8008eaa:	7cdb      	ldrb	r3, [r3, #19]
 8008eac:	491e      	ldr	r1, [pc, #120]	@ (8008f28 <csp_bind+0xbc>)
 8008eae:	2000      	movs	r0, #0
 8008eb0:	f7ff fc2e 	bl	8008710 <do_csp_debug>
		return CSP_ERR_INVAL;
 8008eb4:	f06f 0301 	mvn.w	r3, #1
 8008eb8:	e02d      	b.n	8008f16 <csp_bind+0xaa>
	}

	if (ports[port].state != PORT_CLOSED) {
 8008eba:	4b1c      	ldr	r3, [pc, #112]	@ (8008f2c <csp_bind+0xc0>)
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	78fb      	ldrb	r3, [r7, #3]
 8008ec0:	00db      	lsls	r3, r3, #3
 8008ec2:	4413      	add	r3, r2
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00c      	beq.n	8008ee4 <csp_bind+0x78>
		csp_log_error("Port %d is already in use", port);
 8008eca:	4b16      	ldr	r3, [pc, #88]	@ (8008f24 <csp_bind+0xb8>)
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d005      	beq.n	8008ede <csp_bind+0x72>
 8008ed2:	78fb      	ldrb	r3, [r7, #3]
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	4916      	ldr	r1, [pc, #88]	@ (8008f30 <csp_bind+0xc4>)
 8008ed8:	2000      	movs	r0, #0
 8008eda:	f7ff fc19 	bl	8008710 <do_csp_debug>
		return CSP_ERR_USED;
 8008ede:	f06f 0303 	mvn.w	r3, #3
 8008ee2:	e018      	b.n	8008f16 <csp_bind+0xaa>
	}

	csp_log_info("Binding socket %p to port %u", socket, port);
 8008ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8008f24 <csp_bind+0xb8>)
 8008ee6:	789b      	ldrb	r3, [r3, #2]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d005      	beq.n	8008ef8 <csp_bind+0x8c>
 8008eec:	78fb      	ldrb	r3, [r7, #3]
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	4910      	ldr	r1, [pc, #64]	@ (8008f34 <csp_bind+0xc8>)
 8008ef2:	2002      	movs	r0, #2
 8008ef4:	f7ff fc0c 	bl	8008710 <do_csp_debug>

	/* Save listener */
	ports[port].socket = socket;
 8008ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8008f2c <csp_bind+0xc0>)
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	78fb      	ldrb	r3, [r7, #3]
 8008efe:	00db      	lsls	r3, r3, #3
 8008f00:	4413      	add	r3, r2
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	605a      	str	r2, [r3, #4]
	ports[port].state = PORT_OPEN;
 8008f06:	4b09      	ldr	r3, [pc, #36]	@ (8008f2c <csp_bind+0xc0>)
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	78fb      	ldrb	r3, [r7, #3]
 8008f0c:	00db      	lsls	r3, r3, #3
 8008f0e:	4413      	add	r3, r2
 8008f10:	2201      	movs	r2, #1
 8008f12:	701a      	strb	r2, [r3, #0]

	return CSP_ERR_NONE;
 8008f14:	2300      	movs	r3, #0

}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3708      	adds	r7, #8
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	24042c54 	.word	0x24042c54
 8008f24:	2400008c 	.word	0x2400008c
 8008f28:	08013fc8 	.word	0x08013fc8
 8008f2c:	24042c74 	.word	0x24042c74
 8008f30:	08014034 	.word	0x08014034
 8008f34:	08014050 	.word	0x08014050

08008f38 <csp_qfifo_init>:
static csp_queue_handle_t qfifo[CSP_ROUTE_FIFOS];
#if (CSP_USE_QOS)
static csp_queue_handle_t qfifo_events;
#endif

int csp_qfifo_init(void) {
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0

	/* Create router fifos for each priority */
	for (int prio = 0; prio < CSP_ROUTE_FIFOS; prio++) {
 8008f3e:	2300      	movs	r3, #0
 8008f40:	607b      	str	r3, [r7, #4]
 8008f42:	e01c      	b.n	8008f7e <csp_qfifo_init+0x46>
		if (qfifo[prio] == NULL) {
 8008f44:	4a12      	ldr	r2, [pc, #72]	@ (8008f90 <csp_qfifo_init+0x58>)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d113      	bne.n	8008f78 <csp_qfifo_init+0x40>
			qfifo[prio] = csp_queue_create(csp_conf.fifo_length, sizeof(csp_qfifo_t));
 8008f50:	4b10      	ldr	r3, [pc, #64]	@ (8008f94 <csp_qfifo_init+0x5c>)
 8008f52:	7c9b      	ldrb	r3, [r3, #18]
 8008f54:	2108      	movs	r1, #8
 8008f56:	4618      	mov	r0, r3
 8008f58:	f7fe fcfa 	bl	8007950 <csp_queue_create>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	490c      	ldr	r1, [pc, #48]	@ (8008f90 <csp_qfifo_init+0x58>)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (!qfifo[prio])
 8008f66:	4a0a      	ldr	r2, [pc, #40]	@ (8008f90 <csp_qfifo_init+0x58>)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d102      	bne.n	8008f78 <csp_qfifo_init+0x40>
				return CSP_ERR_NOMEM;
 8008f72:	f04f 33ff 	mov.w	r3, #4294967295
 8008f76:	e006      	b.n	8008f86 <csp_qfifo_init+0x4e>
	for (int prio = 0; prio < CSP_ROUTE_FIFOS; prio++) {
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	607b      	str	r3, [r7, #4]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	dddf      	ble.n	8008f44 <csp_qfifo_init+0xc>
	if (!qfifo_events) {
		return CSP_ERR_NOMEM;
	}
#endif

	return CSP_ERR_NONE;
 8008f84:	2300      	movs	r3, #0

}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3708      	adds	r7, #8
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	24042c78 	.word	0x24042c78
 8008f94:	24042c54 	.word	0x24042c54

08008f98 <csp_qfifo_read>:
	}
#endif

}

int csp_qfifo_read(csp_qfifo_t * input) {
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
	if (!found) {
		csp_log_warn("Spurious wakeup: No packet found");
		return CSP_ERR_TIMEDOUT;
	}
#else
	if (csp_queue_dequeue(qfifo[0], input, FIFO_TIMEOUT) != CSP_QUEUE_OK)
 8008fa0:	4b09      	ldr	r3, [pc, #36]	@ (8008fc8 <csp_qfifo_read+0x30>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8008fa8:	6879      	ldr	r1, [r7, #4]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7fe fd10 	bl	80079d0 <csp_queue_dequeue>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d002      	beq.n	8008fbc <csp_qfifo_read+0x24>
		return CSP_ERR_TIMEDOUT;
 8008fb6:	f06f 0302 	mvn.w	r3, #2
 8008fba:	e000      	b.n	8008fbe <csp_qfifo_read+0x26>
#endif

	return CSP_ERR_NONE;
 8008fbc:	2300      	movs	r3, #0

}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3708      	adds	r7, #8
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	24042c78 	.word	0x24042c78

08008fcc <csp_qfifo_write>:

void csp_qfifo_write(csp_packet_t * packet, csp_iface_t * iface, CSP_BASE_TYPE * pxTaskWoken) {
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b088      	sub	sp, #32
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	607a      	str	r2, [r7, #4]

	int result;

	if (packet == NULL) {
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d10b      	bne.n	8008ff6 <csp_qfifo_write+0x2a>
		if (pxTaskWoken == NULL) { // Only do logging in non-ISR context
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d15f      	bne.n	80090a4 <csp_qfifo_write+0xd8>
			csp_log_warn("csp_new packet called with NULL packet");
 8008fe4:	4b31      	ldr	r3, [pc, #196]	@ (80090ac <csp_qfifo_write+0xe0>)
 8008fe6:	785b      	ldrb	r3, [r3, #1]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d05b      	beq.n	80090a4 <csp_qfifo_write+0xd8>
 8008fec:	4930      	ldr	r1, [pc, #192]	@ (80090b0 <csp_qfifo_write+0xe4>)
 8008fee:	2001      	movs	r0, #1
 8008ff0:	f7ff fb8e 	bl	8008710 <do_csp_debug>
		}
		return;
 8008ff4:	e056      	b.n	80090a4 <csp_qfifo_write+0xd8>
	}

	if (iface == NULL) {
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d115      	bne.n	8009028 <csp_qfifo_write+0x5c>
		if (pxTaskWoken == NULL) { // Only do logging in non-ISR context
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d107      	bne.n	8009012 <csp_qfifo_write+0x46>
			csp_log_warn("csp_new packet called with NULL interface");
 8009002:	4b2a      	ldr	r3, [pc, #168]	@ (80090ac <csp_qfifo_write+0xe0>)
 8009004:	785b      	ldrb	r3, [r3, #1]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d003      	beq.n	8009012 <csp_qfifo_write+0x46>
 800900a:	492a      	ldr	r1, [pc, #168]	@ (80090b4 <csp_qfifo_write+0xe8>)
 800900c:	2001      	movs	r0, #1
 800900e:	f7ff fb7f 	bl	8008710 <do_csp_debug>
		}
		if (pxTaskWoken == NULL)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d103      	bne.n	8009020 <csp_qfifo_write+0x54>
			csp_buffer_free(packet);
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	f7fe ff53 	bl	8007ec4 <csp_buffer_free>
		else
			csp_buffer_free_isr(packet);
		return;
 800901e:	e042      	b.n	80090a6 <csp_qfifo_write+0xda>
			csp_buffer_free_isr(packet);
 8009020:	68f8      	ldr	r0, [r7, #12]
 8009022:	f7fe ff15 	bl	8007e50 <csp_buffer_free_isr>
		return;
 8009026:	e03e      	b.n	80090a6 <csp_qfifo_write+0xda>
	}

	csp_qfifo_t queue_element;
	queue_element.iface = iface;
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	613b      	str	r3, [r7, #16]
	queue_element.packet = packet;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	617b      	str	r3, [r7, #20]

#if (CSP_USE_QOS)
	int fifo = packet->id.pri;
#else
	int fifo = 0;
 8009030:	2300      	movs	r3, #0
 8009032:	61bb      	str	r3, [r7, #24]
#endif

	if (pxTaskWoken == NULL)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d10b      	bne.n	8009052 <csp_qfifo_write+0x86>
		result = csp_queue_enqueue(qfifo[fifo], &queue_element, 0);
 800903a:	4a1f      	ldr	r2, [pc, #124]	@ (80090b8 <csp_qfifo_write+0xec>)
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009042:	f107 0110 	add.w	r1, r7, #16
 8009046:	2200      	movs	r2, #0
 8009048:	4618      	mov	r0, r3
 800904a:	f7fe fc9c 	bl	8007986 <csp_queue_enqueue>
 800904e:	61f8      	str	r0, [r7, #28]
 8009050:	e00a      	b.n	8009068 <csp_qfifo_write+0x9c>
	else
		result = csp_queue_enqueue_isr(qfifo[fifo], &queue_element, pxTaskWoken);
 8009052:	4a19      	ldr	r2, [pc, #100]	@ (80090b8 <csp_qfifo_write+0xec>)
 8009054:	69bb      	ldr	r3, [r7, #24]
 8009056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800905a:	f107 0110 	add.w	r1, r7, #16
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	4618      	mov	r0, r3
 8009062:	f7fe fca4 	bl	80079ae <csp_queue_enqueue_isr>
 8009066:	61f8      	str	r0, [r7, #28]
		else
			csp_queue_enqueue_isr(qfifo_events, &event, pxTaskWoken);
	}
#endif

	if (result != CSP_QUEUE_OK) {
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	2b01      	cmp	r3, #1
 800906c:	d01b      	beq.n	80090a6 <csp_qfifo_write+0xda>
		if (pxTaskWoken == NULL) { // Only do logging in non-ISR context
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d107      	bne.n	8009084 <csp_qfifo_write+0xb8>
			csp_log_warn("ERROR: Routing input FIFO is FULL. Dropping packet.");
 8009074:	4b0d      	ldr	r3, [pc, #52]	@ (80090ac <csp_qfifo_write+0xe0>)
 8009076:	785b      	ldrb	r3, [r3, #1]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d003      	beq.n	8009084 <csp_qfifo_write+0xb8>
 800907c:	490f      	ldr	r1, [pc, #60]	@ (80090bc <csp_qfifo_write+0xf0>)
 800907e:	2001      	movs	r0, #1
 8009080:	f7ff fb46 	bl	8008710 <do_csp_debug>
		}
		iface->drop++;
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009088:	1c5a      	adds	r2, r3, #1
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	625a      	str	r2, [r3, #36]	@ 0x24
		if (pxTaskWoken == NULL)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d103      	bne.n	800909c <csp_qfifo_write+0xd0>
			csp_buffer_free(packet);
 8009094:	68f8      	ldr	r0, [r7, #12]
 8009096:	f7fe ff15 	bl	8007ec4 <csp_buffer_free>
 800909a:	e004      	b.n	80090a6 <csp_qfifo_write+0xda>
		else
			csp_buffer_free_isr(packet);
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f7fe fed7 	bl	8007e50 <csp_buffer_free_isr>
 80090a2:	e000      	b.n	80090a6 <csp_qfifo_write+0xda>
		return;
 80090a4:	bf00      	nop
	}

}
 80090a6:	3720      	adds	r7, #32
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	2400008c 	.word	0x2400008c
 80090b0:	08014070 	.word	0x08014070
 80090b4:	08014098 	.word	0x08014098
 80090b8:	24042c78 	.word	0x24042c78
 80090bc:	080140c4 	.word	0x080140c4

080090c0 <csp_route_check_options>:
 * @param iface pointer to incoming interface
 * @param packet pointer to packet
 * @return CSP_ERR_NONE is all options are supported, CSP_ERR_NOTSUP if not
 */
static int csp_route_check_options(csp_iface_t *iface, csp_packet_t *packet)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
#if (CSP_USE_XTEA == 0)
	/* Drop XTEA packets */
	if (packet->id.flags & CSP_FXTEA) {
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	7b1b      	ldrb	r3, [r3, #12]
 80090ce:	f003 0304 	and.w	r3, r3, #4
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d00f      	beq.n	80090f6 <csp_route_check_options+0x36>
		csp_log_error("Received XTEA encrypted packet, but CSP was compiled without XTEA support. Discarding packet");
 80090d6:	4b20      	ldr	r3, [pc, #128]	@ (8009158 <csp_route_check_options+0x98>)
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d003      	beq.n	80090e6 <csp_route_check_options+0x26>
 80090de:	491f      	ldr	r1, [pc, #124]	@ (800915c <csp_route_check_options+0x9c>)
 80090e0:	2000      	movs	r0, #0
 80090e2:	f7ff fb15 	bl	8008710 <do_csp_debug>
		iface->autherr++;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090ea:	1c5a      	adds	r2, r3, #1
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	629a      	str	r2, [r3, #40]	@ 0x28
		return CSP_ERR_NOTSUP;
 80090f0:	f06f 0304 	mvn.w	r3, #4
 80090f4:	e02c      	b.n	8009150 <csp_route_check_options+0x90>
	}
#endif

#if (CSP_USE_HMAC == 0)
	/* Drop HMAC packets */
	if (packet->id.flags & CSP_FHMAC) {
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	7b1b      	ldrb	r3, [r3, #12]
 80090fa:	f003 0308 	and.w	r3, r3, #8
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00f      	beq.n	8009122 <csp_route_check_options+0x62>
		csp_log_error("Received packet with HMAC, but CSP was compiled without HMAC support. Discarding packet");
 8009102:	4b15      	ldr	r3, [pc, #84]	@ (8009158 <csp_route_check_options+0x98>)
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d003      	beq.n	8009112 <csp_route_check_options+0x52>
 800910a:	4915      	ldr	r1, [pc, #84]	@ (8009160 <csp_route_check_options+0xa0>)
 800910c:	2000      	movs	r0, #0
 800910e:	f7ff faff 	bl	8008710 <do_csp_debug>
		iface->autherr++;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009116:	1c5a      	adds	r2, r3, #1
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	629a      	str	r2, [r3, #40]	@ 0x28
		return CSP_ERR_NOTSUP;
 800911c:	f06f 0304 	mvn.w	r3, #4
 8009120:	e016      	b.n	8009150 <csp_route_check_options+0x90>
	}
#endif

#if (CSP_USE_RDP == 0)
	/* Drop RDP packets */
	if (packet->id.flags & CSP_FRDP) {
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	7b1b      	ldrb	r3, [r3, #12]
 8009126:	f003 0302 	and.w	r3, r3, #2
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00f      	beq.n	800914e <csp_route_check_options+0x8e>
		csp_log_error("Received RDP packet, but CSP was compiled without RDP support. Discarding packet");
 800912e:	4b0a      	ldr	r3, [pc, #40]	@ (8009158 <csp_route_check_options+0x98>)
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d003      	beq.n	800913e <csp_route_check_options+0x7e>
 8009136:	490b      	ldr	r1, [pc, #44]	@ (8009164 <csp_route_check_options+0xa4>)
 8009138:	2000      	movs	r0, #0
 800913a:	f7ff fae9 	bl	8008710 <do_csp_debug>
		iface->rx_error++;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6a1b      	ldr	r3, [r3, #32]
 8009142:	1c5a      	adds	r2, r3, #1
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	621a      	str	r2, [r3, #32]
		return CSP_ERR_NOTSUP;
 8009148:	f06f 0304 	mvn.w	r3, #4
 800914c:	e000      	b.n	8009150 <csp_route_check_options+0x90>
	}
#endif
	return CSP_ERR_NONE;
 800914e:	2300      	movs	r3, #0
}
 8009150:	4618      	mov	r0, r3
 8009152:	3708      	adds	r7, #8
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}
 8009158:	2400008c 	.word	0x2400008c
 800915c:	080140f8 	.word	0x080140f8
 8009160:	08014158 	.word	0x08014158
 8009164:	080141b0 	.word	0x080141b0

08009168 <csp_route_security_check>:
 * @param security_opts either socket_opts or conn_opts
 * @param iface pointer to incoming interface
 * @param packet pointer to packet
 * @return #CSP_ERR_NONE on success, otherwise an error code.
 */
static int csp_route_security_check(uint32_t security_opts, csp_iface_t * iface, csp_packet_t * packet) {
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	607a      	str	r2, [r7, #4]
		return CSP_ERR_XTEA;
	}
#endif

	/* CRC32 verified packet */
	if (packet->id.flags & CSP_FCRC32) {
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	7b1b      	ldrb	r3, [r3, #12]
 8009178:	f003 0301 	and.w	r3, r3, #1
 800917c:	2b00      	cmp	r3, #0
 800917e:	d01a      	beq.n	80091b6 <csp_route_security_check+0x4e>
			iface->rx_error++;
			return CSP_ERR_CRC32;
		}
#else
		/* No CRC32 validation - but size must be checked and adjusted */
		if (packet->length < sizeof(uint32_t)) {
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	895b      	ldrh	r3, [r3, #10]
 8009184:	2b03      	cmp	r3, #3
 8009186:	d80f      	bhi.n	80091a8 <csp_route_security_check+0x40>
			csp_log_error("CRC32 verification error! Discarding packet");
 8009188:	4b14      	ldr	r3, [pc, #80]	@ (80091dc <csp_route_security_check+0x74>)
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d003      	beq.n	8009198 <csp_route_security_check+0x30>
 8009190:	4913      	ldr	r1, [pc, #76]	@ (80091e0 <csp_route_security_check+0x78>)
 8009192:	2000      	movs	r0, #0
 8009194:	f7ff fabc 	bl	8008710 <do_csp_debug>
			iface->rx_error++;
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	6a1b      	ldr	r3, [r3, #32]
 800919c:	1c5a      	adds	r2, r3, #1
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	621a      	str	r2, [r3, #32]
			return CSP_ERR_CRC32;
 80091a2:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80091a6:	e014      	b.n	80091d2 <csp_route_security_check+0x6a>
		}
		packet->length -= sizeof(uint32_t);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	895b      	ldrh	r3, [r3, #10]
 80091ac:	3b04      	subs	r3, #4
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	815a      	strh	r2, [r3, #10]
 80091b4:	e00c      	b.n	80091d0 <csp_route_security_check+0x68>
#endif
	} else if (security_opts & CSP_SO_CRC32REQ) {
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d007      	beq.n	80091d0 <csp_route_security_check+0x68>
		csp_log_warn("Received packet with CRC32, but CSP was compiled without CRC32 support. Accepting packet");
 80091c0:	4b06      	ldr	r3, [pc, #24]	@ (80091dc <csp_route_security_check+0x74>)
 80091c2:	785b      	ldrb	r3, [r3, #1]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d003      	beq.n	80091d0 <csp_route_security_check+0x68>
 80091c8:	4906      	ldr	r1, [pc, #24]	@ (80091e4 <csp_route_security_check+0x7c>)
 80091ca:	2001      	movs	r0, #1
 80091cc:	f7ff faa0 	bl	8008710 <do_csp_debug>
			return CSP_ERR_INVAL;
		}
	}
#endif

	return CSP_ERR_NONE;
 80091d0:	2300      	movs	r3, #0

}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
 80091da:	bf00      	nop
 80091dc:	2400008c 	.word	0x2400008c
 80091e0:	08014204 	.word	0x08014204
 80091e4:	08014230 	.word	0x08014230

080091e8 <csp_route_work>:

int csp_route_work(uint32_t timeout) {
 80091e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091ea:	b091      	sub	sp, #68	@ 0x44
 80091ec:	af06      	add	r7, sp, #24
 80091ee:	6078      	str	r0, [r7, #4]
	/* Check connection timeouts (currently only for RDP) */
	csp_conn_check_timeouts();
#endif

	/* Get next packet to route */
	if (csp_qfifo_read(&input) != CSP_ERR_NONE) {
 80091f0:	f107 0314 	add.w	r3, r7, #20
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7ff fecf 	bl	8008f98 <csp_qfifo_read>
 80091fa:	4603      	mov	r3, r0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d002      	beq.n	8009206 <csp_route_work+0x1e>
		return CSP_ERR_TIMEDOUT;
 8009200:	f06f 0302 	mvn.w	r3, #2
 8009204:	e172      	b.n	80094ec <csp_route_work+0x304>
	}

	packet = input.packet;
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	613b      	str	r3, [r7, #16]
	if (packet == NULL) {
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d102      	bne.n	8009216 <csp_route_work+0x2e>
		return CSP_ERR_TIMEDOUT;
 8009210:	f06f 0302 	mvn.w	r3, #2
 8009214:	e16a      	b.n	80094ec <csp_route_work+0x304>
	}

	csp_log_packet("INP: S %u, D %u, Dp %u, Sp %u, Pr %u, Fl 0x%02X, Sz %"PRIu16" VIA: %s",
 8009216:	4ba3      	ldr	r3, [pc, #652]	@ (80094a4 <csp_route_work+0x2bc>)
 8009218:	791b      	ldrb	r3, [r3, #4]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d031      	beq.n	8009282 <csp_route_work+0x9a>
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	7bdb      	ldrb	r3, [r3, #15]
 8009222:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8009226:	b2db      	uxtb	r3, r3
 8009228:	461e      	mov	r6, r3
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	89db      	ldrh	r3, [r3, #14]
 800922e:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8009232:	b2db      	uxtb	r3, r3
 8009234:	469c      	mov	ip, r3
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	f3c3 3385 	ubfx	r3, r3, #14, #6
 800923e:	b2db      	uxtb	r3, r3
 8009240:	461a      	mov	r2, r3
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	7b5b      	ldrb	r3, [r3, #13]
 8009246:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800924a:	b2db      	uxtb	r3, r3
 800924c:	4619      	mov	r1, r3
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	7bdb      	ldrb	r3, [r3, #15]
 8009252:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8009256:	b2db      	uxtb	r3, r3
 8009258:	4618      	mov	r0, r3
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	7b1b      	ldrb	r3, [r3, #12]
 800925e:	461c      	mov	r4, r3
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	895b      	ldrh	r3, [r3, #10]
 8009264:	461d      	mov	r5, r3
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	9305      	str	r3, [sp, #20]
 800926c:	9504      	str	r5, [sp, #16]
 800926e:	9403      	str	r4, [sp, #12]
 8009270:	9002      	str	r0, [sp, #8]
 8009272:	9101      	str	r1, [sp, #4]
 8009274:	9200      	str	r2, [sp, #0]
 8009276:	4663      	mov	r3, ip
 8009278:	4632      	mov	r2, r6
 800927a:	498b      	ldr	r1, [pc, #556]	@ (80094a8 <csp_route_work+0x2c0>)
 800927c:	2004      	movs	r0, #4
 800927e:	f7ff fa47 	bl	8008710 <do_csp_debug>
		return CSP_ERR_NONE;
	}
#endif

	/* Now we count the message (since its deduplicated) */
	input.iface->rx++;
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	699a      	ldr	r2, [r3, #24]
 8009286:	3201      	adds	r2, #1
 8009288:	619a      	str	r2, [r3, #24]
	input.iface->rxbytes += packet->length;
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	895b      	ldrh	r3, [r3, #10]
 8009292:	4619      	mov	r1, r3
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	440a      	add	r2, r1
 8009298:	635a      	str	r2, [r3, #52]	@ 0x34

	/* If the message is not to me, route the message to the correct interface */
	if ((packet->id.dst != csp_conf.address) && (packet->id.dst != CSP_BROADCAST_ADDR)) {
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	89db      	ldrh	r3, [r3, #14]
 800929e:	f3c3 1304 	ubfx	r3, r3, #4, #5
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	461a      	mov	r2, r3
 80092a6:	4b81      	ldr	r3, [pc, #516]	@ (80094ac <csp_route_work+0x2c4>)
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d03a      	beq.n	8009324 <csp_route_work+0x13c>
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	89db      	ldrh	r3, [r3, #14]
 80092b2:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	f5b3 7ff8 	cmp.w	r3, #496	@ 0x1f0
 80092bc:	d032      	beq.n	8009324 <csp_route_work+0x13c>

		/* Find the destination interface */
		const csp_route_t * ifroute = csp_rtable_find_route(packet->id.dst);
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	89db      	ldrh	r3, [r3, #14]
 80092c2:	f3c3 1304 	ubfx	r3, r3, #4, #5
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	4618      	mov	r0, r3
 80092ca:	f000 fddd 	bl	8009e88 <csp_rtable_find_route>
 80092ce:	6238      	str	r0, [r7, #32]

		/* If the message resolves to the input interface, don't loop it back out */
		if ((ifroute == NULL) || ((ifroute->iface == input.iface) && (input.iface->split_horizon_off == 0))) {
 80092d0:	6a3b      	ldr	r3, [r7, #32]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d008      	beq.n	80092e8 <csp_route_work+0x100>
 80092d6:	6a3b      	ldr	r3, [r7, #32]
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d109      	bne.n	80092f4 <csp_route_work+0x10c>
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	7c9b      	ldrb	r3, [r3, #18]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d105      	bne.n	80092f4 <csp_route_work+0x10c>
			csp_buffer_free(packet);
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7fe fdea 	bl	8007ec4 <csp_buffer_free>
			return CSP_ERR_NONE;
 80092f0:	2300      	movs	r3, #0
 80092f2:	e0fb      	b.n	80094ec <csp_route_work+0x304>
		}

		/* Otherwise, actually send the message */
		if (csp_send_direct(packet->id, packet, ifroute, 0) != CSP_ERR_NONE) {
 80092f4:	6938      	ldr	r0, [r7, #16]
 80092f6:	6939      	ldr	r1, [r7, #16]
 80092f8:	2300      	movs	r3, #0
 80092fa:	6a3a      	ldr	r2, [r7, #32]
 80092fc:	68c0      	ldr	r0, [r0, #12]
 80092fe:	f7ff fc1b 	bl	8008b38 <csp_send_direct>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00b      	beq.n	8009320 <csp_route_work+0x138>
			csp_log_warn("Router failed to send");
 8009308:	4b66      	ldr	r3, [pc, #408]	@ (80094a4 <csp_route_work+0x2bc>)
 800930a:	785b      	ldrb	r3, [r3, #1]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d003      	beq.n	8009318 <csp_route_work+0x130>
 8009310:	4967      	ldr	r1, [pc, #412]	@ (80094b0 <csp_route_work+0x2c8>)
 8009312:	2001      	movs	r0, #1
 8009314:	f7ff f9fc 	bl	8008710 <do_csp_debug>
			csp_buffer_free(packet);
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	4618      	mov	r0, r3
 800931c:	f7fe fdd2 	bl	8007ec4 <csp_buffer_free>
		}

		/* Next message, please */
		return CSP_ERR_NONE;
 8009320:	2300      	movs	r3, #0
 8009322:	e0e3      	b.n	80094ec <csp_route_work+0x304>
	}

	/* Discard packets with unsupported options */
	if (csp_route_check_options(input.iface, packet) != CSP_ERR_NONE) {
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	693a      	ldr	r2, [r7, #16]
 8009328:	4611      	mov	r1, r2
 800932a:	4618      	mov	r0, r3
 800932c:	f7ff fec8 	bl	80090c0 <csp_route_check_options>
 8009330:	4603      	mov	r3, r0
 8009332:	2b00      	cmp	r3, #0
 8009334:	d005      	beq.n	8009342 <csp_route_work+0x15a>
		csp_buffer_free(packet);
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	4618      	mov	r0, r3
 800933a:	f7fe fdc3 	bl	8007ec4 <csp_buffer_free>
		return CSP_ERR_NONE;
 800933e:	2300      	movs	r3, #0
 8009340:	e0d4      	b.n	80094ec <csp_route_work+0x304>
	}

	/* The message is to me, search for incoming socket */
	socket = csp_port_get_socket(packet->id.dport);
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	f3c3 3385 	ubfx	r3, r3, #14, #6
 800934a:	b2db      	uxtb	r3, r3
 800934c:	4618      	mov	r0, r3
 800934e:	f7ff fd13 	bl	8008d78 <csp_port_get_socket>
 8009352:	61f8      	str	r0, [r7, #28]

	/* If the socket is connection-less, deliver now */
	if (socket && (socket->opts & CSP_SO_CONN_LESS)) {
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d030      	beq.n	80093bc <csp_route_work+0x1d4>
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	699b      	ldr	r3, [r3, #24]
 800935e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009362:	2b00      	cmp	r3, #0
 8009364:	d02a      	beq.n	80093bc <csp_route_work+0x1d4>
		if (csp_route_security_check(socket->opts, input.iface, packet) < 0) {
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	699b      	ldr	r3, [r3, #24]
 800936a:	6979      	ldr	r1, [r7, #20]
 800936c:	693a      	ldr	r2, [r7, #16]
 800936e:	4618      	mov	r0, r3
 8009370:	f7ff fefa 	bl	8009168 <csp_route_security_check>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	da05      	bge.n	8009386 <csp_route_work+0x19e>
			csp_buffer_free(packet);
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	4618      	mov	r0, r3
 800937e:	f7fe fda1 	bl	8007ec4 <csp_buffer_free>
			return CSP_ERR_NONE;
 8009382:	2300      	movs	r3, #0
 8009384:	e0b2      	b.n	80094ec <csp_route_work+0x304>
		}
		if (csp_queue_enqueue(socket->socket, &packet, 0) != CSP_QUEUE_OK) {
 8009386:	69fb      	ldr	r3, [r7, #28]
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	f107 0110 	add.w	r1, r7, #16
 800938e:	2200      	movs	r2, #0
 8009390:	4618      	mov	r0, r3
 8009392:	f7fe faf8 	bl	8007986 <csp_queue_enqueue>
 8009396:	4603      	mov	r3, r0
 8009398:	2b01      	cmp	r3, #1
 800939a:	d00d      	beq.n	80093b8 <csp_route_work+0x1d0>
			csp_log_error("Conn-less socket queue full");
 800939c:	4b41      	ldr	r3, [pc, #260]	@ (80094a4 <csp_route_work+0x2bc>)
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d003      	beq.n	80093ac <csp_route_work+0x1c4>
 80093a4:	4943      	ldr	r1, [pc, #268]	@ (80094b4 <csp_route_work+0x2cc>)
 80093a6:	2000      	movs	r0, #0
 80093a8:	f7ff f9b2 	bl	8008710 <do_csp_debug>
			csp_buffer_free(packet);
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7fe fd88 	bl	8007ec4 <csp_buffer_free>
			return CSP_ERR_NONE;
 80093b4:	2300      	movs	r3, #0
 80093b6:	e099      	b.n	80094ec <csp_route_work+0x304>
		}
		return CSP_ERR_NONE;
 80093b8:	2300      	movs	r3, #0
 80093ba:	e097      	b.n	80094ec <csp_route_work+0x304>
	}

	/* Search for an existing connection */
	conn = csp_conn_find(packet->id.ext, CSP_ID_CONN_MASK);
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	493d      	ldr	r1, [pc, #244]	@ (80094b8 <csp_route_work+0x2d0>)
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7fe ff1a 	bl	80081fc <csp_conn_find>
 80093c8:	6278      	str	r0, [r7, #36]	@ 0x24

	/* If this is an incoming packet on a new connection */
	if (conn == NULL) {
 80093ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d177      	bne.n	80094c0 <csp_route_work+0x2d8>

		/* Reject packet if no matching socket is found */
		if (!socket) {
 80093d0:	69fb      	ldr	r3, [r7, #28]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d105      	bne.n	80093e2 <csp_route_work+0x1fa>
			csp_buffer_free(packet);
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	4618      	mov	r0, r3
 80093da:	f7fe fd73 	bl	8007ec4 <csp_buffer_free>
			return CSP_ERR_NONE;
 80093de:	2300      	movs	r3, #0
 80093e0:	e084      	b.n	80094ec <csp_route_work+0x304>
		}

		/* Run security check on incoming packet */
		if (csp_route_security_check(socket->opts, input.iface, packet) < 0) {
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	699b      	ldr	r3, [r3, #24]
 80093e6:	6979      	ldr	r1, [r7, #20]
 80093e8:	693a      	ldr	r2, [r7, #16]
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7ff febc 	bl	8009168 <csp_route_security_check>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	da05      	bge.n	8009402 <csp_route_work+0x21a>
			csp_buffer_free(packet);
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7fe fd63 	bl	8007ec4 <csp_buffer_free>
			return CSP_ERR_NONE;
 80093fe:	2300      	movs	r3, #0
 8009400:	e074      	b.n	80094ec <csp_route_work+0x304>
		}

		/* New incoming connection accepted */
		csp_id_t idout;
		idout.pri   = packet->id.pri;
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	7bdb      	ldrb	r3, [r3, #15]
 8009406:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800940a:	b2da      	uxtb	r2, r3
 800940c:	7bfb      	ldrb	r3, [r7, #15]
 800940e:	f362 1387 	bfi	r3, r2, #6, #2
 8009412:	73fb      	strb	r3, [r7, #15]
		idout.src   = csp_conf.address;
 8009414:	4b25      	ldr	r3, [pc, #148]	@ (80094ac <csp_route_work+0x2c4>)
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	f003 031f 	and.w	r3, r3, #31
 800941c:	b2da      	uxtb	r2, r3
 800941e:	7bfb      	ldrb	r3, [r7, #15]
 8009420:	f362 0345 	bfi	r3, r2, #1, #5
 8009424:	73fb      	strb	r3, [r7, #15]

		idout.dst   = packet->id.src;
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	7bdb      	ldrb	r3, [r3, #15]
 800942a:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800942e:	b2da      	uxtb	r2, r3
 8009430:	89fb      	ldrh	r3, [r7, #14]
 8009432:	f362 1308 	bfi	r3, r2, #4, #5
 8009436:	81fb      	strh	r3, [r7, #14]
		idout.dport = packet->id.sport;
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	7b5b      	ldrb	r3, [r3, #13]
 800943c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8009440:	b2da      	uxtb	r2, r3
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f362 3393 	bfi	r3, r2, #14, #6
 8009448:	60fb      	str	r3, [r7, #12]
		idout.sport = packet->id.dport;
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	f3c3 3385 	ubfx	r3, r3, #14, #6
 8009452:	b2da      	uxtb	r2, r3
 8009454:	7b7b      	ldrb	r3, [r7, #13]
 8009456:	f362 0305 	bfi	r3, r2, #0, #6
 800945a:	737b      	strb	r3, [r7, #13]
		idout.flags = packet->id.flags;
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	7b1b      	ldrb	r3, [r3, #12]
 8009460:	733b      	strb	r3, [r7, #12]

		/* Create connection */
		conn = csp_conn_new(packet->id, idout);
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	68f9      	ldr	r1, [r7, #12]
 8009466:	68d8      	ldr	r0, [r3, #12]
 8009468:	f7fe ffb0 	bl	80083cc <csp_conn_new>
 800946c:	6278      	str	r0, [r7, #36]	@ 0x24

		if (!conn) {
 800946e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009470:	2b00      	cmp	r3, #0
 8009472:	d10d      	bne.n	8009490 <csp_route_work+0x2a8>
			csp_log_error("No more connections available");
 8009474:	4b0b      	ldr	r3, [pc, #44]	@ (80094a4 <csp_route_work+0x2bc>)
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d003      	beq.n	8009484 <csp_route_work+0x29c>
 800947c:	490f      	ldr	r1, [pc, #60]	@ (80094bc <csp_route_work+0x2d4>)
 800947e:	2000      	movs	r0, #0
 8009480:	f7ff f946 	bl	8008710 <do_csp_debug>
			csp_buffer_free(packet);
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	4618      	mov	r0, r3
 8009488:	f7fe fd1c 	bl	8007ec4 <csp_buffer_free>
			return CSP_ERR_NONE;
 800948c:	2300      	movs	r3, #0
 800948e:	e02d      	b.n	80094ec <csp_route_work+0x304>
		}

		/* Store the socket queue and options */
		conn->socket = socket->socket;
 8009490:	69fb      	ldr	r3, [r7, #28]
 8009492:	691a      	ldr	r2, [r3, #16]
 8009494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009496:	611a      	str	r2, [r3, #16]
		conn->opts = socket->opts;
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	699a      	ldr	r2, [r3, #24]
 800949c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800949e:	619a      	str	r2, [r3, #24]
 80094a0:	e01e      	b.n	80094e0 <csp_route_work+0x2f8>
 80094a2:	bf00      	nop
 80094a4:	2400008c 	.word	0x2400008c
 80094a8:	0801428c 	.word	0x0801428c
 80094ac:	24042c54 	.word	0x24042c54
 80094b0:	080142cc 	.word	0x080142cc
 80094b4:	080142e4 	.word	0x080142e4
 80094b8:	3fffff00 	.word	0x3fffff00
 80094bc:	08014300 	.word	0x08014300

	/* Packet to existing connection */
	} else {

		/* Run security check on incoming packet */
		if (csp_route_security_check(conn->opts, input.iface, packet) < 0) {
 80094c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c2:	699b      	ldr	r3, [r3, #24]
 80094c4:	6979      	ldr	r1, [r7, #20]
 80094c6:	693a      	ldr	r2, [r7, #16]
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7ff fe4d 	bl	8009168 <csp_route_security_check>
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	da05      	bge.n	80094e0 <csp_route_work+0x2f8>
			csp_buffer_free(packet);
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7fe fcf4 	bl	8007ec4 <csp_buffer_free>
			return CSP_ERR_NONE;
 80094dc:	2300      	movs	r3, #0
 80094de:	e005      	b.n	80094ec <csp_route_work+0x304>
		return CSP_ERR_NONE;
	}
#endif

	/* Pass packet to UDP module */
	csp_udp_new_packet(conn, packet);
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	4619      	mov	r1, r3
 80094e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80094e6:	f000 fd31 	bl	8009f4c <csp_udp_new_packet>
	return CSP_ERR_NONE;
 80094ea:	2300      	movs	r3, #0
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	372c      	adds	r7, #44	@ 0x2c
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080094f4 <csp_task_router>:

static CSP_DEFINE_TASK(csp_task_router) {
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]

	/* Here there be routing */
	while (1) {
		csp_route_work(FIFO_TIMEOUT);
 80094fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009500:	f7ff fe72 	bl	80091e8 <csp_route_work>
 8009504:	e7fa      	b.n	80094fc <csp_task_router+0x8>
	...

08009508 <csp_route_start_task>:

	return CSP_TASK_RETURN;

}

int csp_route_start_task(unsigned int task_stack_size, unsigned int task_priority) {
 8009508:	b580      	push	{r7, lr}
 800950a:	b086      	sub	sp, #24
 800950c:	af02      	add	r7, sp, #8
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]

	int ret = csp_thread_create(csp_task_router, "RTE", task_stack_size, NULL, task_priority, NULL);
 8009512:	2300      	movs	r3, #0
 8009514:	9301      	str	r3, [sp, #4]
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	9300      	str	r3, [sp, #0]
 800951a:	2300      	movs	r3, #0
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	490c      	ldr	r1, [pc, #48]	@ (8009550 <csp_route_start_task+0x48>)
 8009520:	480c      	ldr	r0, [pc, #48]	@ (8009554 <csp_route_start_task+0x4c>)
 8009522:	f7fe fb4d 	bl	8007bc0 <csp_thread_create>
 8009526:	60f8      	str	r0, [r7, #12]
	if (ret != 0) {
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d00a      	beq.n	8009544 <csp_route_start_task+0x3c>
		csp_log_error("Failed to start router task, error: %d", ret);
 800952e:	4b0a      	ldr	r3, [pc, #40]	@ (8009558 <csp_route_start_task+0x50>)
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d004      	beq.n	8009540 <csp_route_start_task+0x38>
 8009536:	68fa      	ldr	r2, [r7, #12]
 8009538:	4908      	ldr	r1, [pc, #32]	@ (800955c <csp_route_start_task+0x54>)
 800953a:	2000      	movs	r0, #0
 800953c:	f7ff f8e8 	bl	8008710 <do_csp_debug>
		return ret;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	e000      	b.n	8009546 <csp_route_start_task+0x3e>
	}

	return CSP_ERR_NONE;
 8009544:	2300      	movs	r3, #0

}
 8009546:	4618      	mov	r0, r3
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	08014320 	.word	0x08014320
 8009554:	080094f5 	.word	0x080094f5
 8009558:	2400008c 	.word	0x2400008c
 800955c:	08014324 	.word	0x08014324

08009560 <csp_can_tx_frame>:
extern FDCAN_HandleTypeDef hfdcan2;

csp_can_interface_data_t can_ifdata;
csp_iface_t can_iface;

static int csp_can_tx_frame(void *driver_data, uint32_t id, const uint8_t *data, uint8_t dlc) {
 8009560:	b580      	push	{r7, lr}
 8009562:	b08e      	sub	sp, #56	@ 0x38
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	607a      	str	r2, [r7, #4]
 800956c:	70fb      	strb	r3, [r7, #3]

    FDCAN_TxHeaderTypeDef txHeader;
    txHeader.Identifier          = (uint32_t)id;
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	617b      	str	r3, [r7, #20]
    txHeader.IdType              = FDCAN_EXTENDED_ID;
 8009572:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009576:	61bb      	str	r3, [r7, #24]
    txHeader.TxFrameType         = FDCAN_DATA_FRAME;
 8009578:	2300      	movs	r3, #0
 800957a:	61fb      	str	r3, [r7, #28]
    txHeader.DataLength          = dlc;
 800957c:	78fb      	ldrb	r3, [r7, #3]
 800957e:	623b      	str	r3, [r7, #32]
    txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8009580:	2300      	movs	r3, #0
 8009582:	627b      	str	r3, [r7, #36]	@ 0x24
    txHeader.BitRateSwitch       = FDCAN_BRS_OFF;
 8009584:	2300      	movs	r3, #0
 8009586:	62bb      	str	r3, [r7, #40]	@ 0x28
    txHeader.FDFormat            = FDCAN_CLASSIC_CAN;
 8009588:	2300      	movs	r3, #0
 800958a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    txHeader.TxEventFifoControl  = FDCAN_NO_TX_EVENTS;
 800958c:	2300      	movs	r3, #0
 800958e:	633b      	str	r3, [r7, #48]	@ 0x30
    txHeader.MessageMarker       = 0;
 8009590:	2300      	movs	r3, #0
 8009592:	637b      	str	r3, [r7, #52]	@ 0x34

    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &txHeader, data) != HAL_OK) {
 8009594:	f107 0314 	add.w	r3, r7, #20
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	4619      	mov	r1, r3
 800959c:	4806      	ldr	r0, [pc, #24]	@ (80095b8 <csp_can_tx_frame+0x58>)
 800959e:	f002 f97e 	bl	800b89e <HAL_FDCAN_AddMessageToTxFifoQ>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d002      	beq.n	80095ae <csp_can_tx_frame+0x4e>
        return CSP_ERR_DRIVER;
 80095a8:	f06f 030a 	mvn.w	r3, #10
 80095ac:	e000      	b.n	80095b0 <csp_can_tx_frame+0x50>
    }

	return CSP_ERR_NONE;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3738      	adds	r7, #56	@ 0x38
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	240001b8 	.word	0x240001b8

080095bc <can_csp_init>:

void can_csp_init(void) {
 80095bc:	b580      	push	{r7, lr}
 80095be:	b088      	sub	sp, #32
 80095c0:	af00      	add	r7, sp, #0
	FDCAN_FilterTypeDef sFilterConfig = {
 80095c2:	463b      	mov	r3, r7
 80095c4:	2220      	movs	r2, #32
 80095c6:	2100      	movs	r1, #0
 80095c8:	4618      	mov	r0, r3
 80095ca:	f008 fe0b 	bl	80121e4 <memset>
 80095ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80095d2:	603b      	str	r3, [r7, #0]
 80095d4:	2303      	movs	r3, #3
 80095d6:	60bb      	str	r3, [r7, #8]
 80095d8:	2301      	movs	r3, #1
 80095da:	60fb      	str	r3, [r7, #12]
 80095dc:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 80095e0:	617b      	str	r3, [r7, #20]
		.FilterType = FDCAN_FILTER_RANGE_NO_EIDM,
		.FilterConfig = FDCAN_FILTER_TO_RXFIFO0,
		.FilterID1 = 0x00000000,
		.FilterID2 = 0x1FFFFFFF
	};
	HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig);
 80095e2:	463b      	mov	r3, r7
 80095e4:	4619      	mov	r1, r3
 80095e6:	480f      	ldr	r0, [pc, #60]	@ (8009624 <can_csp_init+0x68>)
 80095e8:	f002 f8b8 	bl	800b75c <HAL_FDCAN_ConfigFilter>

	HAL_FDCAN_Start(&hfdcan2);
 80095ec:	480d      	ldr	r0, [pc, #52]	@ (8009624 <can_csp_init+0x68>)
 80095ee:	f002 f92b 	bl	800b848 <HAL_FDCAN_Start>

	HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80095f2:	2200      	movs	r2, #0
 80095f4:	2101      	movs	r1, #1
 80095f6:	480b      	ldr	r0, [pc, #44]	@ (8009624 <can_csp_init+0x68>)
 80095f8:	f002 fb18 	bl	800bc2c <HAL_FDCAN_ActivateNotification>

	can_ifdata.tx_func			= csp_can_tx_frame;
 80095fc:	4b0a      	ldr	r3, [pc, #40]	@ (8009628 <can_csp_init+0x6c>)
 80095fe:	4a0b      	ldr	r2, [pc, #44]	@ (800962c <can_csp_init+0x70>)
 8009600:	605a      	str	r2, [r3, #4]
	can_iface.name				= "can";
 8009602:	4b0b      	ldr	r3, [pc, #44]	@ (8009630 <can_csp_init+0x74>)
 8009604:	4a0b      	ldr	r2, [pc, #44]	@ (8009634 <can_csp_init+0x78>)
 8009606:	601a      	str	r2, [r3, #0]
	can_iface.driver_data		= &hfdcan2;
 8009608:	4b09      	ldr	r3, [pc, #36]	@ (8009630 <can_csp_init+0x74>)
 800960a:	4a06      	ldr	r2, [pc, #24]	@ (8009624 <can_csp_init+0x68>)
 800960c:	609a      	str	r2, [r3, #8]
	can_iface.interface_data	= &can_ifdata;
 800960e:	4b08      	ldr	r3, [pc, #32]	@ (8009630 <can_csp_init+0x74>)
 8009610:	4a05      	ldr	r2, [pc, #20]	@ (8009628 <can_csp_init+0x6c>)
 8009612:	605a      	str	r2, [r3, #4]
	csp_can_add_interface(&can_iface);
 8009614:	4806      	ldr	r0, [pc, #24]	@ (8009630 <can_csp_init+0x74>)
 8009616:	f000 fa3f 	bl	8009a98 <csp_can_add_interface>
}
 800961a:	bf00      	nop
 800961c:	3720      	adds	r7, #32
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	240001b8 	.word	0x240001b8
 8009628:	24042c7c 	.word	0x24042c7c
 800962c:	08009561 	.word	0x08009561
 8009630:	24042c84 	.word	0x24042c84
 8009634:	0801434c 	.word	0x0801434c

08009638 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b092      	sub	sp, #72	@ 0x48
 800963c:	af02      	add	r7, sp, #8
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
    FDCAN_RxHeaderTypeDef rxHeader;
    uint8_t rxData[8];
    CSP_BASE_TYPE xCspTaskWoken = pdFALSE;
 8009642:	2300      	movs	r3, #0
 8009644:	60fb      	str	r3, [r7, #12]

    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rxHeader, rxData) == HAL_OK) {
 8009646:	f107 0310 	add.w	r3, r7, #16
 800964a:	f107 0218 	add.w	r2, r7, #24
 800964e:	2140      	movs	r1, #64	@ 0x40
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f002 f97f 	bl	800b954 <HAL_FDCAN_GetRxMessage>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d119      	bne.n	8009690 <HAL_FDCAN_RxFifo0Callback+0x58>
    	csp_can_rx(&can_iface, rxHeader.Identifier, rxData, rxHeader.DataLength, &xCspTaskWoken);
 800965c:	69b9      	ldr	r1, [r7, #24]
 800965e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009660:	b2d8      	uxtb	r0, r3
 8009662:	f107 0210 	add.w	r2, r7, #16
 8009666:	f107 030c 	add.w	r3, r7, #12
 800966a:	9300      	str	r3, [sp, #0]
 800966c:	4603      	mov	r3, r0
 800966e:	480a      	ldr	r0, [pc, #40]	@ (8009698 <HAL_FDCAN_RxFifo0Callback+0x60>)
 8009670:	f000 f816 	bl	80096a0 <csp_can_rx>

    	if(xCspTaskWoken) {
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d00a      	beq.n	8009690 <HAL_FDCAN_RxFifo0Callback+0x58>
    		portYIELD_FROM_ISR(xCspTaskWoken);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d007      	beq.n	8009690 <HAL_FDCAN_RxFifo0Callback+0x58>
 8009680:	4b06      	ldr	r3, [pc, #24]	@ (800969c <HAL_FDCAN_RxFifo0Callback+0x64>)
 8009682:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009686:	601a      	str	r2, [r3, #0]
 8009688:	f3bf 8f4f 	dsb	sy
 800968c:	f3bf 8f6f 	isb	sy
    	}
	}
}
 8009690:	bf00      	nop
 8009692:	3740      	adds	r7, #64	@ 0x40
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}
 8009698:	24042c84 	.word	0x24042c84
 800969c:	e000ed04 	.word	0xe000ed04

080096a0 <csp_can_rx>:
	/* Remaining CFP fragment(s) of a CSP packet */
	CFP_MORE = 1
};

int csp_can_rx(csp_iface_t *iface, uint32_t id, const uint8_t *data, uint8_t dlc, CSP_BASE_TYPE *task_woken)
{
 80096a0:	b590      	push	{r4, r7, lr}
 80096a2:	b087      	sub	sp, #28
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	60b9      	str	r1, [r7, #8]
 80096aa:	607a      	str	r2, [r7, #4]
 80096ac:	70fb      	strb	r3, [r7, #3]
			return CSP_ERR_DRIVER;
		}
	}

	/* Bind incoming frame to a packet buffer */
	csp_can_pbuf_element_t * buf = csp_can_pbuf_find(id, CFP_ID_CONN_MASK, task_woken);
 80096ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80096b0:	4989      	ldr	r1, [pc, #548]	@ (80098d8 <csp_can_rx+0x238>)
 80096b2:	68b8      	ldr	r0, [r7, #8]
 80096b4:	f000 fad8 	bl	8009c68 <csp_can_pbuf_find>
 80096b8:	6178      	str	r0, [r7, #20]
	if (buf == NULL) {
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d11d      	bne.n	80096fc <csp_can_rx+0x5c>
		if (CFP_TYPE(id) == CFP_BEGIN) {
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	0c9b      	lsrs	r3, r3, #18
 80096c4:	f003 0301 	and.w	r3, r3, #1
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d10f      	bne.n	80096ec <csp_can_rx+0x4c>
			buf = csp_can_pbuf_new(id, task_woken);
 80096cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80096ce:	68b8      	ldr	r0, [r7, #8]
 80096d0:	f000 fa4a 	bl	8009b68 <csp_can_pbuf_new>
 80096d4:	6178      	str	r0, [r7, #20]
			if (buf == NULL) {
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d10f      	bne.n	80096fc <csp_can_rx+0x5c>
				//csp_log_warn("No available packet buffer for CAN");
				iface->rx_error++;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6a1b      	ldr	r3, [r3, #32]
 80096e0:	1c5a      	adds	r2, r3, #1
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	621a      	str	r2, [r3, #32]
				return CSP_ERR_NOMEM;
 80096e6:	f04f 33ff 	mov.w	r3, #4294967295
 80096ea:	e0f1      	b.n	80098d0 <csp_can_rx+0x230>
			}
		} else {
			//csp_log_warn("Out of order id 0x%X remain %u", CFP_ID(id), CFP_REMAIN(id));
			iface->frame++;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096f0:	1c5a      	adds	r2, r3, #1
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	62da      	str	r2, [r3, #44]	@ 0x2c
			return CSP_ERR_INVAL;
 80096f6:	f06f 0301 	mvn.w	r3, #1
 80096fa:	e0e9      	b.n	80098d0 <csp_can_rx+0x230>
		}
	}

	/* Reset frame data offset */
	uint8_t offset = 0;
 80096fc:	2300      	movs	r3, #0
 80096fe:	74fb      	strb	r3, [r7, #19]

	switch (CFP_TYPE(id)) {
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	0c9b      	lsrs	r3, r3, #18
 8009704:	f003 0301 	and.w	r3, r3, #1
 8009708:	2b00      	cmp	r3, #0
 800970a:	d002      	beq.n	8009712 <csp_can_rx+0x72>
 800970c:	2b01      	cmp	r3, #1
 800970e:	d07a      	beq.n	8009806 <csp_can_rx+0x166>
 8009710:	e0d7      	b.n	80098c2 <csp_can_rx+0x222>

	case CFP_BEGIN:

		/* Discard packet if DLC is less than CSP id + CSP length fields */
		if (dlc < (sizeof(csp_id_t) + sizeof(uint16_t))) {
 8009712:	78fb      	ldrb	r3, [r7, #3]
 8009714:	2b05      	cmp	r3, #5
 8009716:	d809      	bhi.n	800972c <csp_can_rx+0x8c>
			//csp_log_warn("Short BEGIN frame received");
			iface->frame++;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800971c:	1c5a      	adds	r2, r3, #1
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	62da      	str	r2, [r3, #44]	@ 0x2c
			csp_can_pbuf_free(buf, task_woken);
 8009722:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009724:	6978      	ldr	r0, [r7, #20]
 8009726:	f000 f9f1 	bl	8009b0c <csp_can_pbuf_free>
			break;
 800972a:	e0d0      	b.n	80098ce <csp_can_rx+0x22e>
		}

		/* Check for incomplete frame */
		if (buf->packet != NULL) {
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d005      	beq.n	8009740 <csp_can_rx+0xa0>
			/* Reuse the buffer */
			//csp_log_warn("Incomplete frame");
			iface->frame++;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009738:	1c5a      	adds	r2, r3, #1
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800973e:	e01b      	b.n	8009778 <csp_can_rx+0xd8>
		} else {
			/* Get free buffer for frame */
			buf->packet = task_woken ? csp_buffer_get_isr(0) : csp_buffer_get(0); // CSP only supports one size
 8009740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009742:	2b00      	cmp	r3, #0
 8009744:	d004      	beq.n	8009750 <csp_can_rx+0xb0>
 8009746:	2000      	movs	r0, #0
 8009748:	f7fe faee 	bl	8007d28 <csp_buffer_get_isr>
 800974c:	4603      	mov	r3, r0
 800974e:	e003      	b.n	8009758 <csp_can_rx+0xb8>
 8009750:	2000      	movs	r0, #0
 8009752:	f7fe fb1b 	bl	8007d8c <csp_buffer_get>
 8009756:	4603      	mov	r3, r0
 8009758:	697a      	ldr	r2, [r7, #20]
 800975a:	60d3      	str	r3, [r2, #12]
			if (buf->packet == NULL) {
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d109      	bne.n	8009778 <csp_can_rx+0xd8>
				//csp_log_error("Failed to get buffer for CSP_BEGIN packet");
				iface->frame++;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009768:	1c5a      	adds	r2, r3, #1
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	62da      	str	r2, [r3, #44]	@ 0x2c
				csp_can_pbuf_free(buf, task_woken);
 800976e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009770:	6978      	ldr	r0, [r7, #20]
 8009772:	f000 f9cb 	bl	8009b0c <csp_can_pbuf_free>
				break;
 8009776:	e0aa      	b.n	80098ce <csp_can_rx+0x22e>
			}
		}

		/* Copy CSP identifier (header) */
		memcpy(&(buf->packet->id), data, sizeof(buf->packet->id));
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	68db      	ldr	r3, [r3, #12]
 800977c:	330c      	adds	r3, #12
 800977e:	687a      	ldr	r2, [r7, #4]
 8009780:	6812      	ldr	r2, [r2, #0]
 8009782:	601a      	str	r2, [r3, #0]
		buf->packet->id.ext = csp_ntoh32(buf->packet->id.ext);
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	68da      	ldr	r2, [r3, #12]
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	68dc      	ldr	r4, [r3, #12]
 800978e:	4610      	mov	r0, r2
 8009790:	f7ff f865 	bl	800885e <csp_ntoh32>
 8009794:	4603      	mov	r3, r0
 8009796:	60e3      	str	r3, [r4, #12]

		/* Copy CSP length (of data) */
		memcpy(&(buf->packet->length), data + sizeof(csp_id_t), sizeof(buf->packet->length));
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	330a      	adds	r3, #10
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	3204      	adds	r2, #4
 80097a2:	8812      	ldrh	r2, [r2, #0]
 80097a4:	b292      	uxth	r2, r2
 80097a6:	801a      	strh	r2, [r3, #0]
		buf->packet->length = csp_ntoh16(buf->packet->length);
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	68db      	ldr	r3, [r3, #12]
 80097ac:	895a      	ldrh	r2, [r3, #10]
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	68dc      	ldr	r4, [r3, #12]
 80097b2:	4610      	mov	r0, r2
 80097b4:	f7ff f82c 	bl	8008810 <csp_ntoh16>
 80097b8:	4603      	mov	r3, r0
 80097ba:	8163      	strh	r3, [r4, #10]

		/* Check length against max */
		if ((buf->packet->length > MAX_CAN_DATA_SIZE) || (buf->packet->length > csp_buffer_data_size())) {
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	895b      	ldrh	r3, [r3, #10]
 80097c2:	f240 72fa 	movw	r2, #2042	@ 0x7fa
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d808      	bhi.n	80097dc <csp_can_rx+0x13c>
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	895b      	ldrh	r3, [r3, #10]
 80097d0:	461c      	mov	r4, r3
 80097d2:	f7fe fbfb 	bl	8007fcc <csp_buffer_data_size>
 80097d6:	4603      	mov	r3, r0
 80097d8:	429c      	cmp	r4, r3
 80097da:	d909      	bls.n	80097f0 <csp_can_rx+0x150>
			iface->rx_error++;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6a1b      	ldr	r3, [r3, #32]
 80097e0:	1c5a      	adds	r2, r3, #1
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	621a      	str	r2, [r3, #32]
			csp_can_pbuf_free(buf, task_woken);
 80097e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80097e8:	6978      	ldr	r0, [r7, #20]
 80097ea:	f000 f98f 	bl	8009b0c <csp_can_pbuf_free>
			break;
 80097ee:	e06e      	b.n	80098ce <csp_can_rx+0x22e>
		}

		/* Reset RX count */
		buf->rx_count = 0;
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	2200      	movs	r2, #0
 80097f4:	801a      	strh	r2, [r3, #0]

		/* Set offset to prevent CSP header from being copied to CSP data */
		offset = sizeof(csp_id_t) + sizeof(uint16_t);
 80097f6:	2306      	movs	r3, #6
 80097f8:	74fb      	strb	r3, [r7, #19]

		/* Set remain field - increment to include begin packet */
		buf->remain = CFP_REMAIN(id) + 1;
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	0a9b      	lsrs	r3, r3, #10
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	1c5a      	adds	r2, r3, #1
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	605a      	str	r2, [r3, #4]
		/* FALLTHROUGH */

	case CFP_MORE:

		/* Check 'remain' field match */
		if (CFP_REMAIN(id) != buf->remain - 1) {
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	0a9b      	lsrs	r3, r3, #10
 800980a:	b2da      	uxtb	r2, r3
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	3b01      	subs	r3, #1
 8009812:	429a      	cmp	r2, r3
 8009814:	d009      	beq.n	800982a <csp_can_rx+0x18a>
			//csp_log_error("CAN frame lost in CSP packet");
			csp_can_pbuf_free(buf, task_woken);
 8009816:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009818:	6978      	ldr	r0, [r7, #20]
 800981a:	f000 f977 	bl	8009b0c <csp_can_pbuf_free>
			iface->frame++;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009822:	1c5a      	adds	r2, r3, #1
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	62da      	str	r2, [r3, #44]	@ 0x2c
			break;
 8009828:	e051      	b.n	80098ce <csp_can_rx+0x22e>
		}

		/* Decrement remaining frames */
		buf->remain--;
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	1e5a      	subs	r2, r3, #1
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	605a      	str	r2, [r3, #4]

		/* Check for overflow */
		if ((buf->rx_count + dlc - offset) > buf->packet->length) {
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	881b      	ldrh	r3, [r3, #0]
 8009838:	461a      	mov	r2, r3
 800983a:	78fb      	ldrb	r3, [r7, #3]
 800983c:	441a      	add	r2, r3
 800983e:	7cfb      	ldrb	r3, [r7, #19]
 8009840:	1ad3      	subs	r3, r2, r3
 8009842:	697a      	ldr	r2, [r7, #20]
 8009844:	68d2      	ldr	r2, [r2, #12]
 8009846:	8952      	ldrh	r2, [r2, #10]
 8009848:	4293      	cmp	r3, r2
 800984a:	dd09      	ble.n	8009860 <csp_can_rx+0x1c0>
			//csp_log_error("RX buffer overflow");
			iface->frame++;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009850:	1c5a      	adds	r2, r3, #1
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	62da      	str	r2, [r3, #44]	@ 0x2c
			csp_can_pbuf_free(buf, task_woken);
 8009856:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009858:	6978      	ldr	r0, [r7, #20]
 800985a:	f000 f957 	bl	8009b0c <csp_can_pbuf_free>
			break;
 800985e:	e036      	b.n	80098ce <csp_can_rx+0x22e>
		}

		/* Copy dlc bytes into buffer */
		memcpy(&buf->packet->data[buf->rx_count], data + offset, dlc - offset);
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	68da      	ldr	r2, [r3, #12]
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	881b      	ldrh	r3, [r3, #0]
 8009868:	3310      	adds	r3, #16
 800986a:	18d0      	adds	r0, r2, r3
 800986c:	7cfb      	ldrb	r3, [r7, #19]
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	18d1      	adds	r1, r2, r3
 8009872:	78fa      	ldrb	r2, [r7, #3]
 8009874:	7cfb      	ldrb	r3, [r7, #19]
 8009876:	1ad3      	subs	r3, r2, r3
 8009878:	461a      	mov	r2, r3
 800987a:	f008 fd70 	bl	801235e <memcpy>
		buf->rx_count += dlc - offset;
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	881a      	ldrh	r2, [r3, #0]
 8009882:	78fb      	ldrb	r3, [r7, #3]
 8009884:	b299      	uxth	r1, r3
 8009886:	7cfb      	ldrb	r3, [r7, #19]
 8009888:	b29b      	uxth	r3, r3
 800988a:	1acb      	subs	r3, r1, r3
 800988c:	b29b      	uxth	r3, r3
 800988e:	4413      	add	r3, r2
 8009890:	b29a      	uxth	r2, r3
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	801a      	strh	r2, [r3, #0]

		/* Check if more data is expected */
		if (buf->rx_count != buf->packet->length)
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	881a      	ldrh	r2, [r3, #0]
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	68db      	ldr	r3, [r3, #12]
 800989e:	895b      	ldrh	r3, [r3, #10]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d113      	bne.n	80098cc <csp_can_rx+0x22c>
			break;

		/* Data is available */
		csp_qfifo_write(buf->packet, iface, task_woken);
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80098aa:	68f9      	ldr	r1, [r7, #12]
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7ff fb8d 	bl	8008fcc <csp_qfifo_write>

		/* Drop packet buffer reference */
		buf->packet = NULL;
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	2200      	movs	r2, #0
 80098b6:	60da      	str	r2, [r3, #12]

		/* Free packet buffer */
		csp_can_pbuf_free(buf, task_woken);
 80098b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098ba:	6978      	ldr	r0, [r7, #20]
 80098bc:	f000 f926 	bl	8009b0c <csp_can_pbuf_free>

		break;
 80098c0:	e005      	b.n	80098ce <csp_can_rx+0x22e>

	default:
		//csp_log_warn("Received unknown CFP message type");
		csp_can_pbuf_free(buf, task_woken);
 80098c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098c4:	6978      	ldr	r0, [r7, #20]
 80098c6:	f000 f921 	bl	8009b0c <csp_can_pbuf_free>
		break;
 80098ca:	e000      	b.n	80098ce <csp_can_rx+0x22e>
			break;
 80098cc:	bf00      	nop
	}

	return CSP_ERR_NONE;
 80098ce:	2300      	movs	r3, #0
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	371c      	adds	r7, #28
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd90      	pop	{r4, r7, pc}
 80098d8:	1ff803ff 	.word	0x1ff803ff

080098dc <csp_can_tx>:

int csp_can_tx(const csp_route_t * ifroute, csp_packet_t *packet)
{
 80098dc:	b590      	push	{r4, r7, lr}
 80098de:	b08f      	sub	sp, #60	@ 0x3c
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
        csp_iface_t * iface = ifroute->iface;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	633b      	str	r3, [r7, #48]	@ 0x30
        csp_can_interface_data_t * ifdata = iface->interface_data;
 80098ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Get an unique CFP id - this should be locked to prevent access from multiple tasks */
	const uint32_t ident = ifdata->cfp_frame_id++;
 80098f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	1c59      	adds	r1, r3, #1
 80098f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098fa:	6011      	str	r1, [r2, #0]
 80098fc:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check protocol's max length - limit is 1 (first) frame + as many frames that can be specified in 'remain' */
        if (packet->length > MAX_CAN_DATA_SIZE) {
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	895b      	ldrh	r3, [r3, #10]
 8009902:	f240 72fa 	movw	r2, #2042	@ 0x7fa
 8009906:	4293      	cmp	r3, r2
 8009908:	d902      	bls.n	8009910 <csp_can_tx+0x34>
		return CSP_ERR_TX;
 800990a:	f06f 0309 	mvn.w	r3, #9
 800990e:	e0bf      	b.n	8009a90 <csp_can_tx+0x1b4>
        }

	/* Insert destination node/via address into the CFP destination field */
	const uint8_t dest = (ifroute->via != CSP_NO_VIA_ADDRESS) ? ifroute->via : packet->id.dst;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	791b      	ldrb	r3, [r3, #4]
 8009914:	2bff      	cmp	r3, #255	@ 0xff
 8009916:	d002      	beq.n	800991e <csp_can_tx+0x42>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	791b      	ldrb	r3, [r3, #4]
 800991c:	e004      	b.n	8009928 <csp_can_tx+0x4c>
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	89db      	ldrh	r3, [r3, #14]
 8009922:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8009926:	b2db      	uxtb	r3, r3
 8009928:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	/* Create CAN identifier */
	uint32_t id = (CFP_MAKE_SRC(packet->id.src) |
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	7bdb      	ldrb	r3, [r3, #15]
 8009930:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8009934:	b2db      	uxtb	r3, r3
 8009936:	061a      	lsls	r2, r3, #24
                       CFP_MAKE_DST(dest) |
 8009938:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800993c:	04db      	lsls	r3, r3, #19
 800993e:	f403 0378 	and.w	r3, r3, #16252928	@ 0xf80000
	uint32_t id = (CFP_MAKE_SRC(packet->id.src) |
 8009942:	431a      	orrs	r2, r3
                       CFP_MAKE_ID(ident) |
 8009944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009946:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800994a:	431a      	orrs	r2, r3
                       CFP_MAKE_TYPE(CFP_BEGIN) |
                       CFP_MAKE_REMAIN((packet->length + CFP_OVERHEAD - 1) / MAX_BYTES_IN_CAN_FRAME));
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	895b      	ldrh	r3, [r3, #10]
 8009950:	3305      	adds	r3, #5
 8009952:	08db      	lsrs	r3, r3, #3
 8009954:	029b      	lsls	r3, r3, #10
 8009956:	f403 337f 	and.w	r3, r3, #261120	@ 0x3fc00
	uint32_t id = (CFP_MAKE_SRC(packet->id.src) |
 800995a:	4313      	orrs	r3, r2
 800995c:	623b      	str	r3, [r7, #32]

	/* Calculate first frame data bytes */
	const uint8_t avail = MAX_BYTES_IN_CAN_FRAME - CFP_OVERHEAD;
 800995e:	2302      	movs	r3, #2
 8009960:	77fb      	strb	r3, [r7, #31]
	uint8_t bytes = (packet->length <= avail) ? packet->length : avail;
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	895a      	ldrh	r2, [r3, #10]
 8009966:	7ffb      	ldrb	r3, [r7, #31]
 8009968:	b29b      	uxth	r3, r3
 800996a:	429a      	cmp	r2, r3
 800996c:	d803      	bhi.n	8009976 <csp_can_tx+0x9a>
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	895b      	ldrh	r3, [r3, #10]
 8009972:	b2db      	uxtb	r3, r3
 8009974:	e000      	b.n	8009978 <csp_can_tx+0x9c>
 8009976:	7ffb      	ldrb	r3, [r7, #31]
 8009978:	77bb      	strb	r3, [r7, #30]

	/* Copy CSP headers and data */
	const uint32_t csp_id_be = csp_hton32(packet->id.ext);
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	68db      	ldr	r3, [r3, #12]
 800997e:	4618      	mov	r0, r3
 8009980:	f7fe ff54 	bl	800882c <csp_hton32>
 8009984:	4603      	mov	r3, r0
 8009986:	617b      	str	r3, [r7, #20]
	const uint16_t csp_length_be = csp_hton16(packet->length);
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	895b      	ldrh	r3, [r3, #10]
 800998c:	4618      	mov	r0, r3
 800998e:	f7fe ff29 	bl	80087e4 <csp_hton16>
 8009992:	4603      	mov	r3, r0
 8009994:	827b      	strh	r3, [r7, #18]

	uint8_t frame_buf[MAX_BYTES_IN_CAN_FRAME];
	memcpy(frame_buf, &csp_id_be, sizeof(csp_id_be));
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	60bb      	str	r3, [r7, #8]
	memcpy(frame_buf + sizeof(csp_id_be), &csp_length_be, sizeof(csp_length_be));
 800999a:	f107 0308 	add.w	r3, r7, #8
 800999e:	3304      	adds	r3, #4
 80099a0:	8a7a      	ldrh	r2, [r7, #18]
 80099a2:	801a      	strh	r2, [r3, #0]
	memcpy(frame_buf + CFP_OVERHEAD, packet->data, bytes);
 80099a4:	f107 0308 	add.w	r3, r7, #8
 80099a8:	3306      	adds	r3, #6
 80099aa:	683a      	ldr	r2, [r7, #0]
 80099ac:	f102 0110 	add.w	r1, r2, #16
 80099b0:	7fba      	ldrb	r2, [r7, #30]
 80099b2:	4618      	mov	r0, r3
 80099b4:	f008 fcd3 	bl	801235e <memcpy>

	/* Increment tx counter */
	uint16_t tx_count = bytes;
 80099b8:	7fbb      	ldrb	r3, [r7, #30]
 80099ba:	86fb      	strh	r3, [r7, #54]	@ 0x36

        const csp_can_driver_tx_t tx_func = ifdata->tx_func;
 80099bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	61bb      	str	r3, [r7, #24]

	/* Send first frame */
	if ((tx_func)(iface->driver_data, id, frame_buf, CFP_OVERHEAD + bytes) != CSP_ERR_NONE) {
 80099c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c4:	6898      	ldr	r0, [r3, #8]
 80099c6:	7fbb      	ldrb	r3, [r7, #30]
 80099c8:	3306      	adds	r3, #6
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	f107 0208 	add.w	r2, r7, #8
 80099d0:	69bc      	ldr	r4, [r7, #24]
 80099d2:	6a39      	ldr	r1, [r7, #32]
 80099d4:	47a0      	blx	r4
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d050      	beq.n	8009a7e <csp_can_tx+0x1a2>
		//csp_log_warn("Failed to send CAN frame in csp_tx_can");
		iface->tx_error++;
 80099dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099de:	69db      	ldr	r3, [r3, #28]
 80099e0:	1c5a      	adds	r2, r3, #1
 80099e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e4:	61da      	str	r2, [r3, #28]
		return CSP_ERR_DRIVER;
 80099e6:	f06f 030a 	mvn.w	r3, #10
 80099ea:	e051      	b.n	8009a90 <csp_can_tx+0x1b4>
	}

	/* Send next frames if not complete */
	while (tx_count < packet->length) {
		/* Calculate frame data bytes */
		bytes = (packet->length - tx_count >= MAX_BYTES_IN_CAN_FRAME) ? MAX_BYTES_IN_CAN_FRAME : packet->length - tx_count;
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	895b      	ldrh	r3, [r3, #10]
 80099f0:	461a      	mov	r2, r3
 80099f2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80099f4:	1ad3      	subs	r3, r2, r3
 80099f6:	2b08      	cmp	r3, #8
 80099f8:	bfa8      	it	ge
 80099fa:	2308      	movge	r3, #8
 80099fc:	77bb      	strb	r3, [r7, #30]

		/* Prepare identifier */
		id = (CFP_MAKE_SRC(packet->id.src) |
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	7bdb      	ldrb	r3, [r3, #15]
 8009a02:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8009a06:	b2db      	uxtb	r3, r3
 8009a08:	061a      	lsls	r2, r3, #24
                      CFP_MAKE_DST(dest) |
 8009a0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a0e:	04db      	lsls	r3, r3, #19
 8009a10:	f403 0378 	and.w	r3, r3, #16252928	@ 0xf80000
		id = (CFP_MAKE_SRC(packet->id.src) |
 8009a14:	431a      	orrs	r2, r3
                      CFP_MAKE_ID(ident) |
 8009a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a18:	f3c3 0309 	ubfx	r3, r3, #0, #10
                      CFP_MAKE_DST(dest) |
 8009a1c:	431a      	orrs	r2, r3
                      CFP_MAKE_TYPE(CFP_MORE) |
                      CFP_MAKE_REMAIN((packet->length - tx_count - bytes + MAX_BYTES_IN_CAN_FRAME - 1) / MAX_BYTES_IN_CAN_FRAME));
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	895b      	ldrh	r3, [r3, #10]
 8009a22:	4619      	mov	r1, r3
 8009a24:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009a26:	1ac9      	subs	r1, r1, r3
 8009a28:	7fbb      	ldrb	r3, [r7, #30]
 8009a2a:	1acb      	subs	r3, r1, r3
 8009a2c:	3307      	adds	r3, #7
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	da00      	bge.n	8009a34 <csp_can_tx+0x158>
 8009a32:	3307      	adds	r3, #7
 8009a34:	10db      	asrs	r3, r3, #3
 8009a36:	029b      	lsls	r3, r3, #10
 8009a38:	f403 337f 	and.w	r3, r3, #261120	@ 0x3fc00
                      CFP_MAKE_TYPE(CFP_MORE) |
 8009a3c:	4313      	orrs	r3, r2
		id = (CFP_MAKE_SRC(packet->id.src) |
 8009a3e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009a42:	623b      	str	r3, [r7, #32]

		/* Increment tx counter */
		tx_count += bytes;
 8009a44:	7fbb      	ldrb	r3, [r7, #30]
 8009a46:	b29a      	uxth	r2, r3
 8009a48:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009a4a:	4413      	add	r3, r2
 8009a4c:	86fb      	strh	r3, [r7, #54]	@ 0x36

		/* Send frame */
		if ((tx_func)(iface->driver_data, id, packet->data + tx_count - bytes, bytes) != CSP_ERR_NONE) {
 8009a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a50:	6898      	ldr	r0, [r3, #8]
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	f103 0210 	add.w	r2, r3, #16
 8009a58:	8ef9      	ldrh	r1, [r7, #54]	@ 0x36
 8009a5a:	7fbb      	ldrb	r3, [r7, #30]
 8009a5c:	1acb      	subs	r3, r1, r3
 8009a5e:	441a      	add	r2, r3
 8009a60:	7fbb      	ldrb	r3, [r7, #30]
 8009a62:	69bc      	ldr	r4, [r7, #24]
 8009a64:	6a39      	ldr	r1, [r7, #32]
 8009a66:	47a0      	blx	r4
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d007      	beq.n	8009a7e <csp_can_tx+0x1a2>
			//csp_log_warn("Failed to send CAN frame in Tx callback");
			iface->tx_error++;
 8009a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a70:	69db      	ldr	r3, [r3, #28]
 8009a72:	1c5a      	adds	r2, r3, #1
 8009a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a76:	61da      	str	r2, [r3, #28]
			return CSP_ERR_DRIVER;
 8009a78:	f06f 030a 	mvn.w	r3, #10
 8009a7c:	e008      	b.n	8009a90 <csp_can_tx+0x1b4>
	while (tx_count < packet->length) {
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	895b      	ldrh	r3, [r3, #10]
 8009a82:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d3b1      	bcc.n	80099ec <csp_can_tx+0x110>
		}
	}

	csp_buffer_free(packet);
 8009a88:	6838      	ldr	r0, [r7, #0]
 8009a8a:	f7fe fa1b 	bl	8007ec4 <csp_buffer_free>

	return CSP_ERR_NONE;
 8009a8e:	2300      	movs	r3, #0
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	373c      	adds	r7, #60	@ 0x3c
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd90      	pop	{r4, r7, pc}

08009a98 <csp_can_add_interface>:

int csp_can_add_interface(csp_iface_t * iface) {
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]

	if ((iface == NULL) || (iface->name == NULL) || (iface->interface_data == NULL)) {
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d007      	beq.n	8009ab6 <csp_can_add_interface+0x1e>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d003      	beq.n	8009ab6 <csp_can_add_interface+0x1e>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d102      	bne.n	8009abc <csp_can_add_interface+0x24>
		return CSP_ERR_INVAL;
 8009ab6:	f06f 0301 	mvn.w	r3, #1
 8009aba:	e021      	b.n	8009b00 <csp_can_add_interface+0x68>
	}

        csp_can_interface_data_t * ifdata = iface->interface_data;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	60fb      	str	r3, [r7, #12]
	if (ifdata->tx_func == NULL) {
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d102      	bne.n	8009ad0 <csp_can_add_interface+0x38>
		return CSP_ERR_INVAL;
 8009aca:	f06f 0301 	mvn.w	r3, #1
 8009ace:	e017      	b.n	8009b00 <csp_can_add_interface+0x68>
	}

        if ((iface->mtu == 0) || (iface->mtu > MAX_CAN_DATA_SIZE)) {
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	8a1b      	ldrh	r3, [r3, #16]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d005      	beq.n	8009ae4 <csp_can_add_interface+0x4c>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	8a1b      	ldrh	r3, [r3, #16]
 8009adc:	f240 72fa 	movw	r2, #2042	@ 0x7fa
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d903      	bls.n	8009aec <csp_can_add_interface+0x54>
            iface->mtu = MAX_CAN_DATA_SIZE;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f240 72fa 	movw	r2, #2042	@ 0x7fa
 8009aea:	821a      	strh	r2, [r3, #16]
        }

        ifdata->cfp_frame_id = 0;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2200      	movs	r2, #0
 8009af0:	601a      	str	r2, [r3, #0]

	iface->nexthop = csp_can_tx;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	4a04      	ldr	r2, [pc, #16]	@ (8009b08 <csp_can_add_interface+0x70>)
 8009af6:	60da      	str	r2, [r3, #12]

	return csp_iflist_add(iface);
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f7fe febd 	bl	8008878 <csp_iflist_add>
 8009afe:	4603      	mov	r3, r0
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3710      	adds	r7, #16
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	080098dd 	.word	0x080098dd

08009b0c <csp_can_pbuf_free>:
#define PBUF_TIMEOUT_MS		1000

static csp_can_pbuf_element_t csp_can_pbuf[PBUF_ELEMENTS] = {};

int csp_can_pbuf_free(csp_can_pbuf_element_t *buf, CSP_BASE_TYPE *task_woken)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b082      	sub	sp, #8
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
	/* Free CSP packet */
	if (buf->packet != NULL) {
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	68db      	ldr	r3, [r3, #12]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d00d      	beq.n	8009b3a <csp_can_pbuf_free+0x2e>
		if (task_woken == NULL) {
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d105      	bne.n	8009b30 <csp_can_pbuf_free+0x24>
			csp_buffer_free(buf->packet);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f7fe f9cb 	bl	8007ec4 <csp_buffer_free>
 8009b2e:	e004      	b.n	8009b3a <csp_can_pbuf_free+0x2e>
		} else {
			csp_buffer_free_isr(buf->packet);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	68db      	ldr	r3, [r3, #12]
 8009b34:	4618      	mov	r0, r3
 8009b36:	f7fe f98b 	bl	8007e50 <csp_buffer_free_isr>
		}
	}

	/* Mark buffer element free */
	buf->packet = NULL;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	60da      	str	r2, [r3, #12]
	buf->rx_count = 0;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	801a      	strh	r2, [r3, #0]
	buf->cfpid = 0;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	609a      	str	r2, [r3, #8]
	buf->last_used = 0;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	615a      	str	r2, [r3, #20]
	buf->remain = 0;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2200      	movs	r2, #0
 8009b56:	605a      	str	r2, [r3, #4]
	buf->state = BUF_FREE;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	741a      	strb	r2, [r3, #16]

	return CSP_ERR_NONE;
 8009b5e:	2300      	movs	r3, #0
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3708      	adds	r7, #8
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <csp_can_pbuf_new>:

csp_can_pbuf_element_t *csp_can_pbuf_new(uint32_t id, CSP_BASE_TYPE *task_woken)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
	uint32_t now = (task_woken) ? csp_get_ms_isr() : csp_get_ms();
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d003      	beq.n	8009b80 <csp_can_pbuf_new+0x18>
 8009b78:	f7fe f84d 	bl	8007c16 <csp_get_ms_isr>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	e002      	b.n	8009b86 <csp_can_pbuf_new+0x1e>
 8009b80:	f7fe f842 	bl	8007c08 <csp_get_ms>
 8009b84:	4603      	mov	r3, r0
 8009b86:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < PBUF_ELEMENTS; i++) {
 8009b88:	2300      	movs	r3, #0
 8009b8a:	60fb      	str	r3, [r7, #12]
 8009b8c:	e061      	b.n	8009c52 <csp_can_pbuf_new+0xea>

		/* Perform cleanup in used pbufs */
		if (csp_can_pbuf[i].state == BUF_USED) {
 8009b8e:	4935      	ldr	r1, [pc, #212]	@ (8009c64 <csp_can_pbuf_new+0xfc>)
 8009b90:	68fa      	ldr	r2, [r7, #12]
 8009b92:	4613      	mov	r3, r2
 8009b94:	005b      	lsls	r3, r3, #1
 8009b96:	4413      	add	r3, r2
 8009b98:	00db      	lsls	r3, r3, #3
 8009b9a:	440b      	add	r3, r1
 8009b9c:	3310      	adds	r3, #16
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d118      	bne.n	8009bd6 <csp_can_pbuf_new+0x6e>
			if (now - csp_can_pbuf[i].last_used > PBUF_TIMEOUT_MS)
 8009ba4:	492f      	ldr	r1, [pc, #188]	@ (8009c64 <csp_can_pbuf_new+0xfc>)
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	4613      	mov	r3, r2
 8009baa:	005b      	lsls	r3, r3, #1
 8009bac:	4413      	add	r3, r2
 8009bae:	00db      	lsls	r3, r3, #3
 8009bb0:	440b      	add	r3, r1
 8009bb2:	3314      	adds	r3, #20
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	68ba      	ldr	r2, [r7, #8]
 8009bb8:	1ad3      	subs	r3, r2, r3
 8009bba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009bbe:	d90a      	bls.n	8009bd6 <csp_can_pbuf_new+0x6e>
				csp_can_pbuf_free(&csp_can_pbuf[i], task_woken);
 8009bc0:	68fa      	ldr	r2, [r7, #12]
 8009bc2:	4613      	mov	r3, r2
 8009bc4:	005b      	lsls	r3, r3, #1
 8009bc6:	4413      	add	r3, r2
 8009bc8:	00db      	lsls	r3, r3, #3
 8009bca:	4a26      	ldr	r2, [pc, #152]	@ (8009c64 <csp_can_pbuf_new+0xfc>)
 8009bcc:	4413      	add	r3, r2
 8009bce:	6839      	ldr	r1, [r7, #0]
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7ff ff9b 	bl	8009b0c <csp_can_pbuf_free>
		}

		if (csp_can_pbuf[i].state == BUF_FREE) {
 8009bd6:	4923      	ldr	r1, [pc, #140]	@ (8009c64 <csp_can_pbuf_new+0xfc>)
 8009bd8:	68fa      	ldr	r2, [r7, #12]
 8009bda:	4613      	mov	r3, r2
 8009bdc:	005b      	lsls	r3, r3, #1
 8009bde:	4413      	add	r3, r2
 8009be0:	00db      	lsls	r3, r3, #3
 8009be2:	440b      	add	r3, r1
 8009be4:	3310      	adds	r3, #16
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d12f      	bne.n	8009c4c <csp_can_pbuf_new+0xe4>
			csp_can_pbuf[i].state = BUF_USED;
 8009bec:	491d      	ldr	r1, [pc, #116]	@ (8009c64 <csp_can_pbuf_new+0xfc>)
 8009bee:	68fa      	ldr	r2, [r7, #12]
 8009bf0:	4613      	mov	r3, r2
 8009bf2:	005b      	lsls	r3, r3, #1
 8009bf4:	4413      	add	r3, r2
 8009bf6:	00db      	lsls	r3, r3, #3
 8009bf8:	440b      	add	r3, r1
 8009bfa:	3310      	adds	r3, #16
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	701a      	strb	r2, [r3, #0]
			csp_can_pbuf[i].cfpid = id;
 8009c00:	4918      	ldr	r1, [pc, #96]	@ (8009c64 <csp_can_pbuf_new+0xfc>)
 8009c02:	68fa      	ldr	r2, [r7, #12]
 8009c04:	4613      	mov	r3, r2
 8009c06:	005b      	lsls	r3, r3, #1
 8009c08:	4413      	add	r3, r2
 8009c0a:	00db      	lsls	r3, r3, #3
 8009c0c:	440b      	add	r3, r1
 8009c0e:	3308      	adds	r3, #8
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	601a      	str	r2, [r3, #0]
			csp_can_pbuf[i].remain = 0;
 8009c14:	4913      	ldr	r1, [pc, #76]	@ (8009c64 <csp_can_pbuf_new+0xfc>)
 8009c16:	68fa      	ldr	r2, [r7, #12]
 8009c18:	4613      	mov	r3, r2
 8009c1a:	005b      	lsls	r3, r3, #1
 8009c1c:	4413      	add	r3, r2
 8009c1e:	00db      	lsls	r3, r3, #3
 8009c20:	440b      	add	r3, r1
 8009c22:	3304      	adds	r3, #4
 8009c24:	2200      	movs	r2, #0
 8009c26:	601a      	str	r2, [r3, #0]
			csp_can_pbuf[i].last_used = now;
 8009c28:	490e      	ldr	r1, [pc, #56]	@ (8009c64 <csp_can_pbuf_new+0xfc>)
 8009c2a:	68fa      	ldr	r2, [r7, #12]
 8009c2c:	4613      	mov	r3, r2
 8009c2e:	005b      	lsls	r3, r3, #1
 8009c30:	4413      	add	r3, r2
 8009c32:	00db      	lsls	r3, r3, #3
 8009c34:	440b      	add	r3, r1
 8009c36:	3314      	adds	r3, #20
 8009c38:	68ba      	ldr	r2, [r7, #8]
 8009c3a:	601a      	str	r2, [r3, #0]
			return &csp_can_pbuf[i];
 8009c3c:	68fa      	ldr	r2, [r7, #12]
 8009c3e:	4613      	mov	r3, r2
 8009c40:	005b      	lsls	r3, r3, #1
 8009c42:	4413      	add	r3, r2
 8009c44:	00db      	lsls	r3, r3, #3
 8009c46:	4a07      	ldr	r2, [pc, #28]	@ (8009c64 <csp_can_pbuf_new+0xfc>)
 8009c48:	4413      	add	r3, r2
 8009c4a:	e006      	b.n	8009c5a <csp_can_pbuf_new+0xf2>
	for (int i = 0; i < PBUF_ELEMENTS; i++) {
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	60fb      	str	r3, [r7, #12]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2b04      	cmp	r3, #4
 8009c56:	dd9a      	ble.n	8009b8e <csp_can_pbuf_new+0x26>
		}

	}

	return NULL;
 8009c58:	2300      	movs	r3, #0

}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3710      	adds	r7, #16
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	24042cc4 	.word	0x24042cc4

08009c68 <csp_can_pbuf_find>:

csp_can_pbuf_element_t *csp_can_pbuf_find(uint32_t id, uint32_t mask, CSP_BASE_TYPE *task_woken)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b086      	sub	sp, #24
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < PBUF_ELEMENTS; i++) {
 8009c74:	2300      	movs	r3, #0
 8009c76:	617b      	str	r3, [r7, #20]
 8009c78:	e037      	b.n	8009cea <csp_can_pbuf_find+0x82>
		if ((csp_can_pbuf[i].state == BUF_USED) && ((csp_can_pbuf[i].cfpid & mask) == (id & mask))) {
 8009c7a:	4920      	ldr	r1, [pc, #128]	@ (8009cfc <csp_can_pbuf_find+0x94>)
 8009c7c:	697a      	ldr	r2, [r7, #20]
 8009c7e:	4613      	mov	r3, r2
 8009c80:	005b      	lsls	r3, r3, #1
 8009c82:	4413      	add	r3, r2
 8009c84:	00db      	lsls	r3, r3, #3
 8009c86:	440b      	add	r3, r1
 8009c88:	3310      	adds	r3, #16
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d129      	bne.n	8009ce4 <csp_can_pbuf_find+0x7c>
 8009c90:	491a      	ldr	r1, [pc, #104]	@ (8009cfc <csp_can_pbuf_find+0x94>)
 8009c92:	697a      	ldr	r2, [r7, #20]
 8009c94:	4613      	mov	r3, r2
 8009c96:	005b      	lsls	r3, r3, #1
 8009c98:	4413      	add	r3, r2
 8009c9a:	00db      	lsls	r3, r3, #3
 8009c9c:	440b      	add	r3, r1
 8009c9e:	3308      	adds	r3, #8
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	405a      	eors	r2, r3
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	4013      	ands	r3, r2
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d11a      	bne.n	8009ce4 <csp_can_pbuf_find+0x7c>
			csp_can_pbuf[i].last_used = (task_woken) ? csp_get_ms_isr() : csp_get_ms();
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d003      	beq.n	8009cbc <csp_can_pbuf_find+0x54>
 8009cb4:	f7fd ffaf 	bl	8007c16 <csp_get_ms_isr>
 8009cb8:	4602      	mov	r2, r0
 8009cba:	e002      	b.n	8009cc2 <csp_can_pbuf_find+0x5a>
 8009cbc:	f7fd ffa4 	bl	8007c08 <csp_get_ms>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	480e      	ldr	r0, [pc, #56]	@ (8009cfc <csp_can_pbuf_find+0x94>)
 8009cc4:	6979      	ldr	r1, [r7, #20]
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	005b      	lsls	r3, r3, #1
 8009cca:	440b      	add	r3, r1
 8009ccc:	00db      	lsls	r3, r3, #3
 8009cce:	4403      	add	r3, r0
 8009cd0:	3314      	adds	r3, #20
 8009cd2:	601a      	str	r2, [r3, #0]
			return &csp_can_pbuf[i];
 8009cd4:	697a      	ldr	r2, [r7, #20]
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	005b      	lsls	r3, r3, #1
 8009cda:	4413      	add	r3, r2
 8009cdc:	00db      	lsls	r3, r3, #3
 8009cde:	4a07      	ldr	r2, [pc, #28]	@ (8009cfc <csp_can_pbuf_find+0x94>)
 8009ce0:	4413      	add	r3, r2
 8009ce2:	e006      	b.n	8009cf2 <csp_can_pbuf_find+0x8a>
	for (int i = 0; i < PBUF_ELEMENTS; i++) {
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	617b      	str	r3, [r7, #20]
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	2b04      	cmp	r3, #4
 8009cee:	ddc4      	ble.n	8009c7a <csp_can_pbuf_find+0x12>
		}
	}
	return NULL;
 8009cf0:	2300      	movs	r3, #0
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3718      	adds	r7, #24
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	24042cc4 	.word	0x24042cc4

08009d00 <csp_lo_tx>:
/**
 * Loopback interface transmit function
 * @param packet Packet to transmit
 * @return 1 if packet was successfully transmitted, 0 on error
 */
static int csp_lo_tx(const csp_route_t * ifroute, csp_packet_t * packet) {
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b082      	sub	sp, #8
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	6039      	str	r1, [r7, #0]

	/* Drop packet silently if not destined for us. This allows
	 * blackhole routing addresses by setting their nexthop to
	 * the loopback interface.
	 */
	if (packet->id.dst != csp_conf.address) {
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	89db      	ldrh	r3, [r3, #14]
 8009d0e:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	461a      	mov	r2, r3
 8009d16:	4b09      	ldr	r3, [pc, #36]	@ (8009d3c <csp_lo_tx+0x3c>)
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d004      	beq.n	8009d28 <csp_lo_tx+0x28>
		/* Consume and drop packet */
		csp_buffer_free(packet);
 8009d1e:	6838      	ldr	r0, [r7, #0]
 8009d20:	f7fe f8d0 	bl	8007ec4 <csp_buffer_free>
		return CSP_ERR_NONE;
 8009d24:	2300      	movs	r3, #0
 8009d26:	e005      	b.n	8009d34 <csp_lo_tx+0x34>
	}

	/* Send back into CSP, notice calling from task so last argument must be NULL! */
	csp_qfifo_write(packet, &csp_if_lo, NULL);
 8009d28:	2200      	movs	r2, #0
 8009d2a:	4905      	ldr	r1, [pc, #20]	@ (8009d40 <csp_lo_tx+0x40>)
 8009d2c:	6838      	ldr	r0, [r7, #0]
 8009d2e:	f7ff f94d 	bl	8008fcc <csp_qfifo_write>

	return CSP_ERR_NONE;
 8009d32:	2300      	movs	r3, #0

}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3708      	adds	r7, #8
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}
 8009d3c:	24042c54 	.word	0x24042c54
 8009d40:	24000094 	.word	0x24000094

08009d44 <csp_rtable_set>:

int csp_rtable_check(const char * rtable) {
	return csp_rtable_parse(rtable, 1);
}

int csp_rtable_set(uint8_t address, uint8_t netmask, csp_iface_t *ifc, uint8_t via) {
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b086      	sub	sp, #24
 8009d48:	af04      	add	r7, sp, #16
 8009d4a:	603a      	str	r2, [r7, #0]
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	4603      	mov	r3, r0
 8009d50:	71fb      	strb	r3, [r7, #7]
 8009d52:	460b      	mov	r3, r1
 8009d54:	71bb      	strb	r3, [r7, #6]
 8009d56:	4613      	mov	r3, r2
 8009d58:	717b      	strb	r3, [r7, #5]

	/* Legacy reference to default route (the old way) */
	if (address == CSP_DEFAULT_ROUTE) {
 8009d5a:	79fb      	ldrb	r3, [r7, #7]
 8009d5c:	2b20      	cmp	r3, #32
 8009d5e:	d103      	bne.n	8009d68 <csp_rtable_set+0x24>
		netmask = 0;
 8009d60:	2300      	movs	r3, #0
 8009d62:	71bb      	strb	r3, [r7, #6]
		address = 0;
 8009d64:	2300      	movs	r3, #0
 8009d66:	71fb      	strb	r3, [r7, #7]
	}

	/* Validates options */
	if (((address > CSP_ID_HOST_MAX) && (address != 255)) || (ifc == NULL) || (netmask > CSP_ID_HOST_SIZE)) {
 8009d68:	79fb      	ldrb	r3, [r7, #7]
 8009d6a:	2b1f      	cmp	r3, #31
 8009d6c:	d902      	bls.n	8009d74 <csp_rtable_set+0x30>
 8009d6e:	79fb      	ldrb	r3, [r7, #7]
 8009d70:	2bff      	cmp	r3, #255	@ 0xff
 8009d72:	d105      	bne.n	8009d80 <csp_rtable_set+0x3c>
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d002      	beq.n	8009d80 <csp_rtable_set+0x3c>
 8009d7a:	79bb      	ldrb	r3, [r7, #6]
 8009d7c:	2b05      	cmp	r3, #5
 8009d7e:	d91b      	bls.n	8009db8 <csp_rtable_set+0x74>
		csp_log_error("%s: invalid route: address %u, netmask %u, interface %p (%s), via %u",
 8009d80:	4b13      	ldr	r3, [pc, #76]	@ (8009dd0 <csp_rtable_set+0x8c>)
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d014      	beq.n	8009db2 <csp_rtable_set+0x6e>
 8009d88:	79f8      	ldrb	r0, [r7, #7]
 8009d8a:	79ba      	ldrb	r2, [r7, #6]
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d002      	beq.n	8009d98 <csp_rtable_set+0x54>
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	e000      	b.n	8009d9a <csp_rtable_set+0x56>
 8009d98:	4b0e      	ldr	r3, [pc, #56]	@ (8009dd4 <csp_rtable_set+0x90>)
 8009d9a:	7979      	ldrb	r1, [r7, #5]
 8009d9c:	9103      	str	r1, [sp, #12]
 8009d9e:	9302      	str	r3, [sp, #8]
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	9301      	str	r3, [sp, #4]
 8009da4:	9200      	str	r2, [sp, #0]
 8009da6:	4603      	mov	r3, r0
 8009da8:	4a0b      	ldr	r2, [pc, #44]	@ (8009dd8 <csp_rtable_set+0x94>)
 8009daa:	490c      	ldr	r1, [pc, #48]	@ (8009ddc <csp_rtable_set+0x98>)
 8009dac:	2000      	movs	r0, #0
 8009dae:	f7fe fcaf 	bl	8008710 <do_csp_debug>
                              __FUNCTION__, address, netmask, ifc, (ifc != NULL) ? ifc->name : "", via);
		return CSP_ERR_INVAL;
 8009db2:	f06f 0301 	mvn.w	r3, #1
 8009db6:	e006      	b.n	8009dc6 <csp_rtable_set+0x82>
	}

        return csp_rtable_set_internal(address, netmask, ifc, via);
 8009db8:	797b      	ldrb	r3, [r7, #5]
 8009dba:	79b9      	ldrb	r1, [r7, #6]
 8009dbc:	79f8      	ldrb	r0, [r7, #7]
 8009dbe:	683a      	ldr	r2, [r7, #0]
 8009dc0:	f000 f878 	bl	8009eb4 <csp_rtable_set_internal>
 8009dc4:	4603      	mov	r3, r0
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3708      	adds	r7, #8
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	2400008c 	.word	0x2400008c
 8009dd4:	080143c8 	.word	0x080143c8
 8009dd8:	080145b4 	.word	0x080145b4
 8009ddc:	080143cc 	.word	0x080143cc

08009de0 <csp_rtable_find>:
} csp_rtable_t;

/* Routing table (linked list) */
static csp_rtable_t * rtable = NULL;

static csp_rtable_t * csp_rtable_find(uint8_t addr, uint8_t netmask, uint8_t exact) {
 8009de0:	b480      	push	{r7}
 8009de2:	b087      	sub	sp, #28
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	4603      	mov	r3, r0
 8009de8:	71fb      	strb	r3, [r7, #7]
 8009dea:	460b      	mov	r3, r1
 8009dec:	71bb      	strb	r3, [r7, #6]
 8009dee:	4613      	mov	r3, r2
 8009df0:	717b      	strb	r3, [r7, #5]

	/* Remember best result */
	csp_rtable_t * best_result = NULL;
 8009df2:	2300      	movs	r3, #0
 8009df4:	617b      	str	r3, [r7, #20]
	uint8_t best_result_mask = 0;
 8009df6:	2300      	movs	r3, #0
 8009df8:	74fb      	strb	r3, [r7, #19]

	/* Start search */
	csp_rtable_t * i = rtable;
 8009dfa:	4b22      	ldr	r3, [pc, #136]	@ (8009e84 <csp_rtable_find+0xa4>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	60fb      	str	r3, [r7, #12]
	while(i) {
 8009e00:	e036      	b.n	8009e70 <csp_rtable_find+0x90>

		/* Look for exact match */
		if (i->address == addr && i->netmask == netmask) {
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	7a1b      	ldrb	r3, [r3, #8]
 8009e06:	79fa      	ldrb	r2, [r7, #7]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d107      	bne.n	8009e1c <csp_rtable_find+0x3c>
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	7a5b      	ldrb	r3, [r3, #9]
 8009e10:	79ba      	ldrb	r2, [r7, #6]
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d102      	bne.n	8009e1c <csp_rtable_find+0x3c>
			best_result = i;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	617b      	str	r3, [r7, #20]
			break;
 8009e1a:	e02c      	b.n	8009e76 <csp_rtable_find+0x96>
		}

		/* Try a CIDR netmask match */
		if (!exact) {
 8009e1c:	797b      	ldrb	r3, [r7, #5]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d123      	bne.n	8009e6a <csp_rtable_find+0x8a>
			uint8_t hostbits = (1 << (CSP_ID_HOST_SIZE - i->netmask)) - 1;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	7a5b      	ldrb	r3, [r3, #9]
 8009e26:	f1c3 0305 	rsb	r3, r3, #5
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	3b01      	subs	r3, #1
 8009e34:	72fb      	strb	r3, [r7, #11]
			uint8_t netbits = ~hostbits;
 8009e36:	7afb      	ldrb	r3, [r7, #11]
 8009e38:	43db      	mvns	r3, r3
 8009e3a:	72bb      	strb	r3, [r7, #10]
			//printf("Netbits %x Hostbits %x\r\n", netbits, hostbits);

			/* Match network addresses */
			uint8_t net_a = i->address & netbits;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	7a1a      	ldrb	r2, [r3, #8]
 8009e40:	7abb      	ldrb	r3, [r7, #10]
 8009e42:	4013      	ands	r3, r2
 8009e44:	727b      	strb	r3, [r7, #9]
			uint8_t net_b = addr & netbits;
 8009e46:	79fa      	ldrb	r2, [r7, #7]
 8009e48:	7abb      	ldrb	r3, [r7, #10]
 8009e4a:	4013      	ands	r3, r2
 8009e4c:	723b      	strb	r3, [r7, #8]
			//printf("A: %hhx, B: %hhx\r\n", net_a, net_b);

			/* We have a match */
			if (net_a == net_b) {
 8009e4e:	7a7a      	ldrb	r2, [r7, #9]
 8009e50:	7a3b      	ldrb	r3, [r7, #8]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d109      	bne.n	8009e6a <csp_rtable_find+0x8a>
				if (i->netmask >= best_result_mask) {
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	7a5b      	ldrb	r3, [r3, #9]
 8009e5a:	7cfa      	ldrb	r2, [r7, #19]
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d804      	bhi.n	8009e6a <csp_rtable_find+0x8a>
					//printf("Match best result %u %u\r\n", best_result_mask, i->netmask);
					best_result = i;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	617b      	str	r3, [r7, #20]
					best_result_mask = i->netmask;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	7a5b      	ldrb	r3, [r3, #9]
 8009e68:	74fb      	strb	r3, [r7, #19]
				}
			}

		}

		i = i->next;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	60fb      	str	r3, [r7, #12]
	while(i) {
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d1c5      	bne.n	8009e02 <csp_rtable_find+0x22>
	if (0 && best_result) {
		csp_log_packet("Using routing entry: %u/%u if %s mtu %u",
				best_result->address, best_result->netmask, best_result->route.iface->name, best_result->route.via);
        }

	return best_result;
 8009e76:	697b      	ldr	r3, [r7, #20]

}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	371c      	adds	r7, #28
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr
 8009e84:	24042d3c 	.word	0x24042d3c

08009e88 <csp_rtable_find_route>:

const csp_route_t * csp_rtable_find_route(uint8_t dest_address)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	4603      	mov	r3, r0
 8009e90:	71fb      	strb	r3, [r7, #7]
    csp_rtable_t * entry = csp_rtable_find(dest_address, CSP_ID_HOST_SIZE, 0);
 8009e92:	79fb      	ldrb	r3, [r7, #7]
 8009e94:	2200      	movs	r2, #0
 8009e96:	2105      	movs	r1, #5
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f7ff ffa1 	bl	8009de0 <csp_rtable_find>
 8009e9e:	60f8      	str	r0, [r7, #12]
    if (entry) {
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d001      	beq.n	8009eaa <csp_rtable_find_route+0x22>
	return &entry->route;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	e000      	b.n	8009eac <csp_rtable_find_route+0x24>
    }
    return NULL;
 8009eaa:	2300      	movs	r3, #0
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3710      	adds	r7, #16
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <csp_rtable_set_internal>:

int csp_rtable_set_internal(uint8_t address, uint8_t netmask, csp_iface_t *ifc, uint8_t via) {
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	603a      	str	r2, [r7, #0]
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	71fb      	strb	r3, [r7, #7]
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	71bb      	strb	r3, [r7, #6]
 8009ec6:	4613      	mov	r3, r2
 8009ec8:	717b      	strb	r3, [r7, #5]

	/* First see if the entry exists */
	csp_rtable_t * entry = csp_rtable_find(address, netmask, 1);
 8009eca:	79b9      	ldrb	r1, [r7, #6]
 8009ecc:	79fb      	ldrb	r3, [r7, #7]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f7ff ff85 	bl	8009de0 <csp_rtable_find>
 8009ed6:	60f8      	str	r0, [r7, #12]

	/* If not, create a new one */
	if (!entry) {
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d122      	bne.n	8009f24 <csp_rtable_set_internal+0x70>
		entry = csp_malloc(sizeof(*entry));
 8009ede:	2010      	movs	r0, #16
 8009ee0:	f7fd fd04 	bl	80078ec <csp_malloc>
 8009ee4:	60f8      	str	r0, [r7, #12]
		if (entry == NULL) {
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d102      	bne.n	8009ef2 <csp_rtable_set_internal+0x3e>
			return CSP_ERR_NOMEM;
 8009eec:	f04f 33ff 	mov.w	r3, #4294967295
 8009ef0:	e025      	b.n	8009f3e <csp_rtable_set_internal+0x8a>
		}

		entry->next = NULL;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	60da      	str	r2, [r3, #12]
		/* Add entry to linked-list */
		if (rtable == NULL) {
 8009ef8:	4b13      	ldr	r3, [pc, #76]	@ (8009f48 <csp_rtable_set_internal+0x94>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d103      	bne.n	8009f08 <csp_rtable_set_internal+0x54>
			/* This is the first interface to be added */
			rtable = entry;
 8009f00:	4a11      	ldr	r2, [pc, #68]	@ (8009f48 <csp_rtable_set_internal+0x94>)
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	6013      	str	r3, [r2, #0]
 8009f06:	e00d      	b.n	8009f24 <csp_rtable_set_internal+0x70>
		} else {
			/* One or more interfaces were already added */
			csp_rtable_t * i = rtable;
 8009f08:	4b0f      	ldr	r3, [pc, #60]	@ (8009f48 <csp_rtable_set_internal+0x94>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	60bb      	str	r3, [r7, #8]
			while (i->next) {
 8009f0e:	e002      	b.n	8009f16 <csp_rtable_set_internal+0x62>
				i = i->next;
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	68db      	ldr	r3, [r3, #12]
 8009f14:	60bb      	str	r3, [r7, #8]
			while (i->next) {
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d1f8      	bne.n	8009f10 <csp_rtable_set_internal+0x5c>
			}
			i->next = entry;
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	60da      	str	r2, [r3, #12]
		}
	}

	/* Fill in the data */
	entry->address = address;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	79fa      	ldrb	r2, [r7, #7]
 8009f28:	721a      	strb	r2, [r3, #8]
	entry->netmask = netmask;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	79ba      	ldrb	r2, [r7, #6]
 8009f2e:	725a      	strb	r2, [r3, #9]
	entry->route.iface = ifc;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	683a      	ldr	r2, [r7, #0]
 8009f34:	601a      	str	r2, [r3, #0]
	entry->route.via = via;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	797a      	ldrb	r2, [r7, #5]
 8009f3a:	711a      	strb	r2, [r3, #4]

	return CSP_ERR_NONE;
 8009f3c:	2300      	movs	r3, #0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3710      	adds	r7, #16
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	24042d3c 	.word	0x24042d3c

08009f4c <csp_udp_new_packet>:
#include <csp/csp.h>
#include <csp/arch/csp_queue.h>

#include "../csp_conn.h"

void csp_udp_new_packet(csp_conn_t * conn, csp_packet_t * packet) {
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	6039      	str	r1, [r7, #0]

	/* Enqueue */
	if (csp_conn_enqueue_packet(conn, packet) < 0) {
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6839      	ldr	r1, [r7, #0]
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7fe f84e 	bl	8007ffc <csp_conn_enqueue_packet>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	da0b      	bge.n	8009f7e <csp_udp_new_packet+0x32>
		csp_log_error("Connection buffer queue full!");
 8009f66:	4b16      	ldr	r3, [pc, #88]	@ (8009fc0 <csp_udp_new_packet+0x74>)
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d003      	beq.n	8009f76 <csp_udp_new_packet+0x2a>
 8009f6e:	4915      	ldr	r1, [pc, #84]	@ (8009fc4 <csp_udp_new_packet+0x78>)
 8009f70:	2000      	movs	r0, #0
 8009f72:	f7fe fbcd 	bl	8008710 <do_csp_debug>
		csp_buffer_free(packet);
 8009f76:	6838      	ldr	r0, [r7, #0]
 8009f78:	f7fd ffa4 	bl	8007ec4 <csp_buffer_free>
		return;
 8009f7c:	e01d      	b.n	8009fba <csp_udp_new_packet+0x6e>
	}

	/* Try to queue up the new connection pointer */
	if (conn->socket != NULL) {
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	691b      	ldr	r3, [r3, #16]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d019      	beq.n	8009fba <csp_udp_new_packet+0x6e>
		if (csp_queue_enqueue(conn->socket, &conn, 0) != CSP_QUEUE_OK) {
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	691b      	ldr	r3, [r3, #16]
 8009f8a:	1d39      	adds	r1, r7, #4
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f7fd fcf9 	bl	8007986 <csp_queue_enqueue>
 8009f94:	4603      	mov	r3, r0
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d00c      	beq.n	8009fb4 <csp_udp_new_packet+0x68>
			csp_log_warn("Warning socket connection queue full");
 8009f9a:	4b09      	ldr	r3, [pc, #36]	@ (8009fc0 <csp_udp_new_packet+0x74>)
 8009f9c:	785b      	ldrb	r3, [r3, #1]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d003      	beq.n	8009faa <csp_udp_new_packet+0x5e>
 8009fa2:	4909      	ldr	r1, [pc, #36]	@ (8009fc8 <csp_udp_new_packet+0x7c>)
 8009fa4:	2001      	movs	r0, #1
 8009fa6:	f7fe fbb3 	bl	8008710 <do_csp_debug>
			csp_close(conn);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	4618      	mov	r0, r3
 8009fae:	f7fe fa2c 	bl	800840a <csp_close>
			return;
 8009fb2:	e002      	b.n	8009fba <csp_udp_new_packet+0x6e>
		}

		/* Ensure that this connection will not be posted to this socket again */
		conn->socket = NULL;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	611a      	str	r2, [r3, #16]
	}

}
 8009fba:	3708      	adds	r7, #8
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	2400008c 	.word	0x2400008c
 8009fc4:	0801444c 	.word	0x0801444c
 8009fc8:	0801446c 	.word	0x0801446c

08009fcc <RingBuffer_Create>:

#include "ring_buffer.h"

void RingBuffer_Create(s_RingBufferType *rb, uint32_t id, const char *name,
                         RingBufElement *buffer, RingBufCtr max_size)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b088      	sub	sp, #32
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	607a      	str	r2, [r7, #4]
 8009fd8:	603b      	str	r3, [r7, #0]
    rb->id = id;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	68ba      	ldr	r2, [r7, #8]
 8009fde:	601a      	str	r2, [r3, #0]

    strncpy(rb->name, name, RINGBUFFER_NAME_MAX_LEN - 1);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	3304      	adds	r3, #4
 8009fe4:	221f      	movs	r2, #31
 8009fe6:	6879      	ldr	r1, [r7, #4]
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f008 f931 	bl	8012250 <strncpy>
    rb->name[RINGBUFFER_NAME_MAX_LEN - 1] = '\0';
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

    rb->buffer = buffer;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	683a      	ldr	r2, [r7, #0]
 8009ffa:	625a      	str	r2, [r3, #36]	@ 0x24
    rb->max_size = max_size;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a000:	851a      	strh	r2, [r3, #40]	@ 0x28

    atomic_store_explicit(&rb->head, 0U, memory_order_release);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	332a      	adds	r3, #42	@ 0x2a
 800a006:	61fb      	str	r3, [r7, #28]
 800a008:	2300      	movs	r3, #0
 800a00a:	82fb      	strh	r3, [r7, #22]
 800a00c:	8afa      	ldrh	r2, [r7, #22]
 800a00e:	69fb      	ldr	r3, [r7, #28]
 800a010:	f3bf 8f5b 	dmb	ish
 800a014:	801a      	strh	r2, [r3, #0]
    atomic_store_explicit(&rb->tail, 0U, memory_order_release);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	332c      	adds	r3, #44	@ 0x2c
 800a01a:	61bb      	str	r3, [r7, #24]
 800a01c:	2300      	movs	r3, #0
 800a01e:	82bb      	strh	r3, [r7, #20]
 800a020:	8aba      	ldrh	r2, [r7, #20]
 800a022:	69bb      	ldr	r3, [r7, #24]
 800a024:	f3bf 8f5b 	dmb	ish
 800a028:	801a      	strh	r2, [r3, #0]
}
 800a02a:	bf00      	nop
 800a02c:	3720      	adds	r7, #32
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}

0800a032 <RingBuffer_Put>:

_Bool RingBuffer_Put(s_RingBufferType * const rb, RingBufElement const el)
{
 800a032:	b480      	push	{r7}
 800a034:	b08b      	sub	sp, #44	@ 0x2c
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
 800a03a:	460b      	mov	r3, r1
 800a03c:	70fb      	strb	r3, [r7, #3]
//	__disable_irq();
    RingBufCtr head = atomic_load_explicit(&rb->head, memory_order_relaxed) + 1U;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	332a      	adds	r3, #42	@ 0x2a
 800a042:	623b      	str	r3, [r7, #32]
 800a044:	6a3b      	ldr	r3, [r7, #32]
 800a046:	881b      	ldrh	r3, [r3, #0]
 800a048:	b29b      	uxth	r3, r3
 800a04a:	81fb      	strh	r3, [r7, #14]
 800a04c:	89fb      	ldrh	r3, [r7, #14]
 800a04e:	3301      	adds	r3, #1
 800a050:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (head == rb->max_size)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a056:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a058:	429a      	cmp	r2, r3
 800a05a:	d101      	bne.n	800a060 <RingBuffer_Put+0x2e>
    {
        head = 0U;
 800a05c:	2300      	movs	r3, #0
 800a05e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }

    RingBufCtr tail = atomic_load_explicit(&rb->tail, memory_order_acquire);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	332c      	adds	r3, #44	@ 0x2c
 800a064:	61fb      	str	r3, [r7, #28]
 800a066:	69fb      	ldr	r3, [r7, #28]
 800a068:	881b      	ldrh	r3, [r3, #0]
 800a06a:	f3bf 8f5b 	dmb	ish
 800a06e:	b29b      	uxth	r3, r3
 800a070:	81bb      	strh	r3, [r7, #12]
 800a072:	89bb      	ldrh	r3, [r7, #12]
 800a074:	837b      	strh	r3, [r7, #26]
    if (head != tail) // buffer NOT full?
 800a076:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a078:	8b7b      	ldrh	r3, [r7, #26]
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d018      	beq.n	800a0b0 <RingBuffer_Put+0x7e>
    {
        rb->buffer[atomic_load_explicit(&rb->head, memory_order_relaxed)] = el;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	322a      	adds	r2, #42	@ 0x2a
 800a086:	617a      	str	r2, [r7, #20]
 800a088:	697a      	ldr	r2, [r7, #20]
 800a08a:	8812      	ldrh	r2, [r2, #0]
 800a08c:	b292      	uxth	r2, r2
 800a08e:	817a      	strh	r2, [r7, #10]
 800a090:	897a      	ldrh	r2, [r7, #10]
 800a092:	4413      	add	r3, r2
 800a094:	78fa      	ldrb	r2, [r7, #3]
 800a096:	701a      	strb	r2, [r3, #0]
        atomic_store_explicit(&rb->head, head, memory_order_release);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	332a      	adds	r3, #42	@ 0x2a
 800a09c:	613b      	str	r3, [r7, #16]
 800a09e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a0a0:	813b      	strh	r3, [r7, #8]
 800a0a2:	893a      	ldrh	r2, [r7, #8]
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	f3bf 8f5b 	dmb	ish
 800a0aa:	801a      	strh	r2, [r3, #0]
//        __enable_irq();
        return true;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	e000      	b.n	800a0b2 <RingBuffer_Put+0x80>
    }
    else
    {
//    	__enable_irq();
        return false;
 800a0b0:	2300      	movs	r3, #0
    }
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	372c      	adds	r7, #44	@ 0x2c
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0bc:	4770      	bx	lr

0800a0be <RingBuffer_Get>:

_Bool RingBuffer_Get(s_RingBufferType * const rb, RingBufElement *pel)
{
 800a0be:	b480      	push	{r7}
 800a0c0:	b08b      	sub	sp, #44	@ 0x2c
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
 800a0c6:	6039      	str	r1, [r7, #0]
//	__disable_irq();
    RingBufCtr tail = atomic_load_explicit(&rb->tail, memory_order_relaxed);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	332c      	adds	r3, #44	@ 0x2c
 800a0cc:	623b      	str	r3, [r7, #32]
 800a0ce:	6a3b      	ldr	r3, [r7, #32]
 800a0d0:	881b      	ldrh	r3, [r3, #0]
 800a0d2:	b29b      	uxth	r3, r3
 800a0d4:	827b      	strh	r3, [r7, #18]
 800a0d6:	8a7b      	ldrh	r3, [r7, #18]
 800a0d8:	84fb      	strh	r3, [r7, #38]	@ 0x26
    RingBufCtr head = atomic_load_explicit(&rb->head, memory_order_acquire);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	332a      	adds	r3, #42	@ 0x2a
 800a0de:	61fb      	str	r3, [r7, #28]
 800a0e0:	69fb      	ldr	r3, [r7, #28]
 800a0e2:	881b      	ldrh	r3, [r3, #0]
 800a0e4:	f3bf 8f5b 	dmb	ish
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	823b      	strh	r3, [r7, #16]
 800a0ec:	8a3b      	ldrh	r3, [r7, #16]
 800a0ee:	837b      	strh	r3, [r7, #26]
    if (head != tail)  // buffer NOT empty?
 800a0f0:	8b7a      	ldrh	r2, [r7, #26]
 800a0f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d01c      	beq.n	800a132 <RingBuffer_Get+0x74>
    {
        *pel = rb->buffer[tail];
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a0fc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a0fe:	4413      	add	r3, r2
 800a100:	781a      	ldrb	r2, [r3, #0]
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	701a      	strb	r2, [r3, #0]
        ++tail;
 800a106:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a108:	3301      	adds	r3, #1
 800a10a:	84fb      	strh	r3, [r7, #38]	@ 0x26
        if (tail == rb->max_size)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a110:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a112:	429a      	cmp	r2, r3
 800a114:	d101      	bne.n	800a11a <RingBuffer_Get+0x5c>
        {
            tail = 0U;
 800a116:	2300      	movs	r3, #0
 800a118:	84fb      	strh	r3, [r7, #38]	@ 0x26
        }
        atomic_store_explicit(&rb->tail, tail, memory_order_release);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	332c      	adds	r3, #44	@ 0x2c
 800a11e:	617b      	str	r3, [r7, #20]
 800a120:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a122:	81fb      	strh	r3, [r7, #14]
 800a124:	89fa      	ldrh	r2, [r7, #14]
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	f3bf 8f5b 	dmb	ish
 800a12c:	801a      	strh	r2, [r3, #0]
//    	__enable_irq();
        return true;
 800a12e:	2301      	movs	r3, #1
 800a130:	e000      	b.n	800a134 <RingBuffer_Get+0x76>
    }
    else
    {
//    	__enable_irq();
        return false;
 800a132:	2300      	movs	r3, #0
    }
}
 800a134:	4618      	mov	r0, r3
 800a136:	372c      	adds	r7, #44	@ 0x2c
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <RingBuffer_IsDataAvailable>:
    }
    return rb->buffer[tail];
}

_Bool RingBuffer_IsDataAvailable(s_RingBufferType * const rb)
{
 800a140:	b480      	push	{r7}
 800a142:	b089      	sub	sp, #36	@ 0x24
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
    RingBufCtr head = atomic_load_explicit(&rb->head, memory_order_acquire);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	332a      	adds	r3, #42	@ 0x2a
 800a14c:	61fb      	str	r3, [r7, #28]
 800a14e:	69fb      	ldr	r3, [r7, #28]
 800a150:	881b      	ldrh	r3, [r3, #0]
 800a152:	f3bf 8f5b 	dmb	ish
 800a156:	b29b      	uxth	r3, r3
 800a158:	823b      	strh	r3, [r7, #16]
 800a15a:	8a3b      	ldrh	r3, [r7, #16]
 800a15c:	837b      	strh	r3, [r7, #26]
    RingBufCtr tail = atomic_load_explicit(&rb->tail, memory_order_relaxed);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	332c      	adds	r3, #44	@ 0x2c
 800a162:	617b      	str	r3, [r7, #20]
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	881b      	ldrh	r3, [r3, #0]
 800a168:	b29b      	uxth	r3, r3
 800a16a:	81fb      	strh	r3, [r7, #14]
 800a16c:	89fb      	ldrh	r3, [r7, #14]
 800a16e:	827b      	strh	r3, [r7, #18]
    return (head != tail);
 800a170:	8b7a      	ldrh	r2, [r7, #26]
 800a172:	8a7b      	ldrh	r3, [r7, #18]
 800a174:	429a      	cmp	r2, r3
 800a176:	bf14      	ite	ne
 800a178:	2301      	movne	r3, #1
 800a17a:	2300      	moveq	r3, #0
 800a17c:	b2db      	uxtb	r3, r3
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3724      	adds	r7, #36	@ 0x24
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr
	...

0800a18c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a192:	2003      	movs	r0, #3
 800a194:	f001 f8c4 	bl	800b320 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a198:	f003 faea 	bl	800d770 <HAL_RCC_GetSysClockFreq>
 800a19c:	4602      	mov	r2, r0
 800a19e:	4b15      	ldr	r3, [pc, #84]	@ (800a1f4 <HAL_Init+0x68>)
 800a1a0:	699b      	ldr	r3, [r3, #24]
 800a1a2:	0a1b      	lsrs	r3, r3, #8
 800a1a4:	f003 030f 	and.w	r3, r3, #15
 800a1a8:	4913      	ldr	r1, [pc, #76]	@ (800a1f8 <HAL_Init+0x6c>)
 800a1aa:	5ccb      	ldrb	r3, [r1, r3]
 800a1ac:	f003 031f 	and.w	r3, r3, #31
 800a1b0:	fa22 f303 	lsr.w	r3, r2, r3
 800a1b4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a1b6:	4b0f      	ldr	r3, [pc, #60]	@ (800a1f4 <HAL_Init+0x68>)
 800a1b8:	699b      	ldr	r3, [r3, #24]
 800a1ba:	f003 030f 	and.w	r3, r3, #15
 800a1be:	4a0e      	ldr	r2, [pc, #56]	@ (800a1f8 <HAL_Init+0x6c>)
 800a1c0:	5cd3      	ldrb	r3, [r2, r3]
 800a1c2:	f003 031f 	and.w	r3, r3, #31
 800a1c6:	687a      	ldr	r2, [r7, #4]
 800a1c8:	fa22 f303 	lsr.w	r3, r2, r3
 800a1cc:	4a0b      	ldr	r2, [pc, #44]	@ (800a1fc <HAL_Init+0x70>)
 800a1ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a1d0:	4a0b      	ldr	r2, [pc, #44]	@ (800a200 <HAL_Init+0x74>)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a1d6:	200f      	movs	r0, #15
 800a1d8:	f000 f814 	bl	800a204 <HAL_InitTick>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d001      	beq.n	800a1e6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	e002      	b.n	800a1ec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800a1e6:	f7f7 fb01 	bl	80017ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a1ea:	2300      	movs	r3, #0
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3708      	adds	r7, #8
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}
 800a1f4:	58024400 	.word	0x58024400
 800a1f8:	080144e0 	.word	0x080144e0
 800a1fc:	24000004 	.word	0x24000004
 800a200:	24000000 	.word	0x24000000

0800a204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b082      	sub	sp, #8
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800a20c:	4b15      	ldr	r3, [pc, #84]	@ (800a264 <HAL_InitTick+0x60>)
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d101      	bne.n	800a218 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800a214:	2301      	movs	r3, #1
 800a216:	e021      	b.n	800a25c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800a218:	4b13      	ldr	r3, [pc, #76]	@ (800a268 <HAL_InitTick+0x64>)
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	4b11      	ldr	r3, [pc, #68]	@ (800a264 <HAL_InitTick+0x60>)
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	4619      	mov	r1, r3
 800a222:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a226:	fbb3 f3f1 	udiv	r3, r3, r1
 800a22a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a22e:	4618      	mov	r0, r3
 800a230:	f001 f8a9 	bl	800b386 <HAL_SYSTICK_Config>
 800a234:	4603      	mov	r3, r0
 800a236:	2b00      	cmp	r3, #0
 800a238:	d001      	beq.n	800a23e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800a23a:	2301      	movs	r3, #1
 800a23c:	e00e      	b.n	800a25c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2b0f      	cmp	r3, #15
 800a242:	d80a      	bhi.n	800a25a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a244:	2200      	movs	r2, #0
 800a246:	6879      	ldr	r1, [r7, #4]
 800a248:	f04f 30ff 	mov.w	r0, #4294967295
 800a24c:	f001 f873 	bl	800b336 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a250:	4a06      	ldr	r2, [pc, #24]	@ (800a26c <HAL_InitTick+0x68>)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a256:	2300      	movs	r3, #0
 800a258:	e000      	b.n	800a25c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800a25a:	2301      	movs	r3, #1
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3708      	adds	r7, #8
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}
 800a264:	240000d8 	.word	0x240000d8
 800a268:	24000000 	.word	0x24000000
 800a26c:	240000d4 	.word	0x240000d4

0800a270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a270:	b480      	push	{r7}
 800a272:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800a274:	4b06      	ldr	r3, [pc, #24]	@ (800a290 <HAL_IncTick+0x20>)
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	461a      	mov	r2, r3
 800a27a:	4b06      	ldr	r3, [pc, #24]	@ (800a294 <HAL_IncTick+0x24>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4413      	add	r3, r2
 800a280:	4a04      	ldr	r2, [pc, #16]	@ (800a294 <HAL_IncTick+0x24>)
 800a282:	6013      	str	r3, [r2, #0]
}
 800a284:	bf00      	nop
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr
 800a28e:	bf00      	nop
 800a290:	240000d8 	.word	0x240000d8
 800a294:	24042d40 	.word	0x24042d40

0800a298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a298:	b480      	push	{r7}
 800a29a:	af00      	add	r7, sp, #0
  return uwTick;
 800a29c:	4b03      	ldr	r3, [pc, #12]	@ (800a2ac <HAL_GetTick+0x14>)
 800a29e:	681b      	ldr	r3, [r3, #0]
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr
 800a2aa:	bf00      	nop
 800a2ac:	24042d40 	.word	0x24042d40

0800a2b0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800a2b4:	4b03      	ldr	r3, [pc, #12]	@ (800a2c4 <HAL_GetREVID+0x14>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	0c1b      	lsrs	r3, r3, #16
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr
 800a2c4:	5c001000 	.word	0x5c001000

0800a2c8 <LL_ADC_SetCommonClock>:
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	431a      	orrs	r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	609a      	str	r2, [r3, #8]
}
 800a2e2:	bf00      	nop
 800a2e4:	370c      	adds	r7, #12
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr

0800a2ee <LL_ADC_SetCommonPathInternalCh>:
{
 800a2ee:	b480      	push	{r7}
 800a2f0:	b083      	sub	sp, #12
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
 800a2f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	431a      	orrs	r2, r3
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	609a      	str	r2, [r3, #8]
}
 800a308:	bf00      	nop
 800a30a:	370c      	adds	r7, #12
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr

0800a314 <LL_ADC_GetCommonPathInternalCh>:
{
 800a314:	b480      	push	{r7}
 800a316:	b083      	sub	sp, #12
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	689b      	ldr	r3, [r3, #8]
 800a320:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800a324:	4618      	mov	r0, r3
 800a326:	370c      	adds	r7, #12
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr

0800a330 <LL_ADC_SetChannelPreselection>:
{
 800a330:	b480      	push	{r7}
 800a332:	b087      	sub	sp, #28
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a340:	2b00      	cmp	r3, #0
 800a342:	d107      	bne.n	800a354 <LL_ADC_SetChannelPreselection+0x24>
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	0e9b      	lsrs	r3, r3, #26
 800a348:	f003 031f 	and.w	r3, r3, #31
 800a34c:	2201      	movs	r2, #1
 800a34e:	fa02 f303 	lsl.w	r3, r2, r3
 800a352:	e015      	b.n	800a380 <LL_ADC_SetChannelPreselection+0x50>
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	fa93 f3a3 	rbit	r3, r3
 800a35e:	60fb      	str	r3, [r7, #12]
  return result;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d101      	bne.n	800a36e <LL_ADC_SetChannelPreselection+0x3e>
    return 32U;
 800a36a:	2320      	movs	r3, #32
 800a36c:	e003      	b.n	800a376 <LL_ADC_SetChannelPreselection+0x46>
  return __builtin_clz(value);
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	fab3 f383 	clz	r3, r3
 800a374:	b2db      	uxtb	r3, r3
 800a376:	f003 031f 	and.w	r3, r3, #31
 800a37a:	2201      	movs	r2, #1
 800a37c:	fa02 f303 	lsl.w	r3, r2, r3
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	69d2      	ldr	r2, [r2, #28]
 800a384:	431a      	orrs	r2, r3
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	61da      	str	r2, [r3, #28]
}
 800a38a:	bf00      	nop
 800a38c:	371c      	adds	r7, #28
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr

0800a396 <LL_ADC_SetOffset>:
{
 800a396:	b480      	push	{r7}
 800a398:	b087      	sub	sp, #28
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	60f8      	str	r0, [r7, #12]
 800a39e:	60b9      	str	r1, [r7, #8]
 800a3a0:	607a      	str	r2, [r7, #4]
 800a3a2:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	3360      	adds	r3, #96	@ 0x60
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	4413      	add	r3, r2
 800a3b0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg,
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	430b      	orrs	r3, r1
 800a3c4:	431a      	orrs	r2, r3
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	601a      	str	r2, [r3, #0]
}
 800a3ca:	bf00      	nop
 800a3cc:	371c      	adds	r7, #28
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr

0800a3d6 <LL_ADC_SetDataRightShift>:
{
 800a3d6:	b480      	push	{r7}
 800a3d8:	b085      	sub	sp, #20
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	60f8      	str	r0, [r7, #12]
 800a3de:	60b9      	str	r1, [r7, #8]
 800a3e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	691b      	ldr	r3, [r3, #16]
 800a3e6:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	f003 031f 	and.w	r3, r3, #31
 800a3f0:	6879      	ldr	r1, [r7, #4]
 800a3f2:	fa01 f303 	lsl.w	r3, r1, r3
 800a3f6:	431a      	orrs	r2, r3
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	611a      	str	r2, [r3, #16]
}
 800a3fc:	bf00      	nop
 800a3fe:	3714      	adds	r7, #20
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr

0800a408 <LL_ADC_SetOffsetSignedSaturation>:
{
 800a408:	b480      	push	{r7}
 800a40a:	b087      	sub	sp, #28
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	607a      	str	r2, [r7, #4]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	3360      	adds	r3, #96	@ 0x60
 800a418:	461a      	mov	r2, r3
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	009b      	lsls	r3, r3, #2
 800a41e:	4413      	add	r3, r2
 800a420:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	431a      	orrs	r2, r3
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	601a      	str	r2, [r3, #0]
}
 800a432:	bf00      	nop
 800a434:	371c      	adds	r7, #28
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr

0800a43e <LL_ADC_REG_SetSequencerRanks>:
{
 800a43e:	b480      	push	{r7}
 800a440:	b087      	sub	sp, #28
 800a442:	af00      	add	r7, sp, #0
 800a444:	60f8      	str	r0, [r7, #12]
 800a446:	60b9      	str	r1, [r7, #8]
 800a448:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	3330      	adds	r3, #48	@ 0x30
 800a44e:	461a      	mov	r2, r3
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	0a1b      	lsrs	r3, r3, #8
 800a454:	009b      	lsls	r3, r3, #2
 800a456:	f003 030c 	and.w	r3, r3, #12
 800a45a:	4413      	add	r3, r2
 800a45c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	f003 031f 	and.w	r3, r3, #31
 800a468:	211f      	movs	r1, #31
 800a46a:	fa01 f303 	lsl.w	r3, r1, r3
 800a46e:	43db      	mvns	r3, r3
 800a470:	401a      	ands	r2, r3
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	0e9b      	lsrs	r3, r3, #26
 800a476:	f003 011f 	and.w	r1, r3, #31
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	f003 031f 	and.w	r3, r3, #31
 800a480:	fa01 f303 	lsl.w	r3, r1, r3
 800a484:	431a      	orrs	r2, r3
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	601a      	str	r2, [r3, #0]
}
 800a48a:	bf00      	nop
 800a48c:	371c      	adds	r7, #28
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr

0800a496 <LL_ADC_SetChannelSamplingTime>:
{
 800a496:	b480      	push	{r7}
 800a498:	b087      	sub	sp, #28
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	60f8      	str	r0, [r7, #12]
 800a49e:	60b9      	str	r1, [r7, #8]
 800a4a0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	3314      	adds	r3, #20
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	0e5b      	lsrs	r3, r3, #25
 800a4ac:	009b      	lsls	r3, r3, #2
 800a4ae:	f003 0304 	and.w	r3, r3, #4
 800a4b2:	4413      	add	r3, r2
 800a4b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	0d1b      	lsrs	r3, r3, #20
 800a4be:	f003 031f 	and.w	r3, r3, #31
 800a4c2:	2107      	movs	r1, #7
 800a4c4:	fa01 f303 	lsl.w	r3, r1, r3
 800a4c8:	43db      	mvns	r3, r3
 800a4ca:	401a      	ands	r2, r3
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	0d1b      	lsrs	r3, r3, #20
 800a4d0:	f003 031f 	and.w	r3, r3, #31
 800a4d4:	6879      	ldr	r1, [r7, #4]
 800a4d6:	fa01 f303 	lsl.w	r3, r1, r3
 800a4da:	431a      	orrs	r2, r3
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	601a      	str	r2, [r3, #0]
}
 800a4e0:	bf00      	nop
 800a4e2:	371c      	adds	r7, #28
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <LL_ADC_SetChannelSingleDiff>:
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b085      	sub	sp, #20
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	60b9      	str	r1, [r7, #8]
 800a4f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a504:	43db      	mvns	r3, r3
 800a506:	401a      	ands	r2, r3
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f003 0318 	and.w	r3, r3, #24
 800a50e:	4908      	ldr	r1, [pc, #32]	@ (800a530 <LL_ADC_SetChannelSingleDiff+0x44>)
 800a510:	40d9      	lsrs	r1, r3
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	400b      	ands	r3, r1
 800a516:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a51a:	431a      	orrs	r2, r3
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 800a522:	bf00      	nop
 800a524:	3714      	adds	r7, #20
 800a526:	46bd      	mov	sp, r7
 800a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52c:	4770      	bx	lr
 800a52e:	bf00      	nop
 800a530:	000fffff 	.word	0x000fffff

0800a534 <LL_ADC_DisableDeepPowerDown>:
{
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	689a      	ldr	r2, [r3, #8]
 800a540:	4b04      	ldr	r3, [pc, #16]	@ (800a554 <LL_ADC_DisableDeepPowerDown+0x20>)
 800a542:	4013      	ands	r3, r2
 800a544:	687a      	ldr	r2, [r7, #4]
 800a546:	6093      	str	r3, [r2, #8]
}
 800a548:	bf00      	nop
 800a54a:	370c      	adds	r7, #12
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr
 800a554:	5fffffc0 	.word	0x5fffffc0

0800a558 <LL_ADC_IsDeepPowerDownEnabled>:
{
 800a558:	b480      	push	{r7}
 800a55a:	b083      	sub	sp, #12
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	689b      	ldr	r3, [r3, #8]
 800a564:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a568:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a56c:	d101      	bne.n	800a572 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800a56e:	2301      	movs	r3, #1
 800a570:	e000      	b.n	800a574 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800a572:	2300      	movs	r3, #0
}
 800a574:	4618      	mov	r0, r3
 800a576:	370c      	adds	r7, #12
 800a578:	46bd      	mov	sp, r7
 800a57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57e:	4770      	bx	lr

0800a580 <LL_ADC_EnableInternalRegulator>:
{
 800a580:	b480      	push	{r7}
 800a582:	b083      	sub	sp, #12
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	689a      	ldr	r2, [r3, #8]
 800a58c:	4b05      	ldr	r3, [pc, #20]	@ (800a5a4 <LL_ADC_EnableInternalRegulator+0x24>)
 800a58e:	4013      	ands	r3, r2
 800a590:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	609a      	str	r2, [r3, #8]
}
 800a598:	bf00      	nop
 800a59a:	370c      	adds	r7, #12
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr
 800a5a4:	6fffffc0 	.word	0x6fffffc0

0800a5a8 <LL_ADC_IsInternalRegulatorEnabled>:
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	689b      	ldr	r3, [r3, #8]
 800a5b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a5b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5bc:	d101      	bne.n	800a5c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e000      	b.n	800a5c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800a5c2:	2300      	movs	r3, #0
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	370c      	adds	r7, #12
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr

0800a5d0 <LL_ADC_IsEnabled>:
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b083      	sub	sp, #12
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	689b      	ldr	r3, [r3, #8]
 800a5dc:	f003 0301 	and.w	r3, r3, #1
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	d101      	bne.n	800a5e8 <LL_ADC_IsEnabled+0x18>
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	e000      	b.n	800a5ea <LL_ADC_IsEnabled+0x1a>
 800a5e8:	2300      	movs	r3, #0
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	370c      	adds	r7, #12
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr

0800a5f6 <LL_ADC_REG_IsConversionOngoing>:
{
 800a5f6:	b480      	push	{r7}
 800a5f8:	b083      	sub	sp, #12
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	689b      	ldr	r3, [r3, #8]
 800a602:	f003 0304 	and.w	r3, r3, #4
 800a606:	2b04      	cmp	r3, #4
 800a608:	d101      	bne.n	800a60e <LL_ADC_REG_IsConversionOngoing+0x18>
 800a60a:	2301      	movs	r3, #1
 800a60c:	e000      	b.n	800a610 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a60e:	2300      	movs	r3, #0
}
 800a610:	4618      	mov	r0, r3
 800a612:	370c      	adds	r7, #12
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <LL_ADC_INJ_IsConversionOngoing>:
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	689b      	ldr	r3, [r3, #8]
 800a628:	f003 0308 	and.w	r3, r3, #8
 800a62c:	2b08      	cmp	r3, #8
 800a62e:	d101      	bne.n	800a634 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800a630:	2301      	movs	r3, #1
 800a632:	e000      	b.n	800a636 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800a634:	2300      	movs	r3, #0
}
 800a636:	4618      	mov	r0, r3
 800a638:	370c      	adds	r7, #12
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr
	...

0800a644 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a644:	b590      	push	{r4, r7, lr}
 800a646:	b089      	sub	sp, #36	@ 0x24
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a64c:	2300      	movs	r3, #0
 800a64e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800a650:	2300      	movs	r3, #0
 800a652:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d101      	bne.n	800a65e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800a65a:	2301      	movs	r3, #1
 800a65c:	e18f      	b.n	800a97e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	68db      	ldr	r3, [r3, #12]
 800a662:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d109      	bne.n	800a680 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f7f7 f8d7 	bl	8001820 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2200      	movs	r2, #0
 800a676:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2200      	movs	r2, #0
 800a67c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4618      	mov	r0, r3
 800a686:	f7ff ff67 	bl	800a558 <LL_ADC_IsDeepPowerDownEnabled>
 800a68a:	4603      	mov	r3, r0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d004      	beq.n	800a69a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4618      	mov	r0, r3
 800a696:	f7ff ff4d 	bl	800a534 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f7ff ff82 	bl	800a5a8 <LL_ADC_IsInternalRegulatorEnabled>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d114      	bne.n	800a6d4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f7ff ff66 	bl	800a580 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a6b4:	4b87      	ldr	r3, [pc, #540]	@ (800a8d4 <HAL_ADC_Init+0x290>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	099b      	lsrs	r3, r3, #6
 800a6ba:	4a87      	ldr	r2, [pc, #540]	@ (800a8d8 <HAL_ADC_Init+0x294>)
 800a6bc:	fba2 2303 	umull	r2, r3, r2, r3
 800a6c0:	099b      	lsrs	r3, r3, #6
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800a6c6:	e002      	b.n	800a6ce <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	3b01      	subs	r3, #1
 800a6cc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d1f9      	bne.n	800a6c8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f7ff ff65 	bl	800a5a8 <LL_ADC_IsInternalRegulatorEnabled>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d10d      	bne.n	800a700 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6e8:	f043 0210 	orr.w	r2, r3, #16
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6f4:	f043 0201 	orr.w	r2, r3, #1
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4618      	mov	r0, r3
 800a706:	f7ff ff76 	bl	800a5f6 <LL_ADC_REG_IsConversionOngoing>
 800a70a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a710:	f003 0310 	and.w	r3, r3, #16
 800a714:	2b00      	cmp	r3, #0
 800a716:	f040 8129 	bne.w	800a96c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f040 8125 	bne.w	800a96c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a726:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800a72a:	f043 0202 	orr.w	r2, r3, #2
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4618      	mov	r0, r3
 800a738:	f7ff ff4a 	bl	800a5d0 <LL_ADC_IsEnabled>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d136      	bne.n	800a7b0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	4a65      	ldr	r2, [pc, #404]	@ (800a8dc <HAL_ADC_Init+0x298>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d004      	beq.n	800a756 <HAL_ADC_Init+0x112>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a63      	ldr	r2, [pc, #396]	@ (800a8e0 <HAL_ADC_Init+0x29c>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d10e      	bne.n	800a774 <HAL_ADC_Init+0x130>
 800a756:	4861      	ldr	r0, [pc, #388]	@ (800a8dc <HAL_ADC_Init+0x298>)
 800a758:	f7ff ff3a 	bl	800a5d0 <LL_ADC_IsEnabled>
 800a75c:	4604      	mov	r4, r0
 800a75e:	4860      	ldr	r0, [pc, #384]	@ (800a8e0 <HAL_ADC_Init+0x29c>)
 800a760:	f7ff ff36 	bl	800a5d0 <LL_ADC_IsEnabled>
 800a764:	4603      	mov	r3, r0
 800a766:	4323      	orrs	r3, r4
 800a768:	2b00      	cmp	r3, #0
 800a76a:	bf0c      	ite	eq
 800a76c:	2301      	moveq	r3, #1
 800a76e:	2300      	movne	r3, #0
 800a770:	b2db      	uxtb	r3, r3
 800a772:	e008      	b.n	800a786 <HAL_ADC_Init+0x142>
 800a774:	485b      	ldr	r0, [pc, #364]	@ (800a8e4 <HAL_ADC_Init+0x2a0>)
 800a776:	f7ff ff2b 	bl	800a5d0 <LL_ADC_IsEnabled>
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	bf0c      	ite	eq
 800a780:	2301      	moveq	r3, #1
 800a782:	2300      	movne	r3, #0
 800a784:	b2db      	uxtb	r3, r3
 800a786:	2b00      	cmp	r3, #0
 800a788:	d012      	beq.n	800a7b0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4a53      	ldr	r2, [pc, #332]	@ (800a8dc <HAL_ADC_Init+0x298>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d004      	beq.n	800a79e <HAL_ADC_Init+0x15a>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a51      	ldr	r2, [pc, #324]	@ (800a8e0 <HAL_ADC_Init+0x29c>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d101      	bne.n	800a7a2 <HAL_ADC_Init+0x15e>
 800a79e:	4a52      	ldr	r2, [pc, #328]	@ (800a8e8 <HAL_ADC_Init+0x2a4>)
 800a7a0:	e000      	b.n	800a7a4 <HAL_ADC_Init+0x160>
 800a7a2:	4a52      	ldr	r2, [pc, #328]	@ (800a8ec <HAL_ADC_Init+0x2a8>)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	4610      	mov	r0, r2
 800a7ac:	f7ff fd8c 	bl	800a2c8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800a7b0:	f7ff fd7e 	bl	800a2b0 <HAL_GetREVID>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	f241 0203 	movw	r2, #4099	@ 0x1003
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d914      	bls.n	800a7e8 <HAL_ADC_Init+0x1a4>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	689b      	ldr	r3, [r3, #8]
 800a7c2:	2b10      	cmp	r3, #16
 800a7c4:	d110      	bne.n	800a7e8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	7d5b      	ldrb	r3, [r3, #21]
 800a7ca:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800a7d0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800a7d6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	7f1b      	ldrb	r3, [r3, #28]
 800a7dc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800a7de:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800a7e0:	f043 030c 	orr.w	r3, r3, #12
 800a7e4:	61bb      	str	r3, [r7, #24]
 800a7e6:	e00d      	b.n	800a804 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	7d5b      	ldrb	r3, [r3, #21]
 800a7ec:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800a7f2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800a7f8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	7f1b      	ldrb	r3, [r3, #28]
 800a7fe:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800a800:	4313      	orrs	r3, r2
 800a802:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	7f1b      	ldrb	r3, [r3, #28]
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d106      	bne.n	800a81a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6a1b      	ldr	r3, [r3, #32]
 800a810:	3b01      	subs	r3, #1
 800a812:	045b      	lsls	r3, r3, #17
 800a814:	69ba      	ldr	r2, [r7, #24]
 800a816:	4313      	orrs	r3, r2
 800a818:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d009      	beq.n	800a836 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a826:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a82e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a830:	69ba      	ldr	r2, [r7, #24]
 800a832:	4313      	orrs	r3, r2
 800a834:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	68da      	ldr	r2, [r3, #12]
 800a83c:	4b2c      	ldr	r3, [pc, #176]	@ (800a8f0 <HAL_ADC_Init+0x2ac>)
 800a83e:	4013      	ands	r3, r2
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	6812      	ldr	r2, [r2, #0]
 800a844:	69b9      	ldr	r1, [r7, #24]
 800a846:	430b      	orrs	r3, r1
 800a848:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4618      	mov	r0, r3
 800a850:	f7ff fed1 	bl	800a5f6 <LL_ADC_REG_IsConversionOngoing>
 800a854:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7ff fede 	bl	800a61c <LL_ADC_INJ_IsConversionOngoing>
 800a860:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d15f      	bne.n	800a928 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d15c      	bne.n	800a928 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	7d1b      	ldrb	r3, [r3, #20]
 800a872:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 800a878:	4313      	orrs	r3, r2
 800a87a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	68da      	ldr	r2, [r3, #12]
 800a882:	4b1c      	ldr	r3, [pc, #112]	@ (800a8f4 <HAL_ADC_Init+0x2b0>)
 800a884:	4013      	ands	r3, r2
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	6812      	ldr	r2, [r2, #0]
 800a88a:	69b9      	ldr	r1, [r7, #24]
 800a88c:	430b      	orrs	r3, r1
 800a88e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a896:	2b01      	cmp	r3, #1
 800a898:	d130      	bne.n	800a8fc <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a89e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	691a      	ldr	r2, [r3, #16]
 800a8a6:	4b14      	ldr	r3, [pc, #80]	@ (800a8f8 <HAL_ADC_Init+0x2b4>)
 800a8a8:	4013      	ands	r3, r2
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a8ae:	3a01      	subs	r2, #1
 800a8b0:	0411      	lsls	r1, r2, #16
 800a8b2:	687a      	ldr	r2, [r7, #4]
 800a8b4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800a8b6:	4311      	orrs	r1, r2
 800a8b8:	687a      	ldr	r2, [r7, #4]
 800a8ba:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800a8bc:	4311      	orrs	r1, r2
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a8c2:	430a      	orrs	r2, r1
 800a8c4:	431a      	orrs	r2, r3
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f042 0201 	orr.w	r2, r2, #1
 800a8ce:	611a      	str	r2, [r3, #16]
 800a8d0:	e01c      	b.n	800a90c <HAL_ADC_Init+0x2c8>
 800a8d2:	bf00      	nop
 800a8d4:	24000000 	.word	0x24000000
 800a8d8:	053e2d63 	.word	0x053e2d63
 800a8dc:	40022000 	.word	0x40022000
 800a8e0:	40022100 	.word	0x40022100
 800a8e4:	58026000 	.word	0x58026000
 800a8e8:	40022300 	.word	0x40022300
 800a8ec:	58026300 	.word	0x58026300
 800a8f0:	fff0c003 	.word	0xfff0c003
 800a8f4:	ffffbffc 	.word	0xffffbffc
 800a8f8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	691a      	ldr	r2, [r3, #16]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f022 0201 	bic.w	r2, r2, #1
 800a90a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	691b      	ldr	r3, [r3, #16]
 800a912:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	430a      	orrs	r2, r1
 800a920:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 fb20 	bl	800af68 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	68db      	ldr	r3, [r3, #12]
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d10c      	bne.n	800a94a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a936:	f023 010f 	bic.w	r1, r3, #15
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	699b      	ldr	r3, [r3, #24]
 800a93e:	1e5a      	subs	r2, r3, #1
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	430a      	orrs	r2, r1
 800a946:	631a      	str	r2, [r3, #48]	@ 0x30
 800a948:	e007      	b.n	800a95a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f022 020f 	bic.w	r2, r2, #15
 800a958:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a95e:	f023 0303 	bic.w	r3, r3, #3
 800a962:	f043 0201 	orr.w	r2, r3, #1
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	655a      	str	r2, [r3, #84]	@ 0x54
 800a96a:	e007      	b.n	800a97c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a970:	f043 0210 	orr.w	r2, r3, #16
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800a978:	2301      	movs	r3, #1
 800a97a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800a97c:	7ffb      	ldrb	r3, [r7, #31]
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3724      	adds	r7, #36	@ 0x24
 800a982:	46bd      	mov	sp, r7
 800a984:	bd90      	pop	{r4, r7, pc}
 800a986:	bf00      	nop

0800a988 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800a988:	b590      	push	{r4, r7, lr}
 800a98a:	b08d      	sub	sp, #52	@ 0x34
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a992:	2300      	movs	r3, #0
 800a994:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800a998:	2300      	movs	r3, #0
 800a99a:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	68db      	ldr	r3, [r3, #12]
 800a9a0:	4a65      	ldr	r2, [pc, #404]	@ (800ab38 <HAL_ADC_ConfigChannel+0x1b0>)
 800a9a2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d101      	bne.n	800a9b2 <HAL_ADC_ConfigChannel+0x2a>
 800a9ae:	2302      	movs	r3, #2
 800a9b0:	e2c7      	b.n	800af42 <HAL_ADC_ConfigChannel+0x5ba>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7ff fe19 	bl	800a5f6 <LL_ADC_REG_IsConversionOngoing>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	f040 82ac 	bne.w	800af24 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	db2c      	blt.n	800aa2e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d108      	bne.n	800a9f2 <HAL_ADC_ConfigChannel+0x6a>
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	0e9b      	lsrs	r3, r3, #26
 800a9e6:	f003 031f 	and.w	r3, r3, #31
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a9f0:	e016      	b.n	800aa20 <HAL_ADC_ConfigChannel+0x98>
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	fa93 f3a3 	rbit	r3, r3
 800a9fe:	613b      	str	r3, [r7, #16]
  return result;
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800aa04:	69bb      	ldr	r3, [r7, #24]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d101      	bne.n	800aa0e <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 800aa0a:	2320      	movs	r3, #32
 800aa0c:	e003      	b.n	800aa16 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 800aa0e:	69bb      	ldr	r3, [r7, #24]
 800aa10:	fab3 f383 	clz	r3, r3
 800aa14:	b2db      	uxtb	r3, r3
 800aa16:	f003 031f 	and.w	r3, r3, #31
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	fa02 f303 	lsl.w	r3, r2, r3
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	6812      	ldr	r2, [r2, #0]
 800aa24:	69d1      	ldr	r1, [r2, #28]
 800aa26:	687a      	ldr	r2, [r7, #4]
 800aa28:	6812      	ldr	r2, [r2, #0]
 800aa2a:	430b      	orrs	r3, r1
 800aa2c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6818      	ldr	r0, [r3, #0]
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	6859      	ldr	r1, [r3, #4]
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	f7ff fcff 	bl	800a43e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4618      	mov	r0, r3
 800aa46:	f7ff fdd6 	bl	800a5f6 <LL_ADC_REG_IsConversionOngoing>
 800aa4a:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4618      	mov	r0, r3
 800aa52:	f7ff fde3 	bl	800a61c <LL_ADC_INJ_IsConversionOngoing>
 800aa56:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800aa58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	f040 80b8 	bne.w	800abd0 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800aa60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	f040 80b4 	bne.w	800abd0 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6818      	ldr	r0, [r3, #0]
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	6819      	ldr	r1, [r3, #0]
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	689b      	ldr	r3, [r3, #8]
 800aa74:	461a      	mov	r2, r3
 800aa76:	f7ff fd0e 	bl	800a496 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800aa7a:	4b30      	ldr	r3, [pc, #192]	@ (800ab3c <HAL_ADC_ConfigChannel+0x1b4>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800aa82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa86:	d10b      	bne.n	800aaa0 <HAL_ADC_ConfigChannel+0x118>
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	695a      	ldr	r2, [r3, #20]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	68db      	ldr	r3, [r3, #12]
 800aa92:	089b      	lsrs	r3, r3, #2
 800aa94:	f003 0307 	and.w	r3, r3, #7
 800aa98:	005b      	lsls	r3, r3, #1
 800aa9a:	fa02 f303 	lsl.w	r3, r2, r3
 800aa9e:	e01d      	b.n	800aadc <HAL_ADC_ConfigChannel+0x154>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	68db      	ldr	r3, [r3, #12]
 800aaa6:	f003 0310 	and.w	r3, r3, #16
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d10b      	bne.n	800aac6 <HAL_ADC_ConfigChannel+0x13e>
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	695a      	ldr	r2, [r3, #20]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	68db      	ldr	r3, [r3, #12]
 800aab8:	089b      	lsrs	r3, r3, #2
 800aaba:	f003 0307 	and.w	r3, r3, #7
 800aabe:	005b      	lsls	r3, r3, #1
 800aac0:	fa02 f303 	lsl.w	r3, r2, r3
 800aac4:	e00a      	b.n	800aadc <HAL_ADC_ConfigChannel+0x154>
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	695a      	ldr	r2, [r3, #20]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	68db      	ldr	r3, [r3, #12]
 800aad0:	089b      	lsrs	r3, r3, #2
 800aad2:	f003 0304 	and.w	r3, r3, #4
 800aad6:	005b      	lsls	r3, r3, #1
 800aad8:	fa02 f303 	lsl.w	r3, r2, r3
 800aadc:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	691b      	ldr	r3, [r3, #16]
 800aae2:	2b04      	cmp	r3, #4
 800aae4:	d02c      	beq.n	800ab40 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6818      	ldr	r0, [r3, #0]
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	6919      	ldr	r1, [r3, #16]
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	6a3b      	ldr	r3, [r7, #32]
 800aaf4:	f7ff fc4f 	bl	800a396 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6818      	ldr	r0, [r3, #0]
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	6919      	ldr	r1, [r3, #16]
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	7e5b      	ldrb	r3, [r3, #25]
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d102      	bne.n	800ab0e <HAL_ADC_ConfigChannel+0x186>
 800ab08:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ab0c:	e000      	b.n	800ab10 <HAL_ADC_ConfigChannel+0x188>
 800ab0e:	2300      	movs	r3, #0
 800ab10:	461a      	mov	r2, r3
 800ab12:	f7ff fc79 	bl	800a408 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6818      	ldr	r0, [r3, #0]
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	6919      	ldr	r1, [r3, #16]
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	7e1b      	ldrb	r3, [r3, #24]
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d102      	bne.n	800ab2c <HAL_ADC_ConfigChannel+0x1a4>
 800ab26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ab2a:	e000      	b.n	800ab2e <HAL_ADC_ConfigChannel+0x1a6>
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	461a      	mov	r2, r3
 800ab30:	f7ff fc51 	bl	800a3d6 <LL_ADC_SetDataRightShift>
 800ab34:	e04c      	b.n	800abd0 <HAL_ADC_ConfigChannel+0x248>
 800ab36:	bf00      	nop
 800ab38:	47ff0000 	.word	0x47ff0000
 800ab3c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab46:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	069b      	lsls	r3, r3, #26
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d107      	bne.n	800ab64 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800ab62:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab6a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	069b      	lsls	r3, r3, #26
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d107      	bne.n	800ab88 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800ab86:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab8e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	069b      	lsls	r3, r3, #26
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d107      	bne.n	800abac <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800abaa:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abb2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	069b      	lsls	r3, r3, #26
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d107      	bne.n	800abd0 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800abce:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4618      	mov	r0, r3
 800abd6:	f7ff fcfb 	bl	800a5d0 <LL_ADC_IsEnabled>
 800abda:	4603      	mov	r3, r0
 800abdc:	2b00      	cmp	r3, #0
 800abde:	f040 81aa 	bne.w	800af36 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6818      	ldr	r0, [r3, #0]
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	6819      	ldr	r1, [r3, #0]
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	68db      	ldr	r3, [r3, #12]
 800abee:	461a      	mov	r2, r3
 800abf0:	f7ff fc7c 	bl	800a4ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	4a87      	ldr	r2, [pc, #540]	@ (800ae18 <HAL_ADC_ConfigChannel+0x490>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	f040 809a 	bne.w	800ad34 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681a      	ldr	r2, [r3, #0]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4984      	ldr	r1, [pc, #528]	@ (800ae1c <HAL_ADC_ConfigChannel+0x494>)
 800ac0a:	428b      	cmp	r3, r1
 800ac0c:	d147      	bne.n	800ac9e <HAL_ADC_ConfigChannel+0x316>
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	4983      	ldr	r1, [pc, #524]	@ (800ae20 <HAL_ADC_ConfigChannel+0x498>)
 800ac14:	428b      	cmp	r3, r1
 800ac16:	d040      	beq.n	800ac9a <HAL_ADC_ConfigChannel+0x312>
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	4981      	ldr	r1, [pc, #516]	@ (800ae24 <HAL_ADC_ConfigChannel+0x49c>)
 800ac1e:	428b      	cmp	r3, r1
 800ac20:	d039      	beq.n	800ac96 <HAL_ADC_ConfigChannel+0x30e>
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	4980      	ldr	r1, [pc, #512]	@ (800ae28 <HAL_ADC_ConfigChannel+0x4a0>)
 800ac28:	428b      	cmp	r3, r1
 800ac2a:	d032      	beq.n	800ac92 <HAL_ADC_ConfigChannel+0x30a>
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	497e      	ldr	r1, [pc, #504]	@ (800ae2c <HAL_ADC_ConfigChannel+0x4a4>)
 800ac32:	428b      	cmp	r3, r1
 800ac34:	d02b      	beq.n	800ac8e <HAL_ADC_ConfigChannel+0x306>
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	497d      	ldr	r1, [pc, #500]	@ (800ae30 <HAL_ADC_ConfigChannel+0x4a8>)
 800ac3c:	428b      	cmp	r3, r1
 800ac3e:	d024      	beq.n	800ac8a <HAL_ADC_ConfigChannel+0x302>
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	497b      	ldr	r1, [pc, #492]	@ (800ae34 <HAL_ADC_ConfigChannel+0x4ac>)
 800ac46:	428b      	cmp	r3, r1
 800ac48:	d01d      	beq.n	800ac86 <HAL_ADC_ConfigChannel+0x2fe>
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	497a      	ldr	r1, [pc, #488]	@ (800ae38 <HAL_ADC_ConfigChannel+0x4b0>)
 800ac50:	428b      	cmp	r3, r1
 800ac52:	d016      	beq.n	800ac82 <HAL_ADC_ConfigChannel+0x2fa>
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4978      	ldr	r1, [pc, #480]	@ (800ae3c <HAL_ADC_ConfigChannel+0x4b4>)
 800ac5a:	428b      	cmp	r3, r1
 800ac5c:	d00f      	beq.n	800ac7e <HAL_ADC_ConfigChannel+0x2f6>
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	4977      	ldr	r1, [pc, #476]	@ (800ae40 <HAL_ADC_ConfigChannel+0x4b8>)
 800ac64:	428b      	cmp	r3, r1
 800ac66:	d008      	beq.n	800ac7a <HAL_ADC_ConfigChannel+0x2f2>
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4975      	ldr	r1, [pc, #468]	@ (800ae44 <HAL_ADC_ConfigChannel+0x4bc>)
 800ac6e:	428b      	cmp	r3, r1
 800ac70:	d101      	bne.n	800ac76 <HAL_ADC_ConfigChannel+0x2ee>
 800ac72:	4b75      	ldr	r3, [pc, #468]	@ (800ae48 <HAL_ADC_ConfigChannel+0x4c0>)
 800ac74:	e05a      	b.n	800ad2c <HAL_ADC_ConfigChannel+0x3a4>
 800ac76:	2300      	movs	r3, #0
 800ac78:	e058      	b.n	800ad2c <HAL_ADC_ConfigChannel+0x3a4>
 800ac7a:	4b74      	ldr	r3, [pc, #464]	@ (800ae4c <HAL_ADC_ConfigChannel+0x4c4>)
 800ac7c:	e056      	b.n	800ad2c <HAL_ADC_ConfigChannel+0x3a4>
 800ac7e:	4b74      	ldr	r3, [pc, #464]	@ (800ae50 <HAL_ADC_ConfigChannel+0x4c8>)
 800ac80:	e054      	b.n	800ad2c <HAL_ADC_ConfigChannel+0x3a4>
 800ac82:	4b6e      	ldr	r3, [pc, #440]	@ (800ae3c <HAL_ADC_ConfigChannel+0x4b4>)
 800ac84:	e052      	b.n	800ad2c <HAL_ADC_ConfigChannel+0x3a4>
 800ac86:	4b6c      	ldr	r3, [pc, #432]	@ (800ae38 <HAL_ADC_ConfigChannel+0x4b0>)
 800ac88:	e050      	b.n	800ad2c <HAL_ADC_ConfigChannel+0x3a4>
 800ac8a:	4b72      	ldr	r3, [pc, #456]	@ (800ae54 <HAL_ADC_ConfigChannel+0x4cc>)
 800ac8c:	e04e      	b.n	800ad2c <HAL_ADC_ConfigChannel+0x3a4>
 800ac8e:	4b72      	ldr	r3, [pc, #456]	@ (800ae58 <HAL_ADC_ConfigChannel+0x4d0>)
 800ac90:	e04c      	b.n	800ad2c <HAL_ADC_ConfigChannel+0x3a4>
 800ac92:	4b72      	ldr	r3, [pc, #456]	@ (800ae5c <HAL_ADC_ConfigChannel+0x4d4>)
 800ac94:	e04a      	b.n	800ad2c <HAL_ADC_ConfigChannel+0x3a4>
 800ac96:	4b72      	ldr	r3, [pc, #456]	@ (800ae60 <HAL_ADC_ConfigChannel+0x4d8>)
 800ac98:	e048      	b.n	800ad2c <HAL_ADC_ConfigChannel+0x3a4>
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	e046      	b.n	800ad2c <HAL_ADC_ConfigChannel+0x3a4>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	4970      	ldr	r1, [pc, #448]	@ (800ae64 <HAL_ADC_ConfigChannel+0x4dc>)
 800aca4:	428b      	cmp	r3, r1
 800aca6:	d140      	bne.n	800ad2a <HAL_ADC_ConfigChannel+0x3a2>
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	495c      	ldr	r1, [pc, #368]	@ (800ae20 <HAL_ADC_ConfigChannel+0x498>)
 800acae:	428b      	cmp	r3, r1
 800acb0:	d039      	beq.n	800ad26 <HAL_ADC_ConfigChannel+0x39e>
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	495b      	ldr	r1, [pc, #364]	@ (800ae24 <HAL_ADC_ConfigChannel+0x49c>)
 800acb8:	428b      	cmp	r3, r1
 800acba:	d032      	beq.n	800ad22 <HAL_ADC_ConfigChannel+0x39a>
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4959      	ldr	r1, [pc, #356]	@ (800ae28 <HAL_ADC_ConfigChannel+0x4a0>)
 800acc2:	428b      	cmp	r3, r1
 800acc4:	d02b      	beq.n	800ad1e <HAL_ADC_ConfigChannel+0x396>
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4958      	ldr	r1, [pc, #352]	@ (800ae2c <HAL_ADC_ConfigChannel+0x4a4>)
 800accc:	428b      	cmp	r3, r1
 800acce:	d024      	beq.n	800ad1a <HAL_ADC_ConfigChannel+0x392>
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4956      	ldr	r1, [pc, #344]	@ (800ae30 <HAL_ADC_ConfigChannel+0x4a8>)
 800acd6:	428b      	cmp	r3, r1
 800acd8:	d01d      	beq.n	800ad16 <HAL_ADC_ConfigChannel+0x38e>
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4955      	ldr	r1, [pc, #340]	@ (800ae34 <HAL_ADC_ConfigChannel+0x4ac>)
 800ace0:	428b      	cmp	r3, r1
 800ace2:	d016      	beq.n	800ad12 <HAL_ADC_ConfigChannel+0x38a>
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	4953      	ldr	r1, [pc, #332]	@ (800ae38 <HAL_ADC_ConfigChannel+0x4b0>)
 800acea:	428b      	cmp	r3, r1
 800acec:	d00f      	beq.n	800ad0e <HAL_ADC_ConfigChannel+0x386>
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4952      	ldr	r1, [pc, #328]	@ (800ae3c <HAL_ADC_ConfigChannel+0x4b4>)
 800acf4:	428b      	cmp	r3, r1
 800acf6:	d008      	beq.n	800ad0a <HAL_ADC_ConfigChannel+0x382>
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4951      	ldr	r1, [pc, #324]	@ (800ae44 <HAL_ADC_ConfigChannel+0x4bc>)
 800acfe:	428b      	cmp	r3, r1
 800ad00:	d101      	bne.n	800ad06 <HAL_ADC_ConfigChannel+0x37e>
 800ad02:	4b51      	ldr	r3, [pc, #324]	@ (800ae48 <HAL_ADC_ConfigChannel+0x4c0>)
 800ad04:	e012      	b.n	800ad2c <HAL_ADC_ConfigChannel+0x3a4>
 800ad06:	2300      	movs	r3, #0
 800ad08:	e010      	b.n	800ad2c <HAL_ADC_ConfigChannel+0x3a4>
 800ad0a:	4b51      	ldr	r3, [pc, #324]	@ (800ae50 <HAL_ADC_ConfigChannel+0x4c8>)
 800ad0c:	e00e      	b.n	800ad2c <HAL_ADC_ConfigChannel+0x3a4>
 800ad0e:	4b4b      	ldr	r3, [pc, #300]	@ (800ae3c <HAL_ADC_ConfigChannel+0x4b4>)
 800ad10:	e00c      	b.n	800ad2c <HAL_ADC_ConfigChannel+0x3a4>
 800ad12:	4b49      	ldr	r3, [pc, #292]	@ (800ae38 <HAL_ADC_ConfigChannel+0x4b0>)
 800ad14:	e00a      	b.n	800ad2c <HAL_ADC_ConfigChannel+0x3a4>
 800ad16:	4b4f      	ldr	r3, [pc, #316]	@ (800ae54 <HAL_ADC_ConfigChannel+0x4cc>)
 800ad18:	e008      	b.n	800ad2c <HAL_ADC_ConfigChannel+0x3a4>
 800ad1a:	4b4f      	ldr	r3, [pc, #316]	@ (800ae58 <HAL_ADC_ConfigChannel+0x4d0>)
 800ad1c:	e006      	b.n	800ad2c <HAL_ADC_ConfigChannel+0x3a4>
 800ad1e:	4b4f      	ldr	r3, [pc, #316]	@ (800ae5c <HAL_ADC_ConfigChannel+0x4d4>)
 800ad20:	e004      	b.n	800ad2c <HAL_ADC_ConfigChannel+0x3a4>
 800ad22:	4b4f      	ldr	r3, [pc, #316]	@ (800ae60 <HAL_ADC_ConfigChannel+0x4d8>)
 800ad24:	e002      	b.n	800ad2c <HAL_ADC_ConfigChannel+0x3a4>
 800ad26:	2301      	movs	r3, #1
 800ad28:	e000      	b.n	800ad2c <HAL_ADC_ConfigChannel+0x3a4>
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	4610      	mov	r0, r2
 800ad30:	f7ff fafe 	bl	800a330 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	f280 80fc 	bge.w	800af36 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4a36      	ldr	r2, [pc, #216]	@ (800ae1c <HAL_ADC_ConfigChannel+0x494>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d004      	beq.n	800ad52 <HAL_ADC_ConfigChannel+0x3ca>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4a45      	ldr	r2, [pc, #276]	@ (800ae64 <HAL_ADC_ConfigChannel+0x4dc>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d101      	bne.n	800ad56 <HAL_ADC_ConfigChannel+0x3ce>
 800ad52:	4b45      	ldr	r3, [pc, #276]	@ (800ae68 <HAL_ADC_ConfigChannel+0x4e0>)
 800ad54:	e000      	b.n	800ad58 <HAL_ADC_ConfigChannel+0x3d0>
 800ad56:	4b45      	ldr	r3, [pc, #276]	@ (800ae6c <HAL_ADC_ConfigChannel+0x4e4>)
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f7ff fadb 	bl	800a314 <LL_ADC_GetCommonPathInternalCh>
 800ad5e:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4a2d      	ldr	r2, [pc, #180]	@ (800ae1c <HAL_ADC_ConfigChannel+0x494>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d004      	beq.n	800ad74 <HAL_ADC_ConfigChannel+0x3ec>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4a3d      	ldr	r2, [pc, #244]	@ (800ae64 <HAL_ADC_ConfigChannel+0x4dc>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d10e      	bne.n	800ad92 <HAL_ADC_ConfigChannel+0x40a>
 800ad74:	4829      	ldr	r0, [pc, #164]	@ (800ae1c <HAL_ADC_ConfigChannel+0x494>)
 800ad76:	f7ff fc2b 	bl	800a5d0 <LL_ADC_IsEnabled>
 800ad7a:	4604      	mov	r4, r0
 800ad7c:	4839      	ldr	r0, [pc, #228]	@ (800ae64 <HAL_ADC_ConfigChannel+0x4dc>)
 800ad7e:	f7ff fc27 	bl	800a5d0 <LL_ADC_IsEnabled>
 800ad82:	4603      	mov	r3, r0
 800ad84:	4323      	orrs	r3, r4
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	bf0c      	ite	eq
 800ad8a:	2301      	moveq	r3, #1
 800ad8c:	2300      	movne	r3, #0
 800ad8e:	b2db      	uxtb	r3, r3
 800ad90:	e008      	b.n	800ada4 <HAL_ADC_ConfigChannel+0x41c>
 800ad92:	4837      	ldr	r0, [pc, #220]	@ (800ae70 <HAL_ADC_ConfigChannel+0x4e8>)
 800ad94:	f7ff fc1c 	bl	800a5d0 <LL_ADC_IsEnabled>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	bf0c      	ite	eq
 800ad9e:	2301      	moveq	r3, #1
 800ada0:	2300      	movne	r3, #0
 800ada2:	b2db      	uxtb	r3, r3
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	f000 80b3 	beq.w	800af10 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	4a31      	ldr	r2, [pc, #196]	@ (800ae74 <HAL_ADC_ConfigChannel+0x4ec>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d165      	bne.n	800ae80 <HAL_ADC_ConfigChannel+0x4f8>
 800adb4:	69fb      	ldr	r3, [r7, #28]
 800adb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d160      	bne.n	800ae80 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	4a2b      	ldr	r2, [pc, #172]	@ (800ae70 <HAL_ADC_ConfigChannel+0x4e8>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	f040 80b6 	bne.w	800af36 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	4a13      	ldr	r2, [pc, #76]	@ (800ae1c <HAL_ADC_ConfigChannel+0x494>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d004      	beq.n	800adde <HAL_ADC_ConfigChannel+0x456>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a22      	ldr	r2, [pc, #136]	@ (800ae64 <HAL_ADC_ConfigChannel+0x4dc>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d101      	bne.n	800ade2 <HAL_ADC_ConfigChannel+0x45a>
 800adde:	4a22      	ldr	r2, [pc, #136]	@ (800ae68 <HAL_ADC_ConfigChannel+0x4e0>)
 800ade0:	e000      	b.n	800ade4 <HAL_ADC_ConfigChannel+0x45c>
 800ade2:	4a22      	ldr	r2, [pc, #136]	@ (800ae6c <HAL_ADC_ConfigChannel+0x4e4>)
 800ade4:	69fb      	ldr	r3, [r7, #28]
 800ade6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800adea:	4619      	mov	r1, r3
 800adec:	4610      	mov	r0, r2
 800adee:	f7ff fa7e 	bl	800a2ee <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800adf2:	4b21      	ldr	r3, [pc, #132]	@ (800ae78 <HAL_ADC_ConfigChannel+0x4f0>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	099b      	lsrs	r3, r3, #6
 800adf8:	4a20      	ldr	r2, [pc, #128]	@ (800ae7c <HAL_ADC_ConfigChannel+0x4f4>)
 800adfa:	fba2 2303 	umull	r2, r3, r2, r3
 800adfe:	099b      	lsrs	r3, r3, #6
 800ae00:	3301      	adds	r3, #1
 800ae02:	005b      	lsls	r3, r3, #1
 800ae04:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800ae06:	e002      	b.n	800ae0e <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	3b01      	subs	r3, #1
 800ae0c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d1f9      	bne.n	800ae08 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800ae14:	e08f      	b.n	800af36 <HAL_ADC_ConfigChannel+0x5ae>
 800ae16:	bf00      	nop
 800ae18:	47ff0000 	.word	0x47ff0000
 800ae1c:	40022000 	.word	0x40022000
 800ae20:	04300002 	.word	0x04300002
 800ae24:	08600004 	.word	0x08600004
 800ae28:	0c900008 	.word	0x0c900008
 800ae2c:	10c00010 	.word	0x10c00010
 800ae30:	14f00020 	.word	0x14f00020
 800ae34:	2a000400 	.word	0x2a000400
 800ae38:	2e300800 	.word	0x2e300800
 800ae3c:	32601000 	.word	0x32601000
 800ae40:	43210000 	.word	0x43210000
 800ae44:	4b840000 	.word	0x4b840000
 800ae48:	4fb80000 	.word	0x4fb80000
 800ae4c:	47520000 	.word	0x47520000
 800ae50:	36902000 	.word	0x36902000
 800ae54:	25b00200 	.word	0x25b00200
 800ae58:	21800100 	.word	0x21800100
 800ae5c:	1d500080 	.word	0x1d500080
 800ae60:	19200040 	.word	0x19200040
 800ae64:	40022100 	.word	0x40022100
 800ae68:	40022300 	.word	0x40022300
 800ae6c:	58026300 	.word	0x58026300
 800ae70:	58026000 	.word	0x58026000
 800ae74:	cb840000 	.word	0xcb840000
 800ae78:	24000000 	.word	0x24000000
 800ae7c:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4a31      	ldr	r2, [pc, #196]	@ (800af4c <HAL_ADC_ConfigChannel+0x5c4>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d11e      	bne.n	800aec8 <HAL_ADC_ConfigChannel+0x540>
 800ae8a:	69fb      	ldr	r3, [r7, #28]
 800ae8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d119      	bne.n	800aec8 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	4a2d      	ldr	r2, [pc, #180]	@ (800af50 <HAL_ADC_ConfigChannel+0x5c8>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d14b      	bne.n	800af36 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	4a2c      	ldr	r2, [pc, #176]	@ (800af54 <HAL_ADC_ConfigChannel+0x5cc>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d004      	beq.n	800aeb2 <HAL_ADC_ConfigChannel+0x52a>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	4a2a      	ldr	r2, [pc, #168]	@ (800af58 <HAL_ADC_ConfigChannel+0x5d0>)
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d101      	bne.n	800aeb6 <HAL_ADC_ConfigChannel+0x52e>
 800aeb2:	4a2a      	ldr	r2, [pc, #168]	@ (800af5c <HAL_ADC_ConfigChannel+0x5d4>)
 800aeb4:	e000      	b.n	800aeb8 <HAL_ADC_ConfigChannel+0x530>
 800aeb6:	4a2a      	ldr	r2, [pc, #168]	@ (800af60 <HAL_ADC_ConfigChannel+0x5d8>)
 800aeb8:	69fb      	ldr	r3, [r7, #28]
 800aeba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aebe:	4619      	mov	r1, r3
 800aec0:	4610      	mov	r0, r2
 800aec2:	f7ff fa14 	bl	800a2ee <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800aec6:	e036      	b.n	800af36 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4a25      	ldr	r2, [pc, #148]	@ (800af64 <HAL_ADC_ConfigChannel+0x5dc>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d131      	bne.n	800af36 <HAL_ADC_ConfigChannel+0x5ae>
 800aed2:	69fb      	ldr	r3, [r7, #28]
 800aed4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d12c      	bne.n	800af36 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4a1b      	ldr	r2, [pc, #108]	@ (800af50 <HAL_ADC_ConfigChannel+0x5c8>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d127      	bne.n	800af36 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4a1a      	ldr	r2, [pc, #104]	@ (800af54 <HAL_ADC_ConfigChannel+0x5cc>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d004      	beq.n	800aefa <HAL_ADC_ConfigChannel+0x572>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	4a18      	ldr	r2, [pc, #96]	@ (800af58 <HAL_ADC_ConfigChannel+0x5d0>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d101      	bne.n	800aefe <HAL_ADC_ConfigChannel+0x576>
 800aefa:	4a18      	ldr	r2, [pc, #96]	@ (800af5c <HAL_ADC_ConfigChannel+0x5d4>)
 800aefc:	e000      	b.n	800af00 <HAL_ADC_ConfigChannel+0x578>
 800aefe:	4a18      	ldr	r2, [pc, #96]	@ (800af60 <HAL_ADC_ConfigChannel+0x5d8>)
 800af00:	69fb      	ldr	r3, [r7, #28]
 800af02:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800af06:	4619      	mov	r1, r3
 800af08:	4610      	mov	r0, r2
 800af0a:	f7ff f9f0 	bl	800a2ee <LL_ADC_SetCommonPathInternalCh>
 800af0e:	e012      	b.n	800af36 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af14:	f043 0220 	orr.w	r2, r3, #32
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800af1c:	2301      	movs	r3, #1
 800af1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800af22:	e008      	b.n	800af36 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af28:	f043 0220 	orr.w	r2, r3, #32
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800af30:	2301      	movs	r3, #1
 800af32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2200      	movs	r2, #0
 800af3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800af3e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800af42:	4618      	mov	r0, r3
 800af44:	3734      	adds	r7, #52	@ 0x34
 800af46:	46bd      	mov	sp, r7
 800af48:	bd90      	pop	{r4, r7, pc}
 800af4a:	bf00      	nop
 800af4c:	c7520000 	.word	0xc7520000
 800af50:	58026000 	.word	0x58026000
 800af54:	40022000 	.word	0x40022000
 800af58:	40022100 	.word	0x40022100
 800af5c:	40022300 	.word	0x40022300
 800af60:	58026300 	.word	0x58026300
 800af64:	cfb80000 	.word	0xcfb80000

0800af68 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b084      	sub	sp, #16
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	4a7a      	ldr	r2, [pc, #488]	@ (800b160 <ADC_ConfigureBoostMode+0x1f8>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d004      	beq.n	800af84 <ADC_ConfigureBoostMode+0x1c>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	4a79      	ldr	r2, [pc, #484]	@ (800b164 <ADC_ConfigureBoostMode+0x1fc>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d109      	bne.n	800af98 <ADC_ConfigureBoostMode+0x30>
 800af84:	4b78      	ldr	r3, [pc, #480]	@ (800b168 <ADC_ConfigureBoostMode+0x200>)
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	bf14      	ite	ne
 800af90:	2301      	movne	r3, #1
 800af92:	2300      	moveq	r3, #0
 800af94:	b2db      	uxtb	r3, r3
 800af96:	e008      	b.n	800afaa <ADC_ConfigureBoostMode+0x42>
 800af98:	4b74      	ldr	r3, [pc, #464]	@ (800b16c <ADC_ConfigureBoostMode+0x204>)
 800af9a:	689b      	ldr	r3, [r3, #8]
 800af9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	bf14      	ite	ne
 800afa4:	2301      	movne	r3, #1
 800afa6:	2300      	moveq	r3, #0
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d01c      	beq.n	800afe8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800afae:	f002 fd59 	bl	800da64 <HAL_RCC_GetHCLKFreq>
 800afb2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800afbc:	d010      	beq.n	800afe0 <ADC_ConfigureBoostMode+0x78>
 800afbe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800afc2:	d873      	bhi.n	800b0ac <ADC_ConfigureBoostMode+0x144>
 800afc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800afc8:	d002      	beq.n	800afd0 <ADC_ConfigureBoostMode+0x68>
 800afca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800afce:	d16d      	bne.n	800b0ac <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	0c1b      	lsrs	r3, r3, #16
 800afd6:	68fa      	ldr	r2, [r7, #12]
 800afd8:	fbb2 f3f3 	udiv	r3, r2, r3
 800afdc:	60fb      	str	r3, [r7, #12]
        break;
 800afde:	e068      	b.n	800b0b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	089b      	lsrs	r3, r3, #2
 800afe4:	60fb      	str	r3, [r7, #12]
        break;
 800afe6:	e064      	b.n	800b0b2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800afe8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800afec:	f04f 0100 	mov.w	r1, #0
 800aff0:	f003 ff88 	bl	800ef04 <HAL_RCCEx_GetPeriphCLKFreq>
 800aff4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	685b      	ldr	r3, [r3, #4]
 800affa:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800affe:	d051      	beq.n	800b0a4 <ADC_ConfigureBoostMode+0x13c>
 800b000:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800b004:	d854      	bhi.n	800b0b0 <ADC_ConfigureBoostMode+0x148>
 800b006:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800b00a:	d047      	beq.n	800b09c <ADC_ConfigureBoostMode+0x134>
 800b00c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800b010:	d84e      	bhi.n	800b0b0 <ADC_ConfigureBoostMode+0x148>
 800b012:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800b016:	d03d      	beq.n	800b094 <ADC_ConfigureBoostMode+0x12c>
 800b018:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800b01c:	d848      	bhi.n	800b0b0 <ADC_ConfigureBoostMode+0x148>
 800b01e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b022:	d033      	beq.n	800b08c <ADC_ConfigureBoostMode+0x124>
 800b024:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b028:	d842      	bhi.n	800b0b0 <ADC_ConfigureBoostMode+0x148>
 800b02a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800b02e:	d029      	beq.n	800b084 <ADC_ConfigureBoostMode+0x11c>
 800b030:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800b034:	d83c      	bhi.n	800b0b0 <ADC_ConfigureBoostMode+0x148>
 800b036:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800b03a:	d01a      	beq.n	800b072 <ADC_ConfigureBoostMode+0x10a>
 800b03c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800b040:	d836      	bhi.n	800b0b0 <ADC_ConfigureBoostMode+0x148>
 800b042:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800b046:	d014      	beq.n	800b072 <ADC_ConfigureBoostMode+0x10a>
 800b048:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800b04c:	d830      	bhi.n	800b0b0 <ADC_ConfigureBoostMode+0x148>
 800b04e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b052:	d00e      	beq.n	800b072 <ADC_ConfigureBoostMode+0x10a>
 800b054:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b058:	d82a      	bhi.n	800b0b0 <ADC_ConfigureBoostMode+0x148>
 800b05a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b05e:	d008      	beq.n	800b072 <ADC_ConfigureBoostMode+0x10a>
 800b060:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b064:	d824      	bhi.n	800b0b0 <ADC_ConfigureBoostMode+0x148>
 800b066:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b06a:	d002      	beq.n	800b072 <ADC_ConfigureBoostMode+0x10a>
 800b06c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b070:	d11e      	bne.n	800b0b0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	0c9b      	lsrs	r3, r3, #18
 800b078:	005b      	lsls	r3, r3, #1
 800b07a:	68fa      	ldr	r2, [r7, #12]
 800b07c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b080:	60fb      	str	r3, [r7, #12]
        break;
 800b082:	e016      	b.n	800b0b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	091b      	lsrs	r3, r3, #4
 800b088:	60fb      	str	r3, [r7, #12]
        break;
 800b08a:	e012      	b.n	800b0b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	095b      	lsrs	r3, r3, #5
 800b090:	60fb      	str	r3, [r7, #12]
        break;
 800b092:	e00e      	b.n	800b0b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	099b      	lsrs	r3, r3, #6
 800b098:	60fb      	str	r3, [r7, #12]
        break;
 800b09a:	e00a      	b.n	800b0b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	09db      	lsrs	r3, r3, #7
 800b0a0:	60fb      	str	r3, [r7, #12]
        break;
 800b0a2:	e006      	b.n	800b0b2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	0a1b      	lsrs	r3, r3, #8
 800b0a8:	60fb      	str	r3, [r7, #12]
        break;
 800b0aa:	e002      	b.n	800b0b2 <ADC_ConfigureBoostMode+0x14a>
        break;
 800b0ac:	bf00      	nop
 800b0ae:	e000      	b.n	800b0b2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800b0b0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800b0b2:	f7ff f8fd 	bl	800a2b0 <HAL_GetREVID>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	f241 0203 	movw	r2, #4099	@ 0x1003
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d815      	bhi.n	800b0ec <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	4a2b      	ldr	r2, [pc, #172]	@ (800b170 <ADC_ConfigureBoostMode+0x208>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d908      	bls.n	800b0da <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	689a      	ldr	r2, [r3, #8]
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b0d6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800b0d8:	e03e      	b.n	800b158 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	689a      	ldr	r2, [r3, #8]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b0e8:	609a      	str	r2, [r3, #8]
}
 800b0ea:	e035      	b.n	800b158 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	085b      	lsrs	r3, r3, #1
 800b0f0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	4a1f      	ldr	r2, [pc, #124]	@ (800b174 <ADC_ConfigureBoostMode+0x20c>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d808      	bhi.n	800b10c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	689a      	ldr	r2, [r3, #8]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800b108:	609a      	str	r2, [r3, #8]
}
 800b10a:	e025      	b.n	800b158 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	4a1a      	ldr	r2, [pc, #104]	@ (800b178 <ADC_ConfigureBoostMode+0x210>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d80a      	bhi.n	800b12a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	689b      	ldr	r3, [r3, #8]
 800b11a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b126:	609a      	str	r2, [r3, #8]
}
 800b128:	e016      	b.n	800b158 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	4a13      	ldr	r2, [pc, #76]	@ (800b17c <ADC_ConfigureBoostMode+0x214>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d80a      	bhi.n	800b148 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	689b      	ldr	r3, [r3, #8]
 800b138:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b144:	609a      	str	r2, [r3, #8]
}
 800b146:	e007      	b.n	800b158 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	689a      	ldr	r2, [r3, #8]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800b156:	609a      	str	r2, [r3, #8]
}
 800b158:	bf00      	nop
 800b15a:	3710      	adds	r7, #16
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	40022000 	.word	0x40022000
 800b164:	40022100 	.word	0x40022100
 800b168:	40022300 	.word	0x40022300
 800b16c:	58026300 	.word	0x58026300
 800b170:	01312d00 	.word	0x01312d00
 800b174:	005f5e10 	.word	0x005f5e10
 800b178:	00bebc20 	.word	0x00bebc20
 800b17c:	017d7840 	.word	0x017d7840

0800b180 <__NVIC_SetPriorityGrouping>:
{
 800b180:	b480      	push	{r7}
 800b182:	b085      	sub	sp, #20
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f003 0307 	and.w	r3, r3, #7
 800b18e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b190:	4b0b      	ldr	r3, [pc, #44]	@ (800b1c0 <__NVIC_SetPriorityGrouping+0x40>)
 800b192:	68db      	ldr	r3, [r3, #12]
 800b194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b196:	68ba      	ldr	r2, [r7, #8]
 800b198:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800b19c:	4013      	ands	r3, r2
 800b19e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800b1a8:	4b06      	ldr	r3, [pc, #24]	@ (800b1c4 <__NVIC_SetPriorityGrouping+0x44>)
 800b1aa:	4313      	orrs	r3, r2
 800b1ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b1ae:	4a04      	ldr	r2, [pc, #16]	@ (800b1c0 <__NVIC_SetPriorityGrouping+0x40>)
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	60d3      	str	r3, [r2, #12]
}
 800b1b4:	bf00      	nop
 800b1b6:	3714      	adds	r7, #20
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr
 800b1c0:	e000ed00 	.word	0xe000ed00
 800b1c4:	05fa0000 	.word	0x05fa0000

0800b1c8 <__NVIC_GetPriorityGrouping>:
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b1cc:	4b04      	ldr	r3, [pc, #16]	@ (800b1e0 <__NVIC_GetPriorityGrouping+0x18>)
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	0a1b      	lsrs	r3, r3, #8
 800b1d2:	f003 0307 	and.w	r3, r3, #7
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr
 800b1e0:	e000ed00 	.word	0xe000ed00

0800b1e4 <__NVIC_EnableIRQ>:
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b083      	sub	sp, #12
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b1ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	db0b      	blt.n	800b20e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b1f6:	88fb      	ldrh	r3, [r7, #6]
 800b1f8:	f003 021f 	and.w	r2, r3, #31
 800b1fc:	4907      	ldr	r1, [pc, #28]	@ (800b21c <__NVIC_EnableIRQ+0x38>)
 800b1fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b202:	095b      	lsrs	r3, r3, #5
 800b204:	2001      	movs	r0, #1
 800b206:	fa00 f202 	lsl.w	r2, r0, r2
 800b20a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b20e:	bf00      	nop
 800b210:	370c      	adds	r7, #12
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr
 800b21a:	bf00      	nop
 800b21c:	e000e100 	.word	0xe000e100

0800b220 <__NVIC_SetPriority>:
{
 800b220:	b480      	push	{r7}
 800b222:	b083      	sub	sp, #12
 800b224:	af00      	add	r7, sp, #0
 800b226:	4603      	mov	r3, r0
 800b228:	6039      	str	r1, [r7, #0]
 800b22a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b22c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b230:	2b00      	cmp	r3, #0
 800b232:	db0a      	blt.n	800b24a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	b2da      	uxtb	r2, r3
 800b238:	490c      	ldr	r1, [pc, #48]	@ (800b26c <__NVIC_SetPriority+0x4c>)
 800b23a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b23e:	0112      	lsls	r2, r2, #4
 800b240:	b2d2      	uxtb	r2, r2
 800b242:	440b      	add	r3, r1
 800b244:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b248:	e00a      	b.n	800b260 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	b2da      	uxtb	r2, r3
 800b24e:	4908      	ldr	r1, [pc, #32]	@ (800b270 <__NVIC_SetPriority+0x50>)
 800b250:	88fb      	ldrh	r3, [r7, #6]
 800b252:	f003 030f 	and.w	r3, r3, #15
 800b256:	3b04      	subs	r3, #4
 800b258:	0112      	lsls	r2, r2, #4
 800b25a:	b2d2      	uxtb	r2, r2
 800b25c:	440b      	add	r3, r1
 800b25e:	761a      	strb	r2, [r3, #24]
}
 800b260:	bf00      	nop
 800b262:	370c      	adds	r7, #12
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr
 800b26c:	e000e100 	.word	0xe000e100
 800b270:	e000ed00 	.word	0xe000ed00

0800b274 <NVIC_EncodePriority>:
{
 800b274:	b480      	push	{r7}
 800b276:	b089      	sub	sp, #36	@ 0x24
 800b278:	af00      	add	r7, sp, #0
 800b27a:	60f8      	str	r0, [r7, #12]
 800b27c:	60b9      	str	r1, [r7, #8]
 800b27e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f003 0307 	and.w	r3, r3, #7
 800b286:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b288:	69fb      	ldr	r3, [r7, #28]
 800b28a:	f1c3 0307 	rsb	r3, r3, #7
 800b28e:	2b04      	cmp	r3, #4
 800b290:	bf28      	it	cs
 800b292:	2304      	movcs	r3, #4
 800b294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b296:	69fb      	ldr	r3, [r7, #28]
 800b298:	3304      	adds	r3, #4
 800b29a:	2b06      	cmp	r3, #6
 800b29c:	d902      	bls.n	800b2a4 <NVIC_EncodePriority+0x30>
 800b29e:	69fb      	ldr	r3, [r7, #28]
 800b2a0:	3b03      	subs	r3, #3
 800b2a2:	e000      	b.n	800b2a6 <NVIC_EncodePriority+0x32>
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b2a8:	f04f 32ff 	mov.w	r2, #4294967295
 800b2ac:	69bb      	ldr	r3, [r7, #24]
 800b2ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b2b2:	43da      	mvns	r2, r3
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	401a      	ands	r2, r3
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b2bc:	f04f 31ff 	mov.w	r1, #4294967295
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	fa01 f303 	lsl.w	r3, r1, r3
 800b2c6:	43d9      	mvns	r1, r3
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b2cc:	4313      	orrs	r3, r2
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3724      	adds	r7, #36	@ 0x24
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d8:	4770      	bx	lr
	...

0800b2dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b082      	sub	sp, #8
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	3b01      	subs	r3, #1
 800b2e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b2ec:	d301      	bcc.n	800b2f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	e00f      	b.n	800b312 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b2f2:	4a0a      	ldr	r2, [pc, #40]	@ (800b31c <SysTick_Config+0x40>)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b2fa:	210f      	movs	r1, #15
 800b2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b300:	f7ff ff8e 	bl	800b220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b304:	4b05      	ldr	r3, [pc, #20]	@ (800b31c <SysTick_Config+0x40>)
 800b306:	2200      	movs	r2, #0
 800b308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b30a:	4b04      	ldr	r3, [pc, #16]	@ (800b31c <SysTick_Config+0x40>)
 800b30c:	2207      	movs	r2, #7
 800b30e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b310:	2300      	movs	r3, #0
}
 800b312:	4618      	mov	r0, r3
 800b314:	3708      	adds	r7, #8
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}
 800b31a:	bf00      	nop
 800b31c:	e000e010 	.word	0xe000e010

0800b320 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b082      	sub	sp, #8
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f7ff ff29 	bl	800b180 <__NVIC_SetPriorityGrouping>
}
 800b32e:	bf00      	nop
 800b330:	3708      	adds	r7, #8
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}

0800b336 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b336:	b580      	push	{r7, lr}
 800b338:	b086      	sub	sp, #24
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	4603      	mov	r3, r0
 800b33e:	60b9      	str	r1, [r7, #8]
 800b340:	607a      	str	r2, [r7, #4]
 800b342:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b344:	f7ff ff40 	bl	800b1c8 <__NVIC_GetPriorityGrouping>
 800b348:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b34a:	687a      	ldr	r2, [r7, #4]
 800b34c:	68b9      	ldr	r1, [r7, #8]
 800b34e:	6978      	ldr	r0, [r7, #20]
 800b350:	f7ff ff90 	bl	800b274 <NVIC_EncodePriority>
 800b354:	4602      	mov	r2, r0
 800b356:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b35a:	4611      	mov	r1, r2
 800b35c:	4618      	mov	r0, r3
 800b35e:	f7ff ff5f 	bl	800b220 <__NVIC_SetPriority>
}
 800b362:	bf00      	nop
 800b364:	3718      	adds	r7, #24
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}

0800b36a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b36a:	b580      	push	{r7, lr}
 800b36c:	b082      	sub	sp, #8
 800b36e:	af00      	add	r7, sp, #0
 800b370:	4603      	mov	r3, r0
 800b372:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b374:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b378:	4618      	mov	r0, r3
 800b37a:	f7ff ff33 	bl	800b1e4 <__NVIC_EnableIRQ>
}
 800b37e:	bf00      	nop
 800b380:	3708      	adds	r7, #8
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}

0800b386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b386:	b580      	push	{r7, lr}
 800b388:	b082      	sub	sp, #8
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f7ff ffa4 	bl	800b2dc <SysTick_Config>
 800b394:	4603      	mov	r3, r0
}
 800b396:	4618      	mov	r0, r3
 800b398:	3708      	adds	r7, #8
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
	...

0800b3a0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b098      	sub	sp, #96	@ 0x60
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800b3a8:	4a84      	ldr	r2, [pc, #528]	@ (800b5bc <HAL_FDCAN_Init+0x21c>)
 800b3aa:	f107 030c 	add.w	r3, r7, #12
 800b3ae:	4611      	mov	r1, r2
 800b3b0:	224c      	movs	r2, #76	@ 0x4c
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f006 ffd3 	bl	801235e <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d101      	bne.n	800b3c2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	e1c6      	b.n	800b750 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	4a7e      	ldr	r2, [pc, #504]	@ (800b5c0 <HAL_FDCAN_Init+0x220>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d106      	bne.n	800b3da <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800b3d4:	461a      	mov	r2, r3
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800b3e0:	b2db      	uxtb	r3, r3
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d106      	bne.n	800b3f4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f7f6 fa66 	bl	80018c0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	699a      	ldr	r2, [r3, #24]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f022 0210 	bic.w	r2, r2, #16
 800b402:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b404:	f7fe ff48 	bl	800a298 <HAL_GetTick>
 800b408:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800b40a:	e014      	b.n	800b436 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800b40c:	f7fe ff44 	bl	800a298 <HAL_GetTick>
 800b410:	4602      	mov	r2, r0
 800b412:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b414:	1ad3      	subs	r3, r2, r3
 800b416:	2b0a      	cmp	r3, #10
 800b418:	d90d      	bls.n	800b436 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b420:	f043 0201 	orr.w	r2, r3, #1
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2203      	movs	r2, #3
 800b42e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800b432:	2301      	movs	r3, #1
 800b434:	e18c      	b.n	800b750 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	699b      	ldr	r3, [r3, #24]
 800b43c:	f003 0308 	and.w	r3, r3, #8
 800b440:	2b08      	cmp	r3, #8
 800b442:	d0e3      	beq.n	800b40c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	699a      	ldr	r2, [r3, #24]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f042 0201 	orr.w	r2, r2, #1
 800b452:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b454:	f7fe ff20 	bl	800a298 <HAL_GetTick>
 800b458:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800b45a:	e014      	b.n	800b486 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800b45c:	f7fe ff1c 	bl	800a298 <HAL_GetTick>
 800b460:	4602      	mov	r2, r0
 800b462:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b464:	1ad3      	subs	r3, r2, r3
 800b466:	2b0a      	cmp	r3, #10
 800b468:	d90d      	bls.n	800b486 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b470:	f043 0201 	orr.w	r2, r3, #1
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2203      	movs	r2, #3
 800b47e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800b482:	2301      	movs	r3, #1
 800b484:	e164      	b.n	800b750 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	699b      	ldr	r3, [r3, #24]
 800b48c:	f003 0301 	and.w	r3, r3, #1
 800b490:	2b00      	cmp	r3, #0
 800b492:	d0e3      	beq.n	800b45c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	699a      	ldr	r2, [r3, #24]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f042 0202 	orr.w	r2, r2, #2
 800b4a2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	7c1b      	ldrb	r3, [r3, #16]
 800b4a8:	2b01      	cmp	r3, #1
 800b4aa:	d108      	bne.n	800b4be <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	699a      	ldr	r2, [r3, #24]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b4ba:	619a      	str	r2, [r3, #24]
 800b4bc:	e007      	b.n	800b4ce <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	699a      	ldr	r2, [r3, #24]
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b4cc:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	7c5b      	ldrb	r3, [r3, #17]
 800b4d2:	2b01      	cmp	r3, #1
 800b4d4:	d108      	bne.n	800b4e8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	699a      	ldr	r2, [r3, #24]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b4e4:	619a      	str	r2, [r3, #24]
 800b4e6:	e007      	b.n	800b4f8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	699a      	ldr	r2, [r3, #24]
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b4f6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	7c9b      	ldrb	r3, [r3, #18]
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	d108      	bne.n	800b512 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	699a      	ldr	r2, [r3, #24]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b50e:	619a      	str	r2, [r3, #24]
 800b510:	e007      	b.n	800b522 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	699a      	ldr	r2, [r3, #24]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b520:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	699b      	ldr	r3, [r3, #24]
 800b528:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	689a      	ldr	r2, [r3, #8]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	430a      	orrs	r2, r1
 800b536:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	699a      	ldr	r2, [r3, #24]
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800b546:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	691a      	ldr	r2, [r3, #16]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f022 0210 	bic.w	r2, r2, #16
 800b556:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	68db      	ldr	r3, [r3, #12]
 800b55c:	2b01      	cmp	r3, #1
 800b55e:	d108      	bne.n	800b572 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	699a      	ldr	r2, [r3, #24]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f042 0204 	orr.w	r2, r2, #4
 800b56e:	619a      	str	r2, [r3, #24]
 800b570:	e030      	b.n	800b5d4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	68db      	ldr	r3, [r3, #12]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d02c      	beq.n	800b5d4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	68db      	ldr	r3, [r3, #12]
 800b57e:	2b02      	cmp	r3, #2
 800b580:	d020      	beq.n	800b5c4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	699a      	ldr	r2, [r3, #24]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800b590:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	691a      	ldr	r2, [r3, #16]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f042 0210 	orr.w	r2, r2, #16
 800b5a0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	68db      	ldr	r3, [r3, #12]
 800b5a6:	2b03      	cmp	r3, #3
 800b5a8:	d114      	bne.n	800b5d4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	699a      	ldr	r2, [r3, #24]
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f042 0220 	orr.w	r2, r2, #32
 800b5b8:	619a      	str	r2, [r3, #24]
 800b5ba:	e00b      	b.n	800b5d4 <HAL_FDCAN_Init+0x234>
 800b5bc:	08014494 	.word	0x08014494
 800b5c0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	699a      	ldr	r2, [r3, #24]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f042 0220 	orr.w	r2, r2, #32
 800b5d2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	699b      	ldr	r3, [r3, #24]
 800b5d8:	3b01      	subs	r3, #1
 800b5da:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	69db      	ldr	r3, [r3, #28]
 800b5e0:	3b01      	subs	r3, #1
 800b5e2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800b5e4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6a1b      	ldr	r3, [r3, #32]
 800b5ea:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800b5ec:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	695b      	ldr	r3, [r3, #20]
 800b5f4:	3b01      	subs	r3, #1
 800b5f6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800b5fc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800b5fe:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	689b      	ldr	r3, [r3, #8]
 800b604:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b608:	d115      	bne.n	800b636 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b60e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b614:	3b01      	subs	r3, #1
 800b616:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800b618:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b61e:	3b01      	subs	r3, #1
 800b620:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800b622:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b62a:	3b01      	subs	r3, #1
 800b62c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800b632:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800b634:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d00a      	beq.n	800b654 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	430a      	orrs	r2, r1
 800b650:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b65c:	4413      	add	r3, r2
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d011      	beq.n	800b686 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800b66a:	f023 0107 	bic.w	r1, r3, #7
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b672:	009b      	lsls	r3, r3, #2
 800b674:	3360      	adds	r3, #96	@ 0x60
 800b676:	443b      	add	r3, r7
 800b678:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	430a      	orrs	r2, r1
 800b682:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d011      	beq.n	800b6b2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b696:	f023 0107 	bic.w	r1, r3, #7
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b69e:	009b      	lsls	r3, r3, #2
 800b6a0:	3360      	adds	r3, #96	@ 0x60
 800b6a2:	443b      	add	r3, r7
 800b6a4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	430a      	orrs	r2, r1
 800b6ae:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d012      	beq.n	800b6e0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b6c2:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b6ca:	009b      	lsls	r3, r3, #2
 800b6cc:	3360      	adds	r3, #96	@ 0x60
 800b6ce:	443b      	add	r3, r7
 800b6d0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800b6d4:	011a      	lsls	r2, r3, #4
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	430a      	orrs	r2, r1
 800b6dc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d012      	beq.n	800b70e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b6f0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6f8:	009b      	lsls	r3, r3, #2
 800b6fa:	3360      	adds	r3, #96	@ 0x60
 800b6fc:	443b      	add	r3, r7
 800b6fe:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800b702:	021a      	lsls	r2, r3, #8
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	430a      	orrs	r2, r1
 800b70a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	4a11      	ldr	r2, [pc, #68]	@ (800b758 <HAL_FDCAN_Init+0x3b8>)
 800b714:	4293      	cmp	r3, r2
 800b716:	d107      	bne.n	800b728 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	685b      	ldr	r3, [r3, #4]
 800b71c:	689a      	ldr	r2, [r3, #8]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	f022 0203 	bic.w	r2, r2, #3
 800b726:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2200      	movs	r2, #0
 800b72c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2200      	movs	r2, #0
 800b734:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2201      	movs	r2, #1
 800b73c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f000 fdf7 	bl	800c334 <FDCAN_CalcultateRamBlockAddresses>
 800b746:	4603      	mov	r3, r0
 800b748:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 800b74c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 800b750:	4618      	mov	r0, r3
 800b752:	3760      	adds	r7, #96	@ 0x60
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}
 800b758:	4000a000 	.word	0x4000a000

0800b75c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b087      	sub	sp, #28
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800b76c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800b76e:	7bfb      	ldrb	r3, [r7, #15]
 800b770:	2b01      	cmp	r3, #1
 800b772:	d002      	beq.n	800b77a <HAL_FDCAN_ConfigFilter+0x1e>
 800b774:	7bfb      	ldrb	r3, [r7, #15]
 800b776:	2b02      	cmp	r3, #2
 800b778:	d157      	bne.n	800b82a <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d12b      	bne.n	800b7da <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	68db      	ldr	r3, [r3, #12]
 800b786:	2b07      	cmp	r3, #7
 800b788:	d10d      	bne.n	800b7a6 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	691b      	ldr	r3, [r3, #16]
 800b78e:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	69db      	ldr	r3, [r3, #28]
 800b794:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800b796:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800b79c:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800b79e:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 800b7a2:	617b      	str	r3, [r7, #20]
 800b7a4:	e00e      	b.n	800b7c4 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	689b      	ldr	r3, [r3, #8]
 800b7aa:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	68db      	ldr	r3, [r3, #12]
 800b7b0:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800b7b2:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	691b      	ldr	r3, [r3, #16]
 800b7b8:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800b7ba:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	009b      	lsls	r3, r3, #2
 800b7ce:	4413      	add	r3, r2
 800b7d0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	697a      	ldr	r2, [r7, #20]
 800b7d6:	601a      	str	r2, [r3, #0]
 800b7d8:	e025      	b.n	800b826 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	68db      	ldr	r3, [r3, #12]
 800b7de:	075a      	lsls	r2, r3, #29
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	691b      	ldr	r3, [r3, #16]
 800b7e4:	4313      	orrs	r3, r2
 800b7e6:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	68db      	ldr	r3, [r3, #12]
 800b7ec:	2b07      	cmp	r3, #7
 800b7ee:	d103      	bne.n	800b7f8 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	699b      	ldr	r3, [r3, #24]
 800b7f4:	613b      	str	r3, [r7, #16]
 800b7f6:	e006      	b.n	800b806 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	689b      	ldr	r3, [r3, #8]
 800b7fc:	079a      	lsls	r2, r3, #30
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	695b      	ldr	r3, [r3, #20]
 800b802:	4313      	orrs	r3, r2
 800b804:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	00db      	lsls	r3, r3, #3
 800b810:	4413      	add	r3, r2
 800b812:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	697a      	ldr	r2, [r7, #20]
 800b818:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	3304      	adds	r3, #4
 800b81e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	693a      	ldr	r2, [r7, #16]
 800b824:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800b826:	2300      	movs	r3, #0
 800b828:	e008      	b.n	800b83c <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b830:	f043 0202 	orr.w	r2, r3, #2
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800b83a:	2301      	movs	r3, #1
  }
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	371c      	adds	r7, #28
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr

0800b848 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800b848:	b480      	push	{r7}
 800b84a:	b083      	sub	sp, #12
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800b856:	b2db      	uxtb	r3, r3
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d111      	bne.n	800b880 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2202      	movs	r2, #2
 800b860:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	699a      	ldr	r2, [r3, #24]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f022 0201 	bic.w	r2, r2, #1
 800b872:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2200      	movs	r2, #0
 800b878:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 800b87c:	2300      	movs	r3, #0
 800b87e:	e008      	b.n	800b892 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b886:	f043 0204 	orr.w	r2, r3, #4
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800b890:	2301      	movs	r3, #1
  }
}
 800b892:	4618      	mov	r0, r3
 800b894:	370c      	adds	r7, #12
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr

0800b89e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800b89e:	b580      	push	{r7, lr}
 800b8a0:	b086      	sub	sp, #24
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	60f8      	str	r0, [r7, #12]
 800b8a6:	60b9      	str	r1, [r7, #8]
 800b8a8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800b8b0:	b2db      	uxtb	r3, r3
 800b8b2:	2b02      	cmp	r3, #2
 800b8b4:	d141      	bne.n	800b93a <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b8be:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d109      	bne.n	800b8da <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b8cc:	f043 0220 	orr.w	r2, r3, #32
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	e038      	b.n	800b94c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b8e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d009      	beq.n	800b8fe <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b8f0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	e026      	b.n	800b94c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b906:	0c1b      	lsrs	r3, r3, #16
 800b908:	f003 031f 	and.w	r3, r3, #31
 800b90c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	68b9      	ldr	r1, [r7, #8]
 800b914:	68f8      	ldr	r0, [r7, #12]
 800b916:	f000 fe93 	bl	800c640 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	2101      	movs	r1, #1
 800b920:	697a      	ldr	r2, [r7, #20]
 800b922:	fa01 f202 	lsl.w	r2, r1, r2
 800b926:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800b92a:	2201      	movs	r2, #1
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	409a      	lsls	r2, r3
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 800b936:	2300      	movs	r3, #0
 800b938:	e008      	b.n	800b94c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b940:	f043 0208 	orr.w	r2, r3, #8
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800b94a:	2301      	movs	r3, #1
  }
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3718      	adds	r7, #24
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800b954:	b480      	push	{r7}
 800b956:	b08b      	sub	sp, #44	@ 0x2c
 800b958:	af00      	add	r7, sp, #0
 800b95a:	60f8      	str	r0, [r7, #12]
 800b95c:	60b9      	str	r1, [r7, #8]
 800b95e:	607a      	str	r2, [r7, #4]
 800b960:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800b962:	2300      	movs	r3, #0
 800b964:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800b96c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800b96e:	7efb      	ldrb	r3, [r7, #27]
 800b970:	2b02      	cmp	r3, #2
 800b972:	f040 8149 	bne.w	800bc08 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	2b40      	cmp	r3, #64	@ 0x40
 800b97a:	d14c      	bne.n	800ba16 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b984:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d109      	bne.n	800b9a0 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b992:	f043 0220 	orr.w	r2, r3, #32
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800b99c:	2301      	movs	r3, #1
 800b99e:	e13c      	b.n	800bc1a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b9a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d109      	bne.n	800b9c4 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b9b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	e12a      	b.n	800bc1a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b9cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b9d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b9d4:	d10a      	bne.n	800b9ec <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b9de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b9e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b9e6:	d101      	bne.n	800b9ec <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b9f4:	0a1b      	lsrs	r3, r3, #8
 800b9f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b9fa:	69fa      	ldr	r2, [r7, #28]
 800b9fc:	4413      	add	r3, r2
 800b9fe:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba08:	69f9      	ldr	r1, [r7, #28]
 800ba0a:	fb01 f303 	mul.w	r3, r1, r3
 800ba0e:	009b      	lsls	r3, r3, #2
 800ba10:	4413      	add	r3, r2
 800ba12:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba14:	e068      	b.n	800bae8 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	2b41      	cmp	r3, #65	@ 0x41
 800ba1a:	d14c      	bne.n	800bab6 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ba24:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d109      	bne.n	800ba40 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ba32:	f043 0220 	orr.w	r2, r3, #32
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	e0ec      	b.n	800bc1a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ba48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d109      	bne.n	800ba64 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ba56:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800ba60:	2301      	movs	r3, #1
 800ba62:	e0da      	b.n	800bc1a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ba6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ba70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ba74:	d10a      	bne.n	800ba8c <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ba7e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ba82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ba86:	d101      	bne.n	800ba8c <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800ba88:	2301      	movs	r3, #1
 800ba8a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ba94:	0a1b      	lsrs	r3, r3, #8
 800ba96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ba9a:	69fa      	ldr	r2, [r7, #28]
 800ba9c:	4413      	add	r3, r2
 800ba9e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800baa8:	69f9      	ldr	r1, [r7, #28]
 800baaa:	fb01 f303 	mul.w	r3, r1, r3
 800baae:	009b      	lsls	r3, r3, #2
 800bab0:	4413      	add	r3, r2
 800bab2:	627b      	str	r3, [r7, #36]	@ 0x24
 800bab4:	e018      	b.n	800bae8 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800baba:	68ba      	ldr	r2, [r7, #8]
 800babc:	429a      	cmp	r2, r3
 800babe:	d309      	bcc.n	800bad4 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bac6:	f043 0220 	orr.w	r2, r3, #32
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800bad0:	2301      	movs	r3, #1
 800bad2:	e0a2      	b.n	800bc1a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800badc:	68b9      	ldr	r1, [r7, #8]
 800bade:	fb01 f303 	mul.w	r3, r1, r3
 800bae2:	009b      	lsls	r3, r3, #2
 800bae4:	4413      	add	r3, r2
 800bae6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800bae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	685b      	ldr	r3, [r3, #4]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d107      	bne.n	800bb0c <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800bafc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	0c9b      	lsrs	r3, r3, #18
 800bb02:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	601a      	str	r2, [r3, #0]
 800bb0a:	e005      	b.n	800bb18 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800bb0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800bb18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800bb24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800bb30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb32:	3304      	adds	r3, #4
 800bb34:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800bb36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	b29a      	uxth	r2, r3
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800bb40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	0c1b      	lsrs	r3, r3, #16
 800bb46:	f003 020f 	and.w	r2, r3, #15
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800bb4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800bb5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800bb66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	0e1b      	lsrs	r3, r3, #24
 800bb6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800bb74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	0fda      	lsrs	r2, r3, #31
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800bb7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb80:	3304      	adds	r3, #4
 800bb82:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800bb84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb86:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800bb88:	2300      	movs	r3, #0
 800bb8a:	623b      	str	r3, [r7, #32]
 800bb8c:	e00a      	b.n	800bba4 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800bb8e:	697a      	ldr	r2, [r7, #20]
 800bb90:	6a3b      	ldr	r3, [r7, #32]
 800bb92:	441a      	add	r2, r3
 800bb94:	6839      	ldr	r1, [r7, #0]
 800bb96:	6a3b      	ldr	r3, [r7, #32]
 800bb98:	440b      	add	r3, r1
 800bb9a:	7812      	ldrb	r2, [r2, #0]
 800bb9c:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800bb9e:	6a3b      	ldr	r3, [r7, #32]
 800bba0:	3301      	adds	r3, #1
 800bba2:	623b      	str	r3, [r7, #32]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	68db      	ldr	r3, [r3, #12]
 800bba8:	4a1f      	ldr	r2, [pc, #124]	@ (800bc28 <HAL_FDCAN_GetRxMessage+0x2d4>)
 800bbaa:	5cd3      	ldrb	r3, [r2, r3]
 800bbac:	461a      	mov	r2, r3
 800bbae:	6a3b      	ldr	r3, [r7, #32]
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	d3ec      	bcc.n	800bb8e <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	2b40      	cmp	r3, #64	@ 0x40
 800bbb8:	d105      	bne.n	800bbc6 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	69fa      	ldr	r2, [r7, #28]
 800bbc0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 800bbc4:	e01e      	b.n	800bc04 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	2b41      	cmp	r3, #65	@ 0x41
 800bbca:	d105      	bne.n	800bbd8 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	69fa      	ldr	r2, [r7, #28]
 800bbd2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 800bbd6:	e015      	b.n	800bc04 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	2b1f      	cmp	r3, #31
 800bbdc:	d808      	bhi.n	800bbf0 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	2101      	movs	r1, #1
 800bbe4:	68ba      	ldr	r2, [r7, #8]
 800bbe6:	fa01 f202 	lsl.w	r2, r1, r2
 800bbea:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800bbee:	e009      	b.n	800bc04 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	f003 021f 	and.w	r2, r3, #31
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	2101      	movs	r1, #1
 800bbfc:	fa01 f202 	lsl.w	r2, r1, r2
 800bc00:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 800bc04:	2300      	movs	r3, #0
 800bc06:	e008      	b.n	800bc1a <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bc0e:	f043 0208 	orr.w	r2, r3, #8
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800bc18:	2301      	movs	r3, #1
  }
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	372c      	adds	r7, #44	@ 0x2c
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc24:	4770      	bx	lr
 800bc26:	bf00      	nop
 800bc28:	080145c4 	.word	0x080145c4

0800bc2c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b087      	sub	sp, #28
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	60f8      	str	r0, [r7, #12]
 800bc34:	60b9      	str	r1, [r7, #8]
 800bc36:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800bc3e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800bc40:	7dfb      	ldrb	r3, [r7, #23]
 800bc42:	2b01      	cmp	r3, #1
 800bc44:	d002      	beq.n	800bc4c <HAL_FDCAN_ActivateNotification+0x20>
 800bc46:	7dfb      	ldrb	r3, [r7, #23]
 800bc48:	2b02      	cmp	r3, #2
 800bc4a:	d155      	bne.n	800bcf8 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	4013      	ands	r3, r2
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d108      	bne.n	800bc6c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f042 0201 	orr.w	r2, r2, #1
 800bc68:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bc6a:	e014      	b.n	800bc96 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	4013      	ands	r3, r2
 800bc76:	68ba      	ldr	r2, [r7, #8]
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	d108      	bne.n	800bc8e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f042 0202 	orr.w	r2, r2, #2
 800bc8a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bc8c:	e003      	b.n	800bc96 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	2203      	movs	r2, #3
 800bc94:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d009      	beq.n	800bcb4 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	687a      	ldr	r2, [r7, #4]
 800bcae:	430a      	orrs	r2, r1
 800bcb0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d009      	beq.n	800bcd2 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	687a      	ldr	r2, [r7, #4]
 800bccc:	430a      	orrs	r2, r1
 800bcce:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bcd8:	68ba      	ldr	r2, [r7, #8]
 800bcda:	4b0f      	ldr	r3, [pc, #60]	@ (800bd18 <HAL_FDCAN_ActivateNotification+0xec>)
 800bcdc:	4013      	ands	r3, r2
 800bcde:	68fa      	ldr	r2, [r7, #12]
 800bce0:	6812      	ldr	r2, [r2, #0]
 800bce2:	430b      	orrs	r3, r1
 800bce4:	6553      	str	r3, [r2, #84]	@ 0x54
 800bce6:	4b0d      	ldr	r3, [pc, #52]	@ (800bd1c <HAL_FDCAN_ActivateNotification+0xf0>)
 800bce8:	695a      	ldr	r2, [r3, #20]
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	0f9b      	lsrs	r3, r3, #30
 800bcee:	490b      	ldr	r1, [pc, #44]	@ (800bd1c <HAL_FDCAN_ActivateNotification+0xf0>)
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	e008      	b.n	800bd0a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bcfe:	f043 0202 	orr.w	r2, r3, #2
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800bd08:	2301      	movs	r3, #1
  }
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	371c      	adds	r7, #28
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd14:	4770      	bx	lr
 800bd16:	bf00      	nop
 800bd18:	3fcfffff 	.word	0x3fcfffff
 800bd1c:	4000a800 	.word	0x4000a800

0800bd20 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b096      	sub	sp, #88	@ 0x58
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 800bd28:	4b9a      	ldr	r3, [pc, #616]	@ (800bf94 <HAL_FDCAN_IRQHandler+0x274>)
 800bd2a:	691b      	ldr	r3, [r3, #16]
 800bd2c:	079b      	lsls	r3, r3, #30
 800bd2e:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 800bd30:	4b98      	ldr	r3, [pc, #608]	@ (800bf94 <HAL_FDCAN_IRQHandler+0x274>)
 800bd32:	695b      	ldr	r3, [r3, #20]
 800bd34:	079b      	lsls	r3, r3, #30
 800bd36:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bd38:	4013      	ands	r3, r2
 800bd3a:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd42:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800bd46:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd4e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bd50:	4013      	ands	r3, r2
 800bd52:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd5a:	f003 030f 	and.w	r3, r3, #15
 800bd5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bd68:	4013      	ands	r3, r2
 800bd6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bd76:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bd80:	4013      	ands	r3, r2
 800bd82:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd8a:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 800bd8e:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bd98:	4013      	ands	r3, r2
 800bd9a:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bda2:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 800bda6:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bdae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bdb0:	4013      	ands	r3, r2
 800bdb2:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bdba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bdc2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800bdc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdc6:	0a1b      	lsrs	r3, r3, #8
 800bdc8:	f003 0301 	and.w	r3, r3, #1
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d010      	beq.n	800bdf2 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800bdd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdd2:	0a1b      	lsrs	r3, r3, #8
 800bdd4:	f003 0301 	and.w	r3, r3, #1
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d00a      	beq.n	800bdf2 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bde4:	651a      	str	r2, [r3, #80]	@ 0x50
 800bde6:	4b6b      	ldr	r3, [pc, #428]	@ (800bf94 <HAL_FDCAN_IRQHandler+0x274>)
 800bde8:	2200      	movs	r2, #0
 800bdea:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f000 fa54 	bl	800c29a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800bdf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdf4:	0a9b      	lsrs	r3, r3, #10
 800bdf6:	f003 0301 	and.w	r3, r3, #1
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d01d      	beq.n	800be3a <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800bdfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be00:	0a9b      	lsrs	r3, r3, #10
 800be02:	f003 0301 	and.w	r3, r3, #1
 800be06:	2b00      	cmp	r3, #0
 800be08:	d017      	beq.n	800be3a <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800be12:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800be1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800be1e:	4013      	ands	r3, r2
 800be20:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800be2a:	651a      	str	r2, [r3, #80]	@ 0x50
 800be2c:	4b59      	ldr	r3, [pc, #356]	@ (800bf94 <HAL_FDCAN_IRQHandler+0x274>)
 800be2e:	2200      	movs	r2, #0
 800be30:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800be32:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f000 fa07 	bl	800c248 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800be3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d00d      	beq.n	800be5c <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681a      	ldr	r2, [r3, #0]
 800be44:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800be46:	4b54      	ldr	r3, [pc, #336]	@ (800bf98 <HAL_FDCAN_IRQHandler+0x278>)
 800be48:	400b      	ands	r3, r1
 800be4a:	6513      	str	r3, [r2, #80]	@ 0x50
 800be4c:	4a51      	ldr	r2, [pc, #324]	@ (800bf94 <HAL_FDCAN_IRQHandler+0x274>)
 800be4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be50:	0f9b      	lsrs	r3, r3, #30
 800be52:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 800be54:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f000 f9c0 	bl	800c1dc <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800be5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d00d      	beq.n	800be7e <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681a      	ldr	r2, [r3, #0]
 800be66:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800be68:	4b4b      	ldr	r3, [pc, #300]	@ (800bf98 <HAL_FDCAN_IRQHandler+0x278>)
 800be6a:	400b      	ands	r3, r1
 800be6c:	6513      	str	r3, [r2, #80]	@ 0x50
 800be6e:	4a49      	ldr	r2, [pc, #292]	@ (800bf94 <HAL_FDCAN_IRQHandler+0x274>)
 800be70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be72:	0f9b      	lsrs	r3, r3, #30
 800be74:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800be76:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f000 f9ba 	bl	800c1f2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800be7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be80:	2b00      	cmp	r3, #0
 800be82:	d00d      	beq.n	800bea0 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681a      	ldr	r2, [r3, #0]
 800be88:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800be8a:	4b43      	ldr	r3, [pc, #268]	@ (800bf98 <HAL_FDCAN_IRQHandler+0x278>)
 800be8c:	400b      	ands	r3, r1
 800be8e:	6513      	str	r3, [r2, #80]	@ 0x50
 800be90:	4a40      	ldr	r2, [pc, #256]	@ (800bf94 <HAL_FDCAN_IRQHandler+0x274>)
 800be92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be94:	0f9b      	lsrs	r3, r3, #30
 800be96:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800be98:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f7fd fbcc 	bl	8009638 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800bea0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d00d      	beq.n	800bec2 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681a      	ldr	r2, [r3, #0]
 800beaa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800beac:	4b3a      	ldr	r3, [pc, #232]	@ (800bf98 <HAL_FDCAN_IRQHandler+0x278>)
 800beae:	400b      	ands	r3, r1
 800beb0:	6513      	str	r3, [r2, #80]	@ 0x50
 800beb2:	4a38      	ldr	r2, [pc, #224]	@ (800bf94 <HAL_FDCAN_IRQHandler+0x274>)
 800beb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800beb6:	0f9b      	lsrs	r3, r3, #30
 800beb8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800beba:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f000 f9a3 	bl	800c208 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800bec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bec4:	0adb      	lsrs	r3, r3, #11
 800bec6:	f003 0301 	and.w	r3, r3, #1
 800beca:	2b00      	cmp	r3, #0
 800becc:	d010      	beq.n	800bef0 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800bece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bed0:	0adb      	lsrs	r3, r3, #11
 800bed2:	f003 0301 	and.w	r3, r3, #1
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d00a      	beq.n	800bef0 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bee2:	651a      	str	r2, [r3, #80]	@ 0x50
 800bee4:	4b2b      	ldr	r3, [pc, #172]	@ (800bf94 <HAL_FDCAN_IRQHandler+0x274>)
 800bee6:	2200      	movs	r2, #0
 800bee8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f000 f997 	bl	800c21e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 800bef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bef2:	0a5b      	lsrs	r3, r3, #9
 800bef4:	f003 0301 	and.w	r3, r3, #1
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d01d      	beq.n	800bf38 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800befc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800befe:	0a5b      	lsrs	r3, r3, #9
 800bf00:	f003 0301 	and.w	r3, r3, #1
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d017      	beq.n	800bf38 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bf10:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bf1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf1c:	4013      	ands	r3, r2
 800bf1e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bf28:	651a      	str	r2, [r3, #80]	@ 0x50
 800bf2a:	4b1a      	ldr	r3, [pc, #104]	@ (800bf94 <HAL_FDCAN_IRQHandler+0x274>)
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800bf30:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f000 f97d 	bl	800c232 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 800bf38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf3a:	0cdb      	lsrs	r3, r3, #19
 800bf3c:	f003 0301 	and.w	r3, r3, #1
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d010      	beq.n	800bf66 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 800bf44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf46:	0cdb      	lsrs	r3, r3, #19
 800bf48:	f003 0301 	and.w	r3, r3, #1
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d00a      	beq.n	800bf66 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800bf58:	651a      	str	r2, [r3, #80]	@ 0x50
 800bf5a:	4b0e      	ldr	r3, [pc, #56]	@ (800bf94 <HAL_FDCAN_IRQHandler+0x274>)
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f000 f97c 	bl	800c25e <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800bf66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf68:	0c1b      	lsrs	r3, r3, #16
 800bf6a:	f003 0301 	and.w	r3, r3, #1
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d016      	beq.n	800bfa0 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800bf72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf74:	0c1b      	lsrs	r3, r3, #16
 800bf76:	f003 0301 	and.w	r3, r3, #1
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d010      	beq.n	800bfa0 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800bf86:	651a      	str	r2, [r3, #80]	@ 0x50
 800bf88:	4b02      	ldr	r3, [pc, #8]	@ (800bf94 <HAL_FDCAN_IRQHandler+0x274>)
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	e004      	b.n	800bf9c <HAL_FDCAN_IRQHandler+0x27c>
 800bf92:	bf00      	nop
 800bf94:	4000a800 	.word	0x4000a800
 800bf98:	3fcfffff 	.word	0x3fcfffff
 800bf9c:	f000 f969 	bl	800c272 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800bfa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfa2:	0c9b      	lsrs	r3, r3, #18
 800bfa4:	f003 0301 	and.w	r3, r3, #1
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d010      	beq.n	800bfce <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800bfac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfae:	0c9b      	lsrs	r3, r3, #18
 800bfb0:	f003 0301 	and.w	r3, r3, #1
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d00a      	beq.n	800bfce <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800bfc0:	651a      	str	r2, [r3, #80]	@ 0x50
 800bfc2:	4b83      	ldr	r3, [pc, #524]	@ (800c1d0 <HAL_FDCAN_IRQHandler+0x4b0>)
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f000 f95c 	bl	800c286 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800bfce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfd0:	0c5b      	lsrs	r3, r3, #17
 800bfd2:	f003 0301 	and.w	r3, r3, #1
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d015      	beq.n	800c006 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800bfda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfdc:	0c5b      	lsrs	r3, r3, #17
 800bfde:	f003 0301 	and.w	r3, r3, #1
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d00f      	beq.n	800c006 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800bfee:	651a      	str	r2, [r3, #80]	@ 0x50
 800bff0:	4b77      	ldr	r3, [pc, #476]	@ (800c1d0 <HAL_FDCAN_IRQHandler+0x4b0>)
 800bff2:	2200      	movs	r2, #0
 800bff4:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bffc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800c006:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d00d      	beq.n	800c028 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681a      	ldr	r2, [r3, #0]
 800c010:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c012:	4b70      	ldr	r3, [pc, #448]	@ (800c1d4 <HAL_FDCAN_IRQHandler+0x4b4>)
 800c014:	400b      	ands	r3, r1
 800c016:	6513      	str	r3, [r2, #80]	@ 0x50
 800c018:	4a6d      	ldr	r2, [pc, #436]	@ (800c1d0 <HAL_FDCAN_IRQHandler+0x4b0>)
 800c01a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c01c:	0f9b      	lsrs	r3, r3, #30
 800c01e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800c020:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f000 f94d 	bl	800c2c2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800c028:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d011      	beq.n	800c052 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681a      	ldr	r2, [r3, #0]
 800c032:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c034:	4b67      	ldr	r3, [pc, #412]	@ (800c1d4 <HAL_FDCAN_IRQHandler+0x4b4>)
 800c036:	400b      	ands	r3, r1
 800c038:	6513      	str	r3, [r2, #80]	@ 0x50
 800c03a:	4a65      	ldr	r2, [pc, #404]	@ (800c1d0 <HAL_FDCAN_IRQHandler+0x4b0>)
 800c03c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c03e:	0f9b      	lsrs	r3, r3, #30
 800c040:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800c048:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c04a:	431a      	orrs	r2, r3
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	4a60      	ldr	r2, [pc, #384]	@ (800c1d8 <HAL_FDCAN_IRQHandler+0x4b8>)
 800c058:	4293      	cmp	r3, r2
 800c05a:	f040 80ac 	bne.w	800c1b6 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	685b      	ldr	r3, [r3, #4]
 800c062:	689b      	ldr	r3, [r3, #8]
 800c064:	f003 0303 	and.w	r3, r3, #3
 800c068:	2b00      	cmp	r3, #0
 800c06a:	f000 80a4 	beq.w	800c1b6 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	685b      	ldr	r3, [r3, #4]
 800c072:	6a1b      	ldr	r3, [r3, #32]
 800c074:	f003 030f 	and.w	r3, r3, #15
 800c078:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c080:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c082:	4013      	ands	r3, r2
 800c084:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	685b      	ldr	r3, [r3, #4]
 800c08a:	6a1b      	ldr	r3, [r3, #32]
 800c08c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c090:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	685b      	ldr	r3, [r3, #4]
 800c096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c098:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c09a:	4013      	ands	r3, r2
 800c09c:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	685b      	ldr	r3, [r3, #4]
 800c0a2:	6a1b      	ldr	r3, [r3, #32]
 800c0a4:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800c0a8:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0b2:	4013      	ands	r3, r2
 800c0b4:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	685b      	ldr	r3, [r3, #4]
 800c0ba:	6a1b      	ldr	r3, [r3, #32]
 800c0bc:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 800c0c0:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0c8:	6a3a      	ldr	r2, [r7, #32]
 800c0ca:	4013      	ands	r3, r2
 800c0cc:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	685b      	ldr	r3, [r3, #4]
 800c0d2:	6a1b      	ldr	r3, [r3, #32]
 800c0d4:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 800c0d8:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	685b      	ldr	r3, [r3, #4]
 800c0de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0e0:	69fa      	ldr	r2, [r7, #28]
 800c0e2:	4013      	ands	r3, r2
 800c0e4:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	685b      	ldr	r3, [r3, #4]
 800c0ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0ec:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	685b      	ldr	r3, [r3, #4]
 800c0f2:	6a1b      	ldr	r3, [r3, #32]
 800c0f4:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800c0f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d007      	beq.n	800c10c <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	685b      	ldr	r3, [r3, #4]
 800c100:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c102:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800c104:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f000 f8e6 	bl	800c2d8 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800c10c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d007      	beq.n	800c122 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	685b      	ldr	r3, [r3, #4]
 800c116:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c118:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800c11a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f000 f8e6 	bl	800c2ee <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 800c122:	69bb      	ldr	r3, [r7, #24]
 800c124:	099b      	lsrs	r3, r3, #6
 800c126:	f003 0301 	and.w	r3, r3, #1
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d01a      	beq.n	800c164 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	099b      	lsrs	r3, r3, #6
 800c132:	f003 0301 	and.w	r3, r3, #1
 800c136:	2b00      	cmp	r3, #0
 800c138:	d014      	beq.n	800c164 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c140:	0c1b      	lsrs	r3, r3, #16
 800c142:	b29b      	uxth	r3, r3
 800c144:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	685b      	ldr	r3, [r3, #4]
 800c14a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c14c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c150:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	685b      	ldr	r3, [r3, #4]
 800c156:	2240      	movs	r2, #64	@ 0x40
 800c158:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800c15a:	68fa      	ldr	r2, [r7, #12]
 800c15c:	6939      	ldr	r1, [r7, #16]
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f000 f8d0 	bl	800c304 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800c164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c166:	2b00      	cmp	r3, #0
 800c168:	d007      	beq.n	800c17a <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	685b      	ldr	r3, [r3, #4]
 800c16e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c170:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800c172:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f000 f8d1 	bl	800c31c <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800c17a:	6a3b      	ldr	r3, [r7, #32]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d00b      	beq.n	800c198 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	685b      	ldr	r3, [r3, #4]
 800c184:	6a3a      	ldr	r2, [r7, #32]
 800c186:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800c18e:	6a3b      	ldr	r3, [r7, #32]
 800c190:	431a      	orrs	r2, r3
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800c198:	69fb      	ldr	r3, [r7, #28]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d00b      	beq.n	800c1b6 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	685b      	ldr	r3, [r3, #4]
 800c1a2:	69fa      	ldr	r2, [r7, #28]
 800c1a4:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800c1ac:	69fb      	ldr	r3, [r7, #28]
 800c1ae:	431a      	orrs	r2, r3
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d002      	beq.n	800c1c6 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f000 f874 	bl	800c2ae <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800c1c6:	bf00      	nop
 800c1c8:	3758      	adds	r7, #88	@ 0x58
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}
 800c1ce:	bf00      	nop
 800c1d0:	4000a800 	.word	0x4000a800
 800c1d4:	3fcfffff 	.word	0x3fcfffff
 800c1d8:	4000a000 	.word	0x4000a000

0800c1dc <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b083      	sub	sp, #12
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
 800c1e4:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800c1e6:	bf00      	nop
 800c1e8:	370c      	adds	r7, #12
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f0:	4770      	bx	lr

0800c1f2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800c1f2:	b480      	push	{r7}
 800c1f4:	b083      	sub	sp, #12
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	6078      	str	r0, [r7, #4]
 800c1fa:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800c1fc:	bf00      	nop
 800c1fe:	370c      	adds	r7, #12
 800c200:	46bd      	mov	sp, r7
 800c202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c206:	4770      	bx	lr

0800c208 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800c208:	b480      	push	{r7}
 800c20a:	b083      	sub	sp, #12
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800c212:	bf00      	nop
 800c214:	370c      	adds	r7, #12
 800c216:	46bd      	mov	sp, r7
 800c218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21c:	4770      	bx	lr

0800c21e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800c21e:	b480      	push	{r7}
 800c220:	b083      	sub	sp, #12
 800c222:	af00      	add	r7, sp, #0
 800c224:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800c226:	bf00      	nop
 800c228:	370c      	adds	r7, #12
 800c22a:	46bd      	mov	sp, r7
 800c22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c230:	4770      	bx	lr

0800c232 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800c232:	b480      	push	{r7}
 800c234:	b083      	sub	sp, #12
 800c236:	af00      	add	r7, sp, #0
 800c238:	6078      	str	r0, [r7, #4]
 800c23a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800c23c:	bf00      	nop
 800c23e:	370c      	adds	r7, #12
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr

0800c248 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800c248:	b480      	push	{r7}
 800c24a:	b083      	sub	sp, #12
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800c252:	bf00      	nop
 800c254:	370c      	adds	r7, #12
 800c256:	46bd      	mov	sp, r7
 800c258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25c:	4770      	bx	lr

0800c25e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800c25e:	b480      	push	{r7}
 800c260:	b083      	sub	sp, #12
 800c262:	af00      	add	r7, sp, #0
 800c264:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800c266:	bf00      	nop
 800c268:	370c      	adds	r7, #12
 800c26a:	46bd      	mov	sp, r7
 800c26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c270:	4770      	bx	lr

0800c272 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800c272:	b480      	push	{r7}
 800c274:	b083      	sub	sp, #12
 800c276:	af00      	add	r7, sp, #0
 800c278:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800c27a:	bf00      	nop
 800c27c:	370c      	adds	r7, #12
 800c27e:	46bd      	mov	sp, r7
 800c280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c284:	4770      	bx	lr

0800c286 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800c286:	b480      	push	{r7}
 800c288:	b083      	sub	sp, #12
 800c28a:	af00      	add	r7, sp, #0
 800c28c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800c28e:	bf00      	nop
 800c290:	370c      	adds	r7, #12
 800c292:	46bd      	mov	sp, r7
 800c294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c298:	4770      	bx	lr

0800c29a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800c29a:	b480      	push	{r7}
 800c29c:	b083      	sub	sp, #12
 800c29e:	af00      	add	r7, sp, #0
 800c2a0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800c2a2:	bf00      	nop
 800c2a4:	370c      	adds	r7, #12
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ac:	4770      	bx	lr

0800c2ae <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800c2ae:	b480      	push	{r7}
 800c2b0:	b083      	sub	sp, #12
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800c2b6:	bf00      	nop
 800c2b8:	370c      	adds	r7, #12
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c0:	4770      	bx	lr

0800c2c2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800c2c2:	b480      	push	{r7}
 800c2c4:	b083      	sub	sp, #12
 800c2c6:	af00      	add	r7, sp, #0
 800c2c8:	6078      	str	r0, [r7, #4]
 800c2ca:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800c2cc:	bf00      	nop
 800c2ce:	370c      	adds	r7, #12
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d6:	4770      	bx	lr

0800c2d8 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b083      	sub	sp, #12
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
 800c2e0:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800c2e2:	bf00      	nop
 800c2e4:	370c      	adds	r7, #12
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr

0800c2ee <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800c2ee:	b480      	push	{r7}
 800c2f0:	b083      	sub	sp, #12
 800c2f2:	af00      	add	r7, sp, #0
 800c2f4:	6078      	str	r0, [r7, #4]
 800c2f6:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800c2f8:	bf00      	nop
 800c2fa:	370c      	adds	r7, #12
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c302:	4770      	bx	lr

0800c304 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800c304:	b480      	push	{r7}
 800c306:	b085      	sub	sp, #20
 800c308:	af00      	add	r7, sp, #0
 800c30a:	60f8      	str	r0, [r7, #12]
 800c30c:	60b9      	str	r1, [r7, #8]
 800c30e:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800c310:	bf00      	nop
 800c312:	3714      	adds	r7, #20
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr

0800c31c <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b083      	sub	sp, #12
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800c326:	bf00      	nop
 800c328:	370c      	adds	r7, #12
 800c32a:	46bd      	mov	sp, r7
 800c32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c330:	4770      	bx	lr
	...

0800c334 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800c334:	b480      	push	{r7}
 800c336:	b085      	sub	sp, #20
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c340:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800c34a:	4ba7      	ldr	r3, [pc, #668]	@ (800c5e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800c34c:	4013      	ands	r3, r2
 800c34e:	68ba      	ldr	r2, [r7, #8]
 800c350:	0091      	lsls	r1, r2, #2
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	6812      	ldr	r2, [r2, #0]
 800c356:	430b      	orrs	r3, r1
 800c358:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c364:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c36c:	041a      	lsls	r2, r3, #16
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	430a      	orrs	r2, r1
 800c374:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c37c:	68ba      	ldr	r2, [r7, #8]
 800c37e:	4413      	add	r3, r2
 800c380:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800c38a:	4b97      	ldr	r3, [pc, #604]	@ (800c5e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800c38c:	4013      	ands	r3, r2
 800c38e:	68ba      	ldr	r2, [r7, #8]
 800c390:	0091      	lsls	r1, r2, #2
 800c392:	687a      	ldr	r2, [r7, #4]
 800c394:	6812      	ldr	r2, [r2, #0]
 800c396:	430b      	orrs	r3, r1
 800c398:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c3a4:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3ac:	041a      	lsls	r2, r3, #16
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	430a      	orrs	r2, r1
 800c3b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3bc:	005b      	lsls	r3, r3, #1
 800c3be:	68ba      	ldr	r2, [r7, #8]
 800c3c0:	4413      	add	r3, r2
 800c3c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800c3cc:	4b86      	ldr	r3, [pc, #536]	@ (800c5e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800c3ce:	4013      	ands	r3, r2
 800c3d0:	68ba      	ldr	r2, [r7, #8]
 800c3d2:	0091      	lsls	r1, r2, #2
 800c3d4:	687a      	ldr	r2, [r7, #4]
 800c3d6:	6812      	ldr	r2, [r2, #0]
 800c3d8:	430b      	orrs	r3, r1
 800c3da:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c3e6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3ee:	041a      	lsls	r2, r3, #16
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	430a      	orrs	r2, r1
 800c3f6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800c402:	fb02 f303 	mul.w	r3, r2, r3
 800c406:	68ba      	ldr	r2, [r7, #8]
 800c408:	4413      	add	r3, r2
 800c40a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800c414:	4b74      	ldr	r3, [pc, #464]	@ (800c5e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800c416:	4013      	ands	r3, r2
 800c418:	68ba      	ldr	r2, [r7, #8]
 800c41a:	0091      	lsls	r1, r2, #2
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	6812      	ldr	r2, [r2, #0]
 800c420:	430b      	orrs	r3, r1
 800c422:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c42e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c436:	041a      	lsls	r2, r3, #16
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	430a      	orrs	r2, r1
 800c43e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c446:	687a      	ldr	r2, [r7, #4]
 800c448:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800c44a:	fb02 f303 	mul.w	r3, r2, r3
 800c44e:	68ba      	ldr	r2, [r7, #8]
 800c450:	4413      	add	r3, r2
 800c452:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800c45c:	4b62      	ldr	r3, [pc, #392]	@ (800c5e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800c45e:	4013      	ands	r3, r2
 800c460:	68ba      	ldr	r2, [r7, #8]
 800c462:	0091      	lsls	r1, r2, #2
 800c464:	687a      	ldr	r2, [r7, #4]
 800c466:	6812      	ldr	r2, [r2, #0]
 800c468:	430b      	orrs	r3, r1
 800c46a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c472:	687a      	ldr	r2, [r7, #4]
 800c474:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800c476:	fb02 f303 	mul.w	r3, r2, r3
 800c47a:	68ba      	ldr	r2, [r7, #8]
 800c47c:	4413      	add	r3, r2
 800c47e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800c488:	4b57      	ldr	r3, [pc, #348]	@ (800c5e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800c48a:	4013      	ands	r3, r2
 800c48c:	68ba      	ldr	r2, [r7, #8]
 800c48e:	0091      	lsls	r1, r2, #2
 800c490:	687a      	ldr	r2, [r7, #4]
 800c492:	6812      	ldr	r2, [r2, #0]
 800c494:	430b      	orrs	r3, r1
 800c496:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c4a2:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4aa:	041a      	lsls	r2, r3, #16
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	430a      	orrs	r2, r1
 800c4b2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4ba:	005b      	lsls	r3, r3, #1
 800c4bc:	68ba      	ldr	r2, [r7, #8]
 800c4be:	4413      	add	r3, r2
 800c4c0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800c4ca:	4b47      	ldr	r3, [pc, #284]	@ (800c5e8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800c4cc:	4013      	ands	r3, r2
 800c4ce:	68ba      	ldr	r2, [r7, #8]
 800c4d0:	0091      	lsls	r1, r2, #2
 800c4d2:	687a      	ldr	r2, [r7, #4]
 800c4d4:	6812      	ldr	r2, [r2, #0]
 800c4d6:	430b      	orrs	r3, r1
 800c4d8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c4e4:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4ec:	041a      	lsls	r2, r3, #16
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	430a      	orrs	r2, r1
 800c4f4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c500:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c508:	061a      	lsls	r2, r3, #24
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	430a      	orrs	r2, r1
 800c510:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c518:	4b34      	ldr	r3, [pc, #208]	@ (800c5ec <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800c51a:	4413      	add	r3, r2
 800c51c:	009a      	lsls	r2, r3, #2
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c52a:	009b      	lsls	r3, r3, #2
 800c52c:	441a      	add	r2, r3
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c53a:	00db      	lsls	r3, r3, #3
 800c53c:	441a      	add	r2, r3
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c54a:	6879      	ldr	r1, [r7, #4]
 800c54c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800c54e:	fb01 f303 	mul.w	r3, r1, r3
 800c552:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800c554:	441a      	add	r2, r3
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c562:	6879      	ldr	r1, [r7, #4]
 800c564:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800c566:	fb01 f303 	mul.w	r3, r1, r3
 800c56a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800c56c:	441a      	add	r2, r3
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c57a:	6879      	ldr	r1, [r7, #4]
 800c57c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800c57e:	fb01 f303 	mul.w	r3, r1, r3
 800c582:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800c584:	441a      	add	r2, r3
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c596:	00db      	lsls	r3, r3, #3
 800c598:	441a      	add	r2, r3
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c5aa:	6879      	ldr	r1, [r7, #4]
 800c5ac:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800c5ae:	fb01 f303 	mul.w	r3, r1, r3
 800c5b2:	009b      	lsls	r3, r3, #2
 800c5b4:	441a      	add	r2, r3
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c5c6:	6879      	ldr	r1, [r7, #4]
 800c5c8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800c5ca:	fb01 f303 	mul.w	r3, r1, r3
 800c5ce:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800c5d0:	441a      	add	r2, r3
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5de:	4a04      	ldr	r2, [pc, #16]	@ (800c5f0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	d915      	bls.n	800c610 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800c5e4:	e006      	b.n	800c5f4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800c5e6:	bf00      	nop
 800c5e8:	ffff0003 	.word	0xffff0003
 800c5ec:	10002b00 	.word	0x10002b00
 800c5f0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c5fa:	f043 0220 	orr.w	r2, r3, #32
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2203      	movs	r2, #3
 800c608:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 800c60c:	2301      	movs	r3, #1
 800c60e:	e010      	b.n	800c632 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c614:	60fb      	str	r3, [r7, #12]
 800c616:	e005      	b.n	800c624 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	2200      	movs	r2, #0
 800c61c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	3304      	adds	r3, #4
 800c622:	60fb      	str	r3, [r7, #12]
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c62a:	68fa      	ldr	r2, [r7, #12]
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d3f3      	bcc.n	800c618 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800c630:	2300      	movs	r3, #0
}
 800c632:	4618      	mov	r0, r3
 800c634:	3714      	adds	r7, #20
 800c636:	46bd      	mov	sp, r7
 800c638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63c:	4770      	bx	lr
 800c63e:	bf00      	nop

0800c640 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800c640:	b480      	push	{r7}
 800c642:	b089      	sub	sp, #36	@ 0x24
 800c644:	af00      	add	r7, sp, #0
 800c646:	60f8      	str	r0, [r7, #12]
 800c648:	60b9      	str	r1, [r7, #8]
 800c64a:	607a      	str	r2, [r7, #4]
 800c64c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	685b      	ldr	r3, [r3, #4]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d10a      	bne.n	800c66c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800c65e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800c666:	4313      	orrs	r3, r2
 800c668:	61fb      	str	r3, [r7, #28]
 800c66a:	e00a      	b.n	800c682 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800c674:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800c67a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800c67c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c680:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	6a1b      	ldr	r3, [r3, #32]
 800c686:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800c68c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800c692:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800c698:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	68db      	ldr	r3, [r3, #12]
 800c69e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800c6a0:	4313      	orrs	r3, r2
 800c6a2:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c6ae:	6839      	ldr	r1, [r7, #0]
 800c6b0:	fb01 f303 	mul.w	r3, r1, r3
 800c6b4:	009b      	lsls	r3, r3, #2
 800c6b6:	4413      	add	r3, r2
 800c6b8:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800c6ba:	69bb      	ldr	r3, [r7, #24]
 800c6bc:	69fa      	ldr	r2, [r7, #28]
 800c6be:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800c6c0:	69bb      	ldr	r3, [r7, #24]
 800c6c2:	3304      	adds	r3, #4
 800c6c4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800c6c6:	69bb      	ldr	r3, [r7, #24]
 800c6c8:	693a      	ldr	r2, [r7, #16]
 800c6ca:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800c6cc:	69bb      	ldr	r3, [r7, #24]
 800c6ce:	3304      	adds	r3, #4
 800c6d0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	617b      	str	r3, [r7, #20]
 800c6d6:	e020      	b.n	800c71a <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	3303      	adds	r3, #3
 800c6dc:	687a      	ldr	r2, [r7, #4]
 800c6de:	4413      	add	r3, r2
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	3302      	adds	r3, #2
 800c6e8:	6879      	ldr	r1, [r7, #4]
 800c6ea:	440b      	add	r3, r1
 800c6ec:	781b      	ldrb	r3, [r3, #0]
 800c6ee:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800c6f0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	3301      	adds	r3, #1
 800c6f6:	6879      	ldr	r1, [r7, #4]
 800c6f8:	440b      	add	r3, r1
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800c6fe:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800c700:	6879      	ldr	r1, [r7, #4]
 800c702:	697a      	ldr	r2, [r7, #20]
 800c704:	440a      	add	r2, r1
 800c706:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800c708:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800c70a:	69bb      	ldr	r3, [r7, #24]
 800c70c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800c70e:	69bb      	ldr	r3, [r7, #24]
 800c710:	3304      	adds	r3, #4
 800c712:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	3304      	adds	r3, #4
 800c718:	617b      	str	r3, [r7, #20]
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	68db      	ldr	r3, [r3, #12]
 800c71e:	4a06      	ldr	r2, [pc, #24]	@ (800c738 <FDCAN_CopyMessageToRAM+0xf8>)
 800c720:	5cd3      	ldrb	r3, [r2, r3]
 800c722:	461a      	mov	r2, r3
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	4293      	cmp	r3, r2
 800c728:	d3d6      	bcc.n	800c6d8 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 800c72a:	bf00      	nop
 800c72c:	bf00      	nop
 800c72e:	3724      	adds	r7, #36	@ 0x24
 800c730:	46bd      	mov	sp, r7
 800c732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c736:	4770      	bx	lr
 800c738:	080145c4 	.word	0x080145c4

0800c73c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800c73c:	b480      	push	{r7}
 800c73e:	b089      	sub	sp, #36	@ 0x24
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
 800c744:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800c746:	2300      	movs	r3, #0
 800c748:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800c74a:	4b89      	ldr	r3, [pc, #548]	@ (800c970 <HAL_GPIO_Init+0x234>)
 800c74c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800c74e:	e194      	b.n	800ca7a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	681a      	ldr	r2, [r3, #0]
 800c754:	2101      	movs	r1, #1
 800c756:	69fb      	ldr	r3, [r7, #28]
 800c758:	fa01 f303 	lsl.w	r3, r1, r3
 800c75c:	4013      	ands	r3, r2
 800c75e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800c760:	693b      	ldr	r3, [r7, #16]
 800c762:	2b00      	cmp	r3, #0
 800c764:	f000 8186 	beq.w	800ca74 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	685b      	ldr	r3, [r3, #4]
 800c76c:	f003 0303 	and.w	r3, r3, #3
 800c770:	2b01      	cmp	r3, #1
 800c772:	d005      	beq.n	800c780 <HAL_GPIO_Init+0x44>
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	f003 0303 	and.w	r3, r3, #3
 800c77c:	2b02      	cmp	r3, #2
 800c77e:	d130      	bne.n	800c7e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	689b      	ldr	r3, [r3, #8]
 800c784:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800c786:	69fb      	ldr	r3, [r7, #28]
 800c788:	005b      	lsls	r3, r3, #1
 800c78a:	2203      	movs	r2, #3
 800c78c:	fa02 f303 	lsl.w	r3, r2, r3
 800c790:	43db      	mvns	r3, r3
 800c792:	69ba      	ldr	r2, [r7, #24]
 800c794:	4013      	ands	r3, r2
 800c796:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	68da      	ldr	r2, [r3, #12]
 800c79c:	69fb      	ldr	r3, [r7, #28]
 800c79e:	005b      	lsls	r3, r3, #1
 800c7a0:	fa02 f303 	lsl.w	r3, r2, r3
 800c7a4:	69ba      	ldr	r2, [r7, #24]
 800c7a6:	4313      	orrs	r3, r2
 800c7a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	69ba      	ldr	r2, [r7, #24]
 800c7ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	685b      	ldr	r3, [r3, #4]
 800c7b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	69fb      	ldr	r3, [r7, #28]
 800c7ba:	fa02 f303 	lsl.w	r3, r2, r3
 800c7be:	43db      	mvns	r3, r3
 800c7c0:	69ba      	ldr	r2, [r7, #24]
 800c7c2:	4013      	ands	r3, r2
 800c7c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	091b      	lsrs	r3, r3, #4
 800c7cc:	f003 0201 	and.w	r2, r3, #1
 800c7d0:	69fb      	ldr	r3, [r7, #28]
 800c7d2:	fa02 f303 	lsl.w	r3, r2, r3
 800c7d6:	69ba      	ldr	r2, [r7, #24]
 800c7d8:	4313      	orrs	r3, r2
 800c7da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	69ba      	ldr	r2, [r7, #24]
 800c7e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	685b      	ldr	r3, [r3, #4]
 800c7e6:	f003 0303 	and.w	r3, r3, #3
 800c7ea:	2b03      	cmp	r3, #3
 800c7ec:	d017      	beq.n	800c81e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	68db      	ldr	r3, [r3, #12]
 800c7f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c7f4:	69fb      	ldr	r3, [r7, #28]
 800c7f6:	005b      	lsls	r3, r3, #1
 800c7f8:	2203      	movs	r2, #3
 800c7fa:	fa02 f303 	lsl.w	r3, r2, r3
 800c7fe:	43db      	mvns	r3, r3
 800c800:	69ba      	ldr	r2, [r7, #24]
 800c802:	4013      	ands	r3, r2
 800c804:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	689a      	ldr	r2, [r3, #8]
 800c80a:	69fb      	ldr	r3, [r7, #28]
 800c80c:	005b      	lsls	r3, r3, #1
 800c80e:	fa02 f303 	lsl.w	r3, r2, r3
 800c812:	69ba      	ldr	r2, [r7, #24]
 800c814:	4313      	orrs	r3, r2
 800c816:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	69ba      	ldr	r2, [r7, #24]
 800c81c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	685b      	ldr	r3, [r3, #4]
 800c822:	f003 0303 	and.w	r3, r3, #3
 800c826:	2b02      	cmp	r3, #2
 800c828:	d123      	bne.n	800c872 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c82a:	69fb      	ldr	r3, [r7, #28]
 800c82c:	08da      	lsrs	r2, r3, #3
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	3208      	adds	r2, #8
 800c832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c836:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800c838:	69fb      	ldr	r3, [r7, #28]
 800c83a:	f003 0307 	and.w	r3, r3, #7
 800c83e:	009b      	lsls	r3, r3, #2
 800c840:	220f      	movs	r2, #15
 800c842:	fa02 f303 	lsl.w	r3, r2, r3
 800c846:	43db      	mvns	r3, r3
 800c848:	69ba      	ldr	r2, [r7, #24]
 800c84a:	4013      	ands	r3, r2
 800c84c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	691a      	ldr	r2, [r3, #16]
 800c852:	69fb      	ldr	r3, [r7, #28]
 800c854:	f003 0307 	and.w	r3, r3, #7
 800c858:	009b      	lsls	r3, r3, #2
 800c85a:	fa02 f303 	lsl.w	r3, r2, r3
 800c85e:	69ba      	ldr	r2, [r7, #24]
 800c860:	4313      	orrs	r3, r2
 800c862:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c864:	69fb      	ldr	r3, [r7, #28]
 800c866:	08da      	lsrs	r2, r3, #3
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	3208      	adds	r2, #8
 800c86c:	69b9      	ldr	r1, [r7, #24]
 800c86e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800c878:	69fb      	ldr	r3, [r7, #28]
 800c87a:	005b      	lsls	r3, r3, #1
 800c87c:	2203      	movs	r2, #3
 800c87e:	fa02 f303 	lsl.w	r3, r2, r3
 800c882:	43db      	mvns	r3, r3
 800c884:	69ba      	ldr	r2, [r7, #24]
 800c886:	4013      	ands	r3, r2
 800c888:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	685b      	ldr	r3, [r3, #4]
 800c88e:	f003 0203 	and.w	r2, r3, #3
 800c892:	69fb      	ldr	r3, [r7, #28]
 800c894:	005b      	lsls	r3, r3, #1
 800c896:	fa02 f303 	lsl.w	r3, r2, r3
 800c89a:	69ba      	ldr	r2, [r7, #24]
 800c89c:	4313      	orrs	r3, r2
 800c89e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	69ba      	ldr	r2, [r7, #24]
 800c8a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	685b      	ldr	r3, [r3, #4]
 800c8aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	f000 80e0 	beq.w	800ca74 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c8b4:	4b2f      	ldr	r3, [pc, #188]	@ (800c974 <HAL_GPIO_Init+0x238>)
 800c8b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c8ba:	4a2e      	ldr	r2, [pc, #184]	@ (800c974 <HAL_GPIO_Init+0x238>)
 800c8bc:	f043 0302 	orr.w	r3, r3, #2
 800c8c0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800c8c4:	4b2b      	ldr	r3, [pc, #172]	@ (800c974 <HAL_GPIO_Init+0x238>)
 800c8c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c8ca:	f003 0302 	and.w	r3, r3, #2
 800c8ce:	60fb      	str	r3, [r7, #12]
 800c8d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c8d2:	4a29      	ldr	r2, [pc, #164]	@ (800c978 <HAL_GPIO_Init+0x23c>)
 800c8d4:	69fb      	ldr	r3, [r7, #28]
 800c8d6:	089b      	lsrs	r3, r3, #2
 800c8d8:	3302      	adds	r3, #2
 800c8da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800c8e0:	69fb      	ldr	r3, [r7, #28]
 800c8e2:	f003 0303 	and.w	r3, r3, #3
 800c8e6:	009b      	lsls	r3, r3, #2
 800c8e8:	220f      	movs	r2, #15
 800c8ea:	fa02 f303 	lsl.w	r3, r2, r3
 800c8ee:	43db      	mvns	r3, r3
 800c8f0:	69ba      	ldr	r2, [r7, #24]
 800c8f2:	4013      	ands	r3, r2
 800c8f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	4a20      	ldr	r2, [pc, #128]	@ (800c97c <HAL_GPIO_Init+0x240>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d052      	beq.n	800c9a4 <HAL_GPIO_Init+0x268>
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	4a1f      	ldr	r2, [pc, #124]	@ (800c980 <HAL_GPIO_Init+0x244>)
 800c902:	4293      	cmp	r3, r2
 800c904:	d031      	beq.n	800c96a <HAL_GPIO_Init+0x22e>
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	4a1e      	ldr	r2, [pc, #120]	@ (800c984 <HAL_GPIO_Init+0x248>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d02b      	beq.n	800c966 <HAL_GPIO_Init+0x22a>
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	4a1d      	ldr	r2, [pc, #116]	@ (800c988 <HAL_GPIO_Init+0x24c>)
 800c912:	4293      	cmp	r3, r2
 800c914:	d025      	beq.n	800c962 <HAL_GPIO_Init+0x226>
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	4a1c      	ldr	r2, [pc, #112]	@ (800c98c <HAL_GPIO_Init+0x250>)
 800c91a:	4293      	cmp	r3, r2
 800c91c:	d01f      	beq.n	800c95e <HAL_GPIO_Init+0x222>
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	4a1b      	ldr	r2, [pc, #108]	@ (800c990 <HAL_GPIO_Init+0x254>)
 800c922:	4293      	cmp	r3, r2
 800c924:	d019      	beq.n	800c95a <HAL_GPIO_Init+0x21e>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	4a1a      	ldr	r2, [pc, #104]	@ (800c994 <HAL_GPIO_Init+0x258>)
 800c92a:	4293      	cmp	r3, r2
 800c92c:	d013      	beq.n	800c956 <HAL_GPIO_Init+0x21a>
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	4a19      	ldr	r2, [pc, #100]	@ (800c998 <HAL_GPIO_Init+0x25c>)
 800c932:	4293      	cmp	r3, r2
 800c934:	d00d      	beq.n	800c952 <HAL_GPIO_Init+0x216>
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	4a18      	ldr	r2, [pc, #96]	@ (800c99c <HAL_GPIO_Init+0x260>)
 800c93a:	4293      	cmp	r3, r2
 800c93c:	d007      	beq.n	800c94e <HAL_GPIO_Init+0x212>
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	4a17      	ldr	r2, [pc, #92]	@ (800c9a0 <HAL_GPIO_Init+0x264>)
 800c942:	4293      	cmp	r3, r2
 800c944:	d101      	bne.n	800c94a <HAL_GPIO_Init+0x20e>
 800c946:	2309      	movs	r3, #9
 800c948:	e02d      	b.n	800c9a6 <HAL_GPIO_Init+0x26a>
 800c94a:	230a      	movs	r3, #10
 800c94c:	e02b      	b.n	800c9a6 <HAL_GPIO_Init+0x26a>
 800c94e:	2308      	movs	r3, #8
 800c950:	e029      	b.n	800c9a6 <HAL_GPIO_Init+0x26a>
 800c952:	2307      	movs	r3, #7
 800c954:	e027      	b.n	800c9a6 <HAL_GPIO_Init+0x26a>
 800c956:	2306      	movs	r3, #6
 800c958:	e025      	b.n	800c9a6 <HAL_GPIO_Init+0x26a>
 800c95a:	2305      	movs	r3, #5
 800c95c:	e023      	b.n	800c9a6 <HAL_GPIO_Init+0x26a>
 800c95e:	2304      	movs	r3, #4
 800c960:	e021      	b.n	800c9a6 <HAL_GPIO_Init+0x26a>
 800c962:	2303      	movs	r3, #3
 800c964:	e01f      	b.n	800c9a6 <HAL_GPIO_Init+0x26a>
 800c966:	2302      	movs	r3, #2
 800c968:	e01d      	b.n	800c9a6 <HAL_GPIO_Init+0x26a>
 800c96a:	2301      	movs	r3, #1
 800c96c:	e01b      	b.n	800c9a6 <HAL_GPIO_Init+0x26a>
 800c96e:	bf00      	nop
 800c970:	58000080 	.word	0x58000080
 800c974:	58024400 	.word	0x58024400
 800c978:	58000400 	.word	0x58000400
 800c97c:	58020000 	.word	0x58020000
 800c980:	58020400 	.word	0x58020400
 800c984:	58020800 	.word	0x58020800
 800c988:	58020c00 	.word	0x58020c00
 800c98c:	58021000 	.word	0x58021000
 800c990:	58021400 	.word	0x58021400
 800c994:	58021800 	.word	0x58021800
 800c998:	58021c00 	.word	0x58021c00
 800c99c:	58022000 	.word	0x58022000
 800c9a0:	58022400 	.word	0x58022400
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	69fa      	ldr	r2, [r7, #28]
 800c9a8:	f002 0203 	and.w	r2, r2, #3
 800c9ac:	0092      	lsls	r2, r2, #2
 800c9ae:	4093      	lsls	r3, r2
 800c9b0:	69ba      	ldr	r2, [r7, #24]
 800c9b2:	4313      	orrs	r3, r2
 800c9b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c9b6:	4938      	ldr	r1, [pc, #224]	@ (800ca98 <HAL_GPIO_Init+0x35c>)
 800c9b8:	69fb      	ldr	r3, [r7, #28]
 800c9ba:	089b      	lsrs	r3, r3, #2
 800c9bc:	3302      	adds	r3, #2
 800c9be:	69ba      	ldr	r2, [r7, #24]
 800c9c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c9c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	43db      	mvns	r3, r3
 800c9d0:	69ba      	ldr	r2, [r7, #24]
 800c9d2:	4013      	ands	r3, r2
 800c9d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	685b      	ldr	r3, [r3, #4]
 800c9da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d003      	beq.n	800c9ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800c9e2:	69ba      	ldr	r2, [r7, #24]
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	4313      	orrs	r3, r2
 800c9e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800c9ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c9ee:	69bb      	ldr	r3, [r7, #24]
 800c9f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800c9f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c9f6:	685b      	ldr	r3, [r3, #4]
 800c9f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c9fa:	693b      	ldr	r3, [r7, #16]
 800c9fc:	43db      	mvns	r3, r3
 800c9fe:	69ba      	ldr	r2, [r7, #24]
 800ca00:	4013      	ands	r3, r2
 800ca02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	685b      	ldr	r3, [r3, #4]
 800ca08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d003      	beq.n	800ca18 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800ca10:	69ba      	ldr	r2, [r7, #24]
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	4313      	orrs	r3, r2
 800ca16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800ca18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ca1c:	69bb      	ldr	r3, [r7, #24]
 800ca1e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	685b      	ldr	r3, [r3, #4]
 800ca24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	43db      	mvns	r3, r3
 800ca2a:	69ba      	ldr	r2, [r7, #24]
 800ca2c:	4013      	ands	r3, r2
 800ca2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	685b      	ldr	r3, [r3, #4]
 800ca34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d003      	beq.n	800ca44 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800ca3c:	69ba      	ldr	r2, [r7, #24]
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	4313      	orrs	r3, r2
 800ca42:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800ca44:	697b      	ldr	r3, [r7, #20]
 800ca46:	69ba      	ldr	r2, [r7, #24]
 800ca48:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800ca4a:	697b      	ldr	r3, [r7, #20]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	43db      	mvns	r3, r3
 800ca54:	69ba      	ldr	r2, [r7, #24]
 800ca56:	4013      	ands	r3, r2
 800ca58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	685b      	ldr	r3, [r3, #4]
 800ca5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d003      	beq.n	800ca6e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800ca66:	69ba      	ldr	r2, [r7, #24]
 800ca68:	693b      	ldr	r3, [r7, #16]
 800ca6a:	4313      	orrs	r3, r2
 800ca6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	69ba      	ldr	r2, [r7, #24]
 800ca72:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800ca74:	69fb      	ldr	r3, [r7, #28]
 800ca76:	3301      	adds	r3, #1
 800ca78:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	681a      	ldr	r2, [r3, #0]
 800ca7e:	69fb      	ldr	r3, [r7, #28]
 800ca80:	fa22 f303 	lsr.w	r3, r2, r3
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	f47f ae63 	bne.w	800c750 <HAL_GPIO_Init+0x14>
  }
}
 800ca8a:	bf00      	nop
 800ca8c:	bf00      	nop
 800ca8e:	3724      	adds	r7, #36	@ 0x24
 800ca90:	46bd      	mov	sp, r7
 800ca92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca96:	4770      	bx	lr
 800ca98:	58000400 	.word	0x58000400

0800ca9c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b084      	sub	sp, #16
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800caa4:	4b29      	ldr	r3, [pc, #164]	@ (800cb4c <HAL_PWREx_ConfigSupply+0xb0>)
 800caa6:	68db      	ldr	r3, [r3, #12]
 800caa8:	f003 0307 	and.w	r3, r3, #7
 800caac:	2b06      	cmp	r3, #6
 800caae:	d00a      	beq.n	800cac6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800cab0:	4b26      	ldr	r3, [pc, #152]	@ (800cb4c <HAL_PWREx_ConfigSupply+0xb0>)
 800cab2:	68db      	ldr	r3, [r3, #12]
 800cab4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cab8:	687a      	ldr	r2, [r7, #4]
 800caba:	429a      	cmp	r2, r3
 800cabc:	d001      	beq.n	800cac2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800cabe:	2301      	movs	r3, #1
 800cac0:	e040      	b.n	800cb44 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800cac2:	2300      	movs	r3, #0
 800cac4:	e03e      	b.n	800cb44 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800cac6:	4b21      	ldr	r3, [pc, #132]	@ (800cb4c <HAL_PWREx_ConfigSupply+0xb0>)
 800cac8:	68db      	ldr	r3, [r3, #12]
 800caca:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800cace:	491f      	ldr	r1, [pc, #124]	@ (800cb4c <HAL_PWREx_ConfigSupply+0xb0>)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	4313      	orrs	r3, r2
 800cad4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800cad6:	f7fd fbdf 	bl	800a298 <HAL_GetTick>
 800cada:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800cadc:	e009      	b.n	800caf2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800cade:	f7fd fbdb 	bl	800a298 <HAL_GetTick>
 800cae2:	4602      	mov	r2, r0
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	1ad3      	subs	r3, r2, r3
 800cae8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800caec:	d901      	bls.n	800caf2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800caee:	2301      	movs	r3, #1
 800caf0:	e028      	b.n	800cb44 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800caf2:	4b16      	ldr	r3, [pc, #88]	@ (800cb4c <HAL_PWREx_ConfigSupply+0xb0>)
 800caf4:	685b      	ldr	r3, [r3, #4]
 800caf6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cafa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cafe:	d1ee      	bne.n	800cade <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2b1e      	cmp	r3, #30
 800cb04:	d008      	beq.n	800cb18 <HAL_PWREx_ConfigSupply+0x7c>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2b2e      	cmp	r3, #46	@ 0x2e
 800cb0a:	d005      	beq.n	800cb18 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2b1d      	cmp	r3, #29
 800cb10:	d002      	beq.n	800cb18 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2b2d      	cmp	r3, #45	@ 0x2d
 800cb16:	d114      	bne.n	800cb42 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800cb18:	f7fd fbbe 	bl	800a298 <HAL_GetTick>
 800cb1c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800cb1e:	e009      	b.n	800cb34 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800cb20:	f7fd fbba 	bl	800a298 <HAL_GetTick>
 800cb24:	4602      	mov	r2, r0
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	1ad3      	subs	r3, r2, r3
 800cb2a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cb2e:	d901      	bls.n	800cb34 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800cb30:	2301      	movs	r3, #1
 800cb32:	e007      	b.n	800cb44 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800cb34:	4b05      	ldr	r3, [pc, #20]	@ (800cb4c <HAL_PWREx_ConfigSupply+0xb0>)
 800cb36:	68db      	ldr	r3, [r3, #12]
 800cb38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cb3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cb40:	d1ee      	bne.n	800cb20 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800cb42:	2300      	movs	r3, #0
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3710      	adds	r7, #16
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}
 800cb4c:	58024800 	.word	0x58024800

0800cb50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b08c      	sub	sp, #48	@ 0x30
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d102      	bne.n	800cb64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800cb5e:	2301      	movs	r3, #1
 800cb60:	f000 bc48 	b.w	800d3f4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f003 0301 	and.w	r3, r3, #1
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	f000 8088 	beq.w	800cc82 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cb72:	4b99      	ldr	r3, [pc, #612]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800cb74:	691b      	ldr	r3, [r3, #16]
 800cb76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cb7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800cb7c:	4b96      	ldr	r3, [pc, #600]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800cb7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb80:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800cb82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb84:	2b10      	cmp	r3, #16
 800cb86:	d007      	beq.n	800cb98 <HAL_RCC_OscConfig+0x48>
 800cb88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb8a:	2b18      	cmp	r3, #24
 800cb8c:	d111      	bne.n	800cbb2 <HAL_RCC_OscConfig+0x62>
 800cb8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb90:	f003 0303 	and.w	r3, r3, #3
 800cb94:	2b02      	cmp	r3, #2
 800cb96:	d10c      	bne.n	800cbb2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cb98:	4b8f      	ldr	r3, [pc, #572]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d06d      	beq.n	800cc80 <HAL_RCC_OscConfig+0x130>
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	685b      	ldr	r3, [r3, #4]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d169      	bne.n	800cc80 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800cbac:	2301      	movs	r3, #1
 800cbae:	f000 bc21 	b.w	800d3f4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	685b      	ldr	r3, [r3, #4]
 800cbb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cbba:	d106      	bne.n	800cbca <HAL_RCC_OscConfig+0x7a>
 800cbbc:	4b86      	ldr	r3, [pc, #536]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4a85      	ldr	r2, [pc, #532]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800cbc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cbc6:	6013      	str	r3, [r2, #0]
 800cbc8:	e02e      	b.n	800cc28 <HAL_RCC_OscConfig+0xd8>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	685b      	ldr	r3, [r3, #4]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d10c      	bne.n	800cbec <HAL_RCC_OscConfig+0x9c>
 800cbd2:	4b81      	ldr	r3, [pc, #516]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	4a80      	ldr	r2, [pc, #512]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800cbd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cbdc:	6013      	str	r3, [r2, #0]
 800cbde:	4b7e      	ldr	r3, [pc, #504]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	4a7d      	ldr	r2, [pc, #500]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800cbe4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cbe8:	6013      	str	r3, [r2, #0]
 800cbea:	e01d      	b.n	800cc28 <HAL_RCC_OscConfig+0xd8>
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	685b      	ldr	r3, [r3, #4]
 800cbf0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cbf4:	d10c      	bne.n	800cc10 <HAL_RCC_OscConfig+0xc0>
 800cbf6:	4b78      	ldr	r3, [pc, #480]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	4a77      	ldr	r2, [pc, #476]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800cbfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cc00:	6013      	str	r3, [r2, #0]
 800cc02:	4b75      	ldr	r3, [pc, #468]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	4a74      	ldr	r2, [pc, #464]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800cc08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cc0c:	6013      	str	r3, [r2, #0]
 800cc0e:	e00b      	b.n	800cc28 <HAL_RCC_OscConfig+0xd8>
 800cc10:	4b71      	ldr	r3, [pc, #452]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	4a70      	ldr	r2, [pc, #448]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800cc16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cc1a:	6013      	str	r3, [r2, #0]
 800cc1c:	4b6e      	ldr	r3, [pc, #440]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	4a6d      	ldr	r2, [pc, #436]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800cc22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cc26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	685b      	ldr	r3, [r3, #4]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d013      	beq.n	800cc58 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc30:	f7fd fb32 	bl	800a298 <HAL_GetTick>
 800cc34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cc36:	e008      	b.n	800cc4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cc38:	f7fd fb2e 	bl	800a298 <HAL_GetTick>
 800cc3c:	4602      	mov	r2, r0
 800cc3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc40:	1ad3      	subs	r3, r2, r3
 800cc42:	2b64      	cmp	r3, #100	@ 0x64
 800cc44:	d901      	bls.n	800cc4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800cc46:	2303      	movs	r3, #3
 800cc48:	e3d4      	b.n	800d3f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cc4a:	4b63      	ldr	r3, [pc, #396]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d0f0      	beq.n	800cc38 <HAL_RCC_OscConfig+0xe8>
 800cc56:	e014      	b.n	800cc82 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc58:	f7fd fb1e 	bl	800a298 <HAL_GetTick>
 800cc5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800cc5e:	e008      	b.n	800cc72 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cc60:	f7fd fb1a 	bl	800a298 <HAL_GetTick>
 800cc64:	4602      	mov	r2, r0
 800cc66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc68:	1ad3      	subs	r3, r2, r3
 800cc6a:	2b64      	cmp	r3, #100	@ 0x64
 800cc6c:	d901      	bls.n	800cc72 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800cc6e:	2303      	movs	r3, #3
 800cc70:	e3c0      	b.n	800d3f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800cc72:	4b59      	ldr	r3, [pc, #356]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d1f0      	bne.n	800cc60 <HAL_RCC_OscConfig+0x110>
 800cc7e:	e000      	b.n	800cc82 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cc80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f003 0302 	and.w	r3, r3, #2
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	f000 80ca 	beq.w	800ce24 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cc90:	4b51      	ldr	r3, [pc, #324]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800cc92:	691b      	ldr	r3, [r3, #16]
 800cc94:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cc98:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800cc9a:	4b4f      	ldr	r3, [pc, #316]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800cc9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc9e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800cca0:	6a3b      	ldr	r3, [r7, #32]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d007      	beq.n	800ccb6 <HAL_RCC_OscConfig+0x166>
 800cca6:	6a3b      	ldr	r3, [r7, #32]
 800cca8:	2b18      	cmp	r3, #24
 800ccaa:	d156      	bne.n	800cd5a <HAL_RCC_OscConfig+0x20a>
 800ccac:	69fb      	ldr	r3, [r7, #28]
 800ccae:	f003 0303 	and.w	r3, r3, #3
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d151      	bne.n	800cd5a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ccb6:	4b48      	ldr	r3, [pc, #288]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f003 0304 	and.w	r3, r3, #4
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d005      	beq.n	800ccce <HAL_RCC_OscConfig+0x17e>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	68db      	ldr	r3, [r3, #12]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d101      	bne.n	800ccce <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800ccca:	2301      	movs	r3, #1
 800cccc:	e392      	b.n	800d3f4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ccce:	4b42      	ldr	r3, [pc, #264]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f023 0219 	bic.w	r2, r3, #25
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	68db      	ldr	r3, [r3, #12]
 800ccda:	493f      	ldr	r1, [pc, #252]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800ccdc:	4313      	orrs	r3, r2
 800ccde:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cce0:	f7fd fada 	bl	800a298 <HAL_GetTick>
 800cce4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cce6:	e008      	b.n	800ccfa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cce8:	f7fd fad6 	bl	800a298 <HAL_GetTick>
 800ccec:	4602      	mov	r2, r0
 800ccee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccf0:	1ad3      	subs	r3, r2, r3
 800ccf2:	2b02      	cmp	r3, #2
 800ccf4:	d901      	bls.n	800ccfa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800ccf6:	2303      	movs	r3, #3
 800ccf8:	e37c      	b.n	800d3f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ccfa:	4b37      	ldr	r3, [pc, #220]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	f003 0304 	and.w	r3, r3, #4
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d0f0      	beq.n	800cce8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cd06:	f7fd fad3 	bl	800a2b0 <HAL_GetREVID>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	f241 0203 	movw	r2, #4099	@ 0x1003
 800cd10:	4293      	cmp	r3, r2
 800cd12:	d817      	bhi.n	800cd44 <HAL_RCC_OscConfig+0x1f4>
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	691b      	ldr	r3, [r3, #16]
 800cd18:	2b40      	cmp	r3, #64	@ 0x40
 800cd1a:	d108      	bne.n	800cd2e <HAL_RCC_OscConfig+0x1de>
 800cd1c:	4b2e      	ldr	r3, [pc, #184]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800cd1e:	685b      	ldr	r3, [r3, #4]
 800cd20:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800cd24:	4a2c      	ldr	r2, [pc, #176]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800cd26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cd2a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cd2c:	e07a      	b.n	800ce24 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cd2e:	4b2a      	ldr	r3, [pc, #168]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800cd30:	685b      	ldr	r3, [r3, #4]
 800cd32:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	691b      	ldr	r3, [r3, #16]
 800cd3a:	031b      	lsls	r3, r3, #12
 800cd3c:	4926      	ldr	r1, [pc, #152]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800cd3e:	4313      	orrs	r3, r2
 800cd40:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cd42:	e06f      	b.n	800ce24 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cd44:	4b24      	ldr	r3, [pc, #144]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800cd46:	685b      	ldr	r3, [r3, #4]
 800cd48:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	691b      	ldr	r3, [r3, #16]
 800cd50:	061b      	lsls	r3, r3, #24
 800cd52:	4921      	ldr	r1, [pc, #132]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800cd54:	4313      	orrs	r3, r2
 800cd56:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cd58:	e064      	b.n	800ce24 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	68db      	ldr	r3, [r3, #12]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d047      	beq.n	800cdf2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800cd62:	4b1d      	ldr	r3, [pc, #116]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	f023 0219 	bic.w	r2, r3, #25
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	68db      	ldr	r3, [r3, #12]
 800cd6e:	491a      	ldr	r1, [pc, #104]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800cd70:	4313      	orrs	r3, r2
 800cd72:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd74:	f7fd fa90 	bl	800a298 <HAL_GetTick>
 800cd78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cd7a:	e008      	b.n	800cd8e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cd7c:	f7fd fa8c 	bl	800a298 <HAL_GetTick>
 800cd80:	4602      	mov	r2, r0
 800cd82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd84:	1ad3      	subs	r3, r2, r3
 800cd86:	2b02      	cmp	r3, #2
 800cd88:	d901      	bls.n	800cd8e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800cd8a:	2303      	movs	r3, #3
 800cd8c:	e332      	b.n	800d3f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cd8e:	4b12      	ldr	r3, [pc, #72]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f003 0304 	and.w	r3, r3, #4
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d0f0      	beq.n	800cd7c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cd9a:	f7fd fa89 	bl	800a2b0 <HAL_GetREVID>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	f241 0203 	movw	r2, #4099	@ 0x1003
 800cda4:	4293      	cmp	r3, r2
 800cda6:	d819      	bhi.n	800cddc <HAL_RCC_OscConfig+0x28c>
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	691b      	ldr	r3, [r3, #16]
 800cdac:	2b40      	cmp	r3, #64	@ 0x40
 800cdae:	d108      	bne.n	800cdc2 <HAL_RCC_OscConfig+0x272>
 800cdb0:	4b09      	ldr	r3, [pc, #36]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800cdb8:	4a07      	ldr	r2, [pc, #28]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800cdba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cdbe:	6053      	str	r3, [r2, #4]
 800cdc0:	e030      	b.n	800ce24 <HAL_RCC_OscConfig+0x2d4>
 800cdc2:	4b05      	ldr	r3, [pc, #20]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800cdc4:	685b      	ldr	r3, [r3, #4]
 800cdc6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	691b      	ldr	r3, [r3, #16]
 800cdce:	031b      	lsls	r3, r3, #12
 800cdd0:	4901      	ldr	r1, [pc, #4]	@ (800cdd8 <HAL_RCC_OscConfig+0x288>)
 800cdd2:	4313      	orrs	r3, r2
 800cdd4:	604b      	str	r3, [r1, #4]
 800cdd6:	e025      	b.n	800ce24 <HAL_RCC_OscConfig+0x2d4>
 800cdd8:	58024400 	.word	0x58024400
 800cddc:	4b9a      	ldr	r3, [pc, #616]	@ (800d048 <HAL_RCC_OscConfig+0x4f8>)
 800cdde:	685b      	ldr	r3, [r3, #4]
 800cde0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	691b      	ldr	r3, [r3, #16]
 800cde8:	061b      	lsls	r3, r3, #24
 800cdea:	4997      	ldr	r1, [pc, #604]	@ (800d048 <HAL_RCC_OscConfig+0x4f8>)
 800cdec:	4313      	orrs	r3, r2
 800cdee:	604b      	str	r3, [r1, #4]
 800cdf0:	e018      	b.n	800ce24 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cdf2:	4b95      	ldr	r3, [pc, #596]	@ (800d048 <HAL_RCC_OscConfig+0x4f8>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	4a94      	ldr	r2, [pc, #592]	@ (800d048 <HAL_RCC_OscConfig+0x4f8>)
 800cdf8:	f023 0301 	bic.w	r3, r3, #1
 800cdfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cdfe:	f7fd fa4b 	bl	800a298 <HAL_GetTick>
 800ce02:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ce04:	e008      	b.n	800ce18 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ce06:	f7fd fa47 	bl	800a298 <HAL_GetTick>
 800ce0a:	4602      	mov	r2, r0
 800ce0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce0e:	1ad3      	subs	r3, r2, r3
 800ce10:	2b02      	cmp	r3, #2
 800ce12:	d901      	bls.n	800ce18 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800ce14:	2303      	movs	r3, #3
 800ce16:	e2ed      	b.n	800d3f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ce18:	4b8b      	ldr	r3, [pc, #556]	@ (800d048 <HAL_RCC_OscConfig+0x4f8>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f003 0304 	and.w	r3, r3, #4
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d1f0      	bne.n	800ce06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	f003 0310 	and.w	r3, r3, #16
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	f000 80a9 	beq.w	800cf84 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ce32:	4b85      	ldr	r3, [pc, #532]	@ (800d048 <HAL_RCC_OscConfig+0x4f8>)
 800ce34:	691b      	ldr	r3, [r3, #16]
 800ce36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ce3a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ce3c:	4b82      	ldr	r3, [pc, #520]	@ (800d048 <HAL_RCC_OscConfig+0x4f8>)
 800ce3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce40:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ce42:	69bb      	ldr	r3, [r7, #24]
 800ce44:	2b08      	cmp	r3, #8
 800ce46:	d007      	beq.n	800ce58 <HAL_RCC_OscConfig+0x308>
 800ce48:	69bb      	ldr	r3, [r7, #24]
 800ce4a:	2b18      	cmp	r3, #24
 800ce4c:	d13a      	bne.n	800cec4 <HAL_RCC_OscConfig+0x374>
 800ce4e:	697b      	ldr	r3, [r7, #20]
 800ce50:	f003 0303 	and.w	r3, r3, #3
 800ce54:	2b01      	cmp	r3, #1
 800ce56:	d135      	bne.n	800cec4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ce58:	4b7b      	ldr	r3, [pc, #492]	@ (800d048 <HAL_RCC_OscConfig+0x4f8>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d005      	beq.n	800ce70 <HAL_RCC_OscConfig+0x320>
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	69db      	ldr	r3, [r3, #28]
 800ce68:	2b80      	cmp	r3, #128	@ 0x80
 800ce6a:	d001      	beq.n	800ce70 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	e2c1      	b.n	800d3f4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ce70:	f7fd fa1e 	bl	800a2b0 <HAL_GetREVID>
 800ce74:	4603      	mov	r3, r0
 800ce76:	f241 0203 	movw	r2, #4099	@ 0x1003
 800ce7a:	4293      	cmp	r3, r2
 800ce7c:	d817      	bhi.n	800ceae <HAL_RCC_OscConfig+0x35e>
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6a1b      	ldr	r3, [r3, #32]
 800ce82:	2b20      	cmp	r3, #32
 800ce84:	d108      	bne.n	800ce98 <HAL_RCC_OscConfig+0x348>
 800ce86:	4b70      	ldr	r3, [pc, #448]	@ (800d048 <HAL_RCC_OscConfig+0x4f8>)
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800ce8e:	4a6e      	ldr	r2, [pc, #440]	@ (800d048 <HAL_RCC_OscConfig+0x4f8>)
 800ce90:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ce94:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ce96:	e075      	b.n	800cf84 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ce98:	4b6b      	ldr	r3, [pc, #428]	@ (800d048 <HAL_RCC_OscConfig+0x4f8>)
 800ce9a:	685b      	ldr	r3, [r3, #4]
 800ce9c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6a1b      	ldr	r3, [r3, #32]
 800cea4:	069b      	lsls	r3, r3, #26
 800cea6:	4968      	ldr	r1, [pc, #416]	@ (800d048 <HAL_RCC_OscConfig+0x4f8>)
 800cea8:	4313      	orrs	r3, r2
 800ceaa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ceac:	e06a      	b.n	800cf84 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ceae:	4b66      	ldr	r3, [pc, #408]	@ (800d048 <HAL_RCC_OscConfig+0x4f8>)
 800ceb0:	68db      	ldr	r3, [r3, #12]
 800ceb2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6a1b      	ldr	r3, [r3, #32]
 800ceba:	061b      	lsls	r3, r3, #24
 800cebc:	4962      	ldr	r1, [pc, #392]	@ (800d048 <HAL_RCC_OscConfig+0x4f8>)
 800cebe:	4313      	orrs	r3, r2
 800cec0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cec2:	e05f      	b.n	800cf84 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	69db      	ldr	r3, [r3, #28]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d042      	beq.n	800cf52 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800cecc:	4b5e      	ldr	r3, [pc, #376]	@ (800d048 <HAL_RCC_OscConfig+0x4f8>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4a5d      	ldr	r2, [pc, #372]	@ (800d048 <HAL_RCC_OscConfig+0x4f8>)
 800ced2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ced6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ced8:	f7fd f9de 	bl	800a298 <HAL_GetTick>
 800cedc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cede:	e008      	b.n	800cef2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800cee0:	f7fd f9da 	bl	800a298 <HAL_GetTick>
 800cee4:	4602      	mov	r2, r0
 800cee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cee8:	1ad3      	subs	r3, r2, r3
 800ceea:	2b02      	cmp	r3, #2
 800ceec:	d901      	bls.n	800cef2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800ceee:	2303      	movs	r3, #3
 800cef0:	e280      	b.n	800d3f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cef2:	4b55      	ldr	r3, [pc, #340]	@ (800d048 <HAL_RCC_OscConfig+0x4f8>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d0f0      	beq.n	800cee0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cefe:	f7fd f9d7 	bl	800a2b0 <HAL_GetREVID>
 800cf02:	4603      	mov	r3, r0
 800cf04:	f241 0203 	movw	r2, #4099	@ 0x1003
 800cf08:	4293      	cmp	r3, r2
 800cf0a:	d817      	bhi.n	800cf3c <HAL_RCC_OscConfig+0x3ec>
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6a1b      	ldr	r3, [r3, #32]
 800cf10:	2b20      	cmp	r3, #32
 800cf12:	d108      	bne.n	800cf26 <HAL_RCC_OscConfig+0x3d6>
 800cf14:	4b4c      	ldr	r3, [pc, #304]	@ (800d048 <HAL_RCC_OscConfig+0x4f8>)
 800cf16:	685b      	ldr	r3, [r3, #4]
 800cf18:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800cf1c:	4a4a      	ldr	r2, [pc, #296]	@ (800d048 <HAL_RCC_OscConfig+0x4f8>)
 800cf1e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cf22:	6053      	str	r3, [r2, #4]
 800cf24:	e02e      	b.n	800cf84 <HAL_RCC_OscConfig+0x434>
 800cf26:	4b48      	ldr	r3, [pc, #288]	@ (800d048 <HAL_RCC_OscConfig+0x4f8>)
 800cf28:	685b      	ldr	r3, [r3, #4]
 800cf2a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6a1b      	ldr	r3, [r3, #32]
 800cf32:	069b      	lsls	r3, r3, #26
 800cf34:	4944      	ldr	r1, [pc, #272]	@ (800d048 <HAL_RCC_OscConfig+0x4f8>)
 800cf36:	4313      	orrs	r3, r2
 800cf38:	604b      	str	r3, [r1, #4]
 800cf3a:	e023      	b.n	800cf84 <HAL_RCC_OscConfig+0x434>
 800cf3c:	4b42      	ldr	r3, [pc, #264]	@ (800d048 <HAL_RCC_OscConfig+0x4f8>)
 800cf3e:	68db      	ldr	r3, [r3, #12]
 800cf40:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	6a1b      	ldr	r3, [r3, #32]
 800cf48:	061b      	lsls	r3, r3, #24
 800cf4a:	493f      	ldr	r1, [pc, #252]	@ (800d048 <HAL_RCC_OscConfig+0x4f8>)
 800cf4c:	4313      	orrs	r3, r2
 800cf4e:	60cb      	str	r3, [r1, #12]
 800cf50:	e018      	b.n	800cf84 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800cf52:	4b3d      	ldr	r3, [pc, #244]	@ (800d048 <HAL_RCC_OscConfig+0x4f8>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	4a3c      	ldr	r2, [pc, #240]	@ (800d048 <HAL_RCC_OscConfig+0x4f8>)
 800cf58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cf5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf5e:	f7fd f99b 	bl	800a298 <HAL_GetTick>
 800cf62:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800cf64:	e008      	b.n	800cf78 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800cf66:	f7fd f997 	bl	800a298 <HAL_GetTick>
 800cf6a:	4602      	mov	r2, r0
 800cf6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf6e:	1ad3      	subs	r3, r2, r3
 800cf70:	2b02      	cmp	r3, #2
 800cf72:	d901      	bls.n	800cf78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800cf74:	2303      	movs	r3, #3
 800cf76:	e23d      	b.n	800d3f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800cf78:	4b33      	ldr	r3, [pc, #204]	@ (800d048 <HAL_RCC_OscConfig+0x4f8>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d1f0      	bne.n	800cf66 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	f003 0308 	and.w	r3, r3, #8
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d036      	beq.n	800cffe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	695b      	ldr	r3, [r3, #20]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d019      	beq.n	800cfcc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cf98:	4b2b      	ldr	r3, [pc, #172]	@ (800d048 <HAL_RCC_OscConfig+0x4f8>)
 800cf9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf9c:	4a2a      	ldr	r2, [pc, #168]	@ (800d048 <HAL_RCC_OscConfig+0x4f8>)
 800cf9e:	f043 0301 	orr.w	r3, r3, #1
 800cfa2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cfa4:	f7fd f978 	bl	800a298 <HAL_GetTick>
 800cfa8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cfaa:	e008      	b.n	800cfbe <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cfac:	f7fd f974 	bl	800a298 <HAL_GetTick>
 800cfb0:	4602      	mov	r2, r0
 800cfb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfb4:	1ad3      	subs	r3, r2, r3
 800cfb6:	2b02      	cmp	r3, #2
 800cfb8:	d901      	bls.n	800cfbe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800cfba:	2303      	movs	r3, #3
 800cfbc:	e21a      	b.n	800d3f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cfbe:	4b22      	ldr	r3, [pc, #136]	@ (800d048 <HAL_RCC_OscConfig+0x4f8>)
 800cfc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cfc2:	f003 0302 	and.w	r3, r3, #2
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d0f0      	beq.n	800cfac <HAL_RCC_OscConfig+0x45c>
 800cfca:	e018      	b.n	800cffe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cfcc:	4b1e      	ldr	r3, [pc, #120]	@ (800d048 <HAL_RCC_OscConfig+0x4f8>)
 800cfce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cfd0:	4a1d      	ldr	r2, [pc, #116]	@ (800d048 <HAL_RCC_OscConfig+0x4f8>)
 800cfd2:	f023 0301 	bic.w	r3, r3, #1
 800cfd6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cfd8:	f7fd f95e 	bl	800a298 <HAL_GetTick>
 800cfdc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cfde:	e008      	b.n	800cff2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cfe0:	f7fd f95a 	bl	800a298 <HAL_GetTick>
 800cfe4:	4602      	mov	r2, r0
 800cfe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfe8:	1ad3      	subs	r3, r2, r3
 800cfea:	2b02      	cmp	r3, #2
 800cfec:	d901      	bls.n	800cff2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800cfee:	2303      	movs	r3, #3
 800cff0:	e200      	b.n	800d3f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cff2:	4b15      	ldr	r3, [pc, #84]	@ (800d048 <HAL_RCC_OscConfig+0x4f8>)
 800cff4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cff6:	f003 0302 	and.w	r3, r3, #2
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d1f0      	bne.n	800cfe0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f003 0320 	and.w	r3, r3, #32
 800d006:	2b00      	cmp	r3, #0
 800d008:	d039      	beq.n	800d07e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	699b      	ldr	r3, [r3, #24]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d01c      	beq.n	800d04c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d012:	4b0d      	ldr	r3, [pc, #52]	@ (800d048 <HAL_RCC_OscConfig+0x4f8>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	4a0c      	ldr	r2, [pc, #48]	@ (800d048 <HAL_RCC_OscConfig+0x4f8>)
 800d018:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d01c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d01e:	f7fd f93b 	bl	800a298 <HAL_GetTick>
 800d022:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d024:	e008      	b.n	800d038 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d026:	f7fd f937 	bl	800a298 <HAL_GetTick>
 800d02a:	4602      	mov	r2, r0
 800d02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d02e:	1ad3      	subs	r3, r2, r3
 800d030:	2b02      	cmp	r3, #2
 800d032:	d901      	bls.n	800d038 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800d034:	2303      	movs	r3, #3
 800d036:	e1dd      	b.n	800d3f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d038:	4b03      	ldr	r3, [pc, #12]	@ (800d048 <HAL_RCC_OscConfig+0x4f8>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d040:	2b00      	cmp	r3, #0
 800d042:	d0f0      	beq.n	800d026 <HAL_RCC_OscConfig+0x4d6>
 800d044:	e01b      	b.n	800d07e <HAL_RCC_OscConfig+0x52e>
 800d046:	bf00      	nop
 800d048:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d04c:	4b9b      	ldr	r3, [pc, #620]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4a9a      	ldr	r2, [pc, #616]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d052:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d056:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d058:	f7fd f91e 	bl	800a298 <HAL_GetTick>
 800d05c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d05e:	e008      	b.n	800d072 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d060:	f7fd f91a 	bl	800a298 <HAL_GetTick>
 800d064:	4602      	mov	r2, r0
 800d066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d068:	1ad3      	subs	r3, r2, r3
 800d06a:	2b02      	cmp	r3, #2
 800d06c:	d901      	bls.n	800d072 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800d06e:	2303      	movs	r3, #3
 800d070:	e1c0      	b.n	800d3f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d072:	4b92      	ldr	r3, [pc, #584]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d1f0      	bne.n	800d060 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	f003 0304 	and.w	r3, r3, #4
 800d086:	2b00      	cmp	r3, #0
 800d088:	f000 8081 	beq.w	800d18e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d08c:	4b8c      	ldr	r3, [pc, #560]	@ (800d2c0 <HAL_RCC_OscConfig+0x770>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4a8b      	ldr	r2, [pc, #556]	@ (800d2c0 <HAL_RCC_OscConfig+0x770>)
 800d092:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d096:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d098:	f7fd f8fe 	bl	800a298 <HAL_GetTick>
 800d09c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d09e:	e008      	b.n	800d0b2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d0a0:	f7fd f8fa 	bl	800a298 <HAL_GetTick>
 800d0a4:	4602      	mov	r2, r0
 800d0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0a8:	1ad3      	subs	r3, r2, r3
 800d0aa:	2b64      	cmp	r3, #100	@ 0x64
 800d0ac:	d901      	bls.n	800d0b2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800d0ae:	2303      	movs	r3, #3
 800d0b0:	e1a0      	b.n	800d3f4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d0b2:	4b83      	ldr	r3, [pc, #524]	@ (800d2c0 <HAL_RCC_OscConfig+0x770>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d0f0      	beq.n	800d0a0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	689b      	ldr	r3, [r3, #8]
 800d0c2:	2b01      	cmp	r3, #1
 800d0c4:	d106      	bne.n	800d0d4 <HAL_RCC_OscConfig+0x584>
 800d0c6:	4b7d      	ldr	r3, [pc, #500]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d0c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d0ca:	4a7c      	ldr	r2, [pc, #496]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d0cc:	f043 0301 	orr.w	r3, r3, #1
 800d0d0:	6713      	str	r3, [r2, #112]	@ 0x70
 800d0d2:	e02d      	b.n	800d130 <HAL_RCC_OscConfig+0x5e0>
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	689b      	ldr	r3, [r3, #8]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d10c      	bne.n	800d0f6 <HAL_RCC_OscConfig+0x5a6>
 800d0dc:	4b77      	ldr	r3, [pc, #476]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d0de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d0e0:	4a76      	ldr	r2, [pc, #472]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d0e2:	f023 0301 	bic.w	r3, r3, #1
 800d0e6:	6713      	str	r3, [r2, #112]	@ 0x70
 800d0e8:	4b74      	ldr	r3, [pc, #464]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d0ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d0ec:	4a73      	ldr	r2, [pc, #460]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d0ee:	f023 0304 	bic.w	r3, r3, #4
 800d0f2:	6713      	str	r3, [r2, #112]	@ 0x70
 800d0f4:	e01c      	b.n	800d130 <HAL_RCC_OscConfig+0x5e0>
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	689b      	ldr	r3, [r3, #8]
 800d0fa:	2b05      	cmp	r3, #5
 800d0fc:	d10c      	bne.n	800d118 <HAL_RCC_OscConfig+0x5c8>
 800d0fe:	4b6f      	ldr	r3, [pc, #444]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d102:	4a6e      	ldr	r2, [pc, #440]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d104:	f043 0304 	orr.w	r3, r3, #4
 800d108:	6713      	str	r3, [r2, #112]	@ 0x70
 800d10a:	4b6c      	ldr	r3, [pc, #432]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d10c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d10e:	4a6b      	ldr	r2, [pc, #428]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d110:	f043 0301 	orr.w	r3, r3, #1
 800d114:	6713      	str	r3, [r2, #112]	@ 0x70
 800d116:	e00b      	b.n	800d130 <HAL_RCC_OscConfig+0x5e0>
 800d118:	4b68      	ldr	r3, [pc, #416]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d11a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d11c:	4a67      	ldr	r2, [pc, #412]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d11e:	f023 0301 	bic.w	r3, r3, #1
 800d122:	6713      	str	r3, [r2, #112]	@ 0x70
 800d124:	4b65      	ldr	r3, [pc, #404]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d128:	4a64      	ldr	r2, [pc, #400]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d12a:	f023 0304 	bic.w	r3, r3, #4
 800d12e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	689b      	ldr	r3, [r3, #8]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d015      	beq.n	800d164 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d138:	f7fd f8ae 	bl	800a298 <HAL_GetTick>
 800d13c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d13e:	e00a      	b.n	800d156 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d140:	f7fd f8aa 	bl	800a298 <HAL_GetTick>
 800d144:	4602      	mov	r2, r0
 800d146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d148:	1ad3      	subs	r3, r2, r3
 800d14a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d14e:	4293      	cmp	r3, r2
 800d150:	d901      	bls.n	800d156 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800d152:	2303      	movs	r3, #3
 800d154:	e14e      	b.n	800d3f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d156:	4b59      	ldr	r3, [pc, #356]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d15a:	f003 0302 	and.w	r3, r3, #2
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d0ee      	beq.n	800d140 <HAL_RCC_OscConfig+0x5f0>
 800d162:	e014      	b.n	800d18e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d164:	f7fd f898 	bl	800a298 <HAL_GetTick>
 800d168:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d16a:	e00a      	b.n	800d182 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d16c:	f7fd f894 	bl	800a298 <HAL_GetTick>
 800d170:	4602      	mov	r2, r0
 800d172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d174:	1ad3      	subs	r3, r2, r3
 800d176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d17a:	4293      	cmp	r3, r2
 800d17c:	d901      	bls.n	800d182 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800d17e:	2303      	movs	r3, #3
 800d180:	e138      	b.n	800d3f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d182:	4b4e      	ldr	r3, [pc, #312]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d186:	f003 0302 	and.w	r3, r3, #2
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d1ee      	bne.n	800d16c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d192:	2b00      	cmp	r3, #0
 800d194:	f000 812d 	beq.w	800d3f2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800d198:	4b48      	ldr	r3, [pc, #288]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d19a:	691b      	ldr	r3, [r3, #16]
 800d19c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d1a0:	2b18      	cmp	r3, #24
 800d1a2:	f000 80bd 	beq.w	800d320 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1aa:	2b02      	cmp	r3, #2
 800d1ac:	f040 809e 	bne.w	800d2ec <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d1b0:	4b42      	ldr	r3, [pc, #264]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	4a41      	ldr	r2, [pc, #260]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d1b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d1ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d1bc:	f7fd f86c 	bl	800a298 <HAL_GetTick>
 800d1c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d1c2:	e008      	b.n	800d1d6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d1c4:	f7fd f868 	bl	800a298 <HAL_GetTick>
 800d1c8:	4602      	mov	r2, r0
 800d1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1cc:	1ad3      	subs	r3, r2, r3
 800d1ce:	2b02      	cmp	r3, #2
 800d1d0:	d901      	bls.n	800d1d6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800d1d2:	2303      	movs	r3, #3
 800d1d4:	e10e      	b.n	800d3f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d1d6:	4b39      	ldr	r3, [pc, #228]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d1f0      	bne.n	800d1c4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d1e2:	4b36      	ldr	r3, [pc, #216]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d1e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d1e6:	4b37      	ldr	r3, [pc, #220]	@ (800d2c4 <HAL_RCC_OscConfig+0x774>)
 800d1e8:	4013      	ands	r3, r2
 800d1ea:	687a      	ldr	r2, [r7, #4]
 800d1ec:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800d1ee:	687a      	ldr	r2, [r7, #4]
 800d1f0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d1f2:	0112      	lsls	r2, r2, #4
 800d1f4:	430a      	orrs	r2, r1
 800d1f6:	4931      	ldr	r1, [pc, #196]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d1f8:	4313      	orrs	r3, r2
 800d1fa:	628b      	str	r3, [r1, #40]	@ 0x28
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d200:	3b01      	subs	r3, #1
 800d202:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d20a:	3b01      	subs	r3, #1
 800d20c:	025b      	lsls	r3, r3, #9
 800d20e:	b29b      	uxth	r3, r3
 800d210:	431a      	orrs	r2, r3
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d216:	3b01      	subs	r3, #1
 800d218:	041b      	lsls	r3, r3, #16
 800d21a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d21e:	431a      	orrs	r2, r3
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d224:	3b01      	subs	r3, #1
 800d226:	061b      	lsls	r3, r3, #24
 800d228:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d22c:	4923      	ldr	r1, [pc, #140]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d22e:	4313      	orrs	r3, r2
 800d230:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800d232:	4b22      	ldr	r3, [pc, #136]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d236:	4a21      	ldr	r2, [pc, #132]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d238:	f023 0301 	bic.w	r3, r3, #1
 800d23c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d23e:	4b1f      	ldr	r3, [pc, #124]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d240:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d242:	4b21      	ldr	r3, [pc, #132]	@ (800d2c8 <HAL_RCC_OscConfig+0x778>)
 800d244:	4013      	ands	r3, r2
 800d246:	687a      	ldr	r2, [r7, #4]
 800d248:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d24a:	00d2      	lsls	r2, r2, #3
 800d24c:	491b      	ldr	r1, [pc, #108]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d24e:	4313      	orrs	r3, r2
 800d250:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800d252:	4b1a      	ldr	r3, [pc, #104]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d256:	f023 020c 	bic.w	r2, r3, #12
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d25e:	4917      	ldr	r1, [pc, #92]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d260:	4313      	orrs	r3, r2
 800d262:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800d264:	4b15      	ldr	r3, [pc, #84]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d268:	f023 0202 	bic.w	r2, r3, #2
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d270:	4912      	ldr	r1, [pc, #72]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d272:	4313      	orrs	r3, r2
 800d274:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d276:	4b11      	ldr	r3, [pc, #68]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d27a:	4a10      	ldr	r2, [pc, #64]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d27c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d280:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d282:	4b0e      	ldr	r3, [pc, #56]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d286:	4a0d      	ldr	r2, [pc, #52]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d288:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d28c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d28e:	4b0b      	ldr	r3, [pc, #44]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d292:	4a0a      	ldr	r2, [pc, #40]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d294:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d298:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800d29a:	4b08      	ldr	r3, [pc, #32]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d29c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d29e:	4a07      	ldr	r2, [pc, #28]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d2a0:	f043 0301 	orr.w	r3, r3, #1
 800d2a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d2a6:	4b05      	ldr	r3, [pc, #20]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	4a04      	ldr	r2, [pc, #16]	@ (800d2bc <HAL_RCC_OscConfig+0x76c>)
 800d2ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d2b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d2b2:	f7fc fff1 	bl	800a298 <HAL_GetTick>
 800d2b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d2b8:	e011      	b.n	800d2de <HAL_RCC_OscConfig+0x78e>
 800d2ba:	bf00      	nop
 800d2bc:	58024400 	.word	0x58024400
 800d2c0:	58024800 	.word	0x58024800
 800d2c4:	fffffc0c 	.word	0xfffffc0c
 800d2c8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d2cc:	f7fc ffe4 	bl	800a298 <HAL_GetTick>
 800d2d0:	4602      	mov	r2, r0
 800d2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2d4:	1ad3      	subs	r3, r2, r3
 800d2d6:	2b02      	cmp	r3, #2
 800d2d8:	d901      	bls.n	800d2de <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800d2da:	2303      	movs	r3, #3
 800d2dc:	e08a      	b.n	800d3f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d2de:	4b47      	ldr	r3, [pc, #284]	@ (800d3fc <HAL_RCC_OscConfig+0x8ac>)
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d0f0      	beq.n	800d2cc <HAL_RCC_OscConfig+0x77c>
 800d2ea:	e082      	b.n	800d3f2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d2ec:	4b43      	ldr	r3, [pc, #268]	@ (800d3fc <HAL_RCC_OscConfig+0x8ac>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	4a42      	ldr	r2, [pc, #264]	@ (800d3fc <HAL_RCC_OscConfig+0x8ac>)
 800d2f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d2f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d2f8:	f7fc ffce 	bl	800a298 <HAL_GetTick>
 800d2fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d2fe:	e008      	b.n	800d312 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d300:	f7fc ffca 	bl	800a298 <HAL_GetTick>
 800d304:	4602      	mov	r2, r0
 800d306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d308:	1ad3      	subs	r3, r2, r3
 800d30a:	2b02      	cmp	r3, #2
 800d30c:	d901      	bls.n	800d312 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800d30e:	2303      	movs	r3, #3
 800d310:	e070      	b.n	800d3f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d312:	4b3a      	ldr	r3, [pc, #232]	@ (800d3fc <HAL_RCC_OscConfig+0x8ac>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d1f0      	bne.n	800d300 <HAL_RCC_OscConfig+0x7b0>
 800d31e:	e068      	b.n	800d3f2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800d320:	4b36      	ldr	r3, [pc, #216]	@ (800d3fc <HAL_RCC_OscConfig+0x8ac>)
 800d322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d324:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d326:	4b35      	ldr	r3, [pc, #212]	@ (800d3fc <HAL_RCC_OscConfig+0x8ac>)
 800d328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d32a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d330:	2b01      	cmp	r3, #1
 800d332:	d031      	beq.n	800d398 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	f003 0203 	and.w	r2, r3, #3
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d33e:	429a      	cmp	r2, r3
 800d340:	d12a      	bne.n	800d398 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d342:	693b      	ldr	r3, [r7, #16]
 800d344:	091b      	lsrs	r3, r3, #4
 800d346:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d34e:	429a      	cmp	r2, r3
 800d350:	d122      	bne.n	800d398 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d35c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d35e:	429a      	cmp	r2, r3
 800d360:	d11a      	bne.n	800d398 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	0a5b      	lsrs	r3, r3, #9
 800d366:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d36e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d370:	429a      	cmp	r2, r3
 800d372:	d111      	bne.n	800d398 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	0c1b      	lsrs	r3, r3, #16
 800d378:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d380:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d382:	429a      	cmp	r2, r3
 800d384:	d108      	bne.n	800d398 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	0e1b      	lsrs	r3, r3, #24
 800d38a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d392:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d394:	429a      	cmp	r2, r3
 800d396:	d001      	beq.n	800d39c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800d398:	2301      	movs	r3, #1
 800d39a:	e02b      	b.n	800d3f4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800d39c:	4b17      	ldr	r3, [pc, #92]	@ (800d3fc <HAL_RCC_OscConfig+0x8ac>)
 800d39e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3a0:	08db      	lsrs	r3, r3, #3
 800d3a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d3a6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d3ac:	693a      	ldr	r2, [r7, #16]
 800d3ae:	429a      	cmp	r2, r3
 800d3b0:	d01f      	beq.n	800d3f2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800d3b2:	4b12      	ldr	r3, [pc, #72]	@ (800d3fc <HAL_RCC_OscConfig+0x8ac>)
 800d3b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3b6:	4a11      	ldr	r2, [pc, #68]	@ (800d3fc <HAL_RCC_OscConfig+0x8ac>)
 800d3b8:	f023 0301 	bic.w	r3, r3, #1
 800d3bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d3be:	f7fc ff6b 	bl	800a298 <HAL_GetTick>
 800d3c2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800d3c4:	bf00      	nop
 800d3c6:	f7fc ff67 	bl	800a298 <HAL_GetTick>
 800d3ca:	4602      	mov	r2, r0
 800d3cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ce:	4293      	cmp	r3, r2
 800d3d0:	d0f9      	beq.n	800d3c6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d3d2:	4b0a      	ldr	r3, [pc, #40]	@ (800d3fc <HAL_RCC_OscConfig+0x8ac>)
 800d3d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d3d6:	4b0a      	ldr	r3, [pc, #40]	@ (800d400 <HAL_RCC_OscConfig+0x8b0>)
 800d3d8:	4013      	ands	r3, r2
 800d3da:	687a      	ldr	r2, [r7, #4]
 800d3dc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d3de:	00d2      	lsls	r2, r2, #3
 800d3e0:	4906      	ldr	r1, [pc, #24]	@ (800d3fc <HAL_RCC_OscConfig+0x8ac>)
 800d3e2:	4313      	orrs	r3, r2
 800d3e4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800d3e6:	4b05      	ldr	r3, [pc, #20]	@ (800d3fc <HAL_RCC_OscConfig+0x8ac>)
 800d3e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3ea:	4a04      	ldr	r2, [pc, #16]	@ (800d3fc <HAL_RCC_OscConfig+0x8ac>)
 800d3ec:	f043 0301 	orr.w	r3, r3, #1
 800d3f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800d3f2:	2300      	movs	r3, #0
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3730      	adds	r7, #48	@ 0x30
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}
 800d3fc:	58024400 	.word	0x58024400
 800d400:	ffff0007 	.word	0xffff0007

0800d404 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b086      	sub	sp, #24
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d101      	bne.n	800d418 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d414:	2301      	movs	r3, #1
 800d416:	e19c      	b.n	800d752 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d418:	4b8a      	ldr	r3, [pc, #552]	@ (800d644 <HAL_RCC_ClockConfig+0x240>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f003 030f 	and.w	r3, r3, #15
 800d420:	683a      	ldr	r2, [r7, #0]
 800d422:	429a      	cmp	r2, r3
 800d424:	d910      	bls.n	800d448 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d426:	4b87      	ldr	r3, [pc, #540]	@ (800d644 <HAL_RCC_ClockConfig+0x240>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f023 020f 	bic.w	r2, r3, #15
 800d42e:	4985      	ldr	r1, [pc, #532]	@ (800d644 <HAL_RCC_ClockConfig+0x240>)
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	4313      	orrs	r3, r2
 800d434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d436:	4b83      	ldr	r3, [pc, #524]	@ (800d644 <HAL_RCC_ClockConfig+0x240>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	f003 030f 	and.w	r3, r3, #15
 800d43e:	683a      	ldr	r2, [r7, #0]
 800d440:	429a      	cmp	r2, r3
 800d442:	d001      	beq.n	800d448 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d444:	2301      	movs	r3, #1
 800d446:	e184      	b.n	800d752 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	f003 0304 	and.w	r3, r3, #4
 800d450:	2b00      	cmp	r3, #0
 800d452:	d010      	beq.n	800d476 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	691a      	ldr	r2, [r3, #16]
 800d458:	4b7b      	ldr	r3, [pc, #492]	@ (800d648 <HAL_RCC_ClockConfig+0x244>)
 800d45a:	699b      	ldr	r3, [r3, #24]
 800d45c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d460:	429a      	cmp	r2, r3
 800d462:	d908      	bls.n	800d476 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d464:	4b78      	ldr	r3, [pc, #480]	@ (800d648 <HAL_RCC_ClockConfig+0x244>)
 800d466:	699b      	ldr	r3, [r3, #24]
 800d468:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	691b      	ldr	r3, [r3, #16]
 800d470:	4975      	ldr	r1, [pc, #468]	@ (800d648 <HAL_RCC_ClockConfig+0x244>)
 800d472:	4313      	orrs	r3, r2
 800d474:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f003 0308 	and.w	r3, r3, #8
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d010      	beq.n	800d4a4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	695a      	ldr	r2, [r3, #20]
 800d486:	4b70      	ldr	r3, [pc, #448]	@ (800d648 <HAL_RCC_ClockConfig+0x244>)
 800d488:	69db      	ldr	r3, [r3, #28]
 800d48a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d48e:	429a      	cmp	r2, r3
 800d490:	d908      	bls.n	800d4a4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d492:	4b6d      	ldr	r3, [pc, #436]	@ (800d648 <HAL_RCC_ClockConfig+0x244>)
 800d494:	69db      	ldr	r3, [r3, #28]
 800d496:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	695b      	ldr	r3, [r3, #20]
 800d49e:	496a      	ldr	r1, [pc, #424]	@ (800d648 <HAL_RCC_ClockConfig+0x244>)
 800d4a0:	4313      	orrs	r3, r2
 800d4a2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f003 0310 	and.w	r3, r3, #16
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d010      	beq.n	800d4d2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	699a      	ldr	r2, [r3, #24]
 800d4b4:	4b64      	ldr	r3, [pc, #400]	@ (800d648 <HAL_RCC_ClockConfig+0x244>)
 800d4b6:	69db      	ldr	r3, [r3, #28]
 800d4b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d908      	bls.n	800d4d2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d4c0:	4b61      	ldr	r3, [pc, #388]	@ (800d648 <HAL_RCC_ClockConfig+0x244>)
 800d4c2:	69db      	ldr	r3, [r3, #28]
 800d4c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	699b      	ldr	r3, [r3, #24]
 800d4cc:	495e      	ldr	r1, [pc, #376]	@ (800d648 <HAL_RCC_ClockConfig+0x244>)
 800d4ce:	4313      	orrs	r3, r2
 800d4d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	f003 0320 	and.w	r3, r3, #32
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d010      	beq.n	800d500 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	69da      	ldr	r2, [r3, #28]
 800d4e2:	4b59      	ldr	r3, [pc, #356]	@ (800d648 <HAL_RCC_ClockConfig+0x244>)
 800d4e4:	6a1b      	ldr	r3, [r3, #32]
 800d4e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d908      	bls.n	800d500 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d4ee:	4b56      	ldr	r3, [pc, #344]	@ (800d648 <HAL_RCC_ClockConfig+0x244>)
 800d4f0:	6a1b      	ldr	r3, [r3, #32]
 800d4f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	69db      	ldr	r3, [r3, #28]
 800d4fa:	4953      	ldr	r1, [pc, #332]	@ (800d648 <HAL_RCC_ClockConfig+0x244>)
 800d4fc:	4313      	orrs	r3, r2
 800d4fe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f003 0302 	and.w	r3, r3, #2
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d010      	beq.n	800d52e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	68da      	ldr	r2, [r3, #12]
 800d510:	4b4d      	ldr	r3, [pc, #308]	@ (800d648 <HAL_RCC_ClockConfig+0x244>)
 800d512:	699b      	ldr	r3, [r3, #24]
 800d514:	f003 030f 	and.w	r3, r3, #15
 800d518:	429a      	cmp	r2, r3
 800d51a:	d908      	bls.n	800d52e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d51c:	4b4a      	ldr	r3, [pc, #296]	@ (800d648 <HAL_RCC_ClockConfig+0x244>)
 800d51e:	699b      	ldr	r3, [r3, #24]
 800d520:	f023 020f 	bic.w	r2, r3, #15
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	68db      	ldr	r3, [r3, #12]
 800d528:	4947      	ldr	r1, [pc, #284]	@ (800d648 <HAL_RCC_ClockConfig+0x244>)
 800d52a:	4313      	orrs	r3, r2
 800d52c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f003 0301 	and.w	r3, r3, #1
 800d536:	2b00      	cmp	r3, #0
 800d538:	d055      	beq.n	800d5e6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800d53a:	4b43      	ldr	r3, [pc, #268]	@ (800d648 <HAL_RCC_ClockConfig+0x244>)
 800d53c:	699b      	ldr	r3, [r3, #24]
 800d53e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	689b      	ldr	r3, [r3, #8]
 800d546:	4940      	ldr	r1, [pc, #256]	@ (800d648 <HAL_RCC_ClockConfig+0x244>)
 800d548:	4313      	orrs	r3, r2
 800d54a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	685b      	ldr	r3, [r3, #4]
 800d550:	2b02      	cmp	r3, #2
 800d552:	d107      	bne.n	800d564 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d554:	4b3c      	ldr	r3, [pc, #240]	@ (800d648 <HAL_RCC_ClockConfig+0x244>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d121      	bne.n	800d5a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d560:	2301      	movs	r3, #1
 800d562:	e0f6      	b.n	800d752 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	685b      	ldr	r3, [r3, #4]
 800d568:	2b03      	cmp	r3, #3
 800d56a:	d107      	bne.n	800d57c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d56c:	4b36      	ldr	r3, [pc, #216]	@ (800d648 <HAL_RCC_ClockConfig+0x244>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d574:	2b00      	cmp	r3, #0
 800d576:	d115      	bne.n	800d5a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d578:	2301      	movs	r3, #1
 800d57a:	e0ea      	b.n	800d752 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	685b      	ldr	r3, [r3, #4]
 800d580:	2b01      	cmp	r3, #1
 800d582:	d107      	bne.n	800d594 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d584:	4b30      	ldr	r3, [pc, #192]	@ (800d648 <HAL_RCC_ClockConfig+0x244>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d109      	bne.n	800d5a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d590:	2301      	movs	r3, #1
 800d592:	e0de      	b.n	800d752 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d594:	4b2c      	ldr	r3, [pc, #176]	@ (800d648 <HAL_RCC_ClockConfig+0x244>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	f003 0304 	and.w	r3, r3, #4
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d101      	bne.n	800d5a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d5a0:	2301      	movs	r3, #1
 800d5a2:	e0d6      	b.n	800d752 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d5a4:	4b28      	ldr	r3, [pc, #160]	@ (800d648 <HAL_RCC_ClockConfig+0x244>)
 800d5a6:	691b      	ldr	r3, [r3, #16]
 800d5a8:	f023 0207 	bic.w	r2, r3, #7
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	685b      	ldr	r3, [r3, #4]
 800d5b0:	4925      	ldr	r1, [pc, #148]	@ (800d648 <HAL_RCC_ClockConfig+0x244>)
 800d5b2:	4313      	orrs	r3, r2
 800d5b4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d5b6:	f7fc fe6f 	bl	800a298 <HAL_GetTick>
 800d5ba:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d5bc:	e00a      	b.n	800d5d4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d5be:	f7fc fe6b 	bl	800a298 <HAL_GetTick>
 800d5c2:	4602      	mov	r2, r0
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	1ad3      	subs	r3, r2, r3
 800d5c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d5cc:	4293      	cmp	r3, r2
 800d5ce:	d901      	bls.n	800d5d4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800d5d0:	2303      	movs	r3, #3
 800d5d2:	e0be      	b.n	800d752 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d5d4:	4b1c      	ldr	r3, [pc, #112]	@ (800d648 <HAL_RCC_ClockConfig+0x244>)
 800d5d6:	691b      	ldr	r3, [r3, #16]
 800d5d8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	685b      	ldr	r3, [r3, #4]
 800d5e0:	00db      	lsls	r3, r3, #3
 800d5e2:	429a      	cmp	r2, r3
 800d5e4:	d1eb      	bne.n	800d5be <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	f003 0302 	and.w	r3, r3, #2
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d010      	beq.n	800d614 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	68da      	ldr	r2, [r3, #12]
 800d5f6:	4b14      	ldr	r3, [pc, #80]	@ (800d648 <HAL_RCC_ClockConfig+0x244>)
 800d5f8:	699b      	ldr	r3, [r3, #24]
 800d5fa:	f003 030f 	and.w	r3, r3, #15
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d208      	bcs.n	800d614 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d602:	4b11      	ldr	r3, [pc, #68]	@ (800d648 <HAL_RCC_ClockConfig+0x244>)
 800d604:	699b      	ldr	r3, [r3, #24]
 800d606:	f023 020f 	bic.w	r2, r3, #15
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	68db      	ldr	r3, [r3, #12]
 800d60e:	490e      	ldr	r1, [pc, #56]	@ (800d648 <HAL_RCC_ClockConfig+0x244>)
 800d610:	4313      	orrs	r3, r2
 800d612:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d614:	4b0b      	ldr	r3, [pc, #44]	@ (800d644 <HAL_RCC_ClockConfig+0x240>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	f003 030f 	and.w	r3, r3, #15
 800d61c:	683a      	ldr	r2, [r7, #0]
 800d61e:	429a      	cmp	r2, r3
 800d620:	d214      	bcs.n	800d64c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d622:	4b08      	ldr	r3, [pc, #32]	@ (800d644 <HAL_RCC_ClockConfig+0x240>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	f023 020f 	bic.w	r2, r3, #15
 800d62a:	4906      	ldr	r1, [pc, #24]	@ (800d644 <HAL_RCC_ClockConfig+0x240>)
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	4313      	orrs	r3, r2
 800d630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d632:	4b04      	ldr	r3, [pc, #16]	@ (800d644 <HAL_RCC_ClockConfig+0x240>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	f003 030f 	and.w	r3, r3, #15
 800d63a:	683a      	ldr	r2, [r7, #0]
 800d63c:	429a      	cmp	r2, r3
 800d63e:	d005      	beq.n	800d64c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800d640:	2301      	movs	r3, #1
 800d642:	e086      	b.n	800d752 <HAL_RCC_ClockConfig+0x34e>
 800d644:	52002000 	.word	0x52002000
 800d648:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	f003 0304 	and.w	r3, r3, #4
 800d654:	2b00      	cmp	r3, #0
 800d656:	d010      	beq.n	800d67a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	691a      	ldr	r2, [r3, #16]
 800d65c:	4b3f      	ldr	r3, [pc, #252]	@ (800d75c <HAL_RCC_ClockConfig+0x358>)
 800d65e:	699b      	ldr	r3, [r3, #24]
 800d660:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d664:	429a      	cmp	r2, r3
 800d666:	d208      	bcs.n	800d67a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d668:	4b3c      	ldr	r3, [pc, #240]	@ (800d75c <HAL_RCC_ClockConfig+0x358>)
 800d66a:	699b      	ldr	r3, [r3, #24]
 800d66c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	691b      	ldr	r3, [r3, #16]
 800d674:	4939      	ldr	r1, [pc, #228]	@ (800d75c <HAL_RCC_ClockConfig+0x358>)
 800d676:	4313      	orrs	r3, r2
 800d678:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	f003 0308 	and.w	r3, r3, #8
 800d682:	2b00      	cmp	r3, #0
 800d684:	d010      	beq.n	800d6a8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	695a      	ldr	r2, [r3, #20]
 800d68a:	4b34      	ldr	r3, [pc, #208]	@ (800d75c <HAL_RCC_ClockConfig+0x358>)
 800d68c:	69db      	ldr	r3, [r3, #28]
 800d68e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d692:	429a      	cmp	r2, r3
 800d694:	d208      	bcs.n	800d6a8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d696:	4b31      	ldr	r3, [pc, #196]	@ (800d75c <HAL_RCC_ClockConfig+0x358>)
 800d698:	69db      	ldr	r3, [r3, #28]
 800d69a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	695b      	ldr	r3, [r3, #20]
 800d6a2:	492e      	ldr	r1, [pc, #184]	@ (800d75c <HAL_RCC_ClockConfig+0x358>)
 800d6a4:	4313      	orrs	r3, r2
 800d6a6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	f003 0310 	and.w	r3, r3, #16
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d010      	beq.n	800d6d6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	699a      	ldr	r2, [r3, #24]
 800d6b8:	4b28      	ldr	r3, [pc, #160]	@ (800d75c <HAL_RCC_ClockConfig+0x358>)
 800d6ba:	69db      	ldr	r3, [r3, #28]
 800d6bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d6c0:	429a      	cmp	r2, r3
 800d6c2:	d208      	bcs.n	800d6d6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d6c4:	4b25      	ldr	r3, [pc, #148]	@ (800d75c <HAL_RCC_ClockConfig+0x358>)
 800d6c6:	69db      	ldr	r3, [r3, #28]
 800d6c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	699b      	ldr	r3, [r3, #24]
 800d6d0:	4922      	ldr	r1, [pc, #136]	@ (800d75c <HAL_RCC_ClockConfig+0x358>)
 800d6d2:	4313      	orrs	r3, r2
 800d6d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	f003 0320 	and.w	r3, r3, #32
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d010      	beq.n	800d704 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	69da      	ldr	r2, [r3, #28]
 800d6e6:	4b1d      	ldr	r3, [pc, #116]	@ (800d75c <HAL_RCC_ClockConfig+0x358>)
 800d6e8:	6a1b      	ldr	r3, [r3, #32]
 800d6ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	d208      	bcs.n	800d704 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d6f2:	4b1a      	ldr	r3, [pc, #104]	@ (800d75c <HAL_RCC_ClockConfig+0x358>)
 800d6f4:	6a1b      	ldr	r3, [r3, #32]
 800d6f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	69db      	ldr	r3, [r3, #28]
 800d6fe:	4917      	ldr	r1, [pc, #92]	@ (800d75c <HAL_RCC_ClockConfig+0x358>)
 800d700:	4313      	orrs	r3, r2
 800d702:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d704:	f000 f834 	bl	800d770 <HAL_RCC_GetSysClockFreq>
 800d708:	4602      	mov	r2, r0
 800d70a:	4b14      	ldr	r3, [pc, #80]	@ (800d75c <HAL_RCC_ClockConfig+0x358>)
 800d70c:	699b      	ldr	r3, [r3, #24]
 800d70e:	0a1b      	lsrs	r3, r3, #8
 800d710:	f003 030f 	and.w	r3, r3, #15
 800d714:	4912      	ldr	r1, [pc, #72]	@ (800d760 <HAL_RCC_ClockConfig+0x35c>)
 800d716:	5ccb      	ldrb	r3, [r1, r3]
 800d718:	f003 031f 	and.w	r3, r3, #31
 800d71c:	fa22 f303 	lsr.w	r3, r2, r3
 800d720:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d722:	4b0e      	ldr	r3, [pc, #56]	@ (800d75c <HAL_RCC_ClockConfig+0x358>)
 800d724:	699b      	ldr	r3, [r3, #24]
 800d726:	f003 030f 	and.w	r3, r3, #15
 800d72a:	4a0d      	ldr	r2, [pc, #52]	@ (800d760 <HAL_RCC_ClockConfig+0x35c>)
 800d72c:	5cd3      	ldrb	r3, [r2, r3]
 800d72e:	f003 031f 	and.w	r3, r3, #31
 800d732:	693a      	ldr	r2, [r7, #16]
 800d734:	fa22 f303 	lsr.w	r3, r2, r3
 800d738:	4a0a      	ldr	r2, [pc, #40]	@ (800d764 <HAL_RCC_ClockConfig+0x360>)
 800d73a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d73c:	4a0a      	ldr	r2, [pc, #40]	@ (800d768 <HAL_RCC_ClockConfig+0x364>)
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800d742:	4b0a      	ldr	r3, [pc, #40]	@ (800d76c <HAL_RCC_ClockConfig+0x368>)
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	4618      	mov	r0, r3
 800d748:	f7fc fd5c 	bl	800a204 <HAL_InitTick>
 800d74c:	4603      	mov	r3, r0
 800d74e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800d750:	7bfb      	ldrb	r3, [r7, #15]
}
 800d752:	4618      	mov	r0, r3
 800d754:	3718      	adds	r7, #24
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}
 800d75a:	bf00      	nop
 800d75c:	58024400 	.word	0x58024400
 800d760:	080144e0 	.word	0x080144e0
 800d764:	24000004 	.word	0x24000004
 800d768:	24000000 	.word	0x24000000
 800d76c:	240000d4 	.word	0x240000d4

0800d770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d770:	b480      	push	{r7}
 800d772:	b089      	sub	sp, #36	@ 0x24
 800d774:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d776:	4bb3      	ldr	r3, [pc, #716]	@ (800da44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d778:	691b      	ldr	r3, [r3, #16]
 800d77a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d77e:	2b18      	cmp	r3, #24
 800d780:	f200 8155 	bhi.w	800da2e <HAL_RCC_GetSysClockFreq+0x2be>
 800d784:	a201      	add	r2, pc, #4	@ (adr r2, 800d78c <HAL_RCC_GetSysClockFreq+0x1c>)
 800d786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d78a:	bf00      	nop
 800d78c:	0800d7f1 	.word	0x0800d7f1
 800d790:	0800da2f 	.word	0x0800da2f
 800d794:	0800da2f 	.word	0x0800da2f
 800d798:	0800da2f 	.word	0x0800da2f
 800d79c:	0800da2f 	.word	0x0800da2f
 800d7a0:	0800da2f 	.word	0x0800da2f
 800d7a4:	0800da2f 	.word	0x0800da2f
 800d7a8:	0800da2f 	.word	0x0800da2f
 800d7ac:	0800d817 	.word	0x0800d817
 800d7b0:	0800da2f 	.word	0x0800da2f
 800d7b4:	0800da2f 	.word	0x0800da2f
 800d7b8:	0800da2f 	.word	0x0800da2f
 800d7bc:	0800da2f 	.word	0x0800da2f
 800d7c0:	0800da2f 	.word	0x0800da2f
 800d7c4:	0800da2f 	.word	0x0800da2f
 800d7c8:	0800da2f 	.word	0x0800da2f
 800d7cc:	0800d81d 	.word	0x0800d81d
 800d7d0:	0800da2f 	.word	0x0800da2f
 800d7d4:	0800da2f 	.word	0x0800da2f
 800d7d8:	0800da2f 	.word	0x0800da2f
 800d7dc:	0800da2f 	.word	0x0800da2f
 800d7e0:	0800da2f 	.word	0x0800da2f
 800d7e4:	0800da2f 	.word	0x0800da2f
 800d7e8:	0800da2f 	.word	0x0800da2f
 800d7ec:	0800d823 	.word	0x0800d823
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d7f0:	4b94      	ldr	r3, [pc, #592]	@ (800da44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	f003 0320 	and.w	r3, r3, #32
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d009      	beq.n	800d810 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d7fc:	4b91      	ldr	r3, [pc, #580]	@ (800da44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	08db      	lsrs	r3, r3, #3
 800d802:	f003 0303 	and.w	r3, r3, #3
 800d806:	4a90      	ldr	r2, [pc, #576]	@ (800da48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d808:	fa22 f303 	lsr.w	r3, r2, r3
 800d80c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800d80e:	e111      	b.n	800da34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800d810:	4b8d      	ldr	r3, [pc, #564]	@ (800da48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d812:	61bb      	str	r3, [r7, #24]
      break;
 800d814:	e10e      	b.n	800da34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800d816:	4b8d      	ldr	r3, [pc, #564]	@ (800da4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d818:	61bb      	str	r3, [r7, #24]
      break;
 800d81a:	e10b      	b.n	800da34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800d81c:	4b8c      	ldr	r3, [pc, #560]	@ (800da50 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800d81e:	61bb      	str	r3, [r7, #24]
      break;
 800d820:	e108      	b.n	800da34 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d822:	4b88      	ldr	r3, [pc, #544]	@ (800da44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d826:	f003 0303 	and.w	r3, r3, #3
 800d82a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800d82c:	4b85      	ldr	r3, [pc, #532]	@ (800da44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d82e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d830:	091b      	lsrs	r3, r3, #4
 800d832:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d836:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d838:	4b82      	ldr	r3, [pc, #520]	@ (800da44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d83a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d83c:	f003 0301 	and.w	r3, r3, #1
 800d840:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d842:	4b80      	ldr	r3, [pc, #512]	@ (800da44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d846:	08db      	lsrs	r3, r3, #3
 800d848:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d84c:	68fa      	ldr	r2, [r7, #12]
 800d84e:	fb02 f303 	mul.w	r3, r2, r3
 800d852:	ee07 3a90 	vmov	s15, r3
 800d856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d85a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800d85e:	693b      	ldr	r3, [r7, #16]
 800d860:	2b00      	cmp	r3, #0
 800d862:	f000 80e1 	beq.w	800da28 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	2b02      	cmp	r3, #2
 800d86a:	f000 8083 	beq.w	800d974 <HAL_RCC_GetSysClockFreq+0x204>
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	2b02      	cmp	r3, #2
 800d872:	f200 80a1 	bhi.w	800d9b8 <HAL_RCC_GetSysClockFreq+0x248>
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d003      	beq.n	800d884 <HAL_RCC_GetSysClockFreq+0x114>
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	2b01      	cmp	r3, #1
 800d880:	d056      	beq.n	800d930 <HAL_RCC_GetSysClockFreq+0x1c0>
 800d882:	e099      	b.n	800d9b8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d884:	4b6f      	ldr	r3, [pc, #444]	@ (800da44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	f003 0320 	and.w	r3, r3, #32
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d02d      	beq.n	800d8ec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d890:	4b6c      	ldr	r3, [pc, #432]	@ (800da44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	08db      	lsrs	r3, r3, #3
 800d896:	f003 0303 	and.w	r3, r3, #3
 800d89a:	4a6b      	ldr	r2, [pc, #428]	@ (800da48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d89c:	fa22 f303 	lsr.w	r3, r2, r3
 800d8a0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	ee07 3a90 	vmov	s15, r3
 800d8a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	ee07 3a90 	vmov	s15, r3
 800d8b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8ba:	4b62      	ldr	r3, [pc, #392]	@ (800da44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d8bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d8be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8c2:	ee07 3a90 	vmov	s15, r3
 800d8c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800d8ce:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800da54 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d8d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d8d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d8da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d8de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8e6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800d8ea:	e087      	b.n	800d9fc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	ee07 3a90 	vmov	s15, r3
 800d8f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8f6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800da58 <HAL_RCC_GetSysClockFreq+0x2e8>
 800d8fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8fe:	4b51      	ldr	r3, [pc, #324]	@ (800da44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d906:	ee07 3a90 	vmov	s15, r3
 800d90a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d90e:	ed97 6a02 	vldr	s12, [r7, #8]
 800d912:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800da54 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d91a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d91e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d92a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d92e:	e065      	b.n	800d9fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d930:	693b      	ldr	r3, [r7, #16]
 800d932:	ee07 3a90 	vmov	s15, r3
 800d936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d93a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800da5c <HAL_RCC_GetSysClockFreq+0x2ec>
 800d93e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d942:	4b40      	ldr	r3, [pc, #256]	@ (800da44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d94a:	ee07 3a90 	vmov	s15, r3
 800d94e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d952:	ed97 6a02 	vldr	s12, [r7, #8]
 800d956:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800da54 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d95a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d95e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d962:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d96a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d96e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d972:	e043      	b.n	800d9fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	ee07 3a90 	vmov	s15, r3
 800d97a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d97e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800da60 <HAL_RCC_GetSysClockFreq+0x2f0>
 800d982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d986:	4b2f      	ldr	r3, [pc, #188]	@ (800da44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d98a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d98e:	ee07 3a90 	vmov	s15, r3
 800d992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d996:	ed97 6a02 	vldr	s12, [r7, #8]
 800d99a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800da54 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d99e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d9aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d9b6:	e021      	b.n	800d9fc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	ee07 3a90 	vmov	s15, r3
 800d9be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9c2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800da5c <HAL_RCC_GetSysClockFreq+0x2ec>
 800d9c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9ca:	4b1e      	ldr	r3, [pc, #120]	@ (800da44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d9cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9d2:	ee07 3a90 	vmov	s15, r3
 800d9d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9da:	ed97 6a02 	vldr	s12, [r7, #8]
 800d9de:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800da54 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d9e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d9ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d9fa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800d9fc:	4b11      	ldr	r3, [pc, #68]	@ (800da44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d9fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da00:	0a5b      	lsrs	r3, r3, #9
 800da02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da06:	3301      	adds	r3, #1
 800da08:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	ee07 3a90 	vmov	s15, r3
 800da10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800da14:	edd7 6a07 	vldr	s13, [r7, #28]
 800da18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da20:	ee17 3a90 	vmov	r3, s15
 800da24:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800da26:	e005      	b.n	800da34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800da28:	2300      	movs	r3, #0
 800da2a:	61bb      	str	r3, [r7, #24]
      break;
 800da2c:	e002      	b.n	800da34 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800da2e:	4b07      	ldr	r3, [pc, #28]	@ (800da4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800da30:	61bb      	str	r3, [r7, #24]
      break;
 800da32:	bf00      	nop
  }

  return sysclockfreq;
 800da34:	69bb      	ldr	r3, [r7, #24]
}
 800da36:	4618      	mov	r0, r3
 800da38:	3724      	adds	r7, #36	@ 0x24
 800da3a:	46bd      	mov	sp, r7
 800da3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da40:	4770      	bx	lr
 800da42:	bf00      	nop
 800da44:	58024400 	.word	0x58024400
 800da48:	03d09000 	.word	0x03d09000
 800da4c:	003d0900 	.word	0x003d0900
 800da50:	017d7840 	.word	0x017d7840
 800da54:	46000000 	.word	0x46000000
 800da58:	4c742400 	.word	0x4c742400
 800da5c:	4a742400 	.word	0x4a742400
 800da60:	4bbebc20 	.word	0x4bbebc20

0800da64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b082      	sub	sp, #8
 800da68:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800da6a:	f7ff fe81 	bl	800d770 <HAL_RCC_GetSysClockFreq>
 800da6e:	4602      	mov	r2, r0
 800da70:	4b10      	ldr	r3, [pc, #64]	@ (800dab4 <HAL_RCC_GetHCLKFreq+0x50>)
 800da72:	699b      	ldr	r3, [r3, #24]
 800da74:	0a1b      	lsrs	r3, r3, #8
 800da76:	f003 030f 	and.w	r3, r3, #15
 800da7a:	490f      	ldr	r1, [pc, #60]	@ (800dab8 <HAL_RCC_GetHCLKFreq+0x54>)
 800da7c:	5ccb      	ldrb	r3, [r1, r3]
 800da7e:	f003 031f 	and.w	r3, r3, #31
 800da82:	fa22 f303 	lsr.w	r3, r2, r3
 800da86:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800da88:	4b0a      	ldr	r3, [pc, #40]	@ (800dab4 <HAL_RCC_GetHCLKFreq+0x50>)
 800da8a:	699b      	ldr	r3, [r3, #24]
 800da8c:	f003 030f 	and.w	r3, r3, #15
 800da90:	4a09      	ldr	r2, [pc, #36]	@ (800dab8 <HAL_RCC_GetHCLKFreq+0x54>)
 800da92:	5cd3      	ldrb	r3, [r2, r3]
 800da94:	f003 031f 	and.w	r3, r3, #31
 800da98:	687a      	ldr	r2, [r7, #4]
 800da9a:	fa22 f303 	lsr.w	r3, r2, r3
 800da9e:	4a07      	ldr	r2, [pc, #28]	@ (800dabc <HAL_RCC_GetHCLKFreq+0x58>)
 800daa0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800daa2:	4a07      	ldr	r2, [pc, #28]	@ (800dac0 <HAL_RCC_GetHCLKFreq+0x5c>)
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800daa8:	4b04      	ldr	r3, [pc, #16]	@ (800dabc <HAL_RCC_GetHCLKFreq+0x58>)
 800daaa:	681b      	ldr	r3, [r3, #0]
}
 800daac:	4618      	mov	r0, r3
 800daae:	3708      	adds	r7, #8
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}
 800dab4:	58024400 	.word	0x58024400
 800dab8:	080144e0 	.word	0x080144e0
 800dabc:	24000004 	.word	0x24000004
 800dac0:	24000000 	.word	0x24000000

0800dac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800dac8:	f7ff ffcc 	bl	800da64 <HAL_RCC_GetHCLKFreq>
 800dacc:	4602      	mov	r2, r0
 800dace:	4b06      	ldr	r3, [pc, #24]	@ (800dae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800dad0:	69db      	ldr	r3, [r3, #28]
 800dad2:	091b      	lsrs	r3, r3, #4
 800dad4:	f003 0307 	and.w	r3, r3, #7
 800dad8:	4904      	ldr	r1, [pc, #16]	@ (800daec <HAL_RCC_GetPCLK1Freq+0x28>)
 800dada:	5ccb      	ldrb	r3, [r1, r3]
 800dadc:	f003 031f 	and.w	r3, r3, #31
 800dae0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	bd80      	pop	{r7, pc}
 800dae8:	58024400 	.word	0x58024400
 800daec:	080144e0 	.word	0x080144e0

0800daf0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800daf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800daf4:	b0ca      	sub	sp, #296	@ 0x128
 800daf6:	af00      	add	r7, sp, #0
 800daf8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800dafc:	2300      	movs	r3, #0
 800dafe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800db02:	2300      	movs	r3, #0
 800db04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800db08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db10:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800db14:	2500      	movs	r5, #0
 800db16:	ea54 0305 	orrs.w	r3, r4, r5
 800db1a:	d049      	beq.n	800dbb0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800db1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800db22:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800db26:	d02f      	beq.n	800db88 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800db28:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800db2c:	d828      	bhi.n	800db80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800db2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800db32:	d01a      	beq.n	800db6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800db34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800db38:	d822      	bhi.n	800db80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d003      	beq.n	800db46 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800db3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800db42:	d007      	beq.n	800db54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800db44:	e01c      	b.n	800db80 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800db46:	4bb8      	ldr	r3, [pc, #736]	@ (800de28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800db48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db4a:	4ab7      	ldr	r2, [pc, #732]	@ (800de28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800db4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800db50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800db52:	e01a      	b.n	800db8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800db54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db58:	3308      	adds	r3, #8
 800db5a:	2102      	movs	r1, #2
 800db5c:	4618      	mov	r0, r3
 800db5e:	f002 fb61 	bl	8010224 <RCCEx_PLL2_Config>
 800db62:	4603      	mov	r3, r0
 800db64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800db68:	e00f      	b.n	800db8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800db6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db6e:	3328      	adds	r3, #40	@ 0x28
 800db70:	2102      	movs	r1, #2
 800db72:	4618      	mov	r0, r3
 800db74:	f002 fc08 	bl	8010388 <RCCEx_PLL3_Config>
 800db78:	4603      	mov	r3, r0
 800db7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800db7e:	e004      	b.n	800db8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800db80:	2301      	movs	r3, #1
 800db82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800db86:	e000      	b.n	800db8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800db88:	bf00      	nop
    }

    if (ret == HAL_OK)
 800db8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d10a      	bne.n	800dba8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800db92:	4ba5      	ldr	r3, [pc, #660]	@ (800de28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800db94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db96:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800db9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dba0:	4aa1      	ldr	r2, [pc, #644]	@ (800de28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dba2:	430b      	orrs	r3, r1
 800dba4:	6513      	str	r3, [r2, #80]	@ 0x50
 800dba6:	e003      	b.n	800dbb0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dba8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dbac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800dbb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800dbbc:	f04f 0900 	mov.w	r9, #0
 800dbc0:	ea58 0309 	orrs.w	r3, r8, r9
 800dbc4:	d047      	beq.n	800dc56 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800dbc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dbcc:	2b04      	cmp	r3, #4
 800dbce:	d82a      	bhi.n	800dc26 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800dbd0:	a201      	add	r2, pc, #4	@ (adr r2, 800dbd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800dbd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbd6:	bf00      	nop
 800dbd8:	0800dbed 	.word	0x0800dbed
 800dbdc:	0800dbfb 	.word	0x0800dbfb
 800dbe0:	0800dc11 	.word	0x0800dc11
 800dbe4:	0800dc2f 	.word	0x0800dc2f
 800dbe8:	0800dc2f 	.word	0x0800dc2f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dbec:	4b8e      	ldr	r3, [pc, #568]	@ (800de28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dbee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbf0:	4a8d      	ldr	r2, [pc, #564]	@ (800de28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dbf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dbf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dbf8:	e01a      	b.n	800dc30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dbfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbfe:	3308      	adds	r3, #8
 800dc00:	2100      	movs	r1, #0
 800dc02:	4618      	mov	r0, r3
 800dc04:	f002 fb0e 	bl	8010224 <RCCEx_PLL2_Config>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dc0e:	e00f      	b.n	800dc30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dc10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc14:	3328      	adds	r3, #40	@ 0x28
 800dc16:	2100      	movs	r1, #0
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f002 fbb5 	bl	8010388 <RCCEx_PLL3_Config>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dc24:	e004      	b.n	800dc30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dc26:	2301      	movs	r3, #1
 800dc28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dc2c:	e000      	b.n	800dc30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800dc2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dc30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d10a      	bne.n	800dc4e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800dc38:	4b7b      	ldr	r3, [pc, #492]	@ (800de28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dc3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc3c:	f023 0107 	bic.w	r1, r3, #7
 800dc40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc46:	4a78      	ldr	r2, [pc, #480]	@ (800de28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dc48:	430b      	orrs	r3, r1
 800dc4a:	6513      	str	r3, [r2, #80]	@ 0x50
 800dc4c:	e003      	b.n	800dc56 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800dc56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc5e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800dc62:	f04f 0b00 	mov.w	fp, #0
 800dc66:	ea5a 030b 	orrs.w	r3, sl, fp
 800dc6a:	d04c      	beq.n	800dd06 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800dc6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dc72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dc76:	d030      	beq.n	800dcda <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800dc78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dc7c:	d829      	bhi.n	800dcd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800dc7e:	2bc0      	cmp	r3, #192	@ 0xc0
 800dc80:	d02d      	beq.n	800dcde <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800dc82:	2bc0      	cmp	r3, #192	@ 0xc0
 800dc84:	d825      	bhi.n	800dcd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800dc86:	2b80      	cmp	r3, #128	@ 0x80
 800dc88:	d018      	beq.n	800dcbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800dc8a:	2b80      	cmp	r3, #128	@ 0x80
 800dc8c:	d821      	bhi.n	800dcd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d002      	beq.n	800dc98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800dc92:	2b40      	cmp	r3, #64	@ 0x40
 800dc94:	d007      	beq.n	800dca6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800dc96:	e01c      	b.n	800dcd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dc98:	4b63      	ldr	r3, [pc, #396]	@ (800de28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dc9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc9c:	4a62      	ldr	r2, [pc, #392]	@ (800de28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dc9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dca2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800dca4:	e01c      	b.n	800dce0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dcaa:	3308      	adds	r3, #8
 800dcac:	2100      	movs	r1, #0
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f002 fab8 	bl	8010224 <RCCEx_PLL2_Config>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800dcba:	e011      	b.n	800dce0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dcbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dcc0:	3328      	adds	r3, #40	@ 0x28
 800dcc2:	2100      	movs	r1, #0
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f002 fb5f 	bl	8010388 <RCCEx_PLL3_Config>
 800dcca:	4603      	mov	r3, r0
 800dccc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800dcd0:	e006      	b.n	800dce0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dcd8:	e002      	b.n	800dce0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800dcda:	bf00      	nop
 800dcdc:	e000      	b.n	800dce0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800dcde:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dce0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d10a      	bne.n	800dcfe <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800dce8:	4b4f      	ldr	r3, [pc, #316]	@ (800de28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dcea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dcec:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800dcf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dcf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dcf6:	4a4c      	ldr	r2, [pc, #304]	@ (800de28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dcf8:	430b      	orrs	r3, r1
 800dcfa:	6513      	str	r3, [r2, #80]	@ 0x50
 800dcfc:	e003      	b.n	800dd06 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dcfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dd02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800dd06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd0e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800dd12:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800dd16:	2300      	movs	r3, #0
 800dd18:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800dd1c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800dd20:	460b      	mov	r3, r1
 800dd22:	4313      	orrs	r3, r2
 800dd24:	d053      	beq.n	800ddce <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800dd26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800dd2e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800dd32:	d035      	beq.n	800dda0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800dd34:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800dd38:	d82e      	bhi.n	800dd98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800dd3a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800dd3e:	d031      	beq.n	800dda4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800dd40:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800dd44:	d828      	bhi.n	800dd98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800dd46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dd4a:	d01a      	beq.n	800dd82 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800dd4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dd50:	d822      	bhi.n	800dd98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d003      	beq.n	800dd5e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800dd56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dd5a:	d007      	beq.n	800dd6c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800dd5c:	e01c      	b.n	800dd98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dd5e:	4b32      	ldr	r3, [pc, #200]	@ (800de28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dd60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd62:	4a31      	ldr	r2, [pc, #196]	@ (800de28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dd64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dd68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dd6a:	e01c      	b.n	800dda6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dd6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd70:	3308      	adds	r3, #8
 800dd72:	2100      	movs	r1, #0
 800dd74:	4618      	mov	r0, r3
 800dd76:	f002 fa55 	bl	8010224 <RCCEx_PLL2_Config>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800dd80:	e011      	b.n	800dda6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dd82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd86:	3328      	adds	r3, #40	@ 0x28
 800dd88:	2100      	movs	r1, #0
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f002 fafc 	bl	8010388 <RCCEx_PLL3_Config>
 800dd90:	4603      	mov	r3, r0
 800dd92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dd96:	e006      	b.n	800dda6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800dd98:	2301      	movs	r3, #1
 800dd9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dd9e:	e002      	b.n	800dda6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800dda0:	bf00      	nop
 800dda2:	e000      	b.n	800dda6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800dda4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dda6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d10b      	bne.n	800ddc6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ddae:	4b1e      	ldr	r3, [pc, #120]	@ (800de28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ddb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ddb2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800ddb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ddba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ddbe:	4a1a      	ldr	r2, [pc, #104]	@ (800de28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ddc0:	430b      	orrs	r3, r1
 800ddc2:	6593      	str	r3, [r2, #88]	@ 0x58
 800ddc4:	e003      	b.n	800ddce <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ddc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ddca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ddce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ddd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddd6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800ddda:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ddde:	2300      	movs	r3, #0
 800dde0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800dde4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800dde8:	460b      	mov	r3, r1
 800ddea:	4313      	orrs	r3, r2
 800ddec:	d056      	beq.n	800de9c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800ddee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ddf2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ddf6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ddfa:	d038      	beq.n	800de6e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ddfc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800de00:	d831      	bhi.n	800de66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800de02:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800de06:	d034      	beq.n	800de72 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800de08:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800de0c:	d82b      	bhi.n	800de66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800de0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800de12:	d01d      	beq.n	800de50 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800de14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800de18:	d825      	bhi.n	800de66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d006      	beq.n	800de2c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800de1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800de22:	d00a      	beq.n	800de3a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800de24:	e01f      	b.n	800de66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800de26:	bf00      	nop
 800de28:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800de2c:	4ba2      	ldr	r3, [pc, #648]	@ (800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800de2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de30:	4aa1      	ldr	r2, [pc, #644]	@ (800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800de32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800de36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800de38:	e01c      	b.n	800de74 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800de3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de3e:	3308      	adds	r3, #8
 800de40:	2100      	movs	r1, #0
 800de42:	4618      	mov	r0, r3
 800de44:	f002 f9ee 	bl	8010224 <RCCEx_PLL2_Config>
 800de48:	4603      	mov	r3, r0
 800de4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800de4e:	e011      	b.n	800de74 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800de50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de54:	3328      	adds	r3, #40	@ 0x28
 800de56:	2100      	movs	r1, #0
 800de58:	4618      	mov	r0, r3
 800de5a:	f002 fa95 	bl	8010388 <RCCEx_PLL3_Config>
 800de5e:	4603      	mov	r3, r0
 800de60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800de64:	e006      	b.n	800de74 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800de66:	2301      	movs	r3, #1
 800de68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800de6c:	e002      	b.n	800de74 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800de6e:	bf00      	nop
 800de70:	e000      	b.n	800de74 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800de72:	bf00      	nop
    }

    if (ret == HAL_OK)
 800de74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d10b      	bne.n	800de94 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800de7c:	4b8e      	ldr	r3, [pc, #568]	@ (800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800de7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800de80:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800de84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de88:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800de8c:	4a8a      	ldr	r2, [pc, #552]	@ (800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800de8e:	430b      	orrs	r3, r1
 800de90:	6593      	str	r3, [r2, #88]	@ 0x58
 800de92:	e003      	b.n	800de9c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800de98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800de9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800dea8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800deac:	2300      	movs	r3, #0
 800deae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800deb2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800deb6:	460b      	mov	r3, r1
 800deb8:	4313      	orrs	r3, r2
 800deba:	d03a      	beq.n	800df32 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800debc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dec2:	2b30      	cmp	r3, #48	@ 0x30
 800dec4:	d01f      	beq.n	800df06 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800dec6:	2b30      	cmp	r3, #48	@ 0x30
 800dec8:	d819      	bhi.n	800defe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800deca:	2b20      	cmp	r3, #32
 800decc:	d00c      	beq.n	800dee8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800dece:	2b20      	cmp	r3, #32
 800ded0:	d815      	bhi.n	800defe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d019      	beq.n	800df0a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800ded6:	2b10      	cmp	r3, #16
 800ded8:	d111      	bne.n	800defe <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800deda:	4b77      	ldr	r3, [pc, #476]	@ (800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dedc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dede:	4a76      	ldr	r2, [pc, #472]	@ (800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dee0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dee4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800dee6:	e011      	b.n	800df0c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800deec:	3308      	adds	r3, #8
 800deee:	2102      	movs	r1, #2
 800def0:	4618      	mov	r0, r3
 800def2:	f002 f997 	bl	8010224 <RCCEx_PLL2_Config>
 800def6:	4603      	mov	r3, r0
 800def8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800defc:	e006      	b.n	800df0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800defe:	2301      	movs	r3, #1
 800df00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800df04:	e002      	b.n	800df0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800df06:	bf00      	nop
 800df08:	e000      	b.n	800df0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800df0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800df0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800df10:	2b00      	cmp	r3, #0
 800df12:	d10a      	bne.n	800df2a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800df14:	4b68      	ldr	r3, [pc, #416]	@ (800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800df16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800df18:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800df1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800df22:	4a65      	ldr	r2, [pc, #404]	@ (800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800df24:	430b      	orrs	r3, r1
 800df26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800df28:	e003      	b.n	800df32 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800df2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800df32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df3a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800df3e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800df42:	2300      	movs	r3, #0
 800df44:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800df48:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800df4c:	460b      	mov	r3, r1
 800df4e:	4313      	orrs	r3, r2
 800df50:	d051      	beq.n	800dff6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800df52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800df58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800df5c:	d035      	beq.n	800dfca <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800df5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800df62:	d82e      	bhi.n	800dfc2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800df64:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800df68:	d031      	beq.n	800dfce <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800df6a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800df6e:	d828      	bhi.n	800dfc2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800df70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800df74:	d01a      	beq.n	800dfac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800df76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800df7a:	d822      	bhi.n	800dfc2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d003      	beq.n	800df88 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800df80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800df84:	d007      	beq.n	800df96 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800df86:	e01c      	b.n	800dfc2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800df88:	4b4b      	ldr	r3, [pc, #300]	@ (800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800df8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df8c:	4a4a      	ldr	r2, [pc, #296]	@ (800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800df8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800df92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800df94:	e01c      	b.n	800dfd0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800df96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df9a:	3308      	adds	r3, #8
 800df9c:	2100      	movs	r1, #0
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f002 f940 	bl	8010224 <RCCEx_PLL2_Config>
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800dfaa:	e011      	b.n	800dfd0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dfac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dfb0:	3328      	adds	r3, #40	@ 0x28
 800dfb2:	2100      	movs	r1, #0
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f002 f9e7 	bl	8010388 <RCCEx_PLL3_Config>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800dfc0:	e006      	b.n	800dfd0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dfc8:	e002      	b.n	800dfd0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800dfca:	bf00      	nop
 800dfcc:	e000      	b.n	800dfd0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800dfce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dfd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d10a      	bne.n	800dfee <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800dfd8:	4b37      	ldr	r3, [pc, #220]	@ (800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dfda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dfdc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800dfe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dfe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dfe6:	4a34      	ldr	r2, [pc, #208]	@ (800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dfe8:	430b      	orrs	r3, r1
 800dfea:	6513      	str	r3, [r2, #80]	@ 0x50
 800dfec:	e003      	b.n	800dff6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dfee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dff2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800dff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dffe:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800e002:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e006:	2300      	movs	r3, #0
 800e008:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e00c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800e010:	460b      	mov	r3, r1
 800e012:	4313      	orrs	r3, r2
 800e014:	d056      	beq.n	800e0c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800e016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e01a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e01c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e020:	d033      	beq.n	800e08a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800e022:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e026:	d82c      	bhi.n	800e082 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e028:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e02c:	d02f      	beq.n	800e08e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800e02e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e032:	d826      	bhi.n	800e082 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e034:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e038:	d02b      	beq.n	800e092 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800e03a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e03e:	d820      	bhi.n	800e082 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e040:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e044:	d012      	beq.n	800e06c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800e046:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e04a:	d81a      	bhi.n	800e082 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d022      	beq.n	800e096 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800e050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e054:	d115      	bne.n	800e082 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e05a:	3308      	adds	r3, #8
 800e05c:	2101      	movs	r1, #1
 800e05e:	4618      	mov	r0, r3
 800e060:	f002 f8e0 	bl	8010224 <RCCEx_PLL2_Config>
 800e064:	4603      	mov	r3, r0
 800e066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e06a:	e015      	b.n	800e098 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e06c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e070:	3328      	adds	r3, #40	@ 0x28
 800e072:	2101      	movs	r1, #1
 800e074:	4618      	mov	r0, r3
 800e076:	f002 f987 	bl	8010388 <RCCEx_PLL3_Config>
 800e07a:	4603      	mov	r3, r0
 800e07c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e080:	e00a      	b.n	800e098 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e082:	2301      	movs	r3, #1
 800e084:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e088:	e006      	b.n	800e098 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e08a:	bf00      	nop
 800e08c:	e004      	b.n	800e098 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e08e:	bf00      	nop
 800e090:	e002      	b.n	800e098 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e092:	bf00      	nop
 800e094:	e000      	b.n	800e098 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e096:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e098:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d10d      	bne.n	800e0bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800e0a0:	4b05      	ldr	r3, [pc, #20]	@ (800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e0a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e0a4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800e0a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e0ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e0ae:	4a02      	ldr	r2, [pc, #8]	@ (800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e0b0:	430b      	orrs	r3, r1
 800e0b2:	6513      	str	r3, [r2, #80]	@ 0x50
 800e0b4:	e006      	b.n	800e0c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800e0b6:	bf00      	nop
 800e0b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e0bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e0c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800e0c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0cc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800e0d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e0da:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800e0de:	460b      	mov	r3, r1
 800e0e0:	4313      	orrs	r3, r2
 800e0e2:	d055      	beq.n	800e190 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800e0e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e0e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e0ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e0f0:	d033      	beq.n	800e15a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800e0f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e0f6:	d82c      	bhi.n	800e152 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e0f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e0fc:	d02f      	beq.n	800e15e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800e0fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e102:	d826      	bhi.n	800e152 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e104:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e108:	d02b      	beq.n	800e162 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800e10a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e10e:	d820      	bhi.n	800e152 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e110:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e114:	d012      	beq.n	800e13c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800e116:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e11a:	d81a      	bhi.n	800e152 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d022      	beq.n	800e166 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800e120:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e124:	d115      	bne.n	800e152 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e12a:	3308      	adds	r3, #8
 800e12c:	2101      	movs	r1, #1
 800e12e:	4618      	mov	r0, r3
 800e130:	f002 f878 	bl	8010224 <RCCEx_PLL2_Config>
 800e134:	4603      	mov	r3, r0
 800e136:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e13a:	e015      	b.n	800e168 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e13c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e140:	3328      	adds	r3, #40	@ 0x28
 800e142:	2101      	movs	r1, #1
 800e144:	4618      	mov	r0, r3
 800e146:	f002 f91f 	bl	8010388 <RCCEx_PLL3_Config>
 800e14a:	4603      	mov	r3, r0
 800e14c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e150:	e00a      	b.n	800e168 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800e152:	2301      	movs	r3, #1
 800e154:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e158:	e006      	b.n	800e168 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e15a:	bf00      	nop
 800e15c:	e004      	b.n	800e168 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e15e:	bf00      	nop
 800e160:	e002      	b.n	800e168 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e162:	bf00      	nop
 800e164:	e000      	b.n	800e168 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e166:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e168:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d10b      	bne.n	800e188 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800e170:	4ba3      	ldr	r3, [pc, #652]	@ (800e400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e174:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800e178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e17c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e180:	4a9f      	ldr	r2, [pc, #636]	@ (800e400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e182:	430b      	orrs	r3, r1
 800e184:	6593      	str	r3, [r2, #88]	@ 0x58
 800e186:	e003      	b.n	800e190 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e188:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e18c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e198:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800e19c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e1a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800e1aa:	460b      	mov	r3, r1
 800e1ac:	4313      	orrs	r3, r2
 800e1ae:	d037      	beq.n	800e220 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800e1b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e1b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e1ba:	d00e      	beq.n	800e1da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800e1bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e1c0:	d816      	bhi.n	800e1f0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d018      	beq.n	800e1f8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800e1c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e1ca:	d111      	bne.n	800e1f0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e1cc:	4b8c      	ldr	r3, [pc, #560]	@ (800e400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e1ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1d0:	4a8b      	ldr	r2, [pc, #556]	@ (800e400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e1d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e1d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e1d8:	e00f      	b.n	800e1fa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e1da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e1de:	3308      	adds	r3, #8
 800e1e0:	2101      	movs	r1, #1
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f002 f81e 	bl	8010224 <RCCEx_PLL2_Config>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e1ee:	e004      	b.n	800e1fa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e1f0:	2301      	movs	r3, #1
 800e1f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e1f6:	e000      	b.n	800e1fa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800e1f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e1fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d10a      	bne.n	800e218 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e202:	4b7f      	ldr	r3, [pc, #508]	@ (800e400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e206:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800e20a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e20e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e210:	4a7b      	ldr	r2, [pc, #492]	@ (800e400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e212:	430b      	orrs	r3, r1
 800e214:	6513      	str	r3, [r2, #80]	@ 0x50
 800e216:	e003      	b.n	800e220 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e218:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e21c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e228:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800e22c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e230:	2300      	movs	r3, #0
 800e232:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e236:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800e23a:	460b      	mov	r3, r1
 800e23c:	4313      	orrs	r3, r2
 800e23e:	d039      	beq.n	800e2b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800e240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e244:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e246:	2b03      	cmp	r3, #3
 800e248:	d81c      	bhi.n	800e284 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800e24a:	a201      	add	r2, pc, #4	@ (adr r2, 800e250 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800e24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e250:	0800e28d 	.word	0x0800e28d
 800e254:	0800e261 	.word	0x0800e261
 800e258:	0800e26f 	.word	0x0800e26f
 800e25c:	0800e28d 	.word	0x0800e28d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e260:	4b67      	ldr	r3, [pc, #412]	@ (800e400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e264:	4a66      	ldr	r2, [pc, #408]	@ (800e400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e266:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e26a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e26c:	e00f      	b.n	800e28e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e26e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e272:	3308      	adds	r3, #8
 800e274:	2102      	movs	r1, #2
 800e276:	4618      	mov	r0, r3
 800e278:	f001 ffd4 	bl	8010224 <RCCEx_PLL2_Config>
 800e27c:	4603      	mov	r3, r0
 800e27e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e282:	e004      	b.n	800e28e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e284:	2301      	movs	r3, #1
 800e286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e28a:	e000      	b.n	800e28e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800e28c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e28e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e292:	2b00      	cmp	r3, #0
 800e294:	d10a      	bne.n	800e2ac <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800e296:	4b5a      	ldr	r3, [pc, #360]	@ (800e400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e29a:	f023 0103 	bic.w	r1, r3, #3
 800e29e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e2a4:	4a56      	ldr	r2, [pc, #344]	@ (800e400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e2a6:	430b      	orrs	r3, r1
 800e2a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e2aa:	e003      	b.n	800e2b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e2ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e2b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e2b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2bc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800e2c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e2ca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800e2ce:	460b      	mov	r3, r1
 800e2d0:	4313      	orrs	r3, r2
 800e2d2:	f000 809f 	beq.w	800e414 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e2d6:	4b4b      	ldr	r3, [pc, #300]	@ (800e404 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	4a4a      	ldr	r2, [pc, #296]	@ (800e404 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e2dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e2e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e2e2:	f7fb ffd9 	bl	800a298 <HAL_GetTick>
 800e2e6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e2ea:	e00b      	b.n	800e304 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e2ec:	f7fb ffd4 	bl	800a298 <HAL_GetTick>
 800e2f0:	4602      	mov	r2, r0
 800e2f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e2f6:	1ad3      	subs	r3, r2, r3
 800e2f8:	2b64      	cmp	r3, #100	@ 0x64
 800e2fa:	d903      	bls.n	800e304 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800e2fc:	2303      	movs	r3, #3
 800e2fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e302:	e005      	b.n	800e310 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e304:	4b3f      	ldr	r3, [pc, #252]	@ (800e404 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d0ed      	beq.n	800e2ec <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800e310:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e314:	2b00      	cmp	r3, #0
 800e316:	d179      	bne.n	800e40c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800e318:	4b39      	ldr	r3, [pc, #228]	@ (800e400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e31a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e31c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e320:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e324:	4053      	eors	r3, r2
 800e326:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d015      	beq.n	800e35a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e32e:	4b34      	ldr	r3, [pc, #208]	@ (800e400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e332:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e336:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e33a:	4b31      	ldr	r3, [pc, #196]	@ (800e400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e33c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e33e:	4a30      	ldr	r2, [pc, #192]	@ (800e400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e340:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e344:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e346:	4b2e      	ldr	r3, [pc, #184]	@ (800e400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e34a:	4a2d      	ldr	r2, [pc, #180]	@ (800e400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e34c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e350:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800e352:	4a2b      	ldr	r2, [pc, #172]	@ (800e400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e354:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e358:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800e35a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e35e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e362:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e366:	d118      	bne.n	800e39a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e368:	f7fb ff96 	bl	800a298 <HAL_GetTick>
 800e36c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e370:	e00d      	b.n	800e38e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e372:	f7fb ff91 	bl	800a298 <HAL_GetTick>
 800e376:	4602      	mov	r2, r0
 800e378:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e37c:	1ad2      	subs	r2, r2, r3
 800e37e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e382:	429a      	cmp	r2, r3
 800e384:	d903      	bls.n	800e38e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800e386:	2303      	movs	r3, #3
 800e388:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800e38c:	e005      	b.n	800e39a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e38e:	4b1c      	ldr	r3, [pc, #112]	@ (800e400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e392:	f003 0302 	and.w	r3, r3, #2
 800e396:	2b00      	cmp	r3, #0
 800e398:	d0eb      	beq.n	800e372 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800e39a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d129      	bne.n	800e3f6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e3a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e3aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e3ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e3b2:	d10e      	bne.n	800e3d2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800e3b4:	4b12      	ldr	r3, [pc, #72]	@ (800e400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e3b6:	691b      	ldr	r3, [r3, #16]
 800e3b8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800e3bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e3c4:	091a      	lsrs	r2, r3, #4
 800e3c6:	4b10      	ldr	r3, [pc, #64]	@ (800e408 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800e3c8:	4013      	ands	r3, r2
 800e3ca:	4a0d      	ldr	r2, [pc, #52]	@ (800e400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e3cc:	430b      	orrs	r3, r1
 800e3ce:	6113      	str	r3, [r2, #16]
 800e3d0:	e005      	b.n	800e3de <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800e3d2:	4b0b      	ldr	r3, [pc, #44]	@ (800e400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e3d4:	691b      	ldr	r3, [r3, #16]
 800e3d6:	4a0a      	ldr	r2, [pc, #40]	@ (800e400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e3d8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e3dc:	6113      	str	r3, [r2, #16]
 800e3de:	4b08      	ldr	r3, [pc, #32]	@ (800e400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e3e0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800e3e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e3e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e3ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e3ee:	4a04      	ldr	r2, [pc, #16]	@ (800e400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e3f0:	430b      	orrs	r3, r1
 800e3f2:	6713      	str	r3, [r2, #112]	@ 0x70
 800e3f4:	e00e      	b.n	800e414 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e3f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e3fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800e3fe:	e009      	b.n	800e414 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800e400:	58024400 	.word	0x58024400
 800e404:	58024800 	.word	0x58024800
 800e408:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e40c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e410:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800e414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e41c:	f002 0301 	and.w	r3, r2, #1
 800e420:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e424:	2300      	movs	r3, #0
 800e426:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e42a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800e42e:	460b      	mov	r3, r1
 800e430:	4313      	orrs	r3, r2
 800e432:	f000 8089 	beq.w	800e548 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800e436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e43a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e43c:	2b28      	cmp	r3, #40	@ 0x28
 800e43e:	d86b      	bhi.n	800e518 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800e440:	a201      	add	r2, pc, #4	@ (adr r2, 800e448 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e446:	bf00      	nop
 800e448:	0800e521 	.word	0x0800e521
 800e44c:	0800e519 	.word	0x0800e519
 800e450:	0800e519 	.word	0x0800e519
 800e454:	0800e519 	.word	0x0800e519
 800e458:	0800e519 	.word	0x0800e519
 800e45c:	0800e519 	.word	0x0800e519
 800e460:	0800e519 	.word	0x0800e519
 800e464:	0800e519 	.word	0x0800e519
 800e468:	0800e4ed 	.word	0x0800e4ed
 800e46c:	0800e519 	.word	0x0800e519
 800e470:	0800e519 	.word	0x0800e519
 800e474:	0800e519 	.word	0x0800e519
 800e478:	0800e519 	.word	0x0800e519
 800e47c:	0800e519 	.word	0x0800e519
 800e480:	0800e519 	.word	0x0800e519
 800e484:	0800e519 	.word	0x0800e519
 800e488:	0800e503 	.word	0x0800e503
 800e48c:	0800e519 	.word	0x0800e519
 800e490:	0800e519 	.word	0x0800e519
 800e494:	0800e519 	.word	0x0800e519
 800e498:	0800e519 	.word	0x0800e519
 800e49c:	0800e519 	.word	0x0800e519
 800e4a0:	0800e519 	.word	0x0800e519
 800e4a4:	0800e519 	.word	0x0800e519
 800e4a8:	0800e521 	.word	0x0800e521
 800e4ac:	0800e519 	.word	0x0800e519
 800e4b0:	0800e519 	.word	0x0800e519
 800e4b4:	0800e519 	.word	0x0800e519
 800e4b8:	0800e519 	.word	0x0800e519
 800e4bc:	0800e519 	.word	0x0800e519
 800e4c0:	0800e519 	.word	0x0800e519
 800e4c4:	0800e519 	.word	0x0800e519
 800e4c8:	0800e521 	.word	0x0800e521
 800e4cc:	0800e519 	.word	0x0800e519
 800e4d0:	0800e519 	.word	0x0800e519
 800e4d4:	0800e519 	.word	0x0800e519
 800e4d8:	0800e519 	.word	0x0800e519
 800e4dc:	0800e519 	.word	0x0800e519
 800e4e0:	0800e519 	.word	0x0800e519
 800e4e4:	0800e519 	.word	0x0800e519
 800e4e8:	0800e521 	.word	0x0800e521
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e4ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e4f0:	3308      	adds	r3, #8
 800e4f2:	2101      	movs	r1, #1
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f001 fe95 	bl	8010224 <RCCEx_PLL2_Config>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e500:	e00f      	b.n	800e522 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e506:	3328      	adds	r3, #40	@ 0x28
 800e508:	2101      	movs	r1, #1
 800e50a:	4618      	mov	r0, r3
 800e50c:	f001 ff3c 	bl	8010388 <RCCEx_PLL3_Config>
 800e510:	4603      	mov	r3, r0
 800e512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e516:	e004      	b.n	800e522 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e518:	2301      	movs	r3, #1
 800e51a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e51e:	e000      	b.n	800e522 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800e520:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e522:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e526:	2b00      	cmp	r3, #0
 800e528:	d10a      	bne.n	800e540 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800e52a:	4bbf      	ldr	r3, [pc, #764]	@ (800e828 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e52c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e52e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800e532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e536:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e538:	4abb      	ldr	r2, [pc, #748]	@ (800e828 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e53a:	430b      	orrs	r3, r1
 800e53c:	6553      	str	r3, [r2, #84]	@ 0x54
 800e53e:	e003      	b.n	800e548 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e540:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e544:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e550:	f002 0302 	and.w	r3, r2, #2
 800e554:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e558:	2300      	movs	r3, #0
 800e55a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e55e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800e562:	460b      	mov	r3, r1
 800e564:	4313      	orrs	r3, r2
 800e566:	d041      	beq.n	800e5ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800e568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e56c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e56e:	2b05      	cmp	r3, #5
 800e570:	d824      	bhi.n	800e5bc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800e572:	a201      	add	r2, pc, #4	@ (adr r2, 800e578 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800e574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e578:	0800e5c5 	.word	0x0800e5c5
 800e57c:	0800e591 	.word	0x0800e591
 800e580:	0800e5a7 	.word	0x0800e5a7
 800e584:	0800e5c5 	.word	0x0800e5c5
 800e588:	0800e5c5 	.word	0x0800e5c5
 800e58c:	0800e5c5 	.word	0x0800e5c5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e594:	3308      	adds	r3, #8
 800e596:	2101      	movs	r1, #1
 800e598:	4618      	mov	r0, r3
 800e59a:	f001 fe43 	bl	8010224 <RCCEx_PLL2_Config>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e5a4:	e00f      	b.n	800e5c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e5a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5aa:	3328      	adds	r3, #40	@ 0x28
 800e5ac:	2101      	movs	r1, #1
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f001 feea 	bl	8010388 <RCCEx_PLL3_Config>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e5ba:	e004      	b.n	800e5c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e5bc:	2301      	movs	r3, #1
 800e5be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e5c2:	e000      	b.n	800e5c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800e5c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e5c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d10a      	bne.n	800e5e4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800e5ce:	4b96      	ldr	r3, [pc, #600]	@ (800e828 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e5d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e5d2:	f023 0107 	bic.w	r1, r3, #7
 800e5d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e5dc:	4a92      	ldr	r2, [pc, #584]	@ (800e828 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e5de:	430b      	orrs	r3, r1
 800e5e0:	6553      	str	r3, [r2, #84]	@ 0x54
 800e5e2:	e003      	b.n	800e5ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e5e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e5e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e5ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f4:	f002 0304 	and.w	r3, r2, #4
 800e5f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e602:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800e606:	460b      	mov	r3, r1
 800e608:	4313      	orrs	r3, r2
 800e60a:	d044      	beq.n	800e696 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800e60c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e610:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e614:	2b05      	cmp	r3, #5
 800e616:	d825      	bhi.n	800e664 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800e618:	a201      	add	r2, pc, #4	@ (adr r2, 800e620 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800e61a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e61e:	bf00      	nop
 800e620:	0800e66d 	.word	0x0800e66d
 800e624:	0800e639 	.word	0x0800e639
 800e628:	0800e64f 	.word	0x0800e64f
 800e62c:	0800e66d 	.word	0x0800e66d
 800e630:	0800e66d 	.word	0x0800e66d
 800e634:	0800e66d 	.word	0x0800e66d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e63c:	3308      	adds	r3, #8
 800e63e:	2101      	movs	r1, #1
 800e640:	4618      	mov	r0, r3
 800e642:	f001 fdef 	bl	8010224 <RCCEx_PLL2_Config>
 800e646:	4603      	mov	r3, r0
 800e648:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e64c:	e00f      	b.n	800e66e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e64e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e652:	3328      	adds	r3, #40	@ 0x28
 800e654:	2101      	movs	r1, #1
 800e656:	4618      	mov	r0, r3
 800e658:	f001 fe96 	bl	8010388 <RCCEx_PLL3_Config>
 800e65c:	4603      	mov	r3, r0
 800e65e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e662:	e004      	b.n	800e66e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e664:	2301      	movs	r3, #1
 800e666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e66a:	e000      	b.n	800e66e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800e66c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e66e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e672:	2b00      	cmp	r3, #0
 800e674:	d10b      	bne.n	800e68e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e676:	4b6c      	ldr	r3, [pc, #432]	@ (800e828 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e67a:	f023 0107 	bic.w	r1, r3, #7
 800e67e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e682:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e686:	4a68      	ldr	r2, [pc, #416]	@ (800e828 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e688:	430b      	orrs	r3, r1
 800e68a:	6593      	str	r3, [r2, #88]	@ 0x58
 800e68c:	e003      	b.n	800e696 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e68e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e692:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e69e:	f002 0320 	and.w	r3, r2, #32
 800e6a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e6ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800e6b0:	460b      	mov	r3, r1
 800e6b2:	4313      	orrs	r3, r2
 800e6b4:	d055      	beq.n	800e762 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800e6b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e6be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e6c2:	d033      	beq.n	800e72c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800e6c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e6c8:	d82c      	bhi.n	800e724 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e6ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e6ce:	d02f      	beq.n	800e730 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800e6d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e6d4:	d826      	bhi.n	800e724 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e6d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e6da:	d02b      	beq.n	800e734 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800e6dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e6e0:	d820      	bhi.n	800e724 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e6e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e6e6:	d012      	beq.n	800e70e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800e6e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e6ec:	d81a      	bhi.n	800e724 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d022      	beq.n	800e738 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800e6f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e6f6:	d115      	bne.n	800e724 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e6f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e6fc:	3308      	adds	r3, #8
 800e6fe:	2100      	movs	r1, #0
 800e700:	4618      	mov	r0, r3
 800e702:	f001 fd8f 	bl	8010224 <RCCEx_PLL2_Config>
 800e706:	4603      	mov	r3, r0
 800e708:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e70c:	e015      	b.n	800e73a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e70e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e712:	3328      	adds	r3, #40	@ 0x28
 800e714:	2102      	movs	r1, #2
 800e716:	4618      	mov	r0, r3
 800e718:	f001 fe36 	bl	8010388 <RCCEx_PLL3_Config>
 800e71c:	4603      	mov	r3, r0
 800e71e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e722:	e00a      	b.n	800e73a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e724:	2301      	movs	r3, #1
 800e726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e72a:	e006      	b.n	800e73a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e72c:	bf00      	nop
 800e72e:	e004      	b.n	800e73a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e730:	bf00      	nop
 800e732:	e002      	b.n	800e73a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e734:	bf00      	nop
 800e736:	e000      	b.n	800e73a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e738:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e73a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d10b      	bne.n	800e75a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e742:	4b39      	ldr	r3, [pc, #228]	@ (800e828 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e746:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800e74a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e74e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e752:	4a35      	ldr	r2, [pc, #212]	@ (800e828 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e754:	430b      	orrs	r3, r1
 800e756:	6553      	str	r3, [r2, #84]	@ 0x54
 800e758:	e003      	b.n	800e762 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e75a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e75e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e76a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800e76e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e772:	2300      	movs	r3, #0
 800e774:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e778:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800e77c:	460b      	mov	r3, r1
 800e77e:	4313      	orrs	r3, r2
 800e780:	d058      	beq.n	800e834 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800e782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e786:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e78a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800e78e:	d033      	beq.n	800e7f8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800e790:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800e794:	d82c      	bhi.n	800e7f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e796:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e79a:	d02f      	beq.n	800e7fc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800e79c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e7a0:	d826      	bhi.n	800e7f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e7a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e7a6:	d02b      	beq.n	800e800 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800e7a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e7ac:	d820      	bhi.n	800e7f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e7ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e7b2:	d012      	beq.n	800e7da <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800e7b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e7b8:	d81a      	bhi.n	800e7f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d022      	beq.n	800e804 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800e7be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e7c2:	d115      	bne.n	800e7f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e7c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7c8:	3308      	adds	r3, #8
 800e7ca:	2100      	movs	r1, #0
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f001 fd29 	bl	8010224 <RCCEx_PLL2_Config>
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e7d8:	e015      	b.n	800e806 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e7da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e7de:	3328      	adds	r3, #40	@ 0x28
 800e7e0:	2102      	movs	r1, #2
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f001 fdd0 	bl	8010388 <RCCEx_PLL3_Config>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e7ee:	e00a      	b.n	800e806 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e7f0:	2301      	movs	r3, #1
 800e7f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e7f6:	e006      	b.n	800e806 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e7f8:	bf00      	nop
 800e7fa:	e004      	b.n	800e806 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e7fc:	bf00      	nop
 800e7fe:	e002      	b.n	800e806 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e800:	bf00      	nop
 800e802:	e000      	b.n	800e806 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e804:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e806:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d10e      	bne.n	800e82c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e80e:	4b06      	ldr	r3, [pc, #24]	@ (800e828 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e812:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800e816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e81a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e81e:	4a02      	ldr	r2, [pc, #8]	@ (800e828 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e820:	430b      	orrs	r3, r1
 800e822:	6593      	str	r3, [r2, #88]	@ 0x58
 800e824:	e006      	b.n	800e834 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800e826:	bf00      	nop
 800e828:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e82c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e830:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800e834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e83c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800e840:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e844:	2300      	movs	r3, #0
 800e846:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e84a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800e84e:	460b      	mov	r3, r1
 800e850:	4313      	orrs	r3, r2
 800e852:	d055      	beq.n	800e900 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800e854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e858:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e85c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800e860:	d033      	beq.n	800e8ca <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800e862:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800e866:	d82c      	bhi.n	800e8c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e868:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e86c:	d02f      	beq.n	800e8ce <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800e86e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e872:	d826      	bhi.n	800e8c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e874:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800e878:	d02b      	beq.n	800e8d2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800e87a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800e87e:	d820      	bhi.n	800e8c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e880:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e884:	d012      	beq.n	800e8ac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800e886:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e88a:	d81a      	bhi.n	800e8c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d022      	beq.n	800e8d6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800e890:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e894:	d115      	bne.n	800e8c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e89a:	3308      	adds	r3, #8
 800e89c:	2100      	movs	r1, #0
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f001 fcc0 	bl	8010224 <RCCEx_PLL2_Config>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e8aa:	e015      	b.n	800e8d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e8ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8b0:	3328      	adds	r3, #40	@ 0x28
 800e8b2:	2102      	movs	r1, #2
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	f001 fd67 	bl	8010388 <RCCEx_PLL3_Config>
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e8c0:	e00a      	b.n	800e8d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e8c2:	2301      	movs	r3, #1
 800e8c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e8c8:	e006      	b.n	800e8d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e8ca:	bf00      	nop
 800e8cc:	e004      	b.n	800e8d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e8ce:	bf00      	nop
 800e8d0:	e002      	b.n	800e8d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e8d2:	bf00      	nop
 800e8d4:	e000      	b.n	800e8d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e8d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e8d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d10b      	bne.n	800e8f8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800e8e0:	4ba1      	ldr	r3, [pc, #644]	@ (800eb68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e8e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e8e4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800e8e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e8ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e8f0:	4a9d      	ldr	r2, [pc, #628]	@ (800eb68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e8f2:	430b      	orrs	r3, r1
 800e8f4:	6593      	str	r3, [r2, #88]	@ 0x58
 800e8f6:	e003      	b.n	800e900 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e8f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e8fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800e900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e908:	f002 0308 	and.w	r3, r2, #8
 800e90c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e910:	2300      	movs	r3, #0
 800e912:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e916:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800e91a:	460b      	mov	r3, r1
 800e91c:	4313      	orrs	r3, r2
 800e91e:	d01e      	beq.n	800e95e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800e920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e924:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e928:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e92c:	d10c      	bne.n	800e948 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e92e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e932:	3328      	adds	r3, #40	@ 0x28
 800e934:	2102      	movs	r1, #2
 800e936:	4618      	mov	r0, r3
 800e938:	f001 fd26 	bl	8010388 <RCCEx_PLL3_Config>
 800e93c:	4603      	mov	r3, r0
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d002      	beq.n	800e948 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800e942:	2301      	movs	r3, #1
 800e944:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800e948:	4b87      	ldr	r3, [pc, #540]	@ (800eb68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e94a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e94c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e954:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e958:	4a83      	ldr	r2, [pc, #524]	@ (800eb68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e95a:	430b      	orrs	r3, r1
 800e95c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e95e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e966:	f002 0310 	and.w	r3, r2, #16
 800e96a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e96e:	2300      	movs	r3, #0
 800e970:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e974:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800e978:	460b      	mov	r3, r1
 800e97a:	4313      	orrs	r3, r2
 800e97c:	d01e      	beq.n	800e9bc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800e97e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e982:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e986:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e98a:	d10c      	bne.n	800e9a6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e98c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e990:	3328      	adds	r3, #40	@ 0x28
 800e992:	2102      	movs	r1, #2
 800e994:	4618      	mov	r0, r3
 800e996:	f001 fcf7 	bl	8010388 <RCCEx_PLL3_Config>
 800e99a:	4603      	mov	r3, r0
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d002      	beq.n	800e9a6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800e9a0:	2301      	movs	r3, #1
 800e9a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e9a6:	4b70      	ldr	r3, [pc, #448]	@ (800eb68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e9a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e9aa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800e9ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e9b6:	4a6c      	ldr	r2, [pc, #432]	@ (800eb68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e9b8:	430b      	orrs	r3, r1
 800e9ba:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e9bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800e9c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e9d2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800e9d6:	460b      	mov	r3, r1
 800e9d8:	4313      	orrs	r3, r2
 800e9da:	d03e      	beq.n	800ea5a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800e9dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e9e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e9e8:	d022      	beq.n	800ea30 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800e9ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e9ee:	d81b      	bhi.n	800ea28 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d003      	beq.n	800e9fc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800e9f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e9f8:	d00b      	beq.n	800ea12 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800e9fa:	e015      	b.n	800ea28 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e9fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea00:	3308      	adds	r3, #8
 800ea02:	2100      	movs	r1, #0
 800ea04:	4618      	mov	r0, r3
 800ea06:	f001 fc0d 	bl	8010224 <RCCEx_PLL2_Config>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ea10:	e00f      	b.n	800ea32 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ea12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea16:	3328      	adds	r3, #40	@ 0x28
 800ea18:	2102      	movs	r1, #2
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f001 fcb4 	bl	8010388 <RCCEx_PLL3_Config>
 800ea20:	4603      	mov	r3, r0
 800ea22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ea26:	e004      	b.n	800ea32 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ea28:	2301      	movs	r3, #1
 800ea2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ea2e:	e000      	b.n	800ea32 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800ea30:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ea32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d10b      	bne.n	800ea52 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ea3a:	4b4b      	ldr	r3, [pc, #300]	@ (800eb68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ea3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea3e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800ea42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ea4a:	4a47      	ldr	r2, [pc, #284]	@ (800eb68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ea4c:	430b      	orrs	r3, r1
 800ea4e:	6593      	str	r3, [r2, #88]	@ 0x58
 800ea50:	e003      	b.n	800ea5a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ea56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ea5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea62:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800ea66:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ea68:	2300      	movs	r3, #0
 800ea6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ea6c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800ea70:	460b      	mov	r3, r1
 800ea72:	4313      	orrs	r3, r2
 800ea74:	d03b      	beq.n	800eaee <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ea76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ea7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ea82:	d01f      	beq.n	800eac4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800ea84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ea88:	d818      	bhi.n	800eabc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800ea8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ea8e:	d003      	beq.n	800ea98 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800ea90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ea94:	d007      	beq.n	800eaa6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800ea96:	e011      	b.n	800eabc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ea98:	4b33      	ldr	r3, [pc, #204]	@ (800eb68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ea9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea9c:	4a32      	ldr	r2, [pc, #200]	@ (800eb68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ea9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800eaa2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800eaa4:	e00f      	b.n	800eac6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800eaa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eaaa:	3328      	adds	r3, #40	@ 0x28
 800eaac:	2101      	movs	r1, #1
 800eaae:	4618      	mov	r0, r3
 800eab0:	f001 fc6a 	bl	8010388 <RCCEx_PLL3_Config>
 800eab4:	4603      	mov	r3, r0
 800eab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800eaba:	e004      	b.n	800eac6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eabc:	2301      	movs	r3, #1
 800eabe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800eac2:	e000      	b.n	800eac6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800eac4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eac6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d10b      	bne.n	800eae6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800eace:	4b26      	ldr	r3, [pc, #152]	@ (800eb68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ead0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ead2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ead6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eade:	4a22      	ldr	r2, [pc, #136]	@ (800eb68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eae0:	430b      	orrs	r3, r1
 800eae2:	6553      	str	r3, [r2, #84]	@ 0x54
 800eae4:	e003      	b.n	800eaee <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eae6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eaea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800eaee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eaf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaf6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800eafa:	673b      	str	r3, [r7, #112]	@ 0x70
 800eafc:	2300      	movs	r3, #0
 800eafe:	677b      	str	r3, [r7, #116]	@ 0x74
 800eb00:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800eb04:	460b      	mov	r3, r1
 800eb06:	4313      	orrs	r3, r2
 800eb08:	d034      	beq.n	800eb74 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800eb0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d003      	beq.n	800eb1c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800eb14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eb18:	d007      	beq.n	800eb2a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800eb1a:	e011      	b.n	800eb40 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eb1c:	4b12      	ldr	r3, [pc, #72]	@ (800eb68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eb1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb20:	4a11      	ldr	r2, [pc, #68]	@ (800eb68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eb22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800eb26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800eb28:	e00e      	b.n	800eb48 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800eb2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb2e:	3308      	adds	r3, #8
 800eb30:	2102      	movs	r1, #2
 800eb32:	4618      	mov	r0, r3
 800eb34:	f001 fb76 	bl	8010224 <RCCEx_PLL2_Config>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800eb3e:	e003      	b.n	800eb48 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800eb40:	2301      	movs	r3, #1
 800eb42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800eb46:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eb48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d10d      	bne.n	800eb6c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800eb50:	4b05      	ldr	r3, [pc, #20]	@ (800eb68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eb52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb54:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800eb58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb5e:	4a02      	ldr	r2, [pc, #8]	@ (800eb68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eb60:	430b      	orrs	r3, r1
 800eb62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800eb64:	e006      	b.n	800eb74 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800eb66:	bf00      	nop
 800eb68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eb70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800eb74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb7c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800eb80:	66bb      	str	r3, [r7, #104]	@ 0x68
 800eb82:	2300      	movs	r3, #0
 800eb84:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800eb86:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800eb8a:	460b      	mov	r3, r1
 800eb8c:	4313      	orrs	r3, r2
 800eb8e:	d00c      	beq.n	800ebaa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800eb90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb94:	3328      	adds	r3, #40	@ 0x28
 800eb96:	2102      	movs	r1, #2
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f001 fbf5 	bl	8010388 <RCCEx_PLL3_Config>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d002      	beq.n	800ebaa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800eba4:	2301      	movs	r3, #1
 800eba6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ebaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebb2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800ebb6:	663b      	str	r3, [r7, #96]	@ 0x60
 800ebb8:	2300      	movs	r3, #0
 800ebba:	667b      	str	r3, [r7, #100]	@ 0x64
 800ebbc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800ebc0:	460b      	mov	r3, r1
 800ebc2:	4313      	orrs	r3, r2
 800ebc4:	d038      	beq.n	800ec38 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ebc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ebce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ebd2:	d018      	beq.n	800ec06 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800ebd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ebd8:	d811      	bhi.n	800ebfe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ebda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ebde:	d014      	beq.n	800ec0a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800ebe0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ebe4:	d80b      	bhi.n	800ebfe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d011      	beq.n	800ec0e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800ebea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ebee:	d106      	bne.n	800ebfe <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ebf0:	4bc3      	ldr	r3, [pc, #780]	@ (800ef00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ebf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebf4:	4ac2      	ldr	r2, [pc, #776]	@ (800ef00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ebf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ebfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ebfc:	e008      	b.n	800ec10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ebfe:	2301      	movs	r3, #1
 800ec00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ec04:	e004      	b.n	800ec10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ec06:	bf00      	nop
 800ec08:	e002      	b.n	800ec10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ec0a:	bf00      	nop
 800ec0c:	e000      	b.n	800ec10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ec0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ec10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d10b      	bne.n	800ec30 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ec18:	4bb9      	ldr	r3, [pc, #740]	@ (800ef00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ec1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec1c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ec20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ec28:	4ab5      	ldr	r2, [pc, #724]	@ (800ef00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ec2a:	430b      	orrs	r3, r1
 800ec2c:	6553      	str	r3, [r2, #84]	@ 0x54
 800ec2e:	e003      	b.n	800ec38 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ec34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ec38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec40:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800ec44:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ec46:	2300      	movs	r3, #0
 800ec48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ec4a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800ec4e:	460b      	mov	r3, r1
 800ec50:	4313      	orrs	r3, r2
 800ec52:	d009      	beq.n	800ec68 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ec54:	4baa      	ldr	r3, [pc, #680]	@ (800ef00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ec56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec58:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ec5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec62:	4aa7      	ldr	r2, [pc, #668]	@ (800ef00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ec64:	430b      	orrs	r3, r1
 800ec66:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800ec68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec70:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800ec74:	653b      	str	r3, [r7, #80]	@ 0x50
 800ec76:	2300      	movs	r3, #0
 800ec78:	657b      	str	r3, [r7, #84]	@ 0x54
 800ec7a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800ec7e:	460b      	mov	r3, r1
 800ec80:	4313      	orrs	r3, r2
 800ec82:	d00a      	beq.n	800ec9a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800ec84:	4b9e      	ldr	r3, [pc, #632]	@ (800ef00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ec86:	691b      	ldr	r3, [r3, #16]
 800ec88:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800ec8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec90:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ec94:	4a9a      	ldr	r2, [pc, #616]	@ (800ef00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ec96:	430b      	orrs	r3, r1
 800ec98:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ec9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800eca6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eca8:	2300      	movs	r3, #0
 800ecaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ecac:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800ecb0:	460b      	mov	r3, r1
 800ecb2:	4313      	orrs	r3, r2
 800ecb4:	d009      	beq.n	800ecca <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ecb6:	4b92      	ldr	r3, [pc, #584]	@ (800ef00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ecb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ecba:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800ecbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ecc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ecc4:	4a8e      	ldr	r2, [pc, #568]	@ (800ef00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ecc6:	430b      	orrs	r3, r1
 800ecc8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ecca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ecce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecd2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800ecd6:	643b      	str	r3, [r7, #64]	@ 0x40
 800ecd8:	2300      	movs	r3, #0
 800ecda:	647b      	str	r3, [r7, #68]	@ 0x44
 800ecdc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800ece0:	460b      	mov	r3, r1
 800ece2:	4313      	orrs	r3, r2
 800ece4:	d00e      	beq.n	800ed04 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ece6:	4b86      	ldr	r3, [pc, #536]	@ (800ef00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ece8:	691b      	ldr	r3, [r3, #16]
 800ecea:	4a85      	ldr	r2, [pc, #532]	@ (800ef00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ecec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ecf0:	6113      	str	r3, [r2, #16]
 800ecf2:	4b83      	ldr	r3, [pc, #524]	@ (800ef00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ecf4:	6919      	ldr	r1, [r3, #16]
 800ecf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ecfa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800ecfe:	4a80      	ldr	r2, [pc, #512]	@ (800ef00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ed00:	430b      	orrs	r3, r1
 800ed02:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ed04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed0c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800ed10:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ed12:	2300      	movs	r3, #0
 800ed14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed16:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800ed1a:	460b      	mov	r3, r1
 800ed1c:	4313      	orrs	r3, r2
 800ed1e:	d009      	beq.n	800ed34 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ed20:	4b77      	ldr	r3, [pc, #476]	@ (800ef00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ed22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ed24:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800ed28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed2e:	4a74      	ldr	r2, [pc, #464]	@ (800ef00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ed30:	430b      	orrs	r3, r1
 800ed32:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ed34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed3c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800ed40:	633b      	str	r3, [r7, #48]	@ 0x30
 800ed42:	2300      	movs	r3, #0
 800ed44:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed46:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800ed4a:	460b      	mov	r3, r1
 800ed4c:	4313      	orrs	r3, r2
 800ed4e:	d00a      	beq.n	800ed66 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ed50:	4b6b      	ldr	r3, [pc, #428]	@ (800ef00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ed52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed54:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800ed58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ed60:	4a67      	ldr	r2, [pc, #412]	@ (800ef00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ed62:	430b      	orrs	r3, r1
 800ed64:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ed66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed6e:	2100      	movs	r1, #0
 800ed70:	62b9      	str	r1, [r7, #40]	@ 0x28
 800ed72:	f003 0301 	and.w	r3, r3, #1
 800ed76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ed78:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800ed7c:	460b      	mov	r3, r1
 800ed7e:	4313      	orrs	r3, r2
 800ed80:	d011      	beq.n	800eda6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ed82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed86:	3308      	adds	r3, #8
 800ed88:	2100      	movs	r1, #0
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f001 fa4a 	bl	8010224 <RCCEx_PLL2_Config>
 800ed90:	4603      	mov	r3, r0
 800ed92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ed96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d003      	beq.n	800eda6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eda2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800eda6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800edaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edae:	2100      	movs	r1, #0
 800edb0:	6239      	str	r1, [r7, #32]
 800edb2:	f003 0302 	and.w	r3, r3, #2
 800edb6:	627b      	str	r3, [r7, #36]	@ 0x24
 800edb8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800edbc:	460b      	mov	r3, r1
 800edbe:	4313      	orrs	r3, r2
 800edc0:	d011      	beq.n	800ede6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800edc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800edc6:	3308      	adds	r3, #8
 800edc8:	2101      	movs	r1, #1
 800edca:	4618      	mov	r0, r3
 800edcc:	f001 fa2a 	bl	8010224 <RCCEx_PLL2_Config>
 800edd0:	4603      	mov	r3, r0
 800edd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800edd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d003      	beq.n	800ede6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800edde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ede2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ede6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800edea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edee:	2100      	movs	r1, #0
 800edf0:	61b9      	str	r1, [r7, #24]
 800edf2:	f003 0304 	and.w	r3, r3, #4
 800edf6:	61fb      	str	r3, [r7, #28]
 800edf8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800edfc:	460b      	mov	r3, r1
 800edfe:	4313      	orrs	r3, r2
 800ee00:	d011      	beq.n	800ee26 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ee02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee06:	3308      	adds	r3, #8
 800ee08:	2102      	movs	r1, #2
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f001 fa0a 	bl	8010224 <RCCEx_PLL2_Config>
 800ee10:	4603      	mov	r3, r0
 800ee12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ee16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d003      	beq.n	800ee26 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ee22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ee26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee2e:	2100      	movs	r1, #0
 800ee30:	6139      	str	r1, [r7, #16]
 800ee32:	f003 0308 	and.w	r3, r3, #8
 800ee36:	617b      	str	r3, [r7, #20]
 800ee38:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ee3c:	460b      	mov	r3, r1
 800ee3e:	4313      	orrs	r3, r2
 800ee40:	d011      	beq.n	800ee66 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ee42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee46:	3328      	adds	r3, #40	@ 0x28
 800ee48:	2100      	movs	r1, #0
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	f001 fa9c 	bl	8010388 <RCCEx_PLL3_Config>
 800ee50:	4603      	mov	r3, r0
 800ee52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800ee56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d003      	beq.n	800ee66 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ee62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ee66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee6e:	2100      	movs	r1, #0
 800ee70:	60b9      	str	r1, [r7, #8]
 800ee72:	f003 0310 	and.w	r3, r3, #16
 800ee76:	60fb      	str	r3, [r7, #12]
 800ee78:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ee7c:	460b      	mov	r3, r1
 800ee7e:	4313      	orrs	r3, r2
 800ee80:	d011      	beq.n	800eea6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ee82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee86:	3328      	adds	r3, #40	@ 0x28
 800ee88:	2101      	movs	r1, #1
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f001 fa7c 	bl	8010388 <RCCEx_PLL3_Config>
 800ee90:	4603      	mov	r3, r0
 800ee92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ee96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d003      	beq.n	800eea6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eea2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800eea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eeaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeae:	2100      	movs	r1, #0
 800eeb0:	6039      	str	r1, [r7, #0]
 800eeb2:	f003 0320 	and.w	r3, r3, #32
 800eeb6:	607b      	str	r3, [r7, #4]
 800eeb8:	e9d7 1200 	ldrd	r1, r2, [r7]
 800eebc:	460b      	mov	r3, r1
 800eebe:	4313      	orrs	r3, r2
 800eec0:	d011      	beq.n	800eee6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800eec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eec6:	3328      	adds	r3, #40	@ 0x28
 800eec8:	2102      	movs	r1, #2
 800eeca:	4618      	mov	r0, r3
 800eecc:	f001 fa5c 	bl	8010388 <RCCEx_PLL3_Config>
 800eed0:	4603      	mov	r3, r0
 800eed2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800eed6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d003      	beq.n	800eee6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eede:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eee2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800eee6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d101      	bne.n	800eef2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800eeee:	2300      	movs	r3, #0
 800eef0:	e000      	b.n	800eef4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800eef2:	2301      	movs	r3, #1
}
 800eef4:	4618      	mov	r0, r3
 800eef6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800eefa:	46bd      	mov	sp, r7
 800eefc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ef00:	58024400 	.word	0x58024400

0800ef04 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b090      	sub	sp, #64	@ 0x40
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ef0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef12:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800ef16:	430b      	orrs	r3, r1
 800ef18:	f040 8094 	bne.w	800f044 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ef1c:	4b9e      	ldr	r3, [pc, #632]	@ (800f198 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ef1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ef20:	f003 0307 	and.w	r3, r3, #7
 800ef24:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ef26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef28:	2b04      	cmp	r3, #4
 800ef2a:	f200 8087 	bhi.w	800f03c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ef2e:	a201      	add	r2, pc, #4	@ (adr r2, 800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ef30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef34:	0800ef49 	.word	0x0800ef49
 800ef38:	0800ef71 	.word	0x0800ef71
 800ef3c:	0800ef99 	.word	0x0800ef99
 800ef40:	0800f035 	.word	0x0800f035
 800ef44:	0800efc1 	.word	0x0800efc1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ef48:	4b93      	ldr	r3, [pc, #588]	@ (800f198 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ef50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ef54:	d108      	bne.n	800ef68 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ef56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f001 f810 	bl	800ff80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ef60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ef64:	f000 bd45 	b.w	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ef68:	2300      	movs	r3, #0
 800ef6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ef6c:	f000 bd41 	b.w	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ef70:	4b89      	ldr	r3, [pc, #548]	@ (800f198 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ef78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ef7c:	d108      	bne.n	800ef90 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ef7e:	f107 0318 	add.w	r3, r7, #24
 800ef82:	4618      	mov	r0, r3
 800ef84:	f000 fd54 	bl	800fa30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ef88:	69bb      	ldr	r3, [r7, #24]
 800ef8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ef8c:	f000 bd31 	b.w	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ef90:	2300      	movs	r3, #0
 800ef92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ef94:	f000 bd2d 	b.w	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ef98:	4b7f      	ldr	r3, [pc, #508]	@ (800f198 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800efa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800efa4:	d108      	bne.n	800efb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800efa6:	f107 030c 	add.w	r3, r7, #12
 800efaa:	4618      	mov	r0, r3
 800efac:	f000 fe94 	bl	800fcd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800efb4:	f000 bd1d 	b.w	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800efb8:	2300      	movs	r3, #0
 800efba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800efbc:	f000 bd19 	b.w	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800efc0:	4b75      	ldr	r3, [pc, #468]	@ (800f198 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800efc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800efc4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800efc8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800efca:	4b73      	ldr	r3, [pc, #460]	@ (800f198 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	f003 0304 	and.w	r3, r3, #4
 800efd2:	2b04      	cmp	r3, #4
 800efd4:	d10c      	bne.n	800eff0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800efd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d109      	bne.n	800eff0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800efdc:	4b6e      	ldr	r3, [pc, #440]	@ (800f198 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	08db      	lsrs	r3, r3, #3
 800efe2:	f003 0303 	and.w	r3, r3, #3
 800efe6:	4a6d      	ldr	r2, [pc, #436]	@ (800f19c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800efe8:	fa22 f303 	lsr.w	r3, r2, r3
 800efec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800efee:	e01f      	b.n	800f030 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800eff0:	4b69      	ldr	r3, [pc, #420]	@ (800f198 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eff8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800effc:	d106      	bne.n	800f00c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800effe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f000:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f004:	d102      	bne.n	800f00c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f006:	4b66      	ldr	r3, [pc, #408]	@ (800f1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800f008:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f00a:	e011      	b.n	800f030 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f00c:	4b62      	ldr	r3, [pc, #392]	@ (800f198 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f014:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f018:	d106      	bne.n	800f028 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800f01a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f01c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f020:	d102      	bne.n	800f028 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f022:	4b60      	ldr	r3, [pc, #384]	@ (800f1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800f024:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f026:	e003      	b.n	800f030 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f028:	2300      	movs	r3, #0
 800f02a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f02c:	f000 bce1 	b.w	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f030:	f000 bcdf 	b.w	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f034:	4b5c      	ldr	r3, [pc, #368]	@ (800f1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800f036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f038:	f000 bcdb 	b.w	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f03c:	2300      	movs	r3, #0
 800f03e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f040:	f000 bcd7 	b.w	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800f044:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f048:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800f04c:	430b      	orrs	r3, r1
 800f04e:	f040 80ad 	bne.w	800f1ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800f052:	4b51      	ldr	r3, [pc, #324]	@ (800f198 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f054:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f056:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800f05a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800f05c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f05e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f062:	d056      	beq.n	800f112 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800f064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f066:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f06a:	f200 8090 	bhi.w	800f18e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800f06e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f070:	2bc0      	cmp	r3, #192	@ 0xc0
 800f072:	f000 8088 	beq.w	800f186 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800f076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f078:	2bc0      	cmp	r3, #192	@ 0xc0
 800f07a:	f200 8088 	bhi.w	800f18e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800f07e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f080:	2b80      	cmp	r3, #128	@ 0x80
 800f082:	d032      	beq.n	800f0ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800f084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f086:	2b80      	cmp	r3, #128	@ 0x80
 800f088:	f200 8081 	bhi.w	800f18e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800f08c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d003      	beq.n	800f09a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800f092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f094:	2b40      	cmp	r3, #64	@ 0x40
 800f096:	d014      	beq.n	800f0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800f098:	e079      	b.n	800f18e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f09a:	4b3f      	ldr	r3, [pc, #252]	@ (800f198 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f0a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f0a6:	d108      	bne.n	800f0ba <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f0a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f000 ff67 	bl	800ff80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f0b6:	f000 bc9c 	b.w	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0be:	f000 bc98 	b.w	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f0c2:	4b35      	ldr	r3, [pc, #212]	@ (800f198 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f0ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f0ce:	d108      	bne.n	800f0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f0d0:	f107 0318 	add.w	r3, r7, #24
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	f000 fcab 	bl	800fa30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f0da:	69bb      	ldr	r3, [r7, #24]
 800f0dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f0de:	f000 bc88 	b.w	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0e6:	f000 bc84 	b.w	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f0ea:	4b2b      	ldr	r3, [pc, #172]	@ (800f198 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f0f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f0f6:	d108      	bne.n	800f10a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f0f8:	f107 030c 	add.w	r3, r7, #12
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f000 fdeb 	bl	800fcd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f106:	f000 bc74 	b.w	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f10a:	2300      	movs	r3, #0
 800f10c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f10e:	f000 bc70 	b.w	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f112:	4b21      	ldr	r3, [pc, #132]	@ (800f198 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f116:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f11a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f11c:	4b1e      	ldr	r3, [pc, #120]	@ (800f198 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	f003 0304 	and.w	r3, r3, #4
 800f124:	2b04      	cmp	r3, #4
 800f126:	d10c      	bne.n	800f142 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800f128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d109      	bne.n	800f142 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f12e:	4b1a      	ldr	r3, [pc, #104]	@ (800f198 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	08db      	lsrs	r3, r3, #3
 800f134:	f003 0303 	and.w	r3, r3, #3
 800f138:	4a18      	ldr	r2, [pc, #96]	@ (800f19c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800f13a:	fa22 f303 	lsr.w	r3, r2, r3
 800f13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f140:	e01f      	b.n	800f182 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f142:	4b15      	ldr	r3, [pc, #84]	@ (800f198 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f14a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f14e:	d106      	bne.n	800f15e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800f150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f152:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f156:	d102      	bne.n	800f15e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f158:	4b11      	ldr	r3, [pc, #68]	@ (800f1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800f15a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f15c:	e011      	b.n	800f182 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f15e:	4b0e      	ldr	r3, [pc, #56]	@ (800f198 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f166:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f16a:	d106      	bne.n	800f17a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800f16c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f16e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f172:	d102      	bne.n	800f17a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f174:	4b0b      	ldr	r3, [pc, #44]	@ (800f1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800f176:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f178:	e003      	b.n	800f182 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f17a:	2300      	movs	r3, #0
 800f17c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f17e:	f000 bc38 	b.w	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f182:	f000 bc36 	b.w	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f186:	4b08      	ldr	r3, [pc, #32]	@ (800f1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800f188:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f18a:	f000 bc32 	b.w	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f18e:	2300      	movs	r3, #0
 800f190:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f192:	f000 bc2e 	b.w	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f196:	bf00      	nop
 800f198:	58024400 	.word	0x58024400
 800f19c:	03d09000 	.word	0x03d09000
 800f1a0:	003d0900 	.word	0x003d0900
 800f1a4:	017d7840 	.word	0x017d7840
 800f1a8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800f1ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f1b0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800f1b4:	430b      	orrs	r3, r1
 800f1b6:	f040 809c 	bne.w	800f2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800f1ba:	4b9e      	ldr	r3, [pc, #632]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f1bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f1be:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800f1c2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800f1c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f1ca:	d054      	beq.n	800f276 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800f1cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f1d2:	f200 808b 	bhi.w	800f2ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800f1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1d8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800f1dc:	f000 8083 	beq.w	800f2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800f1e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1e2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800f1e6:	f200 8081 	bhi.w	800f2ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800f1ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f1f0:	d02f      	beq.n	800f252 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800f1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f1f8:	d878      	bhi.n	800f2ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800f1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d004      	beq.n	800f20a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800f200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f202:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f206:	d012      	beq.n	800f22e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800f208:	e070      	b.n	800f2ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f20a:	4b8a      	ldr	r3, [pc, #552]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f212:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f216:	d107      	bne.n	800f228 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f218:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f21c:	4618      	mov	r0, r3
 800f21e:	f000 feaf 	bl	800ff80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f224:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f226:	e3e4      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f228:	2300      	movs	r3, #0
 800f22a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f22c:	e3e1      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f22e:	4b81      	ldr	r3, [pc, #516]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f236:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f23a:	d107      	bne.n	800f24c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f23c:	f107 0318 	add.w	r3, r7, #24
 800f240:	4618      	mov	r0, r3
 800f242:	f000 fbf5 	bl	800fa30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f246:	69bb      	ldr	r3, [r7, #24]
 800f248:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f24a:	e3d2      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f24c:	2300      	movs	r3, #0
 800f24e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f250:	e3cf      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f252:	4b78      	ldr	r3, [pc, #480]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f25a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f25e:	d107      	bne.n	800f270 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f260:	f107 030c 	add.w	r3, r7, #12
 800f264:	4618      	mov	r0, r3
 800f266:	f000 fd37 	bl	800fcd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f26e:	e3c0      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f270:	2300      	movs	r3, #0
 800f272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f274:	e3bd      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f276:	4b6f      	ldr	r3, [pc, #444]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f27a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f27e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f280:	4b6c      	ldr	r3, [pc, #432]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	f003 0304 	and.w	r3, r3, #4
 800f288:	2b04      	cmp	r3, #4
 800f28a:	d10c      	bne.n	800f2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800f28c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d109      	bne.n	800f2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f292:	4b68      	ldr	r3, [pc, #416]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	08db      	lsrs	r3, r3, #3
 800f298:	f003 0303 	and.w	r3, r3, #3
 800f29c:	4a66      	ldr	r2, [pc, #408]	@ (800f438 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f29e:	fa22 f303 	lsr.w	r3, r2, r3
 800f2a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f2a4:	e01e      	b.n	800f2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f2a6:	4b63      	ldr	r3, [pc, #396]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f2ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f2b2:	d106      	bne.n	800f2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800f2b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f2b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f2ba:	d102      	bne.n	800f2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f2bc:	4b5f      	ldr	r3, [pc, #380]	@ (800f43c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800f2be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f2c0:	e010      	b.n	800f2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f2c2:	4b5c      	ldr	r3, [pc, #368]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f2ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f2ce:	d106      	bne.n	800f2de <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800f2d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f2d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f2d6:	d102      	bne.n	800f2de <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f2d8:	4b59      	ldr	r3, [pc, #356]	@ (800f440 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800f2da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f2dc:	e002      	b.n	800f2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f2e2:	e386      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f2e4:	e385      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f2e6:	4b57      	ldr	r3, [pc, #348]	@ (800f444 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f2e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2ea:	e382      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2f0:	e37f      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800f2f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f2f6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800f2fa:	430b      	orrs	r3, r1
 800f2fc:	f040 80a7 	bne.w	800f44e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800f300:	4b4c      	ldr	r3, [pc, #304]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f304:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800f308:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800f30a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f30c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f310:	d055      	beq.n	800f3be <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800f312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f314:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f318:	f200 8096 	bhi.w	800f448 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800f31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f31e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f322:	f000 8084 	beq.w	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800f326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f328:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f32c:	f200 808c 	bhi.w	800f448 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800f330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f332:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f336:	d030      	beq.n	800f39a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800f338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f33a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f33e:	f200 8083 	bhi.w	800f448 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800f342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f344:	2b00      	cmp	r3, #0
 800f346:	d004      	beq.n	800f352 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800f348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f34a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f34e:	d012      	beq.n	800f376 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800f350:	e07a      	b.n	800f448 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f352:	4b38      	ldr	r3, [pc, #224]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f35a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f35e:	d107      	bne.n	800f370 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f360:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f364:	4618      	mov	r0, r3
 800f366:	f000 fe0b 	bl	800ff80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f36a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f36c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f36e:	e340      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f370:	2300      	movs	r3, #0
 800f372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f374:	e33d      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f376:	4b2f      	ldr	r3, [pc, #188]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f37e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f382:	d107      	bne.n	800f394 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f384:	f107 0318 	add.w	r3, r7, #24
 800f388:	4618      	mov	r0, r3
 800f38a:	f000 fb51 	bl	800fa30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f38e:	69bb      	ldr	r3, [r7, #24]
 800f390:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f392:	e32e      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f394:	2300      	movs	r3, #0
 800f396:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f398:	e32b      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f39a:	4b26      	ldr	r3, [pc, #152]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f3a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f3a6:	d107      	bne.n	800f3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f3a8:	f107 030c 	add.w	r3, r7, #12
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	f000 fc93 	bl	800fcd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f3b6:	e31c      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f3bc:	e319      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f3be:	4b1d      	ldr	r3, [pc, #116]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f3c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f3c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f3c6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f3c8:	4b1a      	ldr	r3, [pc, #104]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	f003 0304 	and.w	r3, r3, #4
 800f3d0:	2b04      	cmp	r3, #4
 800f3d2:	d10c      	bne.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800f3d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d109      	bne.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f3da:	4b16      	ldr	r3, [pc, #88]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	08db      	lsrs	r3, r3, #3
 800f3e0:	f003 0303 	and.w	r3, r3, #3
 800f3e4:	4a14      	ldr	r2, [pc, #80]	@ (800f438 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f3e6:	fa22 f303 	lsr.w	r3, r2, r3
 800f3ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f3ec:	e01e      	b.n	800f42c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f3ee:	4b11      	ldr	r3, [pc, #68]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f3f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f3fa:	d106      	bne.n	800f40a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800f3fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f3fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f402:	d102      	bne.n	800f40a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f404:	4b0d      	ldr	r3, [pc, #52]	@ (800f43c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800f406:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f408:	e010      	b.n	800f42c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f40a:	4b0a      	ldr	r3, [pc, #40]	@ (800f434 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f412:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f416:	d106      	bne.n	800f426 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800f418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f41a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f41e:	d102      	bne.n	800f426 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f420:	4b07      	ldr	r3, [pc, #28]	@ (800f440 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800f422:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f424:	e002      	b.n	800f42c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f426:	2300      	movs	r3, #0
 800f428:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f42a:	e2e2      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f42c:	e2e1      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f42e:	4b05      	ldr	r3, [pc, #20]	@ (800f444 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f430:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f432:	e2de      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f434:	58024400 	.word	0x58024400
 800f438:	03d09000 	.word	0x03d09000
 800f43c:	003d0900 	.word	0x003d0900
 800f440:	017d7840 	.word	0x017d7840
 800f444:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800f448:	2300      	movs	r3, #0
 800f44a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f44c:	e2d1      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800f44e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f452:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800f456:	430b      	orrs	r3, r1
 800f458:	f040 809c 	bne.w	800f594 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800f45c:	4b93      	ldr	r3, [pc, #588]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f45e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f460:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800f464:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f468:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f46c:	d054      	beq.n	800f518 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800f46e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f470:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f474:	f200 808b 	bhi.w	800f58e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f47a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f47e:	f000 8083 	beq.w	800f588 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800f482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f484:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f488:	f200 8081 	bhi.w	800f58e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f48c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f48e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f492:	d02f      	beq.n	800f4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800f494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f496:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f49a:	d878      	bhi.n	800f58e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f49c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d004      	beq.n	800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800f4a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f4a8:	d012      	beq.n	800f4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800f4aa:	e070      	b.n	800f58e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f4ac:	4b7f      	ldr	r3, [pc, #508]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f4b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f4b8:	d107      	bne.n	800f4ca <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f4ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f000 fd5e 	bl	800ff80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f4c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f4c8:	e293      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f4ce:	e290      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f4d0:	4b76      	ldr	r3, [pc, #472]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f4d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f4dc:	d107      	bne.n	800f4ee <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f4de:	f107 0318 	add.w	r3, r7, #24
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	f000 faa4 	bl	800fa30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f4e8:	69bb      	ldr	r3, [r7, #24]
 800f4ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f4ec:	e281      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f4f2:	e27e      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f4f4:	4b6d      	ldr	r3, [pc, #436]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f4fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f500:	d107      	bne.n	800f512 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f502:	f107 030c 	add.w	r3, r7, #12
 800f506:	4618      	mov	r0, r3
 800f508:	f000 fbe6 	bl	800fcd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f510:	e26f      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f512:	2300      	movs	r3, #0
 800f514:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f516:	e26c      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f518:	4b64      	ldr	r3, [pc, #400]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f51a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f51c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f520:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f522:	4b62      	ldr	r3, [pc, #392]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	f003 0304 	and.w	r3, r3, #4
 800f52a:	2b04      	cmp	r3, #4
 800f52c:	d10c      	bne.n	800f548 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800f52e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f530:	2b00      	cmp	r3, #0
 800f532:	d109      	bne.n	800f548 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f534:	4b5d      	ldr	r3, [pc, #372]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	08db      	lsrs	r3, r3, #3
 800f53a:	f003 0303 	and.w	r3, r3, #3
 800f53e:	4a5c      	ldr	r2, [pc, #368]	@ (800f6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800f540:	fa22 f303 	lsr.w	r3, r2, r3
 800f544:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f546:	e01e      	b.n	800f586 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f548:	4b58      	ldr	r3, [pc, #352]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f550:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f554:	d106      	bne.n	800f564 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800f556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f558:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f55c:	d102      	bne.n	800f564 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f55e:	4b55      	ldr	r3, [pc, #340]	@ (800f6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800f560:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f562:	e010      	b.n	800f586 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f564:	4b51      	ldr	r3, [pc, #324]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f56c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f570:	d106      	bne.n	800f580 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800f572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f574:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f578:	d102      	bne.n	800f580 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f57a:	4b4f      	ldr	r3, [pc, #316]	@ (800f6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800f57c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f57e:	e002      	b.n	800f586 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f580:	2300      	movs	r3, #0
 800f582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f584:	e235      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f586:	e234      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f588:	4b4c      	ldr	r3, [pc, #304]	@ (800f6bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800f58a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f58c:	e231      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f58e:	2300      	movs	r3, #0
 800f590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f592:	e22e      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800f594:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f598:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800f59c:	430b      	orrs	r3, r1
 800f59e:	f040 808f 	bne.w	800f6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800f5a2:	4b42      	ldr	r3, [pc, #264]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f5a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f5a6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800f5aa:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800f5ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f5b2:	d06b      	beq.n	800f68c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800f5b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f5ba:	d874      	bhi.n	800f6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f5bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f5c2:	d056      	beq.n	800f672 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800f5c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f5ca:	d86c      	bhi.n	800f6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f5cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f5d2:	d03b      	beq.n	800f64c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800f5d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5d6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f5da:	d864      	bhi.n	800f6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f5dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f5e2:	d021      	beq.n	800f628 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800f5e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f5ea:	d85c      	bhi.n	800f6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f5ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d004      	beq.n	800f5fc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800f5f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f5f8:	d004      	beq.n	800f604 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800f5fa:	e054      	b.n	800f6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800f5fc:	f7fe fa62 	bl	800dac4 <HAL_RCC_GetPCLK1Freq>
 800f600:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f602:	e1f6      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f604:	4b29      	ldr	r3, [pc, #164]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f60c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f610:	d107      	bne.n	800f622 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f612:	f107 0318 	add.w	r3, r7, #24
 800f616:	4618      	mov	r0, r3
 800f618:	f000 fa0a 	bl	800fa30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f61c:	69fb      	ldr	r3, [r7, #28]
 800f61e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f620:	e1e7      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f622:	2300      	movs	r3, #0
 800f624:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f626:	e1e4      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f628:	4b20      	ldr	r3, [pc, #128]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f630:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f634:	d107      	bne.n	800f646 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f636:	f107 030c 	add.w	r3, r7, #12
 800f63a:	4618      	mov	r0, r3
 800f63c:	f000 fb4c 	bl	800fcd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f640:	693b      	ldr	r3, [r7, #16]
 800f642:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f644:	e1d5      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f646:	2300      	movs	r3, #0
 800f648:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f64a:	e1d2      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f64c:	4b17      	ldr	r3, [pc, #92]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	f003 0304 	and.w	r3, r3, #4
 800f654:	2b04      	cmp	r3, #4
 800f656:	d109      	bne.n	800f66c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f658:	4b14      	ldr	r3, [pc, #80]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	08db      	lsrs	r3, r3, #3
 800f65e:	f003 0303 	and.w	r3, r3, #3
 800f662:	4a13      	ldr	r2, [pc, #76]	@ (800f6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800f664:	fa22 f303 	lsr.w	r3, r2, r3
 800f668:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f66a:	e1c2      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f66c:	2300      	movs	r3, #0
 800f66e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f670:	e1bf      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f672:	4b0e      	ldr	r3, [pc, #56]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f67a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f67e:	d102      	bne.n	800f686 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800f680:	4b0c      	ldr	r3, [pc, #48]	@ (800f6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800f682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f684:	e1b5      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f686:	2300      	movs	r3, #0
 800f688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f68a:	e1b2      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f68c:	4b07      	ldr	r3, [pc, #28]	@ (800f6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f694:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f698:	d102      	bne.n	800f6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800f69a:	4b07      	ldr	r3, [pc, #28]	@ (800f6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800f69c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f69e:	e1a8      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6a4:	e1a5      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6aa:	e1a2      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f6ac:	58024400 	.word	0x58024400
 800f6b0:	03d09000 	.word	0x03d09000
 800f6b4:	003d0900 	.word	0x003d0900
 800f6b8:	017d7840 	.word	0x017d7840
 800f6bc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800f6c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f6c4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800f6c8:	430b      	orrs	r3, r1
 800f6ca:	d173      	bne.n	800f7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800f6cc:	4b9c      	ldr	r3, [pc, #624]	@ (800f940 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f6ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f6d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800f6d4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f6d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f6dc:	d02f      	beq.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f6de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f6e4:	d863      	bhi.n	800f7ae <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800f6e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d004      	beq.n	800f6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800f6ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f6f2:	d012      	beq.n	800f71a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800f6f4:	e05b      	b.n	800f7ae <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f6f6:	4b92      	ldr	r3, [pc, #584]	@ (800f940 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f6fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f702:	d107      	bne.n	800f714 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f704:	f107 0318 	add.w	r3, r7, #24
 800f708:	4618      	mov	r0, r3
 800f70a:	f000 f991 	bl	800fa30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f70e:	69bb      	ldr	r3, [r7, #24]
 800f710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f712:	e16e      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f714:	2300      	movs	r3, #0
 800f716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f718:	e16b      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f71a:	4b89      	ldr	r3, [pc, #548]	@ (800f940 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f722:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f726:	d107      	bne.n	800f738 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f728:	f107 030c 	add.w	r3, r7, #12
 800f72c:	4618      	mov	r0, r3
 800f72e:	f000 fad3 	bl	800fcd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f736:	e15c      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f738:	2300      	movs	r3, #0
 800f73a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f73c:	e159      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f73e:	4b80      	ldr	r3, [pc, #512]	@ (800f940 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f742:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f746:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f748:	4b7d      	ldr	r3, [pc, #500]	@ (800f940 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	f003 0304 	and.w	r3, r3, #4
 800f750:	2b04      	cmp	r3, #4
 800f752:	d10c      	bne.n	800f76e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800f754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f756:	2b00      	cmp	r3, #0
 800f758:	d109      	bne.n	800f76e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f75a:	4b79      	ldr	r3, [pc, #484]	@ (800f940 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	08db      	lsrs	r3, r3, #3
 800f760:	f003 0303 	and.w	r3, r3, #3
 800f764:	4a77      	ldr	r2, [pc, #476]	@ (800f944 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800f766:	fa22 f303 	lsr.w	r3, r2, r3
 800f76a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f76c:	e01e      	b.n	800f7ac <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f76e:	4b74      	ldr	r3, [pc, #464]	@ (800f940 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f776:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f77a:	d106      	bne.n	800f78a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800f77c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f77e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f782:	d102      	bne.n	800f78a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f784:	4b70      	ldr	r3, [pc, #448]	@ (800f948 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800f786:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f788:	e010      	b.n	800f7ac <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f78a:	4b6d      	ldr	r3, [pc, #436]	@ (800f940 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f792:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f796:	d106      	bne.n	800f7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800f798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f79a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f79e:	d102      	bne.n	800f7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f7a0:	4b6a      	ldr	r3, [pc, #424]	@ (800f94c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800f7a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f7a4:	e002      	b.n	800f7ac <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f7aa:	e122      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f7ac:	e121      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f7b2:	e11e      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800f7b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f7b8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800f7bc:	430b      	orrs	r3, r1
 800f7be:	d133      	bne.n	800f828 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800f7c0:	4b5f      	ldr	r3, [pc, #380]	@ (800f940 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f7c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f7c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f7c8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f7ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d004      	beq.n	800f7da <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800f7d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f7d6:	d012      	beq.n	800f7fe <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800f7d8:	e023      	b.n	800f822 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f7da:	4b59      	ldr	r3, [pc, #356]	@ (800f940 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f7e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f7e6:	d107      	bne.n	800f7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f7e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	f000 fbc7 	bl	800ff80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f7f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f7f6:	e0fc      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f7fc:	e0f9      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f7fe:	4b50      	ldr	r3, [pc, #320]	@ (800f940 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f806:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f80a:	d107      	bne.n	800f81c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f80c:	f107 0318 	add.w	r3, r7, #24
 800f810:	4618      	mov	r0, r3
 800f812:	f000 f90d 	bl	800fa30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800f816:	6a3b      	ldr	r3, [r7, #32]
 800f818:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f81a:	e0ea      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f81c:	2300      	movs	r3, #0
 800f81e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f820:	e0e7      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800f822:	2300      	movs	r3, #0
 800f824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f826:	e0e4      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800f828:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f82c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800f830:	430b      	orrs	r3, r1
 800f832:	f040 808d 	bne.w	800f950 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800f836:	4b42      	ldr	r3, [pc, #264]	@ (800f940 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f83a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800f83e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f842:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f846:	d06b      	beq.n	800f920 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800f848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f84a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f84e:	d874      	bhi.n	800f93a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f856:	d056      	beq.n	800f906 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800f858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f85a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f85e:	d86c      	bhi.n	800f93a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f862:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f866:	d03b      	beq.n	800f8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800f868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f86a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f86e:	d864      	bhi.n	800f93a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f872:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f876:	d021      	beq.n	800f8bc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800f878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f87a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f87e:	d85c      	bhi.n	800f93a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f882:	2b00      	cmp	r3, #0
 800f884:	d004      	beq.n	800f890 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800f886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f888:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f88c:	d004      	beq.n	800f898 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800f88e:	e054      	b.n	800f93a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800f890:	f000 f8b8 	bl	800fa04 <HAL_RCCEx_GetD3PCLK1Freq>
 800f894:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f896:	e0ac      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f898:	4b29      	ldr	r3, [pc, #164]	@ (800f940 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f8a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f8a4:	d107      	bne.n	800f8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f8a6:	f107 0318 	add.w	r3, r7, #24
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f000 f8c0 	bl	800fa30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f8b0:	69fb      	ldr	r3, [r7, #28]
 800f8b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f8b4:	e09d      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8ba:	e09a      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f8bc:	4b20      	ldr	r3, [pc, #128]	@ (800f940 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f8c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f8c8:	d107      	bne.n	800f8da <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f8ca:	f107 030c 	add.w	r3, r7, #12
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	f000 fa02 	bl	800fcd8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f8d4:	693b      	ldr	r3, [r7, #16]
 800f8d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f8d8:	e08b      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f8da:	2300      	movs	r3, #0
 800f8dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8de:	e088      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f8e0:	4b17      	ldr	r3, [pc, #92]	@ (800f940 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	f003 0304 	and.w	r3, r3, #4
 800f8e8:	2b04      	cmp	r3, #4
 800f8ea:	d109      	bne.n	800f900 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f8ec:	4b14      	ldr	r3, [pc, #80]	@ (800f940 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	08db      	lsrs	r3, r3, #3
 800f8f2:	f003 0303 	and.w	r3, r3, #3
 800f8f6:	4a13      	ldr	r2, [pc, #76]	@ (800f944 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800f8f8:	fa22 f303 	lsr.w	r3, r2, r3
 800f8fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f8fe:	e078      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f900:	2300      	movs	r3, #0
 800f902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f904:	e075      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f906:	4b0e      	ldr	r3, [pc, #56]	@ (800f940 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f90e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f912:	d102      	bne.n	800f91a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800f914:	4b0c      	ldr	r3, [pc, #48]	@ (800f948 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800f916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f918:	e06b      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f91a:	2300      	movs	r3, #0
 800f91c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f91e:	e068      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f920:	4b07      	ldr	r3, [pc, #28]	@ (800f940 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f928:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f92c:	d102      	bne.n	800f934 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800f92e:	4b07      	ldr	r3, [pc, #28]	@ (800f94c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800f930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f932:	e05e      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f934:	2300      	movs	r3, #0
 800f936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f938:	e05b      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800f93a:	2300      	movs	r3, #0
 800f93c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f93e:	e058      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f940:	58024400 	.word	0x58024400
 800f944:	03d09000 	.word	0x03d09000
 800f948:	003d0900 	.word	0x003d0900
 800f94c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800f950:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f954:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800f958:	430b      	orrs	r3, r1
 800f95a:	d148      	bne.n	800f9ee <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800f95c:	4b27      	ldr	r3, [pc, #156]	@ (800f9fc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f95e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f960:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f964:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f968:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f96c:	d02a      	beq.n	800f9c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800f96e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f970:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f974:	d838      	bhi.n	800f9e8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800f976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d004      	beq.n	800f986 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800f97c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f97e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f982:	d00d      	beq.n	800f9a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800f984:	e030      	b.n	800f9e8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f986:	4b1d      	ldr	r3, [pc, #116]	@ (800f9fc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f98e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f992:	d102      	bne.n	800f99a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800f994:	4b1a      	ldr	r3, [pc, #104]	@ (800fa00 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800f996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f998:	e02b      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f99a:	2300      	movs	r3, #0
 800f99c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f99e:	e028      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f9a0:	4b16      	ldr	r3, [pc, #88]	@ (800f9fc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f9a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f9ac:	d107      	bne.n	800f9be <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f9ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	f000 fae4 	bl	800ff80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f9b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f9bc:	e019      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f9be:	2300      	movs	r3, #0
 800f9c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f9c2:	e016      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f9c4:	4b0d      	ldr	r3, [pc, #52]	@ (800f9fc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f9cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f9d0:	d107      	bne.n	800f9e2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f9d2:	f107 0318 	add.w	r3, r7, #24
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	f000 f82a 	bl	800fa30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f9dc:	69fb      	ldr	r3, [r7, #28]
 800f9de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f9e0:	e007      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f9e6:	e004      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f9ec:	e001      	b.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800f9f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	3740      	adds	r7, #64	@ 0x40
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	bd80      	pop	{r7, pc}
 800f9fc:	58024400 	.word	0x58024400
 800fa00:	017d7840 	.word	0x017d7840

0800fa04 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800fa08:	f7fe f82c 	bl	800da64 <HAL_RCC_GetHCLKFreq>
 800fa0c:	4602      	mov	r2, r0
 800fa0e:	4b06      	ldr	r3, [pc, #24]	@ (800fa28 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800fa10:	6a1b      	ldr	r3, [r3, #32]
 800fa12:	091b      	lsrs	r3, r3, #4
 800fa14:	f003 0307 	and.w	r3, r3, #7
 800fa18:	4904      	ldr	r1, [pc, #16]	@ (800fa2c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800fa1a:	5ccb      	ldrb	r3, [r1, r3]
 800fa1c:	f003 031f 	and.w	r3, r3, #31
 800fa20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800fa24:	4618      	mov	r0, r3
 800fa26:	bd80      	pop	{r7, pc}
 800fa28:	58024400 	.word	0x58024400
 800fa2c:	080144e0 	.word	0x080144e0

0800fa30 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800fa30:	b480      	push	{r7}
 800fa32:	b089      	sub	sp, #36	@ 0x24
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fa38:	4ba1      	ldr	r3, [pc, #644]	@ (800fcc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fa3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa3c:	f003 0303 	and.w	r3, r3, #3
 800fa40:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800fa42:	4b9f      	ldr	r3, [pc, #636]	@ (800fcc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fa44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa46:	0b1b      	lsrs	r3, r3, #12
 800fa48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fa4c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800fa4e:	4b9c      	ldr	r3, [pc, #624]	@ (800fcc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fa50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa52:	091b      	lsrs	r3, r3, #4
 800fa54:	f003 0301 	and.w	r3, r3, #1
 800fa58:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800fa5a:	4b99      	ldr	r3, [pc, #612]	@ (800fcc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fa5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa5e:	08db      	lsrs	r3, r3, #3
 800fa60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fa64:	693a      	ldr	r2, [r7, #16]
 800fa66:	fb02 f303 	mul.w	r3, r2, r3
 800fa6a:	ee07 3a90 	vmov	s15, r3
 800fa6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800fa76:	697b      	ldr	r3, [r7, #20]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	f000 8111 	beq.w	800fca0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800fa7e:	69bb      	ldr	r3, [r7, #24]
 800fa80:	2b02      	cmp	r3, #2
 800fa82:	f000 8083 	beq.w	800fb8c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800fa86:	69bb      	ldr	r3, [r7, #24]
 800fa88:	2b02      	cmp	r3, #2
 800fa8a:	f200 80a1 	bhi.w	800fbd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800fa8e:	69bb      	ldr	r3, [r7, #24]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d003      	beq.n	800fa9c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800fa94:	69bb      	ldr	r3, [r7, #24]
 800fa96:	2b01      	cmp	r3, #1
 800fa98:	d056      	beq.n	800fb48 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800fa9a:	e099      	b.n	800fbd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fa9c:	4b88      	ldr	r3, [pc, #544]	@ (800fcc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	f003 0320 	and.w	r3, r3, #32
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d02d      	beq.n	800fb04 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800faa8:	4b85      	ldr	r3, [pc, #532]	@ (800fcc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	08db      	lsrs	r3, r3, #3
 800faae:	f003 0303 	and.w	r3, r3, #3
 800fab2:	4a84      	ldr	r2, [pc, #528]	@ (800fcc4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800fab4:	fa22 f303 	lsr.w	r3, r2, r3
 800fab8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	ee07 3a90 	vmov	s15, r3
 800fac0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fac4:	697b      	ldr	r3, [r7, #20]
 800fac6:	ee07 3a90 	vmov	s15, r3
 800faca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800face:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fad2:	4b7b      	ldr	r3, [pc, #492]	@ (800fcc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fada:	ee07 3a90 	vmov	s15, r3
 800fade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fae2:	ed97 6a03 	vldr	s12, [r7, #12]
 800fae6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800fcc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800faea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800faee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800faf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800faf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fafa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fafe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800fb02:	e087      	b.n	800fc14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fb04:	697b      	ldr	r3, [r7, #20]
 800fb06:	ee07 3a90 	vmov	s15, r3
 800fb0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb0e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800fccc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800fb12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb16:	4b6a      	ldr	r3, [pc, #424]	@ (800fcc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fb18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb1e:	ee07 3a90 	vmov	s15, r3
 800fb22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb26:	ed97 6a03 	vldr	s12, [r7, #12]
 800fb2a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800fcc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fb2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fb32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fb36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fb3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fb46:	e065      	b.n	800fc14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	ee07 3a90 	vmov	s15, r3
 800fb4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb52:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800fcd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800fb56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb5a:	4b59      	ldr	r3, [pc, #356]	@ (800fcc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fb5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb62:	ee07 3a90 	vmov	s15, r3
 800fb66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800fb6e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800fcc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fb72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fb76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fb7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fb7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fb8a:	e043      	b.n	800fc14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fb8c:	697b      	ldr	r3, [r7, #20]
 800fb8e:	ee07 3a90 	vmov	s15, r3
 800fb92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb96:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800fcd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800fb9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb9e:	4b48      	ldr	r3, [pc, #288]	@ (800fcc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fba6:	ee07 3a90 	vmov	s15, r3
 800fbaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fbae:	ed97 6a03 	vldr	s12, [r7, #12]
 800fbb2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800fcc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fbb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fbba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fbbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fbc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fbc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fbca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fbce:	e021      	b.n	800fc14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fbd0:	697b      	ldr	r3, [r7, #20]
 800fbd2:	ee07 3a90 	vmov	s15, r3
 800fbd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fbda:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800fcd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800fbde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fbe2:	4b37      	ldr	r3, [pc, #220]	@ (800fcc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fbe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fbe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbea:	ee07 3a90 	vmov	s15, r3
 800fbee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fbf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800fbf6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800fcc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fbfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fbfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fc02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fc06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fc0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fc12:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800fc14:	4b2a      	ldr	r3, [pc, #168]	@ (800fcc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fc16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc18:	0a5b      	lsrs	r3, r3, #9
 800fc1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fc1e:	ee07 3a90 	vmov	s15, r3
 800fc22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fc2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fc2e:	edd7 6a07 	vldr	s13, [r7, #28]
 800fc32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fc36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fc3a:	ee17 2a90 	vmov	r2, s15
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800fc42:	4b1f      	ldr	r3, [pc, #124]	@ (800fcc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fc44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc46:	0c1b      	lsrs	r3, r3, #16
 800fc48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fc4c:	ee07 3a90 	vmov	s15, r3
 800fc50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fc58:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fc5c:	edd7 6a07 	vldr	s13, [r7, #28]
 800fc60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fc64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fc68:	ee17 2a90 	vmov	r2, s15
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800fc70:	4b13      	ldr	r3, [pc, #76]	@ (800fcc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fc72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc74:	0e1b      	lsrs	r3, r3, #24
 800fc76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fc7a:	ee07 3a90 	vmov	s15, r3
 800fc7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fc86:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fc8a:	edd7 6a07 	vldr	s13, [r7, #28]
 800fc8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fc92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fc96:	ee17 2a90 	vmov	r2, s15
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800fc9e:	e008      	b.n	800fcb2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2200      	movs	r2, #0
 800fca4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	2200      	movs	r2, #0
 800fcaa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	2200      	movs	r2, #0
 800fcb0:	609a      	str	r2, [r3, #8]
}
 800fcb2:	bf00      	nop
 800fcb4:	3724      	adds	r7, #36	@ 0x24
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcbc:	4770      	bx	lr
 800fcbe:	bf00      	nop
 800fcc0:	58024400 	.word	0x58024400
 800fcc4:	03d09000 	.word	0x03d09000
 800fcc8:	46000000 	.word	0x46000000
 800fccc:	4c742400 	.word	0x4c742400
 800fcd0:	4a742400 	.word	0x4a742400
 800fcd4:	4bbebc20 	.word	0x4bbebc20

0800fcd8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800fcd8:	b480      	push	{r7}
 800fcda:	b089      	sub	sp, #36	@ 0x24
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fce0:	4ba1      	ldr	r3, [pc, #644]	@ (800ff68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fce4:	f003 0303 	and.w	r3, r3, #3
 800fce8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800fcea:	4b9f      	ldr	r3, [pc, #636]	@ (800ff68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fcec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fcee:	0d1b      	lsrs	r3, r3, #20
 800fcf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fcf4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800fcf6:	4b9c      	ldr	r3, [pc, #624]	@ (800ff68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fcf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcfa:	0a1b      	lsrs	r3, r3, #8
 800fcfc:	f003 0301 	and.w	r3, r3, #1
 800fd00:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800fd02:	4b99      	ldr	r3, [pc, #612]	@ (800ff68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fd04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd06:	08db      	lsrs	r3, r3, #3
 800fd08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fd0c:	693a      	ldr	r2, [r7, #16]
 800fd0e:	fb02 f303 	mul.w	r3, r2, r3
 800fd12:	ee07 3a90 	vmov	s15, r3
 800fd16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800fd1e:	697b      	ldr	r3, [r7, #20]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	f000 8111 	beq.w	800ff48 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800fd26:	69bb      	ldr	r3, [r7, #24]
 800fd28:	2b02      	cmp	r3, #2
 800fd2a:	f000 8083 	beq.w	800fe34 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800fd2e:	69bb      	ldr	r3, [r7, #24]
 800fd30:	2b02      	cmp	r3, #2
 800fd32:	f200 80a1 	bhi.w	800fe78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800fd36:	69bb      	ldr	r3, [r7, #24]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d003      	beq.n	800fd44 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800fd3c:	69bb      	ldr	r3, [r7, #24]
 800fd3e:	2b01      	cmp	r3, #1
 800fd40:	d056      	beq.n	800fdf0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800fd42:	e099      	b.n	800fe78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fd44:	4b88      	ldr	r3, [pc, #544]	@ (800ff68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	f003 0320 	and.w	r3, r3, #32
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d02d      	beq.n	800fdac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fd50:	4b85      	ldr	r3, [pc, #532]	@ (800ff68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	08db      	lsrs	r3, r3, #3
 800fd56:	f003 0303 	and.w	r3, r3, #3
 800fd5a:	4a84      	ldr	r2, [pc, #528]	@ (800ff6c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800fd5c:	fa22 f303 	lsr.w	r3, r2, r3
 800fd60:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fd62:	68bb      	ldr	r3, [r7, #8]
 800fd64:	ee07 3a90 	vmov	s15, r3
 800fd68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fd6c:	697b      	ldr	r3, [r7, #20]
 800fd6e:	ee07 3a90 	vmov	s15, r3
 800fd72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fd7a:	4b7b      	ldr	r3, [pc, #492]	@ (800ff68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fd7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd82:	ee07 3a90 	vmov	s15, r3
 800fd86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fd8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800fd8e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ff70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fd92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fd96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fd9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fd9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fda2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fda6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800fdaa:	e087      	b.n	800febc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fdac:	697b      	ldr	r3, [r7, #20]
 800fdae:	ee07 3a90 	vmov	s15, r3
 800fdb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdb6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ff74 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800fdba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fdbe:	4b6a      	ldr	r3, [pc, #424]	@ (800ff68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fdc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fdc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fdc6:	ee07 3a90 	vmov	s15, r3
 800fdca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fdce:	ed97 6a03 	vldr	s12, [r7, #12]
 800fdd2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ff70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fdd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fdda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fdde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fde2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fde6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fdea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fdee:	e065      	b.n	800febc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fdf0:	697b      	ldr	r3, [r7, #20]
 800fdf2:	ee07 3a90 	vmov	s15, r3
 800fdf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdfa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ff78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800fdfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe02:	4b59      	ldr	r3, [pc, #356]	@ (800ff68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fe04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe0a:	ee07 3a90 	vmov	s15, r3
 800fe0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe12:	ed97 6a03 	vldr	s12, [r7, #12]
 800fe16:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ff70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fe1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fe1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fe26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fe32:	e043      	b.n	800febc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fe34:	697b      	ldr	r3, [r7, #20]
 800fe36:	ee07 3a90 	vmov	s15, r3
 800fe3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe3e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ff7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800fe42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe46:	4b48      	ldr	r3, [pc, #288]	@ (800ff68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fe48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe4e:	ee07 3a90 	vmov	s15, r3
 800fe52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe56:	ed97 6a03 	vldr	s12, [r7, #12]
 800fe5a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ff70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fe5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fe62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fe6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fe76:	e021      	b.n	800febc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fe78:	697b      	ldr	r3, [r7, #20]
 800fe7a:	ee07 3a90 	vmov	s15, r3
 800fe7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe82:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ff78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800fe86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe8a:	4b37      	ldr	r3, [pc, #220]	@ (800ff68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fe8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe92:	ee07 3a90 	vmov	s15, r3
 800fe96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800fe9e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ff70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800feaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800feae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800feb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800feb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800feba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800febc:	4b2a      	ldr	r3, [pc, #168]	@ (800ff68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800febe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fec0:	0a5b      	lsrs	r3, r3, #9
 800fec2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fec6:	ee07 3a90 	vmov	s15, r3
 800feca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fece:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fed2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fed6:	edd7 6a07 	vldr	s13, [r7, #28]
 800feda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fede:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fee2:	ee17 2a90 	vmov	r2, s15
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800feea:	4b1f      	ldr	r3, [pc, #124]	@ (800ff68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800feec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800feee:	0c1b      	lsrs	r3, r3, #16
 800fef0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fef4:	ee07 3a90 	vmov	s15, r3
 800fef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fefc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ff00:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ff04:	edd7 6a07 	vldr	s13, [r7, #28]
 800ff08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ff10:	ee17 2a90 	vmov	r2, s15
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ff18:	4b13      	ldr	r3, [pc, #76]	@ (800ff68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ff1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff1c:	0e1b      	lsrs	r3, r3, #24
 800ff1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ff22:	ee07 3a90 	vmov	s15, r3
 800ff26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ff2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ff32:	edd7 6a07 	vldr	s13, [r7, #28]
 800ff36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ff3e:	ee17 2a90 	vmov	r2, s15
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ff46:	e008      	b.n	800ff5a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	2200      	movs	r2, #0
 800ff52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2200      	movs	r2, #0
 800ff58:	609a      	str	r2, [r3, #8]
}
 800ff5a:	bf00      	nop
 800ff5c:	3724      	adds	r7, #36	@ 0x24
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff64:	4770      	bx	lr
 800ff66:	bf00      	nop
 800ff68:	58024400 	.word	0x58024400
 800ff6c:	03d09000 	.word	0x03d09000
 800ff70:	46000000 	.word	0x46000000
 800ff74:	4c742400 	.word	0x4c742400
 800ff78:	4a742400 	.word	0x4a742400
 800ff7c:	4bbebc20 	.word	0x4bbebc20

0800ff80 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ff80:	b480      	push	{r7}
 800ff82:	b089      	sub	sp, #36	@ 0x24
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ff88:	4ba0      	ldr	r3, [pc, #640]	@ (801020c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ff8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff8c:	f003 0303 	and.w	r3, r3, #3
 800ff90:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ff92:	4b9e      	ldr	r3, [pc, #632]	@ (801020c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ff94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff96:	091b      	lsrs	r3, r3, #4
 800ff98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ff9c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ff9e:	4b9b      	ldr	r3, [pc, #620]	@ (801020c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ffa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffa2:	f003 0301 	and.w	r3, r3, #1
 800ffa6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ffa8:	4b98      	ldr	r3, [pc, #608]	@ (801020c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ffaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ffac:	08db      	lsrs	r3, r3, #3
 800ffae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ffb2:	693a      	ldr	r2, [r7, #16]
 800ffb4:	fb02 f303 	mul.w	r3, r2, r3
 800ffb8:	ee07 3a90 	vmov	s15, r3
 800ffbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ffc0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ffc4:	697b      	ldr	r3, [r7, #20]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	f000 8111 	beq.w	80101ee <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ffcc:	69bb      	ldr	r3, [r7, #24]
 800ffce:	2b02      	cmp	r3, #2
 800ffd0:	f000 8083 	beq.w	80100da <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ffd4:	69bb      	ldr	r3, [r7, #24]
 800ffd6:	2b02      	cmp	r3, #2
 800ffd8:	f200 80a1 	bhi.w	801011e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ffdc:	69bb      	ldr	r3, [r7, #24]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d003      	beq.n	800ffea <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ffe2:	69bb      	ldr	r3, [r7, #24]
 800ffe4:	2b01      	cmp	r3, #1
 800ffe6:	d056      	beq.n	8010096 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ffe8:	e099      	b.n	801011e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ffea:	4b88      	ldr	r3, [pc, #544]	@ (801020c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	f003 0320 	and.w	r3, r3, #32
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d02d      	beq.n	8010052 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fff6:	4b85      	ldr	r3, [pc, #532]	@ (801020c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	08db      	lsrs	r3, r3, #3
 800fffc:	f003 0303 	and.w	r3, r3, #3
 8010000:	4a83      	ldr	r2, [pc, #524]	@ (8010210 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8010002:	fa22 f303 	lsr.w	r3, r2, r3
 8010006:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010008:	68bb      	ldr	r3, [r7, #8]
 801000a:	ee07 3a90 	vmov	s15, r3
 801000e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010012:	697b      	ldr	r3, [r7, #20]
 8010014:	ee07 3a90 	vmov	s15, r3
 8010018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801001c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010020:	4b7a      	ldr	r3, [pc, #488]	@ (801020c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010028:	ee07 3a90 	vmov	s15, r3
 801002c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010030:	ed97 6a03 	vldr	s12, [r7, #12]
 8010034:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8010214 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010038:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801003c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010040:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010044:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010048:	ee67 7a27 	vmul.f32	s15, s14, s15
 801004c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010050:	e087      	b.n	8010162 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010052:	697b      	ldr	r3, [r7, #20]
 8010054:	ee07 3a90 	vmov	s15, r3
 8010058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801005c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8010218 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8010060:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010064:	4b69      	ldr	r3, [pc, #420]	@ (801020c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801006c:	ee07 3a90 	vmov	s15, r3
 8010070:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010074:	ed97 6a03 	vldr	s12, [r7, #12]
 8010078:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8010214 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801007c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010080:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010084:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010088:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801008c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010090:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010094:	e065      	b.n	8010162 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010096:	697b      	ldr	r3, [r7, #20]
 8010098:	ee07 3a90 	vmov	s15, r3
 801009c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80100a0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 801021c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80100a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80100a8:	4b58      	ldr	r3, [pc, #352]	@ (801020c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80100aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80100ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80100b0:	ee07 3a90 	vmov	s15, r3
 80100b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80100b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80100bc:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8010214 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80100c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80100c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80100c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80100cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80100d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80100d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80100d8:	e043      	b.n	8010162 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80100da:	697b      	ldr	r3, [r7, #20]
 80100dc:	ee07 3a90 	vmov	s15, r3
 80100e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80100e4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8010220 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80100e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80100ec:	4b47      	ldr	r3, [pc, #284]	@ (801020c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80100ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80100f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80100f4:	ee07 3a90 	vmov	s15, r3
 80100f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80100fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8010100:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8010214 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010104:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010108:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801010c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010110:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010118:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801011c:	e021      	b.n	8010162 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801011e:	697b      	ldr	r3, [r7, #20]
 8010120:	ee07 3a90 	vmov	s15, r3
 8010124:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010128:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8010218 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801012c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010130:	4b36      	ldr	r3, [pc, #216]	@ (801020c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010134:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010138:	ee07 3a90 	vmov	s15, r3
 801013c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010140:	ed97 6a03 	vldr	s12, [r7, #12]
 8010144:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8010214 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010148:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801014c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010150:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010154:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010158:	ee67 7a27 	vmul.f32	s15, s14, s15
 801015c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010160:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8010162:	4b2a      	ldr	r3, [pc, #168]	@ (801020c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010166:	0a5b      	lsrs	r3, r3, #9
 8010168:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801016c:	ee07 3a90 	vmov	s15, r3
 8010170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010174:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010178:	ee37 7a87 	vadd.f32	s14, s15, s14
 801017c:	edd7 6a07 	vldr	s13, [r7, #28]
 8010180:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010188:	ee17 2a90 	vmov	r2, s15
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8010190:	4b1e      	ldr	r3, [pc, #120]	@ (801020c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010194:	0c1b      	lsrs	r3, r3, #16
 8010196:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801019a:	ee07 3a90 	vmov	s15, r3
 801019e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80101a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80101a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80101aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80101ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80101b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80101b6:	ee17 2a90 	vmov	r2, s15
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80101be:	4b13      	ldr	r3, [pc, #76]	@ (801020c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80101c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80101c2:	0e1b      	lsrs	r3, r3, #24
 80101c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80101c8:	ee07 3a90 	vmov	s15, r3
 80101cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80101d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80101d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80101d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80101dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80101e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80101e4:	ee17 2a90 	vmov	r2, s15
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80101ec:	e008      	b.n	8010200 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	2200      	movs	r2, #0
 80101f2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	2200      	movs	r2, #0
 80101f8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	2200      	movs	r2, #0
 80101fe:	609a      	str	r2, [r3, #8]
}
 8010200:	bf00      	nop
 8010202:	3724      	adds	r7, #36	@ 0x24
 8010204:	46bd      	mov	sp, r7
 8010206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020a:	4770      	bx	lr
 801020c:	58024400 	.word	0x58024400
 8010210:	03d09000 	.word	0x03d09000
 8010214:	46000000 	.word	0x46000000
 8010218:	4c742400 	.word	0x4c742400
 801021c:	4a742400 	.word	0x4a742400
 8010220:	4bbebc20 	.word	0x4bbebc20

08010224 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8010224:	b580      	push	{r7, lr}
 8010226:	b084      	sub	sp, #16
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]
 801022c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801022e:	2300      	movs	r3, #0
 8010230:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010232:	4b53      	ldr	r3, [pc, #332]	@ (8010380 <RCCEx_PLL2_Config+0x15c>)
 8010234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010236:	f003 0303 	and.w	r3, r3, #3
 801023a:	2b03      	cmp	r3, #3
 801023c:	d101      	bne.n	8010242 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801023e:	2301      	movs	r3, #1
 8010240:	e099      	b.n	8010376 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8010242:	4b4f      	ldr	r3, [pc, #316]	@ (8010380 <RCCEx_PLL2_Config+0x15c>)
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	4a4e      	ldr	r2, [pc, #312]	@ (8010380 <RCCEx_PLL2_Config+0x15c>)
 8010248:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801024c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801024e:	f7fa f823 	bl	800a298 <HAL_GetTick>
 8010252:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010254:	e008      	b.n	8010268 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010256:	f7fa f81f 	bl	800a298 <HAL_GetTick>
 801025a:	4602      	mov	r2, r0
 801025c:	68bb      	ldr	r3, [r7, #8]
 801025e:	1ad3      	subs	r3, r2, r3
 8010260:	2b02      	cmp	r3, #2
 8010262:	d901      	bls.n	8010268 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010264:	2303      	movs	r3, #3
 8010266:	e086      	b.n	8010376 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010268:	4b45      	ldr	r3, [pc, #276]	@ (8010380 <RCCEx_PLL2_Config+0x15c>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010270:	2b00      	cmp	r3, #0
 8010272:	d1f0      	bne.n	8010256 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8010274:	4b42      	ldr	r3, [pc, #264]	@ (8010380 <RCCEx_PLL2_Config+0x15c>)
 8010276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010278:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	031b      	lsls	r3, r3, #12
 8010282:	493f      	ldr	r1, [pc, #252]	@ (8010380 <RCCEx_PLL2_Config+0x15c>)
 8010284:	4313      	orrs	r3, r2
 8010286:	628b      	str	r3, [r1, #40]	@ 0x28
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	685b      	ldr	r3, [r3, #4]
 801028c:	3b01      	subs	r3, #1
 801028e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	689b      	ldr	r3, [r3, #8]
 8010296:	3b01      	subs	r3, #1
 8010298:	025b      	lsls	r3, r3, #9
 801029a:	b29b      	uxth	r3, r3
 801029c:	431a      	orrs	r2, r3
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	68db      	ldr	r3, [r3, #12]
 80102a2:	3b01      	subs	r3, #1
 80102a4:	041b      	lsls	r3, r3, #16
 80102a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80102aa:	431a      	orrs	r2, r3
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	691b      	ldr	r3, [r3, #16]
 80102b0:	3b01      	subs	r3, #1
 80102b2:	061b      	lsls	r3, r3, #24
 80102b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80102b8:	4931      	ldr	r1, [pc, #196]	@ (8010380 <RCCEx_PLL2_Config+0x15c>)
 80102ba:	4313      	orrs	r3, r2
 80102bc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80102be:	4b30      	ldr	r3, [pc, #192]	@ (8010380 <RCCEx_PLL2_Config+0x15c>)
 80102c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	695b      	ldr	r3, [r3, #20]
 80102ca:	492d      	ldr	r1, [pc, #180]	@ (8010380 <RCCEx_PLL2_Config+0x15c>)
 80102cc:	4313      	orrs	r3, r2
 80102ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80102d0:	4b2b      	ldr	r3, [pc, #172]	@ (8010380 <RCCEx_PLL2_Config+0x15c>)
 80102d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102d4:	f023 0220 	bic.w	r2, r3, #32
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	699b      	ldr	r3, [r3, #24]
 80102dc:	4928      	ldr	r1, [pc, #160]	@ (8010380 <RCCEx_PLL2_Config+0x15c>)
 80102de:	4313      	orrs	r3, r2
 80102e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80102e2:	4b27      	ldr	r3, [pc, #156]	@ (8010380 <RCCEx_PLL2_Config+0x15c>)
 80102e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102e6:	4a26      	ldr	r2, [pc, #152]	@ (8010380 <RCCEx_PLL2_Config+0x15c>)
 80102e8:	f023 0310 	bic.w	r3, r3, #16
 80102ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80102ee:	4b24      	ldr	r3, [pc, #144]	@ (8010380 <RCCEx_PLL2_Config+0x15c>)
 80102f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80102f2:	4b24      	ldr	r3, [pc, #144]	@ (8010384 <RCCEx_PLL2_Config+0x160>)
 80102f4:	4013      	ands	r3, r2
 80102f6:	687a      	ldr	r2, [r7, #4]
 80102f8:	69d2      	ldr	r2, [r2, #28]
 80102fa:	00d2      	lsls	r2, r2, #3
 80102fc:	4920      	ldr	r1, [pc, #128]	@ (8010380 <RCCEx_PLL2_Config+0x15c>)
 80102fe:	4313      	orrs	r3, r2
 8010300:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8010302:	4b1f      	ldr	r3, [pc, #124]	@ (8010380 <RCCEx_PLL2_Config+0x15c>)
 8010304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010306:	4a1e      	ldr	r2, [pc, #120]	@ (8010380 <RCCEx_PLL2_Config+0x15c>)
 8010308:	f043 0310 	orr.w	r3, r3, #16
 801030c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801030e:	683b      	ldr	r3, [r7, #0]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d106      	bne.n	8010322 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8010314:	4b1a      	ldr	r3, [pc, #104]	@ (8010380 <RCCEx_PLL2_Config+0x15c>)
 8010316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010318:	4a19      	ldr	r2, [pc, #100]	@ (8010380 <RCCEx_PLL2_Config+0x15c>)
 801031a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801031e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010320:	e00f      	b.n	8010342 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8010322:	683b      	ldr	r3, [r7, #0]
 8010324:	2b01      	cmp	r3, #1
 8010326:	d106      	bne.n	8010336 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8010328:	4b15      	ldr	r3, [pc, #84]	@ (8010380 <RCCEx_PLL2_Config+0x15c>)
 801032a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801032c:	4a14      	ldr	r2, [pc, #80]	@ (8010380 <RCCEx_PLL2_Config+0x15c>)
 801032e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010332:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010334:	e005      	b.n	8010342 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8010336:	4b12      	ldr	r3, [pc, #72]	@ (8010380 <RCCEx_PLL2_Config+0x15c>)
 8010338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801033a:	4a11      	ldr	r2, [pc, #68]	@ (8010380 <RCCEx_PLL2_Config+0x15c>)
 801033c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010340:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8010342:	4b0f      	ldr	r3, [pc, #60]	@ (8010380 <RCCEx_PLL2_Config+0x15c>)
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	4a0e      	ldr	r2, [pc, #56]	@ (8010380 <RCCEx_PLL2_Config+0x15c>)
 8010348:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801034c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801034e:	f7f9 ffa3 	bl	800a298 <HAL_GetTick>
 8010352:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010354:	e008      	b.n	8010368 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8010356:	f7f9 ff9f 	bl	800a298 <HAL_GetTick>
 801035a:	4602      	mov	r2, r0
 801035c:	68bb      	ldr	r3, [r7, #8]
 801035e:	1ad3      	subs	r3, r2, r3
 8010360:	2b02      	cmp	r3, #2
 8010362:	d901      	bls.n	8010368 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8010364:	2303      	movs	r3, #3
 8010366:	e006      	b.n	8010376 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010368:	4b05      	ldr	r3, [pc, #20]	@ (8010380 <RCCEx_PLL2_Config+0x15c>)
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010370:	2b00      	cmp	r3, #0
 8010372:	d0f0      	beq.n	8010356 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8010374:	7bfb      	ldrb	r3, [r7, #15]
}
 8010376:	4618      	mov	r0, r3
 8010378:	3710      	adds	r7, #16
 801037a:	46bd      	mov	sp, r7
 801037c:	bd80      	pop	{r7, pc}
 801037e:	bf00      	nop
 8010380:	58024400 	.word	0x58024400
 8010384:	ffff0007 	.word	0xffff0007

08010388 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b084      	sub	sp, #16
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
 8010390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010392:	2300      	movs	r3, #0
 8010394:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010396:	4b53      	ldr	r3, [pc, #332]	@ (80104e4 <RCCEx_PLL3_Config+0x15c>)
 8010398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801039a:	f003 0303 	and.w	r3, r3, #3
 801039e:	2b03      	cmp	r3, #3
 80103a0:	d101      	bne.n	80103a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80103a2:	2301      	movs	r3, #1
 80103a4:	e099      	b.n	80104da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80103a6:	4b4f      	ldr	r3, [pc, #316]	@ (80104e4 <RCCEx_PLL3_Config+0x15c>)
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	4a4e      	ldr	r2, [pc, #312]	@ (80104e4 <RCCEx_PLL3_Config+0x15c>)
 80103ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80103b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80103b2:	f7f9 ff71 	bl	800a298 <HAL_GetTick>
 80103b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80103b8:	e008      	b.n	80103cc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80103ba:	f7f9 ff6d 	bl	800a298 <HAL_GetTick>
 80103be:	4602      	mov	r2, r0
 80103c0:	68bb      	ldr	r3, [r7, #8]
 80103c2:	1ad3      	subs	r3, r2, r3
 80103c4:	2b02      	cmp	r3, #2
 80103c6:	d901      	bls.n	80103cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80103c8:	2303      	movs	r3, #3
 80103ca:	e086      	b.n	80104da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80103cc:	4b45      	ldr	r3, [pc, #276]	@ (80104e4 <RCCEx_PLL3_Config+0x15c>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d1f0      	bne.n	80103ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80103d8:	4b42      	ldr	r3, [pc, #264]	@ (80104e4 <RCCEx_PLL3_Config+0x15c>)
 80103da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80103dc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	051b      	lsls	r3, r3, #20
 80103e6:	493f      	ldr	r1, [pc, #252]	@ (80104e4 <RCCEx_PLL3_Config+0x15c>)
 80103e8:	4313      	orrs	r3, r2
 80103ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	685b      	ldr	r3, [r3, #4]
 80103f0:	3b01      	subs	r3, #1
 80103f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	689b      	ldr	r3, [r3, #8]
 80103fa:	3b01      	subs	r3, #1
 80103fc:	025b      	lsls	r3, r3, #9
 80103fe:	b29b      	uxth	r3, r3
 8010400:	431a      	orrs	r2, r3
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	68db      	ldr	r3, [r3, #12]
 8010406:	3b01      	subs	r3, #1
 8010408:	041b      	lsls	r3, r3, #16
 801040a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801040e:	431a      	orrs	r2, r3
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	691b      	ldr	r3, [r3, #16]
 8010414:	3b01      	subs	r3, #1
 8010416:	061b      	lsls	r3, r3, #24
 8010418:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801041c:	4931      	ldr	r1, [pc, #196]	@ (80104e4 <RCCEx_PLL3_Config+0x15c>)
 801041e:	4313      	orrs	r3, r2
 8010420:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8010422:	4b30      	ldr	r3, [pc, #192]	@ (80104e4 <RCCEx_PLL3_Config+0x15c>)
 8010424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010426:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	695b      	ldr	r3, [r3, #20]
 801042e:	492d      	ldr	r1, [pc, #180]	@ (80104e4 <RCCEx_PLL3_Config+0x15c>)
 8010430:	4313      	orrs	r3, r2
 8010432:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8010434:	4b2b      	ldr	r3, [pc, #172]	@ (80104e4 <RCCEx_PLL3_Config+0x15c>)
 8010436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010438:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	699b      	ldr	r3, [r3, #24]
 8010440:	4928      	ldr	r1, [pc, #160]	@ (80104e4 <RCCEx_PLL3_Config+0x15c>)
 8010442:	4313      	orrs	r3, r2
 8010444:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8010446:	4b27      	ldr	r3, [pc, #156]	@ (80104e4 <RCCEx_PLL3_Config+0x15c>)
 8010448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801044a:	4a26      	ldr	r2, [pc, #152]	@ (80104e4 <RCCEx_PLL3_Config+0x15c>)
 801044c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010450:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8010452:	4b24      	ldr	r3, [pc, #144]	@ (80104e4 <RCCEx_PLL3_Config+0x15c>)
 8010454:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010456:	4b24      	ldr	r3, [pc, #144]	@ (80104e8 <RCCEx_PLL3_Config+0x160>)
 8010458:	4013      	ands	r3, r2
 801045a:	687a      	ldr	r2, [r7, #4]
 801045c:	69d2      	ldr	r2, [r2, #28]
 801045e:	00d2      	lsls	r2, r2, #3
 8010460:	4920      	ldr	r1, [pc, #128]	@ (80104e4 <RCCEx_PLL3_Config+0x15c>)
 8010462:	4313      	orrs	r3, r2
 8010464:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8010466:	4b1f      	ldr	r3, [pc, #124]	@ (80104e4 <RCCEx_PLL3_Config+0x15c>)
 8010468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801046a:	4a1e      	ldr	r2, [pc, #120]	@ (80104e4 <RCCEx_PLL3_Config+0x15c>)
 801046c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010470:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8010472:	683b      	ldr	r3, [r7, #0]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d106      	bne.n	8010486 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8010478:	4b1a      	ldr	r3, [pc, #104]	@ (80104e4 <RCCEx_PLL3_Config+0x15c>)
 801047a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801047c:	4a19      	ldr	r2, [pc, #100]	@ (80104e4 <RCCEx_PLL3_Config+0x15c>)
 801047e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8010482:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010484:	e00f      	b.n	80104a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8010486:	683b      	ldr	r3, [r7, #0]
 8010488:	2b01      	cmp	r3, #1
 801048a:	d106      	bne.n	801049a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801048c:	4b15      	ldr	r3, [pc, #84]	@ (80104e4 <RCCEx_PLL3_Config+0x15c>)
 801048e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010490:	4a14      	ldr	r2, [pc, #80]	@ (80104e4 <RCCEx_PLL3_Config+0x15c>)
 8010492:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8010496:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8010498:	e005      	b.n	80104a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801049a:	4b12      	ldr	r3, [pc, #72]	@ (80104e4 <RCCEx_PLL3_Config+0x15c>)
 801049c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801049e:	4a11      	ldr	r2, [pc, #68]	@ (80104e4 <RCCEx_PLL3_Config+0x15c>)
 80104a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80104a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80104a6:	4b0f      	ldr	r3, [pc, #60]	@ (80104e4 <RCCEx_PLL3_Config+0x15c>)
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	4a0e      	ldr	r2, [pc, #56]	@ (80104e4 <RCCEx_PLL3_Config+0x15c>)
 80104ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80104b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80104b2:	f7f9 fef1 	bl	800a298 <HAL_GetTick>
 80104b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80104b8:	e008      	b.n	80104cc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80104ba:	f7f9 feed 	bl	800a298 <HAL_GetTick>
 80104be:	4602      	mov	r2, r0
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	1ad3      	subs	r3, r2, r3
 80104c4:	2b02      	cmp	r3, #2
 80104c6:	d901      	bls.n	80104cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80104c8:	2303      	movs	r3, #3
 80104ca:	e006      	b.n	80104da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80104cc:	4b05      	ldr	r3, [pc, #20]	@ (80104e4 <RCCEx_PLL3_Config+0x15c>)
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d0f0      	beq.n	80104ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80104d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80104da:	4618      	mov	r0, r3
 80104dc:	3710      	adds	r7, #16
 80104de:	46bd      	mov	sp, r7
 80104e0:	bd80      	pop	{r7, pc}
 80104e2:	bf00      	nop
 80104e4:	58024400 	.word	0x58024400
 80104e8:	ffff0007 	.word	0xffff0007

080104ec <LL_ADC_REG_SetSequencerLength>:
{
 80104ec:	b480      	push	{r7}
 80104ee:	b083      	sub	sp, #12
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
 80104f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80104fa:	f023 020f 	bic.w	r2, r3, #15
 80104fe:	683b      	ldr	r3, [r7, #0]
 8010500:	431a      	orrs	r2, r3
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8010506:	bf00      	nop
 8010508:	370c      	adds	r7, #12
 801050a:	46bd      	mov	sp, r7
 801050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010510:	4770      	bx	lr

08010512 <LL_ADC_IsEnabled>:
{
 8010512:	b480      	push	{r7}
 8010514:	b083      	sub	sp, #12
 8010516:	af00      	add	r7, sp, #0
 8010518:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	689b      	ldr	r3, [r3, #8]
 801051e:	f003 0301 	and.w	r3, r3, #1
 8010522:	2b01      	cmp	r3, #1
 8010524:	d101      	bne.n	801052a <LL_ADC_IsEnabled+0x18>
 8010526:	2301      	movs	r3, #1
 8010528:	e000      	b.n	801052c <LL_ADC_IsEnabled+0x1a>
 801052a:	2300      	movs	r3, #0
}
 801052c:	4618      	mov	r0, r3
 801052e:	370c      	adds	r7, #12
 8010530:	46bd      	mov	sp, r7
 8010532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010536:	4770      	bx	lr

08010538 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8010538:	b590      	push	{r4, r7, lr}
 801053a:	b085      	sub	sp, #20
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
 8010540:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8010542:	2300      	movs	r3, #0
 8010544:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	4a22      	ldr	r2, [pc, #136]	@ (80105d4 <LL_ADC_CommonInit+0x9c>)
 801054a:	4293      	cmp	r3, r2
 801054c:	d10e      	bne.n	801056c <LL_ADC_CommonInit+0x34>
 801054e:	4822      	ldr	r0, [pc, #136]	@ (80105d8 <LL_ADC_CommonInit+0xa0>)
 8010550:	f7ff ffdf 	bl	8010512 <LL_ADC_IsEnabled>
 8010554:	4604      	mov	r4, r0
 8010556:	4821      	ldr	r0, [pc, #132]	@ (80105dc <LL_ADC_CommonInit+0xa4>)
 8010558:	f7ff ffdb 	bl	8010512 <LL_ADC_IsEnabled>
 801055c:	4603      	mov	r3, r0
 801055e:	4323      	orrs	r3, r4
 8010560:	2b00      	cmp	r3, #0
 8010562:	bf0c      	ite	eq
 8010564:	2301      	moveq	r3, #1
 8010566:	2300      	movne	r3, #0
 8010568:	b2db      	uxtb	r3, r3
 801056a:	e008      	b.n	801057e <LL_ADC_CommonInit+0x46>
 801056c:	481c      	ldr	r0, [pc, #112]	@ (80105e0 <LL_ADC_CommonInit+0xa8>)
 801056e:	f7ff ffd0 	bl	8010512 <LL_ADC_IsEnabled>
 8010572:	4603      	mov	r3, r0
 8010574:	2b00      	cmp	r3, #0
 8010576:	bf0c      	ite	eq
 8010578:	2301      	moveq	r3, #1
 801057a:	2300      	movne	r3, #0
 801057c:	b2db      	uxtb	r3, r3
 801057e:	2b00      	cmp	r3, #0
 8010580:	d020      	beq.n	80105c4 <LL_ADC_CommonInit+0x8c>
    /*  - multimode (if several ADC instances available on the                */
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8010582:	683b      	ldr	r3, [r7, #0]
 8010584:	685b      	ldr	r3, [r3, #4]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d012      	beq.n	80105b0 <LL_ADC_CommonInit+0x78>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	689a      	ldr	r2, [r3, #8]
 801058e:	4b15      	ldr	r3, [pc, #84]	@ (80105e4 <LL_ADC_CommonInit+0xac>)
 8010590:	4013      	ands	r3, r2
 8010592:	683a      	ldr	r2, [r7, #0]
 8010594:	6811      	ldr	r1, [r2, #0]
 8010596:	683a      	ldr	r2, [r7, #0]
 8010598:	6852      	ldr	r2, [r2, #4]
 801059a:	4311      	orrs	r1, r2
 801059c:	683a      	ldr	r2, [r7, #0]
 801059e:	6892      	ldr	r2, [r2, #8]
 80105a0:	4311      	orrs	r1, r2
 80105a2:	683a      	ldr	r2, [r7, #0]
 80105a4:	68d2      	ldr	r2, [r2, #12]
 80105a6:	430a      	orrs	r2, r1
 80105a8:	431a      	orrs	r2, r3
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	609a      	str	r2, [r3, #8]
 80105ae:	e00b      	b.n	80105c8 <LL_ADC_CommonInit+0x90>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	689a      	ldr	r2, [r3, #8]
 80105b4:	4b0b      	ldr	r3, [pc, #44]	@ (80105e4 <LL_ADC_CommonInit+0xac>)
 80105b6:	4013      	ands	r3, r2
 80105b8:	683a      	ldr	r2, [r7, #0]
 80105ba:	6812      	ldr	r2, [r2, #0]
 80105bc:	431a      	orrs	r2, r3
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	609a      	str	r2, [r3, #8]
 80105c2:	e001      	b.n	80105c8 <LL_ADC_CommonInit+0x90>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80105c4:	2301      	movs	r3, #1
 80105c6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80105c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80105ca:	4618      	mov	r0, r3
 80105cc:	3714      	adds	r7, #20
 80105ce:	46bd      	mov	sp, r7
 80105d0:	bd90      	pop	{r4, r7, pc}
 80105d2:	bf00      	nop
 80105d4:	40022300 	.word	0x40022300
 80105d8:	40022000 	.word	0x40022000
 80105dc:	40022100 	.word	0x40022100
 80105e0:	58026000 	.word	0x58026000
 80105e4:	ffc030e0 	.word	0xffc030e0

080105e8 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b084      	sub	sp, #16
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
 80105f0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80105f2:	2300      	movs	r3, #0
 80105f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_LEFT_BIT_SHIFT(ADC_InitStruct->LeftBitShift));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 80105f6:	6878      	ldr	r0, [r7, #4]
 80105f8:	f7ff ff8b 	bl	8010512 <LL_ADC_IsEnabled>
 80105fc:	4603      	mov	r3, r0
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d115      	bne.n	801062e <LL_ADC_Init+0x46>
               ADC_InitStruct->Resolution
               | ADC_InitStruct->LowPowerMode
              );
    }
#else
    MODIFY_REG(ADCx->CFGR,
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	68da      	ldr	r2, [r3, #12]
 8010606:	4b0d      	ldr	r3, [pc, #52]	@ (801063c <LL_ADC_Init+0x54>)
 8010608:	4013      	ands	r3, r2
 801060a:	683a      	ldr	r2, [r7, #0]
 801060c:	6811      	ldr	r1, [r2, #0]
 801060e:	683a      	ldr	r2, [r7, #0]
 8010610:	6892      	ldr	r2, [r2, #8]
 8010612:	430a      	orrs	r2, r1
 8010614:	431a      	orrs	r2, r3
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	60da      	str	r2, [r3, #12]
               ADC_InitStruct->Resolution
               | ADC_InitStruct->LowPowerMode
              );
#endif

    MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_LSHIFT, ADC_InitStruct->LeftBitShift);
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	691b      	ldr	r3, [r3, #16]
 801061e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8010622:	683b      	ldr	r3, [r7, #0]
 8010624:	685b      	ldr	r3, [r3, #4]
 8010626:	431a      	orrs	r2, r3
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	611a      	str	r2, [r3, #16]
 801062c:	e001      	b.n	8010632 <LL_ADC_Init+0x4a>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 801062e:	2301      	movs	r3, #1
 8010630:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8010632:	7bfb      	ldrb	r3, [r7, #15]
}
 8010634:	4618      	mov	r0, r3
 8010636:	3710      	adds	r7, #16
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}
 801063c:	ffffbfe3 	.word	0xffffbfe3

08010640 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8010640:	b580      	push	{r7, lr}
 8010642:	b084      	sub	sp, #16
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
 8010648:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 801064a:	2300      	movs	r3, #0
 801064c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DATA_TRANSFER_MODE(ADC_REG_InitStruct->DataTransferMode));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 801064e:	6878      	ldr	r0, [r7, #4]
 8010650:	f7ff ff5f 	bl	8010512 <LL_ADC_IsEnabled>
 8010654:	4603      	mov	r3, r0
 8010656:	2b00      	cmp	r3, #0
 8010658:	d132      	bne.n	80106c0 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 801065a:	683b      	ldr	r3, [r7, #0]
 801065c:	685b      	ldr	r3, [r3, #4]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d015      	beq.n	801068e <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	68da      	ldr	r2, [r3, #12]
 8010666:	4b1a      	ldr	r3, [pc, #104]	@ (80106d0 <LL_ADC_REG_Init+0x90>)
 8010668:	4013      	ands	r3, r2
 801066a:	683a      	ldr	r2, [r7, #0]
 801066c:	6811      	ldr	r1, [r2, #0]
 801066e:	683a      	ldr	r2, [r7, #0]
 8010670:	6892      	ldr	r2, [r2, #8]
 8010672:	4311      	orrs	r1, r2
 8010674:	683a      	ldr	r2, [r7, #0]
 8010676:	68d2      	ldr	r2, [r2, #12]
 8010678:	4311      	orrs	r1, r2
 801067a:	683a      	ldr	r2, [r7, #0]
 801067c:	6912      	ldr	r2, [r2, #16]
 801067e:	4311      	orrs	r1, r2
 8010680:	683a      	ldr	r2, [r7, #0]
 8010682:	6952      	ldr	r2, [r2, #20]
 8010684:	430a      	orrs	r2, r1
 8010686:	431a      	orrs	r2, r3
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	60da      	str	r2, [r3, #12]
 801068c:	e011      	b.n	80106b2 <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	68da      	ldr	r2, [r3, #12]
 8010692:	4b0f      	ldr	r3, [pc, #60]	@ (80106d0 <LL_ADC_REG_Init+0x90>)
 8010694:	4013      	ands	r3, r2
 8010696:	683a      	ldr	r2, [r7, #0]
 8010698:	6811      	ldr	r1, [r2, #0]
 801069a:	683a      	ldr	r2, [r7, #0]
 801069c:	68d2      	ldr	r2, [r2, #12]
 801069e:	4311      	orrs	r1, r2
 80106a0:	683a      	ldr	r2, [r7, #0]
 80106a2:	6912      	ldr	r2, [r2, #16]
 80106a4:	4311      	orrs	r1, r2
 80106a6:	683a      	ldr	r2, [r7, #0]
 80106a8:	6952      	ldr	r2, [r2, #20]
 80106aa:	430a      	orrs	r2, r1
 80106ac:	431a      	orrs	r2, r3
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80106b2:	683b      	ldr	r3, [r7, #0]
 80106b4:	685b      	ldr	r3, [r3, #4]
 80106b6:	4619      	mov	r1, r3
 80106b8:	6878      	ldr	r0, [r7, #4]
 80106ba:	f7ff ff17 	bl	80104ec <LL_ADC_REG_SetSequencerLength>
 80106be:	e001      	b.n	80106c4 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80106c0:	2301      	movs	r3, #1
 80106c2:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80106c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80106c6:	4618      	mov	r0, r3
 80106c8:	3710      	adds	r7, #16
 80106ca:	46bd      	mov	sp, r7
 80106cc:	bd80      	pop	{r7, pc}
 80106ce:	bf00      	nop
 80106d0:	fff0c01c 	.word	0xfff0c01c

080106d4 <LL_GPIO_SetPinMode>:
{
 80106d4:	b480      	push	{r7}
 80106d6:	b085      	sub	sp, #20
 80106d8:	af00      	add	r7, sp, #0
 80106da:	60f8      	str	r0, [r7, #12]
 80106dc:	60b9      	str	r1, [r7, #8]
 80106de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	6819      	ldr	r1, [r3, #0]
 80106e4:	68bb      	ldr	r3, [r7, #8]
 80106e6:	fb03 f203 	mul.w	r2, r3, r3
 80106ea:	4613      	mov	r3, r2
 80106ec:	005b      	lsls	r3, r3, #1
 80106ee:	4413      	add	r3, r2
 80106f0:	43db      	mvns	r3, r3
 80106f2:	ea01 0203 	and.w	r2, r1, r3
 80106f6:	68bb      	ldr	r3, [r7, #8]
 80106f8:	fb03 f303 	mul.w	r3, r3, r3
 80106fc:	6879      	ldr	r1, [r7, #4]
 80106fe:	fb01 f303 	mul.w	r3, r1, r3
 8010702:	431a      	orrs	r2, r3
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	601a      	str	r2, [r3, #0]
}
 8010708:	bf00      	nop
 801070a:	3714      	adds	r7, #20
 801070c:	46bd      	mov	sp, r7
 801070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010712:	4770      	bx	lr

08010714 <LL_GPIO_SetPinOutputType>:
{
 8010714:	b480      	push	{r7}
 8010716:	b085      	sub	sp, #20
 8010718:	af00      	add	r7, sp, #0
 801071a:	60f8      	str	r0, [r7, #12]
 801071c:	60b9      	str	r1, [r7, #8]
 801071e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	685a      	ldr	r2, [r3, #4]
 8010724:	68bb      	ldr	r3, [r7, #8]
 8010726:	43db      	mvns	r3, r3
 8010728:	401a      	ands	r2, r3
 801072a:	68bb      	ldr	r3, [r7, #8]
 801072c:	6879      	ldr	r1, [r7, #4]
 801072e:	fb01 f303 	mul.w	r3, r1, r3
 8010732:	431a      	orrs	r2, r3
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	605a      	str	r2, [r3, #4]
}
 8010738:	bf00      	nop
 801073a:	3714      	adds	r7, #20
 801073c:	46bd      	mov	sp, r7
 801073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010742:	4770      	bx	lr

08010744 <LL_GPIO_SetPinSpeed>:
{
 8010744:	b480      	push	{r7}
 8010746:	b085      	sub	sp, #20
 8010748:	af00      	add	r7, sp, #0
 801074a:	60f8      	str	r0, [r7, #12]
 801074c:	60b9      	str	r1, [r7, #8]
 801074e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	6899      	ldr	r1, [r3, #8]
 8010754:	68bb      	ldr	r3, [r7, #8]
 8010756:	fb03 f203 	mul.w	r2, r3, r3
 801075a:	4613      	mov	r3, r2
 801075c:	005b      	lsls	r3, r3, #1
 801075e:	4413      	add	r3, r2
 8010760:	43db      	mvns	r3, r3
 8010762:	ea01 0203 	and.w	r2, r1, r3
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	fb03 f303 	mul.w	r3, r3, r3
 801076c:	6879      	ldr	r1, [r7, #4]
 801076e:	fb01 f303 	mul.w	r3, r1, r3
 8010772:	431a      	orrs	r2, r3
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	609a      	str	r2, [r3, #8]
}
 8010778:	bf00      	nop
 801077a:	3714      	adds	r7, #20
 801077c:	46bd      	mov	sp, r7
 801077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010782:	4770      	bx	lr

08010784 <LL_GPIO_SetPinPull>:
{
 8010784:	b480      	push	{r7}
 8010786:	b085      	sub	sp, #20
 8010788:	af00      	add	r7, sp, #0
 801078a:	60f8      	str	r0, [r7, #12]
 801078c:	60b9      	str	r1, [r7, #8]
 801078e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	68d9      	ldr	r1, [r3, #12]
 8010794:	68bb      	ldr	r3, [r7, #8]
 8010796:	fb03 f203 	mul.w	r2, r3, r3
 801079a:	4613      	mov	r3, r2
 801079c:	005b      	lsls	r3, r3, #1
 801079e:	4413      	add	r3, r2
 80107a0:	43db      	mvns	r3, r3
 80107a2:	ea01 0203 	and.w	r2, r1, r3
 80107a6:	68bb      	ldr	r3, [r7, #8]
 80107a8:	fb03 f303 	mul.w	r3, r3, r3
 80107ac:	6879      	ldr	r1, [r7, #4]
 80107ae:	fb01 f303 	mul.w	r3, r1, r3
 80107b2:	431a      	orrs	r2, r3
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	60da      	str	r2, [r3, #12]
}
 80107b8:	bf00      	nop
 80107ba:	3714      	adds	r7, #20
 80107bc:	46bd      	mov	sp, r7
 80107be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c2:	4770      	bx	lr

080107c4 <LL_GPIO_SetAFPin_0_7>:
{
 80107c4:	b480      	push	{r7}
 80107c6:	b085      	sub	sp, #20
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	60f8      	str	r0, [r7, #12]
 80107cc:	60b9      	str	r1, [r7, #8]
 80107ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	6a19      	ldr	r1, [r3, #32]
 80107d4:	68bb      	ldr	r3, [r7, #8]
 80107d6:	fb03 f303 	mul.w	r3, r3, r3
 80107da:	68ba      	ldr	r2, [r7, #8]
 80107dc:	fb02 f303 	mul.w	r3, r2, r3
 80107e0:	68ba      	ldr	r2, [r7, #8]
 80107e2:	fb03 f202 	mul.w	r2, r3, r2
 80107e6:	4613      	mov	r3, r2
 80107e8:	011b      	lsls	r3, r3, #4
 80107ea:	1a9b      	subs	r3, r3, r2
 80107ec:	43db      	mvns	r3, r3
 80107ee:	ea01 0203 	and.w	r2, r1, r3
 80107f2:	68bb      	ldr	r3, [r7, #8]
 80107f4:	fb03 f303 	mul.w	r3, r3, r3
 80107f8:	68b9      	ldr	r1, [r7, #8]
 80107fa:	fb01 f303 	mul.w	r3, r1, r3
 80107fe:	68b9      	ldr	r1, [r7, #8]
 8010800:	fb01 f303 	mul.w	r3, r1, r3
 8010804:	6879      	ldr	r1, [r7, #4]
 8010806:	fb01 f303 	mul.w	r3, r1, r3
 801080a:	431a      	orrs	r2, r3
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	621a      	str	r2, [r3, #32]
}
 8010810:	bf00      	nop
 8010812:	3714      	adds	r7, #20
 8010814:	46bd      	mov	sp, r7
 8010816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081a:	4770      	bx	lr

0801081c <LL_GPIO_SetAFPin_8_15>:
{
 801081c:	b480      	push	{r7}
 801081e:	b085      	sub	sp, #20
 8010820:	af00      	add	r7, sp, #0
 8010822:	60f8      	str	r0, [r7, #12]
 8010824:	60b9      	str	r1, [r7, #8]
 8010826:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801082c:	68bb      	ldr	r3, [r7, #8]
 801082e:	0a1b      	lsrs	r3, r3, #8
 8010830:	68ba      	ldr	r2, [r7, #8]
 8010832:	0a12      	lsrs	r2, r2, #8
 8010834:	fb02 f303 	mul.w	r3, r2, r3
 8010838:	68ba      	ldr	r2, [r7, #8]
 801083a:	0a12      	lsrs	r2, r2, #8
 801083c:	fb02 f303 	mul.w	r3, r2, r3
 8010840:	68ba      	ldr	r2, [r7, #8]
 8010842:	0a12      	lsrs	r2, r2, #8
 8010844:	fb03 f202 	mul.w	r2, r3, r2
 8010848:	4613      	mov	r3, r2
 801084a:	011b      	lsls	r3, r3, #4
 801084c:	1a9b      	subs	r3, r3, r2
 801084e:	43db      	mvns	r3, r3
 8010850:	ea01 0203 	and.w	r2, r1, r3
 8010854:	68bb      	ldr	r3, [r7, #8]
 8010856:	0a1b      	lsrs	r3, r3, #8
 8010858:	68b9      	ldr	r1, [r7, #8]
 801085a:	0a09      	lsrs	r1, r1, #8
 801085c:	fb01 f303 	mul.w	r3, r1, r3
 8010860:	68b9      	ldr	r1, [r7, #8]
 8010862:	0a09      	lsrs	r1, r1, #8
 8010864:	fb01 f303 	mul.w	r3, r1, r3
 8010868:	68b9      	ldr	r1, [r7, #8]
 801086a:	0a09      	lsrs	r1, r1, #8
 801086c:	fb01 f303 	mul.w	r3, r1, r3
 8010870:	6879      	ldr	r1, [r7, #4]
 8010872:	fb01 f303 	mul.w	r3, r1, r3
 8010876:	431a      	orrs	r2, r3
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801087c:	bf00      	nop
 801087e:	3714      	adds	r7, #20
 8010880:	46bd      	mov	sp, r7
 8010882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010886:	4770      	bx	lr

08010888 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8010888:	b580      	push	{r7, lr}
 801088a:	b088      	sub	sp, #32
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
 8010890:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8010892:	683b      	ldr	r3, [r7, #0]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010898:	693b      	ldr	r3, [r7, #16]
 801089a:	fa93 f3a3 	rbit	r3, r3
 801089e:	60fb      	str	r3, [r7, #12]
  return result;
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80108a4:	697b      	ldr	r3, [r7, #20]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d101      	bne.n	80108ae <LL_GPIO_Init+0x26>
    return 32U;
 80108aa:	2320      	movs	r3, #32
 80108ac:	e003      	b.n	80108b6 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80108ae:	697b      	ldr	r3, [r7, #20]
 80108b0:	fab3 f383 	clz	r3, r3
 80108b4:	b2db      	uxtb	r3, r3
 80108b6:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80108b8:	e048      	b.n	801094c <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80108ba:	683b      	ldr	r3, [r7, #0]
 80108bc:	681a      	ldr	r2, [r3, #0]
 80108be:	2101      	movs	r1, #1
 80108c0:	69fb      	ldr	r3, [r7, #28]
 80108c2:	fa01 f303 	lsl.w	r3, r1, r3
 80108c6:	4013      	ands	r3, r2
 80108c8:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 80108ca:	69bb      	ldr	r3, [r7, #24]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d03a      	beq.n	8010946 <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80108d0:	683b      	ldr	r3, [r7, #0]
 80108d2:	685b      	ldr	r3, [r3, #4]
 80108d4:	2b01      	cmp	r3, #1
 80108d6:	d003      	beq.n	80108e0 <LL_GPIO_Init+0x58>
 80108d8:	683b      	ldr	r3, [r7, #0]
 80108da:	685b      	ldr	r3, [r3, #4]
 80108dc:	2b02      	cmp	r3, #2
 80108de:	d10e      	bne.n	80108fe <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80108e0:	683b      	ldr	r3, [r7, #0]
 80108e2:	689b      	ldr	r3, [r3, #8]
 80108e4:	461a      	mov	r2, r3
 80108e6:	69b9      	ldr	r1, [r7, #24]
 80108e8:	6878      	ldr	r0, [r7, #4]
 80108ea:	f7ff ff2b 	bl	8010744 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80108ee:	683b      	ldr	r3, [r7, #0]
 80108f0:	6819      	ldr	r1, [r3, #0]
 80108f2:	683b      	ldr	r3, [r7, #0]
 80108f4:	68db      	ldr	r3, [r3, #12]
 80108f6:	461a      	mov	r2, r3
 80108f8:	6878      	ldr	r0, [r7, #4]
 80108fa:	f7ff ff0b 	bl	8010714 <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80108fe:	683b      	ldr	r3, [r7, #0]
 8010900:	691b      	ldr	r3, [r3, #16]
 8010902:	461a      	mov	r2, r3
 8010904:	69b9      	ldr	r1, [r7, #24]
 8010906:	6878      	ldr	r0, [r7, #4]
 8010908:	f7ff ff3c 	bl	8010784 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	685b      	ldr	r3, [r3, #4]
 8010910:	2b02      	cmp	r3, #2
 8010912:	d111      	bne.n	8010938 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8010914:	69bb      	ldr	r3, [r7, #24]
 8010916:	2bff      	cmp	r3, #255	@ 0xff
 8010918:	d807      	bhi.n	801092a <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 801091a:	683b      	ldr	r3, [r7, #0]
 801091c:	695b      	ldr	r3, [r3, #20]
 801091e:	461a      	mov	r2, r3
 8010920:	69b9      	ldr	r1, [r7, #24]
 8010922:	6878      	ldr	r0, [r7, #4]
 8010924:	f7ff ff4e 	bl	80107c4 <LL_GPIO_SetAFPin_0_7>
 8010928:	e006      	b.n	8010938 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 801092a:	683b      	ldr	r3, [r7, #0]
 801092c:	695b      	ldr	r3, [r3, #20]
 801092e:	461a      	mov	r2, r3
 8010930:	69b9      	ldr	r1, [r7, #24]
 8010932:	6878      	ldr	r0, [r7, #4]
 8010934:	f7ff ff72 	bl	801081c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8010938:	683b      	ldr	r3, [r7, #0]
 801093a:	685b      	ldr	r3, [r3, #4]
 801093c:	461a      	mov	r2, r3
 801093e:	69b9      	ldr	r1, [r7, #24]
 8010940:	6878      	ldr	r0, [r7, #4]
 8010942:	f7ff fec7 	bl	80106d4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8010946:	69fb      	ldr	r3, [r7, #28]
 8010948:	3301      	adds	r3, #1
 801094a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 801094c:	683b      	ldr	r3, [r7, #0]
 801094e:	681a      	ldr	r2, [r3, #0]
 8010950:	69fb      	ldr	r3, [r7, #28]
 8010952:	fa22 f303 	lsr.w	r3, r2, r3
 8010956:	2b00      	cmp	r3, #0
 8010958:	d1af      	bne.n	80108ba <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 801095a:	2300      	movs	r3, #0
}
 801095c:	4618      	mov	r0, r3
 801095e:	3720      	adds	r7, #32
 8010960:	46bd      	mov	sp, r7
 8010962:	bd80      	pop	{r7, pc}

08010964 <LL_I2C_Enable>:
{
 8010964:	b480      	push	{r7}
 8010966:	b083      	sub	sp, #12
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	f043 0201 	orr.w	r2, r3, #1
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	601a      	str	r2, [r3, #0]
}
 8010978:	bf00      	nop
 801097a:	370c      	adds	r7, #12
 801097c:	46bd      	mov	sp, r7
 801097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010982:	4770      	bx	lr

08010984 <LL_I2C_Disable>:
{
 8010984:	b480      	push	{r7}
 8010986:	b083      	sub	sp, #12
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	f023 0201 	bic.w	r2, r3, #1
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	601a      	str	r2, [r3, #0]
}
 8010998:	bf00      	nop
 801099a:	370c      	adds	r7, #12
 801099c:	46bd      	mov	sp, r7
 801099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a2:	4770      	bx	lr

080109a4 <LL_I2C_ConfigFilters>:
{
 80109a4:	b480      	push	{r7}
 80109a6:	b085      	sub	sp, #20
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	60f8      	str	r0, [r7, #12]
 80109ac:	60b9      	str	r1, [r7, #8]
 80109ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	0219      	lsls	r1, r3, #8
 80109bc:	68bb      	ldr	r3, [r7, #8]
 80109be:	430b      	orrs	r3, r1
 80109c0:	431a      	orrs	r2, r3
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	601a      	str	r2, [r3, #0]
}
 80109c6:	bf00      	nop
 80109c8:	3714      	adds	r7, #20
 80109ca:	46bd      	mov	sp, r7
 80109cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d0:	4770      	bx	lr
	...

080109d4 <LL_I2C_SetOwnAddress1>:
{
 80109d4:	b480      	push	{r7}
 80109d6:	b085      	sub	sp, #20
 80109d8:	af00      	add	r7, sp, #0
 80109da:	60f8      	str	r0, [r7, #12]
 80109dc:	60b9      	str	r1, [r7, #8]
 80109de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	689a      	ldr	r2, [r3, #8]
 80109e4:	4b06      	ldr	r3, [pc, #24]	@ (8010a00 <LL_I2C_SetOwnAddress1+0x2c>)
 80109e6:	4013      	ands	r3, r2
 80109e8:	68b9      	ldr	r1, [r7, #8]
 80109ea:	687a      	ldr	r2, [r7, #4]
 80109ec:	430a      	orrs	r2, r1
 80109ee:	431a      	orrs	r2, r3
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	609a      	str	r2, [r3, #8]
}
 80109f4:	bf00      	nop
 80109f6:	3714      	adds	r7, #20
 80109f8:	46bd      	mov	sp, r7
 80109fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109fe:	4770      	bx	lr
 8010a00:	fffff800 	.word	0xfffff800

08010a04 <LL_I2C_EnableOwnAddress1>:
{
 8010a04:	b480      	push	{r7}
 8010a06:	b083      	sub	sp, #12
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	689b      	ldr	r3, [r3, #8]
 8010a10:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	609a      	str	r2, [r3, #8]
}
 8010a18:	bf00      	nop
 8010a1a:	370c      	adds	r7, #12
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a22:	4770      	bx	lr

08010a24 <LL_I2C_DisableOwnAddress1>:
{
 8010a24:	b480      	push	{r7}
 8010a26:	b083      	sub	sp, #12
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	689b      	ldr	r3, [r3, #8]
 8010a30:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	609a      	str	r2, [r3, #8]
}
 8010a38:	bf00      	nop
 8010a3a:	370c      	adds	r7, #12
 8010a3c:	46bd      	mov	sp, r7
 8010a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a42:	4770      	bx	lr

08010a44 <LL_I2C_SetTiming>:
{
 8010a44:	b480      	push	{r7}
 8010a46:	b083      	sub	sp, #12
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
 8010a4c:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	683a      	ldr	r2, [r7, #0]
 8010a52:	611a      	str	r2, [r3, #16]
}
 8010a54:	bf00      	nop
 8010a56:	370c      	adds	r7, #12
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5e:	4770      	bx	lr

08010a60 <LL_I2C_SetMode>:
{
 8010a60:	b480      	push	{r7}
 8010a62:	b083      	sub	sp, #12
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]
 8010a68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	431a      	orrs	r2, r3
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	601a      	str	r2, [r3, #0]
}
 8010a7a:	bf00      	nop
 8010a7c:	370c      	adds	r7, #12
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a84:	4770      	bx	lr

08010a86 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8010a86:	b480      	push	{r7}
 8010a88:	b083      	sub	sp, #12
 8010a8a:	af00      	add	r7, sp, #0
 8010a8c:	6078      	str	r0, [r7, #4]
 8010a8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	685b      	ldr	r3, [r3, #4]
 8010a94:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8010a98:	683b      	ldr	r3, [r7, #0]
 8010a9a:	431a      	orrs	r2, r3
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	605a      	str	r2, [r3, #4]
}
 8010aa0:	bf00      	nop
 8010aa2:	370c      	adds	r7, #12
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aaa:	4770      	bx	lr

08010aac <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b082      	sub	sp, #8
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]
 8010ab4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8010ab6:	6878      	ldr	r0, [r7, #4]
 8010ab8:	f7ff ff64 	bl	8010984 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8010abc:	683b      	ldr	r3, [r7, #0]
 8010abe:	6899      	ldr	r1, [r3, #8]
 8010ac0:	683b      	ldr	r3, [r7, #0]
 8010ac2:	68db      	ldr	r3, [r3, #12]
 8010ac4:	461a      	mov	r2, r3
 8010ac6:	6878      	ldr	r0, [r7, #4]
 8010ac8:	f7ff ff6c 	bl	80109a4 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8010acc:	683b      	ldr	r3, [r7, #0]
 8010ace:	685b      	ldr	r3, [r3, #4]
 8010ad0:	4619      	mov	r1, r3
 8010ad2:	6878      	ldr	r0, [r7, #4]
 8010ad4:	f7ff ffb6 	bl	8010a44 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8010ad8:	6878      	ldr	r0, [r7, #4]
 8010ada:	f7ff ff43 	bl	8010964 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8010ade:	6878      	ldr	r0, [r7, #4]
 8010ae0:	f7ff ffa0 	bl	8010a24 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8010ae4:	683b      	ldr	r3, [r7, #0]
 8010ae6:	6919      	ldr	r1, [r3, #16]
 8010ae8:	683b      	ldr	r3, [r7, #0]
 8010aea:	699b      	ldr	r3, [r3, #24]
 8010aec:	461a      	mov	r2, r3
 8010aee:	6878      	ldr	r0, [r7, #4]
 8010af0:	f7ff ff70 	bl	80109d4 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8010af4:	683b      	ldr	r3, [r7, #0]
 8010af6:	691b      	ldr	r3, [r3, #16]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d002      	beq.n	8010b02 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8010afc:	6878      	ldr	r0, [r7, #4]
 8010afe:	f7ff ff81 	bl	8010a04 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8010b02:	683b      	ldr	r3, [r7, #0]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	4619      	mov	r1, r3
 8010b08:	6878      	ldr	r0, [r7, #4]
 8010b0a:	f7ff ffa9 	bl	8010a60 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8010b0e:	683b      	ldr	r3, [r7, #0]
 8010b10:	695b      	ldr	r3, [r3, #20]
 8010b12:	4619      	mov	r1, r3
 8010b14:	6878      	ldr	r0, [r7, #4]
 8010b16:	f7ff ffb6 	bl	8010a86 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8010b1a:	2300      	movs	r3, #0
}
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	3708      	adds	r7, #8
 8010b20:	46bd      	mov	sp, r7
 8010b22:	bd80      	pop	{r7, pc}

08010b24 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8010b24:	b480      	push	{r7}
 8010b26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8010b28:	4b07      	ldr	r3, [pc, #28]	@ (8010b48 <LL_RCC_HSE_IsReady+0x24>)
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010b30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010b34:	d101      	bne.n	8010b3a <LL_RCC_HSE_IsReady+0x16>
 8010b36:	2301      	movs	r3, #1
 8010b38:	e000      	b.n	8010b3c <LL_RCC_HSE_IsReady+0x18>
 8010b3a:	2300      	movs	r3, #0
}
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b44:	4770      	bx	lr
 8010b46:	bf00      	nop
 8010b48:	58024400 	.word	0x58024400

08010b4c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8010b4c:	b480      	push	{r7}
 8010b4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8010b50:	4b06      	ldr	r3, [pc, #24]	@ (8010b6c <LL_RCC_HSI_IsReady+0x20>)
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	f003 0304 	and.w	r3, r3, #4
 8010b58:	2b04      	cmp	r3, #4
 8010b5a:	d101      	bne.n	8010b60 <LL_RCC_HSI_IsReady+0x14>
 8010b5c:	2301      	movs	r3, #1
 8010b5e:	e000      	b.n	8010b62 <LL_RCC_HSI_IsReady+0x16>
 8010b60:	2300      	movs	r3, #0
}
 8010b62:	4618      	mov	r0, r3
 8010b64:	46bd      	mov	sp, r7
 8010b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6a:	4770      	bx	lr
 8010b6c:	58024400 	.word	0x58024400

08010b70 <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV2
  *         @arg @ref LL_RCC_HSI_DIV4
  *         @arg @ref LL_RCC_HSI_DIV8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
 8010b70:	b480      	push	{r7}
 8010b72:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 8010b74:	4b04      	ldr	r3, [pc, #16]	@ (8010b88 <LL_RCC_HSI_GetDivider+0x18>)
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	f003 0318 	and.w	r3, r3, #24
}
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	46bd      	mov	sp, r7
 8010b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b84:	4770      	bx	lr
 8010b86:	bf00      	nop
 8010b88:	58024400 	.word	0x58024400

08010b8c <LL_RCC_CSI_IsReady>:
  * @brief  Check if CSI clock is ready
  * @rmtoll CR           CSIRDY        LL_RCC_CSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CSI_IsReady(void)
{
 8010b8c:	b480      	push	{r7}
 8010b8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY)) ? 1UL : 0UL);
 8010b90:	4b07      	ldr	r3, [pc, #28]	@ (8010bb0 <LL_RCC_CSI_IsReady+0x24>)
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010b98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010b9c:	d101      	bne.n	8010ba2 <LL_RCC_CSI_IsReady+0x16>
 8010b9e:	2301      	movs	r3, #1
 8010ba0:	e000      	b.n	8010ba4 <LL_RCC_CSI_IsReady+0x18>
 8010ba2:	2300      	movs	r3, #0
}
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bac:	4770      	bx	lr
 8010bae:	bf00      	nop
 8010bb0:	58024400 	.word	0x58024400

08010bb4 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8010bb4:	b480      	push	{r7}
 8010bb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8010bb8:	4b06      	ldr	r3, [pc, #24]	@ (8010bd4 <LL_RCC_LSE_IsReady+0x20>)
 8010bba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010bbc:	f003 0302 	and.w	r3, r3, #2
 8010bc0:	2b02      	cmp	r3, #2
 8010bc2:	d101      	bne.n	8010bc8 <LL_RCC_LSE_IsReady+0x14>
 8010bc4:	2301      	movs	r3, #1
 8010bc6:	e000      	b.n	8010bca <LL_RCC_LSE_IsReady+0x16>
 8010bc8:	2300      	movs	r3, #0
}
 8010bca:	4618      	mov	r0, r3
 8010bcc:	46bd      	mov	sp, r7
 8010bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd2:	4770      	bx	lr
 8010bd4:	58024400 	.word	0x58024400

08010bd8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_CSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL1
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8010bd8:	b480      	push	{r7}
 8010bda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8010bdc:	4b04      	ldr	r3, [pc, #16]	@ (8010bf0 <LL_RCC_GetSysClkSource+0x18>)
 8010bde:	691b      	ldr	r3, [r3, #16]
 8010be0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
}
 8010be4:	4618      	mov	r0, r3
 8010be6:	46bd      	mov	sp, r7
 8010be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bec:	4770      	bx	lr
 8010bee:	bf00      	nop
 8010bf0:	58024400 	.word	0x58024400

08010bf4 <LL_RCC_GetSysPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysPrescaler(void)
{
 8010bf4:	b480      	push	{r7}
 8010bf6:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1CPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1CPRE));
 8010bf8:	4b04      	ldr	r3, [pc, #16]	@ (8010c0c <LL_RCC_GetSysPrescaler+0x18>)
 8010bfa:	699b      	ldr	r3, [r3, #24]
 8010bfc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE));
#endif /* RCC_D1CFGR_D1CPRE */
}
 8010c00:	4618      	mov	r0, r3
 8010c02:	46bd      	mov	sp, r7
 8010c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c08:	4770      	bx	lr
 8010c0a:	bf00      	nop
 8010c0c:	58024400 	.word	0x58024400

08010c10 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_AHB_DIV_128
  *         @arg @ref LL_RCC_AHB_DIV_256
  *         @arg @ref LL_RCC_AHB_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8010c10:	b480      	push	{r7}
 8010c12:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_HPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 8010c14:	4b04      	ldr	r3, [pc, #16]	@ (8010c28 <LL_RCC_GetAHBPrescaler+0x18>)
 8010c16:	699b      	ldr	r3, [r3, #24]
 8010c18:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_HPRE));
#endif /* RCC_D1CFGR_HPRE */
}
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c24:	4770      	bx	lr
 8010c26:	bf00      	nop
 8010c28:	58024400 	.word	0x58024400

08010c2c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8010c2c:	b480      	push	{r7}
 8010c2e:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE1)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1));
 8010c30:	4b04      	ldr	r3, [pc, #16]	@ (8010c44 <LL_RCC_GetAPB1Prescaler+0x18>)
 8010c32:	69db      	ldr	r3, [r3, #28]
 8010c34:	f003 0370 	and.w	r3, r3, #112	@ 0x70
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1));
#endif /* RCC_D2CFGR_D2PPRE1 */
}
 8010c38:	4618      	mov	r0, r3
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c40:	4770      	bx	lr
 8010c42:	bf00      	nop
 8010c44:	58024400 	.word	0x58024400

08010c48 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8010c48:	b480      	push	{r7}
 8010c4a:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE2)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2));
 8010c4c:	4b04      	ldr	r3, [pc, #16]	@ (8010c60 <LL_RCC_GetAPB2Prescaler+0x18>)
 8010c4e:	69db      	ldr	r3, [r3, #28]
 8010c50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2));
#endif /* RCC_D2CFGR_D2PPRE2 */
}
 8010c54:	4618      	mov	r0, r3
 8010c56:	46bd      	mov	sp, r7
 8010c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5c:	4770      	bx	lr
 8010c5e:	bf00      	nop
 8010c60:	58024400 	.word	0x58024400

08010c64 <LL_RCC_GetClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_GetClockSource(uint32_t Periph)
{
 8010c64:	b480      	push	{r7}
 8010c66:	b085      	sub	sp, #20
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CCIPR_FMCSEL)
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->D1CCIPR) + LL_CLKSOURCE_REG(Periph)));
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	b2da      	uxtb	r2, r3
 8010c70:	4b0e      	ldr	r3, [pc, #56]	@ (8010cac <LL_RCC_GetClockSource+0x48>)
 8010c72:	4413      	add	r3, r2
 8010c74:	60fb      	str	r3, [r7, #12]
#else
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CDCCIPR) + LL_CLKSOURCE_REG(Periph)));
#endif /* RCC_D1CCIPR_FMCSEL */
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	681a      	ldr	r2, [r3, #0]
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	0e19      	lsrs	r1, r3, #24
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	0a1b      	lsrs	r3, r3, #8
 8010c82:	f003 031f 	and.w	r3, r3, #31
 8010c86:	fa01 f303 	lsl.w	r3, r1, r3
 8010c8a:	401a      	ands	r2, r3
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	0a1b      	lsrs	r3, r3, #8
 8010c90:	f003 031f 	and.w	r3, r3, #31
 8010c94:	fa22 f303 	lsr.w	r3, r2, r3
 8010c98:	041a      	lsls	r2, r3, #16
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	4313      	orrs	r3, r2
}
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	3714      	adds	r7, #20
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca8:	4770      	bx	lr
 8010caa:	bf00      	nop
 8010cac:	5802444c 	.word	0x5802444c

08010cb0 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_CSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t Periph)
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b082      	sub	sp, #8
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
 8010cb8:	6878      	ldr	r0, [r7, #4]
 8010cba:	f7ff ffd3 	bl	8010c64 <LL_RCC_GetClockSource>
 8010cbe:	4603      	mov	r3, r0
}
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	3708      	adds	r7, #8
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	bd80      	pop	{r7, pc}

08010cc8 <LL_RCC_PLL_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_CSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetSource(void)
{
 8010cc8:	b480      	push	{r7}
 8010cca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 8010ccc:	4b04      	ldr	r3, [pc, #16]	@ (8010ce0 <LL_RCC_PLL_GetSource+0x18>)
 8010cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cd0:	f003 0303 	and.w	r3, r3, #3
}
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cdc:	4770      	bx	lr
 8010cde:	bf00      	nop
 8010ce0:	58024400 	.word	0x58024400

08010ce4 <LL_RCC_PLL1P_IsEnabled>:
  * @brief  Check if PLL1 P is enabled
  * @rmtoll PLLCFGR           DIVP1EN         LL_RCC_PLL1P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1P_IsEnabled(void)
{
 8010ce4:	b480      	push	{r7}
 8010ce6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN) == RCC_PLLCFGR_DIVP1EN) ? 1UL : 0UL);
 8010ce8:	4b07      	ldr	r3, [pc, #28]	@ (8010d08 <LL_RCC_PLL1P_IsEnabled+0x24>)
 8010cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010cf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010cf4:	d101      	bne.n	8010cfa <LL_RCC_PLL1P_IsEnabled+0x16>
 8010cf6:	2301      	movs	r3, #1
 8010cf8:	e000      	b.n	8010cfc <LL_RCC_PLL1P_IsEnabled+0x18>
 8010cfa:	2300      	movs	r3, #0
}
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d04:	4770      	bx	lr
 8010d06:	bf00      	nop
 8010d08:	58024400 	.word	0x58024400

08010d0c <LL_RCC_PLL1Q_IsEnabled>:
  * @brief  Check if PLL1 Q is enabled
  * @rmtoll PLLCFGR           DIVQ1EN         LL_RCC_PLL1Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1Q_IsEnabled(void)
{
 8010d0c:	b480      	push	{r7}
 8010d0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN) == RCC_PLLCFGR_DIVQ1EN) ? 1UL : 0UL);
 8010d10:	4b07      	ldr	r3, [pc, #28]	@ (8010d30 <LL_RCC_PLL1Q_IsEnabled+0x24>)
 8010d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010d18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010d1c:	d101      	bne.n	8010d22 <LL_RCC_PLL1Q_IsEnabled+0x16>
 8010d1e:	2301      	movs	r3, #1
 8010d20:	e000      	b.n	8010d24 <LL_RCC_PLL1Q_IsEnabled+0x18>
 8010d22:	2300      	movs	r3, #0
}
 8010d24:	4618      	mov	r0, r3
 8010d26:	46bd      	mov	sp, r7
 8010d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2c:	4770      	bx	lr
 8010d2e:	bf00      	nop
 8010d30:	58024400 	.word	0x58024400

08010d34 <LL_RCC_PLL1R_IsEnabled>:
  * @brief  Check if PLL1 R is enabled
  * @rmtoll PLLCFGR           DIVR1EN         LL_RCC_PLL1R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1R_IsEnabled(void)
{
 8010d34:	b480      	push	{r7}
 8010d36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN) == RCC_PLLCFGR_DIVR1EN) ? 1UL : 0UL);
 8010d38:	4b07      	ldr	r3, [pc, #28]	@ (8010d58 <LL_RCC_PLL1R_IsEnabled+0x24>)
 8010d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010d40:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8010d44:	d101      	bne.n	8010d4a <LL_RCC_PLL1R_IsEnabled+0x16>
 8010d46:	2301      	movs	r3, #1
 8010d48:	e000      	b.n	8010d4c <LL_RCC_PLL1R_IsEnabled+0x18>
 8010d4a:	2300      	movs	r3, #0
}
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d54:	4770      	bx	lr
 8010d56:	bf00      	nop
 8010d58:	58024400 	.word	0x58024400

08010d5c <LL_RCC_PLL1FRACN_IsEnabled>:
  * @brief  Check if PLL1 FRACN is enabled
  * @rmtoll PLLCFGR           PLL1FRACEN         LL_RCC_PLL1FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1FRACN_IsEnabled(void)
{
 8010d5c:	b480      	push	{r7}
 8010d5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN) == RCC_PLLCFGR_PLL1FRACEN) ? 1UL : 0UL);
 8010d60:	4b06      	ldr	r3, [pc, #24]	@ (8010d7c <LL_RCC_PLL1FRACN_IsEnabled+0x20>)
 8010d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d64:	f003 0301 	and.w	r3, r3, #1
 8010d68:	2b01      	cmp	r3, #1
 8010d6a:	d101      	bne.n	8010d70 <LL_RCC_PLL1FRACN_IsEnabled+0x14>
 8010d6c:	2301      	movs	r3, #1
 8010d6e:	e000      	b.n	8010d72 <LL_RCC_PLL1FRACN_IsEnabled+0x16>
 8010d70:	2300      	movs	r3, #0
}
 8010d72:	4618      	mov	r0, r3
 8010d74:	46bd      	mov	sp, r7
 8010d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7a:	4770      	bx	lr
 8010d7c:	58024400 	.word	0x58024400

08010d80 <LL_RCC_PLL1_GetN>:
  * @brief  Get PLL1 N Coefficient
  * @rmtoll PLL1DIVR        N1          LL_RCC_PLL1_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetN(void)
{
 8010d80:	b480      	push	{r7}
 8010d82:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 8010d84:	4b04      	ldr	r3, [pc, #16]	@ (8010d98 <LL_RCC_PLL1_GetN+0x18>)
 8010d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d8c:	3301      	adds	r3, #1
}
 8010d8e:	4618      	mov	r0, r3
 8010d90:	46bd      	mov	sp, r7
 8010d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d96:	4770      	bx	lr
 8010d98:	58024400 	.word	0x58024400

08010d9c <LL_RCC_PLL1_GetM>:
  * @brief  Get PLL1 M Coefficient
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetM(void)
{
 8010d9c:	b480      	push	{r7}
 8010d9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 8010da0:	4b04      	ldr	r3, [pc, #16]	@ (8010db4 <LL_RCC_PLL1_GetM+0x18>)
 8010da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010da4:	091b      	lsrs	r3, r3, #4
 8010da6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8010daa:	4618      	mov	r0, r3
 8010dac:	46bd      	mov	sp, r7
 8010dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db2:	4770      	bx	lr
 8010db4:	58024400 	.word	0x58024400

08010db8 <LL_RCC_PLL1_GetP>:
  * @brief  Get PLL1 P Coefficient
  * @rmtoll PLL1DIVR        P1          LL_RCC_PLL1_GetP
  * @retval A value between 2 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetP(void)
{
 8010db8:	b480      	push	{r7}
 8010dba:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_P1) >>  RCC_PLL1DIVR_P1_Pos) + 1UL);
 8010dbc:	4b05      	ldr	r3, [pc, #20]	@ (8010dd4 <LL_RCC_PLL1_GetP+0x1c>)
 8010dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010dc0:	0a5b      	lsrs	r3, r3, #9
 8010dc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010dc6:	3301      	adds	r3, #1
}
 8010dc8:	4618      	mov	r0, r3
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd0:	4770      	bx	lr
 8010dd2:	bf00      	nop
 8010dd4:	58024400 	.word	0x58024400

08010dd8 <LL_RCC_PLL1_GetQ>:
  * @brief  Get PLL1 Q Coefficient
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetQ(void)
{
 8010dd8:	b480      	push	{r7}
 8010dda:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1) >>  RCC_PLL1DIVR_Q1_Pos) + 1UL);
 8010ddc:	4b05      	ldr	r3, [pc, #20]	@ (8010df4 <LL_RCC_PLL1_GetQ+0x1c>)
 8010dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010de0:	0c1b      	lsrs	r3, r3, #16
 8010de2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010de6:	3301      	adds	r3, #1
}
 8010de8:	4618      	mov	r0, r3
 8010dea:	46bd      	mov	sp, r7
 8010dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df0:	4770      	bx	lr
 8010df2:	bf00      	nop
 8010df4:	58024400 	.word	0x58024400

08010df8 <LL_RCC_PLL1_GetR>:
  * @brief  Get PLL1 R Coefficient
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetR(void)
{
 8010df8:	b480      	push	{r7}
 8010dfa:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_R1) >>  RCC_PLL1DIVR_R1_Pos) + 1UL);
 8010dfc:	4b05      	ldr	r3, [pc, #20]	@ (8010e14 <LL_RCC_PLL1_GetR+0x1c>)
 8010dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010e00:	0e1b      	lsrs	r3, r3, #24
 8010e02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010e06:	3301      	adds	r3, #1
}
 8010e08:	4618      	mov	r0, r3
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e10:	4770      	bx	lr
 8010e12:	bf00      	nop
 8010e14:	58024400 	.word	0x58024400

08010e18 <LL_RCC_PLL1_GetFRACN>:
  * @brief  Get PLL1 FRACN Coefficient
  * @rmtoll PLL1FRACR      FRACN1          LL_RCC_PLL1_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetFRACN(void)
{
 8010e18:	b480      	push	{r7}
 8010e1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1) >>  RCC_PLL1FRACR_FRACN1_Pos);
 8010e1c:	4b04      	ldr	r3, [pc, #16]	@ (8010e30 <LL_RCC_PLL1_GetFRACN+0x18>)
 8010e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010e20:	08db      	lsrs	r3, r3, #3
 8010e22:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 8010e26:	4618      	mov	r0, r3
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2e:	4770      	bx	lr
 8010e30:	58024400 	.word	0x58024400

08010e34 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll CR           PLL2RDY        LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
 8010e34:	b480      	push	{r7}
 8010e36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY)) ? 1UL : 0UL);
 8010e38:	4b07      	ldr	r3, [pc, #28]	@ (8010e58 <LL_RCC_PLL2_IsReady+0x24>)
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010e40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010e44:	d101      	bne.n	8010e4a <LL_RCC_PLL2_IsReady+0x16>
 8010e46:	2301      	movs	r3, #1
 8010e48:	e000      	b.n	8010e4c <LL_RCC_PLL2_IsReady+0x18>
 8010e4a:	2300      	movs	r3, #0
}
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	46bd      	mov	sp, r7
 8010e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e54:	4770      	bx	lr
 8010e56:	bf00      	nop
 8010e58:	58024400 	.word	0x58024400

08010e5c <LL_RCC_PLL2P_IsEnabled>:
  * @brief  Check if PLL2 P is enabled
  * @rmtoll PLLCFGR           DIVP2EN         LL_RCC_PLL2P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2P_IsEnabled(void)
{
 8010e5c:	b480      	push	{r7}
 8010e5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP2EN) == RCC_PLLCFGR_DIVP2EN) ? 1UL : 0UL);
 8010e60:	4b07      	ldr	r3, [pc, #28]	@ (8010e80 <LL_RCC_PLL2P_IsEnabled+0x24>)
 8010e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8010e68:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8010e6c:	d101      	bne.n	8010e72 <LL_RCC_PLL2P_IsEnabled+0x16>
 8010e6e:	2301      	movs	r3, #1
 8010e70:	e000      	b.n	8010e74 <LL_RCC_PLL2P_IsEnabled+0x18>
 8010e72:	2300      	movs	r3, #0
}
 8010e74:	4618      	mov	r0, r3
 8010e76:	46bd      	mov	sp, r7
 8010e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e7c:	4770      	bx	lr
 8010e7e:	bf00      	nop
 8010e80:	58024400 	.word	0x58024400

08010e84 <LL_RCC_PLL2Q_IsEnabled>:
  * @brief  Check if PLL2 Q is enabled
  * @rmtoll PLLCFGR           DIVQ2EN         LL_RCC_PLL2Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2Q_IsEnabled(void)
{
 8010e84:	b480      	push	{r7}
 8010e86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ2EN) == RCC_PLLCFGR_DIVQ2EN) ? 1UL : 0UL);
 8010e88:	4b07      	ldr	r3, [pc, #28]	@ (8010ea8 <LL_RCC_PLL2Q_IsEnabled+0x24>)
 8010e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010e90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010e94:	d101      	bne.n	8010e9a <LL_RCC_PLL2Q_IsEnabled+0x16>
 8010e96:	2301      	movs	r3, #1
 8010e98:	e000      	b.n	8010e9c <LL_RCC_PLL2Q_IsEnabled+0x18>
 8010e9a:	2300      	movs	r3, #0
}
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	46bd      	mov	sp, r7
 8010ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea4:	4770      	bx	lr
 8010ea6:	bf00      	nop
 8010ea8:	58024400 	.word	0x58024400

08010eac <LL_RCC_PLL2R_IsEnabled>:
  * @brief  Check if PLL2 R is enabled
  * @rmtoll PLLCFGR           DIVR2EN         LL_RCC_PLL2R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2R_IsEnabled(void)
{
 8010eac:	b480      	push	{r7}
 8010eae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR2EN) == RCC_PLLCFGR_DIVR2EN) ? 1UL : 0UL);
 8010eb0:	4b07      	ldr	r3, [pc, #28]	@ (8010ed0 <LL_RCC_PLL2R_IsEnabled+0x24>)
 8010eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010eb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010eb8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010ebc:	d101      	bne.n	8010ec2 <LL_RCC_PLL2R_IsEnabled+0x16>
 8010ebe:	2301      	movs	r3, #1
 8010ec0:	e000      	b.n	8010ec4 <LL_RCC_PLL2R_IsEnabled+0x18>
 8010ec2:	2300      	movs	r3, #0
}
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ecc:	4770      	bx	lr
 8010ece:	bf00      	nop
 8010ed0:	58024400 	.word	0x58024400

08010ed4 <LL_RCC_PLL2FRACN_IsEnabled>:
  * @brief  Check if PLL2 FRACN is enabled
  * @rmtoll PLLCFGR           PLL2FRACEN         LL_RCC_PLL2FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2FRACN_IsEnabled(void)
{
 8010ed4:	b480      	push	{r7}
 8010ed6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL2FRACEN) == RCC_PLLCFGR_PLL2FRACEN) ? 1UL : 0UL);
 8010ed8:	4b06      	ldr	r3, [pc, #24]	@ (8010ef4 <LL_RCC_PLL2FRACN_IsEnabled+0x20>)
 8010eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010edc:	f003 0310 	and.w	r3, r3, #16
 8010ee0:	2b10      	cmp	r3, #16
 8010ee2:	d101      	bne.n	8010ee8 <LL_RCC_PLL2FRACN_IsEnabled+0x14>
 8010ee4:	2301      	movs	r3, #1
 8010ee6:	e000      	b.n	8010eea <LL_RCC_PLL2FRACN_IsEnabled+0x16>
 8010ee8:	2300      	movs	r3, #0
}
 8010eea:	4618      	mov	r0, r3
 8010eec:	46bd      	mov	sp, r7
 8010eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef2:	4770      	bx	lr
 8010ef4:	58024400 	.word	0x58024400

08010ef8 <LL_RCC_PLL2_GetN>:
  * @brief  Get PLL2 N Coefficient
  * @rmtoll PLL2DIVR        N2          LL_RCC_PLL2_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetN(void)
{
 8010ef8:	b480      	push	{r7}
 8010efa:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_N2) >>  RCC_PLL2DIVR_N2_Pos) + 1UL);
 8010efc:	4b04      	ldr	r3, [pc, #16]	@ (8010f10 <LL_RCC_PLL2_GetN+0x18>)
 8010efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f04:	3301      	adds	r3, #1
}
 8010f06:	4618      	mov	r0, r3
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0e:	4770      	bx	lr
 8010f10:	58024400 	.word	0x58024400

08010f14 <LL_RCC_PLL2_GetM>:
  * @brief  Get PLL2 M Coefficient
  * @rmtoll PLLCKSELR       DIVM2          LL_RCC_PLL2_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetM(void)
{
 8010f14:	b480      	push	{r7}
 8010f16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2) >>  RCC_PLLCKSELR_DIVM2_Pos);
 8010f18:	4b04      	ldr	r3, [pc, #16]	@ (8010f2c <LL_RCC_PLL2_GetM+0x18>)
 8010f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f1c:	0b1b      	lsrs	r3, r3, #12
 8010f1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8010f22:	4618      	mov	r0, r3
 8010f24:	46bd      	mov	sp, r7
 8010f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2a:	4770      	bx	lr
 8010f2c:	58024400 	.word	0x58024400

08010f30 <LL_RCC_PLL2_GetP>:
  * @brief  Get PLL2 P Coefficient
  * @rmtoll PLL2DIVR        P2          LL_RCC_PLL2_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetP(void)
{
 8010f30:	b480      	push	{r7}
 8010f32:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_P2) >>  RCC_PLL2DIVR_P2_Pos) + 1UL);
 8010f34:	4b05      	ldr	r3, [pc, #20]	@ (8010f4c <LL_RCC_PLL2_GetP+0x1c>)
 8010f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f38:	0a5b      	lsrs	r3, r3, #9
 8010f3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010f3e:	3301      	adds	r3, #1
}
 8010f40:	4618      	mov	r0, r3
 8010f42:	46bd      	mov	sp, r7
 8010f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f48:	4770      	bx	lr
 8010f4a:	bf00      	nop
 8010f4c:	58024400 	.word	0x58024400

08010f50 <LL_RCC_PLL2_GetQ>:
  * @brief  Get PLL2 Q Coefficient
  * @rmtoll PLL2DIVR        Q2          LL_RCC_PLL2_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetQ(void)
{
 8010f50:	b480      	push	{r7}
 8010f52:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2) >>  RCC_PLL2DIVR_Q2_Pos) + 1UL);
 8010f54:	4b05      	ldr	r3, [pc, #20]	@ (8010f6c <LL_RCC_PLL2_GetQ+0x1c>)
 8010f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f58:	0c1b      	lsrs	r3, r3, #16
 8010f5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010f5e:	3301      	adds	r3, #1
}
 8010f60:	4618      	mov	r0, r3
 8010f62:	46bd      	mov	sp, r7
 8010f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f68:	4770      	bx	lr
 8010f6a:	bf00      	nop
 8010f6c:	58024400 	.word	0x58024400

08010f70 <LL_RCC_PLL2_GetR>:
  * @brief  Get PLL2 R Coefficient
  * @rmtoll PLL2DIVR        R2          LL_RCC_PLL2_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetR(void)
{
 8010f70:	b480      	push	{r7}
 8010f72:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_R2) >>  RCC_PLL2DIVR_R2_Pos) + 1UL);
 8010f74:	4b05      	ldr	r3, [pc, #20]	@ (8010f8c <LL_RCC_PLL2_GetR+0x1c>)
 8010f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f78:	0e1b      	lsrs	r3, r3, #24
 8010f7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010f7e:	3301      	adds	r3, #1
}
 8010f80:	4618      	mov	r0, r3
 8010f82:	46bd      	mov	sp, r7
 8010f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f88:	4770      	bx	lr
 8010f8a:	bf00      	nop
 8010f8c:	58024400 	.word	0x58024400

08010f90 <LL_RCC_PLL2_GetFRACN>:
  * @brief  Get PLL2 FRACN Coefficient
  * @rmtoll PLL2FRACR      FRACN2          LL_RCC_PLL2_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetFRACN(void)
{
 8010f90:	b480      	push	{r7}
 8010f92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2FRACR, RCC_PLL2FRACR_FRACN2) >>  RCC_PLL2FRACR_FRACN2_Pos);
 8010f94:	4b04      	ldr	r3, [pc, #16]	@ (8010fa8 <LL_RCC_PLL2_GetFRACN+0x18>)
 8010f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010f98:	08db      	lsrs	r3, r3, #3
 8010f9a:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	46bd      	mov	sp, r7
 8010fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa6:	4770      	bx	lr
 8010fa8:	58024400 	.word	0x58024400

08010fac <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll CR           PLL3RDY        LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
 8010fac:	b480      	push	{r7}
 8010fae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == (RCC_CR_PLL3RDY)) ? 1UL : 0UL);
 8010fb0:	4b07      	ldr	r3, [pc, #28]	@ (8010fd0 <LL_RCC_PLL3_IsReady+0x24>)
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010fb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010fbc:	d101      	bne.n	8010fc2 <LL_RCC_PLL3_IsReady+0x16>
 8010fbe:	2301      	movs	r3, #1
 8010fc0:	e000      	b.n	8010fc4 <LL_RCC_PLL3_IsReady+0x18>
 8010fc2:	2300      	movs	r3, #0
}
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fcc:	4770      	bx	lr
 8010fce:	bf00      	nop
 8010fd0:	58024400 	.word	0x58024400

08010fd4 <LL_RCC_PLL3P_IsEnabled>:
  * @brief  Check if PLL3 P is enabled
  * @rmtoll PLLCFGR           DIVP3EN         LL_RCC_PLL3P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3P_IsEnabled(void)
{
 8010fd4:	b480      	push	{r7}
 8010fd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP3EN) == RCC_PLLCFGR_DIVP3EN) ? 1UL : 0UL);
 8010fd8:	4b07      	ldr	r3, [pc, #28]	@ (8010ff8 <LL_RCC_PLL3P_IsEnabled+0x24>)
 8010fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010fe0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010fe4:	d101      	bne.n	8010fea <LL_RCC_PLL3P_IsEnabled+0x16>
 8010fe6:	2301      	movs	r3, #1
 8010fe8:	e000      	b.n	8010fec <LL_RCC_PLL3P_IsEnabled+0x18>
 8010fea:	2300      	movs	r3, #0
}
 8010fec:	4618      	mov	r0, r3
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff4:	4770      	bx	lr
 8010ff6:	bf00      	nop
 8010ff8:	58024400 	.word	0x58024400

08010ffc <LL_RCC_PLL3Q_IsEnabled>:
  * @brief  Check if PLL3 Q is enabled
  * @rmtoll PLLCFGR           DIVQ3EN         LL_RCC_PLL3Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3Q_IsEnabled(void)
{
 8010ffc:	b480      	push	{r7}
 8010ffe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ3EN) == RCC_PLLCFGR_DIVQ3EN) ? 1UL : 0UL);
 8011000:	4b07      	ldr	r3, [pc, #28]	@ (8011020 <LL_RCC_PLL3Q_IsEnabled+0x24>)
 8011002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011004:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011008:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801100c:	d101      	bne.n	8011012 <LL_RCC_PLL3Q_IsEnabled+0x16>
 801100e:	2301      	movs	r3, #1
 8011010:	e000      	b.n	8011014 <LL_RCC_PLL3Q_IsEnabled+0x18>
 8011012:	2300      	movs	r3, #0
}
 8011014:	4618      	mov	r0, r3
 8011016:	46bd      	mov	sp, r7
 8011018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101c:	4770      	bx	lr
 801101e:	bf00      	nop
 8011020:	58024400 	.word	0x58024400

08011024 <LL_RCC_PLL3R_IsEnabled>:
  * @brief  Check if PLL3 R is enabled
  * @rmtoll PLLCFGR           DIVR3EN         LL_RCC_PLL3R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3R_IsEnabled(void)
{
 8011024:	b480      	push	{r7}
 8011026:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR3EN) == RCC_PLLCFGR_DIVR3EN) ? 1UL : 0UL);
 8011028:	4b07      	ldr	r3, [pc, #28]	@ (8011048 <LL_RCC_PLL3R_IsEnabled+0x24>)
 801102a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801102c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8011030:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011034:	d101      	bne.n	801103a <LL_RCC_PLL3R_IsEnabled+0x16>
 8011036:	2301      	movs	r3, #1
 8011038:	e000      	b.n	801103c <LL_RCC_PLL3R_IsEnabled+0x18>
 801103a:	2300      	movs	r3, #0
}
 801103c:	4618      	mov	r0, r3
 801103e:	46bd      	mov	sp, r7
 8011040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011044:	4770      	bx	lr
 8011046:	bf00      	nop
 8011048:	58024400 	.word	0x58024400

0801104c <LL_RCC_PLL3FRACN_IsEnabled>:
  * @brief  Check if PLL3 FRACN is enabled
  * @rmtoll PLLCFGR           PLL3FRACEN         LL_RCC_PLL3FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3FRACN_IsEnabled(void)
{
 801104c:	b480      	push	{r7}
 801104e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN) ? 1UL : 0UL);
 8011050:	4b07      	ldr	r3, [pc, #28]	@ (8011070 <LL_RCC_PLL3FRACN_IsEnabled+0x24>)
 8011052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011058:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801105c:	d101      	bne.n	8011062 <LL_RCC_PLL3FRACN_IsEnabled+0x16>
 801105e:	2301      	movs	r3, #1
 8011060:	e000      	b.n	8011064 <LL_RCC_PLL3FRACN_IsEnabled+0x18>
 8011062:	2300      	movs	r3, #0
}
 8011064:	4618      	mov	r0, r3
 8011066:	46bd      	mov	sp, r7
 8011068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106c:	4770      	bx	lr
 801106e:	bf00      	nop
 8011070:	58024400 	.word	0x58024400

08011074 <LL_RCC_PLL3_GetN>:
  * @brief  Get PLL3 N Coefficient
  * @rmtoll PLL3DIVR        N3          LL_RCC_PLL3_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetN(void)
{
 8011074:	b480      	push	{r7}
 8011076:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 8011078:	4b04      	ldr	r3, [pc, #16]	@ (801108c <LL_RCC_PLL3_GetN+0x18>)
 801107a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801107c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011080:	3301      	adds	r3, #1
}
 8011082:	4618      	mov	r0, r3
 8011084:	46bd      	mov	sp, r7
 8011086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108a:	4770      	bx	lr
 801108c:	58024400 	.word	0x58024400

08011090 <LL_RCC_PLL3_GetM>:
  * @brief  Get PLL3 M Coefficient
  * @rmtoll PLLCKSELR       DIVM3          LL_RCC_PLL3_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetM(void)
{
 8011090:	b480      	push	{r7}
 8011092:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 8011094:	4b04      	ldr	r3, [pc, #16]	@ (80110a8 <LL_RCC_PLL3_GetM+0x18>)
 8011096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011098:	0d1b      	lsrs	r3, r3, #20
 801109a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 801109e:	4618      	mov	r0, r3
 80110a0:	46bd      	mov	sp, r7
 80110a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a6:	4770      	bx	lr
 80110a8:	58024400 	.word	0x58024400

080110ac <LL_RCC_PLL3_GetP>:
  * @brief  Get PLL3 P Coefficient
  * @rmtoll PLL3DIVR        P3          LL_RCC_PLL3_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetP(void)
{
 80110ac:	b480      	push	{r7}
 80110ae:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_P3) >>  RCC_PLL3DIVR_P3_Pos) + 1UL);
 80110b0:	4b05      	ldr	r3, [pc, #20]	@ (80110c8 <LL_RCC_PLL3_GetP+0x1c>)
 80110b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80110b4:	0a5b      	lsrs	r3, r3, #9
 80110b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80110ba:	3301      	adds	r3, #1
}
 80110bc:	4618      	mov	r0, r3
 80110be:	46bd      	mov	sp, r7
 80110c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c4:	4770      	bx	lr
 80110c6:	bf00      	nop
 80110c8:	58024400 	.word	0x58024400

080110cc <LL_RCC_PLL3_GetQ>:
  * @brief  Get PLL3 Q Coefficient
  * @rmtoll PLL3DIVR        Q3          LL_RCC_PLL3_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetQ(void)
{
 80110cc:	b480      	push	{r7}
 80110ce:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_Q3) >>  RCC_PLL3DIVR_Q3_Pos) + 1UL);
 80110d0:	4b05      	ldr	r3, [pc, #20]	@ (80110e8 <LL_RCC_PLL3_GetQ+0x1c>)
 80110d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80110d4:	0c1b      	lsrs	r3, r3, #16
 80110d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80110da:	3301      	adds	r3, #1
}
 80110dc:	4618      	mov	r0, r3
 80110de:	46bd      	mov	sp, r7
 80110e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e4:	4770      	bx	lr
 80110e6:	bf00      	nop
 80110e8:	58024400 	.word	0x58024400

080110ec <LL_RCC_PLL3_GetR>:
  * @brief  Get PLL3 R Coefficient
  * @rmtoll PLL3DIVR        R3          LL_RCC_PLL3_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetR(void)
{
 80110ec:	b480      	push	{r7}
 80110ee:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_R3) >>  RCC_PLL3DIVR_R3_Pos) + 1UL);
 80110f0:	4b05      	ldr	r3, [pc, #20]	@ (8011108 <LL_RCC_PLL3_GetR+0x1c>)
 80110f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80110f4:	0e1b      	lsrs	r3, r3, #24
 80110f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80110fa:	3301      	adds	r3, #1
}
 80110fc:	4618      	mov	r0, r3
 80110fe:	46bd      	mov	sp, r7
 8011100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011104:	4770      	bx	lr
 8011106:	bf00      	nop
 8011108:	58024400 	.word	0x58024400

0801110c <LL_RCC_PLL3_GetFRACN>:
  * @brief  Get PLL3 FRACN Coefficient
  * @rmtoll PLL3FRACR      FRACN3          LL_RCC_PLL3_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetFRACN(void)
{
 801110c:	b480      	push	{r7}
 801110e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3) >>  RCC_PLL3FRACR_FRACN3_Pos);
 8011110:	4b04      	ldr	r3, [pc, #16]	@ (8011124 <LL_RCC_PLL3_GetFRACN+0x18>)
 8011112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011114:	08db      	lsrs	r3, r3, #3
 8011116:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 801111a:	4618      	mov	r0, r3
 801111c:	46bd      	mov	sp, r7
 801111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011122:	4770      	bx	lr
 8011124:	58024400 	.word	0x58024400

08011128 <LL_RCC_GetPLL1ClockFreq>:
  * @brief  Return PLL1 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL1ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b08a      	sub	sp, #40	@ 0x28
 801112c:	af02      	add	r7, sp, #8
 801112e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8011130:	2300      	movs	r3, #0
 8011132:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8011134:	2300      	movs	r3, #0
 8011136:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8011138:	f7ff fdc6 	bl	8010cc8 <LL_RCC_PLL_GetSource>
 801113c:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 801113e:	697b      	ldr	r3, [r7, #20]
 8011140:	2b02      	cmp	r3, #2
 8011142:	d01f      	beq.n	8011184 <LL_RCC_GetPLL1ClockFreq+0x5c>
 8011144:	697b      	ldr	r3, [r7, #20]
 8011146:	2b02      	cmp	r3, #2
 8011148:	d824      	bhi.n	8011194 <LL_RCC_GetPLL1ClockFreq+0x6c>
 801114a:	697b      	ldr	r3, [r7, #20]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d003      	beq.n	8011158 <LL_RCC_GetPLL1ClockFreq+0x30>
 8011150:	697b      	ldr	r3, [r7, #20]
 8011152:	2b01      	cmp	r3, #1
 8011154:	d00e      	beq.n	8011174 <LL_RCC_GetPLL1ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8011156:	e01d      	b.n	8011194 <LL_RCC_GetPLL1ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8011158:	f7ff fcf8 	bl	8010b4c <LL_RCC_HSI_IsReady>
 801115c:	4603      	mov	r3, r0
 801115e:	2b00      	cmp	r3, #0
 8011160:	d01a      	beq.n	8011198 <LL_RCC_GetPLL1ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8011162:	f7ff fd05 	bl	8010b70 <LL_RCC_HSI_GetDivider>
 8011166:	4603      	mov	r3, r0
 8011168:	08db      	lsrs	r3, r3, #3
 801116a:	4a38      	ldr	r2, [pc, #224]	@ (801124c <LL_RCC_GetPLL1ClockFreq+0x124>)
 801116c:	fa22 f303 	lsr.w	r3, r2, r3
 8011170:	61fb      	str	r3, [r7, #28]
      break;
 8011172:	e011      	b.n	8011198 <LL_RCC_GetPLL1ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8011174:	f7ff fd0a 	bl	8010b8c <LL_RCC_CSI_IsReady>
 8011178:	4603      	mov	r3, r0
 801117a:	2b00      	cmp	r3, #0
 801117c:	d00e      	beq.n	801119c <LL_RCC_GetPLL1ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 801117e:	4b34      	ldr	r3, [pc, #208]	@ (8011250 <LL_RCC_GetPLL1ClockFreq+0x128>)
 8011180:	61fb      	str	r3, [r7, #28]
      break;
 8011182:	e00b      	b.n	801119c <LL_RCC_GetPLL1ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8011184:	f7ff fcce 	bl	8010b24 <LL_RCC_HSE_IsReady>
 8011188:	4603      	mov	r3, r0
 801118a:	2b00      	cmp	r3, #0
 801118c:	d008      	beq.n	80111a0 <LL_RCC_GetPLL1ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 801118e:	4b31      	ldr	r3, [pc, #196]	@ (8011254 <LL_RCC_GetPLL1ClockFreq+0x12c>)
 8011190:	61fb      	str	r3, [r7, #28]
      break;
 8011192:	e005      	b.n	80111a0 <LL_RCC_GetPLL1ClockFreq+0x78>
      break;
 8011194:	bf00      	nop
 8011196:	e004      	b.n	80111a2 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8011198:	bf00      	nop
 801119a:	e002      	b.n	80111a2 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 801119c:	bf00      	nop
 801119e:	e000      	b.n	80111a2 <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 80111a0:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	2200      	movs	r2, #0
 80111a6:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	2200      	movs	r2, #0
 80111ac:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	2200      	movs	r2, #0
 80111b2:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL1_GetM();
 80111b4:	f7ff fdf2 	bl	8010d9c <LL_RCC_PLL1_GetM>
 80111b8:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL1_GetN();
 80111ba:	f7ff fde1 	bl	8010d80 <LL_RCC_PLL1_GetN>
 80111be:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL1FRACN_IsEnabled() != 0U)
 80111c0:	f7ff fdcc 	bl	8010d5c <LL_RCC_PLL1FRACN_IsEnabled>
 80111c4:	4603      	mov	r3, r0
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d002      	beq.n	80111d0 <LL_RCC_GetPLL1ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL1_GetFRACN();
 80111ca:	f7ff fe25 	bl	8010e18 <LL_RCC_PLL1_GetFRACN>
 80111ce:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 80111d0:	693b      	ldr	r3, [r7, #16]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d035      	beq.n	8011242 <LL_RCC_GetPLL1ClockFreq+0x11a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
 80111d6:	f7ff fd85 	bl	8010ce4 <LL_RCC_PLL1P_IsEnabled>
 80111da:	4603      	mov	r3, r0
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d00c      	beq.n	80111fa <LL_RCC_GetPLL1ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetP());
 80111e0:	f7ff fdea 	bl	8010db8 <LL_RCC_PLL1_GetP>
 80111e4:	4603      	mov	r3, r0
 80111e6:	9300      	str	r3, [sp, #0]
 80111e8:	69bb      	ldr	r3, [r7, #24]
 80111ea:	68fa      	ldr	r2, [r7, #12]
 80111ec:	6939      	ldr	r1, [r7, #16]
 80111ee:	69f8      	ldr	r0, [r7, #28]
 80111f0:	f000 f964 	bl	80114bc <LL_RCC_CalcPLLClockFreq>
 80111f4:	4602      	mov	r2, r0
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL1Q_IsEnabled() != 0U)
 80111fa:	f7ff fd87 	bl	8010d0c <LL_RCC_PLL1Q_IsEnabled>
 80111fe:	4603      	mov	r3, r0
 8011200:	2b00      	cmp	r3, #0
 8011202:	d00c      	beq.n	801121e <LL_RCC_GetPLL1ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetQ());
 8011204:	f7ff fde8 	bl	8010dd8 <LL_RCC_PLL1_GetQ>
 8011208:	4603      	mov	r3, r0
 801120a:	9300      	str	r3, [sp, #0]
 801120c:	69bb      	ldr	r3, [r7, #24]
 801120e:	68fa      	ldr	r2, [r7, #12]
 8011210:	6939      	ldr	r1, [r7, #16]
 8011212:	69f8      	ldr	r0, [r7, #28]
 8011214:	f000 f952 	bl	80114bc <LL_RCC_CalcPLLClockFreq>
 8011218:	4602      	mov	r2, r0
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL1R_IsEnabled() != 0U)
 801121e:	f7ff fd89 	bl	8010d34 <LL_RCC_PLL1R_IsEnabled>
 8011222:	4603      	mov	r3, r0
 8011224:	2b00      	cmp	r3, #0
 8011226:	d00c      	beq.n	8011242 <LL_RCC_GetPLL1ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetR());
 8011228:	f7ff fde6 	bl	8010df8 <LL_RCC_PLL1_GetR>
 801122c:	4603      	mov	r3, r0
 801122e:	9300      	str	r3, [sp, #0]
 8011230:	69bb      	ldr	r3, [r7, #24]
 8011232:	68fa      	ldr	r2, [r7, #12]
 8011234:	6939      	ldr	r1, [r7, #16]
 8011236:	69f8      	ldr	r0, [r7, #28]
 8011238:	f000 f940 	bl	80114bc <LL_RCC_CalcPLLClockFreq>
 801123c:	4602      	mov	r2, r0
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	609a      	str	r2, [r3, #8]
    }
  }
}
 8011242:	bf00      	nop
 8011244:	3720      	adds	r7, #32
 8011246:	46bd      	mov	sp, r7
 8011248:	bd80      	pop	{r7, pc}
 801124a:	bf00      	nop
 801124c:	03d09000 	.word	0x03d09000
 8011250:	003d0900 	.word	0x003d0900
 8011254:	017d7840 	.word	0x017d7840

08011258 <LL_RCC_GetPLL2ClockFreq>:
  * @brief  Return PLL2 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL2ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8011258:	b580      	push	{r7, lr}
 801125a:	b08a      	sub	sp, #40	@ 0x28
 801125c:	af02      	add	r7, sp, #8
 801125e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8011260:	2300      	movs	r3, #0
 8011262:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8011264:	2300      	movs	r3, #0
 8011266:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8011268:	f7ff fd2e 	bl	8010cc8 <LL_RCC_PLL_GetSource>
 801126c:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 801126e:	697b      	ldr	r3, [r7, #20]
 8011270:	2b02      	cmp	r3, #2
 8011272:	d01f      	beq.n	80112b4 <LL_RCC_GetPLL2ClockFreq+0x5c>
 8011274:	697b      	ldr	r3, [r7, #20]
 8011276:	2b02      	cmp	r3, #2
 8011278:	d824      	bhi.n	80112c4 <LL_RCC_GetPLL2ClockFreq+0x6c>
 801127a:	697b      	ldr	r3, [r7, #20]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d003      	beq.n	8011288 <LL_RCC_GetPLL2ClockFreq+0x30>
 8011280:	697b      	ldr	r3, [r7, #20]
 8011282:	2b01      	cmp	r3, #1
 8011284:	d00e      	beq.n	80112a4 <LL_RCC_GetPLL2ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8011286:	e01d      	b.n	80112c4 <LL_RCC_GetPLL2ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8011288:	f7ff fc60 	bl	8010b4c <LL_RCC_HSI_IsReady>
 801128c:	4603      	mov	r3, r0
 801128e:	2b00      	cmp	r3, #0
 8011290:	d01a      	beq.n	80112c8 <LL_RCC_GetPLL2ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8011292:	f7ff fc6d 	bl	8010b70 <LL_RCC_HSI_GetDivider>
 8011296:	4603      	mov	r3, r0
 8011298:	08db      	lsrs	r3, r3, #3
 801129a:	4a38      	ldr	r2, [pc, #224]	@ (801137c <LL_RCC_GetPLL2ClockFreq+0x124>)
 801129c:	fa22 f303 	lsr.w	r3, r2, r3
 80112a0:	61fb      	str	r3, [r7, #28]
      break;
 80112a2:	e011      	b.n	80112c8 <LL_RCC_GetPLL2ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 80112a4:	f7ff fc72 	bl	8010b8c <LL_RCC_CSI_IsReady>
 80112a8:	4603      	mov	r3, r0
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d00e      	beq.n	80112cc <LL_RCC_GetPLL2ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 80112ae:	4b34      	ldr	r3, [pc, #208]	@ (8011380 <LL_RCC_GetPLL2ClockFreq+0x128>)
 80112b0:	61fb      	str	r3, [r7, #28]
      break;
 80112b2:	e00b      	b.n	80112cc <LL_RCC_GetPLL2ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 80112b4:	f7ff fc36 	bl	8010b24 <LL_RCC_HSE_IsReady>
 80112b8:	4603      	mov	r3, r0
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d008      	beq.n	80112d0 <LL_RCC_GetPLL2ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 80112be:	4b31      	ldr	r3, [pc, #196]	@ (8011384 <LL_RCC_GetPLL2ClockFreq+0x12c>)
 80112c0:	61fb      	str	r3, [r7, #28]
      break;
 80112c2:	e005      	b.n	80112d0 <LL_RCC_GetPLL2ClockFreq+0x78>
      break;
 80112c4:	bf00      	nop
 80112c6:	e004      	b.n	80112d2 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 80112c8:	bf00      	nop
 80112ca:	e002      	b.n	80112d2 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 80112cc:	bf00      	nop
 80112ce:	e000      	b.n	80112d2 <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 80112d0:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	2200      	movs	r2, #0
 80112d6:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	2200      	movs	r2, #0
 80112dc:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	2200      	movs	r2, #0
 80112e2:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL2_GetM();
 80112e4:	f7ff fe16 	bl	8010f14 <LL_RCC_PLL2_GetM>
 80112e8:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL2_GetN();
 80112ea:	f7ff fe05 	bl	8010ef8 <LL_RCC_PLL2_GetN>
 80112ee:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL2FRACN_IsEnabled() != 0U)
 80112f0:	f7ff fdf0 	bl	8010ed4 <LL_RCC_PLL2FRACN_IsEnabled>
 80112f4:	4603      	mov	r3, r0
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d002      	beq.n	8011300 <LL_RCC_GetPLL2ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL2_GetFRACN();
 80112fa:	f7ff fe49 	bl	8010f90 <LL_RCC_PLL2_GetFRACN>
 80112fe:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 8011300:	693b      	ldr	r3, [r7, #16]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d035      	beq.n	8011372 <LL_RCC_GetPLL2ClockFreq+0x11a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
 8011306:	f7ff fda9 	bl	8010e5c <LL_RCC_PLL2P_IsEnabled>
 801130a:	4603      	mov	r3, r0
 801130c:	2b00      	cmp	r3, #0
 801130e:	d00c      	beq.n	801132a <LL_RCC_GetPLL2ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetP());
 8011310:	f7ff fe0e 	bl	8010f30 <LL_RCC_PLL2_GetP>
 8011314:	4603      	mov	r3, r0
 8011316:	9300      	str	r3, [sp, #0]
 8011318:	69bb      	ldr	r3, [r7, #24]
 801131a:	68fa      	ldr	r2, [r7, #12]
 801131c:	6939      	ldr	r1, [r7, #16]
 801131e:	69f8      	ldr	r0, [r7, #28]
 8011320:	f000 f8cc 	bl	80114bc <LL_RCC_CalcPLLClockFreq>
 8011324:	4602      	mov	r2, r0
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 801132a:	f7ff fdab 	bl	8010e84 <LL_RCC_PLL2Q_IsEnabled>
 801132e:	4603      	mov	r3, r0
 8011330:	2b00      	cmp	r3, #0
 8011332:	d00c      	beq.n	801134e <LL_RCC_GetPLL2ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetQ());
 8011334:	f7ff fe0c 	bl	8010f50 <LL_RCC_PLL2_GetQ>
 8011338:	4603      	mov	r3, r0
 801133a:	9300      	str	r3, [sp, #0]
 801133c:	69bb      	ldr	r3, [r7, #24]
 801133e:	68fa      	ldr	r2, [r7, #12]
 8011340:	6939      	ldr	r1, [r7, #16]
 8011342:	69f8      	ldr	r0, [r7, #28]
 8011344:	f000 f8ba 	bl	80114bc <LL_RCC_CalcPLLClockFreq>
 8011348:	4602      	mov	r2, r0
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL2R_IsEnabled() != 0U)
 801134e:	f7ff fdad 	bl	8010eac <LL_RCC_PLL2R_IsEnabled>
 8011352:	4603      	mov	r3, r0
 8011354:	2b00      	cmp	r3, #0
 8011356:	d00c      	beq.n	8011372 <LL_RCC_GetPLL2ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetR());
 8011358:	f7ff fe0a 	bl	8010f70 <LL_RCC_PLL2_GetR>
 801135c:	4603      	mov	r3, r0
 801135e:	9300      	str	r3, [sp, #0]
 8011360:	69bb      	ldr	r3, [r7, #24]
 8011362:	68fa      	ldr	r2, [r7, #12]
 8011364:	6939      	ldr	r1, [r7, #16]
 8011366:	69f8      	ldr	r0, [r7, #28]
 8011368:	f000 f8a8 	bl	80114bc <LL_RCC_CalcPLLClockFreq>
 801136c:	4602      	mov	r2, r0
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	609a      	str	r2, [r3, #8]
    }
  }
}
 8011372:	bf00      	nop
 8011374:	3720      	adds	r7, #32
 8011376:	46bd      	mov	sp, r7
 8011378:	bd80      	pop	{r7, pc}
 801137a:	bf00      	nop
 801137c:	03d09000 	.word	0x03d09000
 8011380:	003d0900 	.word	0x003d0900
 8011384:	017d7840 	.word	0x017d7840

08011388 <LL_RCC_GetPLL3ClockFreq>:
  * @brief  Return PLL3 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL3ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8011388:	b580      	push	{r7, lr}
 801138a:	b08a      	sub	sp, #40	@ 0x28
 801138c:	af02      	add	r7, sp, #8
 801138e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8011390:	2300      	movs	r3, #0
 8011392:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8011394:	2300      	movs	r3, #0
 8011396:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8011398:	f7ff fc96 	bl	8010cc8 <LL_RCC_PLL_GetSource>
 801139c:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 801139e:	697b      	ldr	r3, [r7, #20]
 80113a0:	2b02      	cmp	r3, #2
 80113a2:	d01f      	beq.n	80113e4 <LL_RCC_GetPLL3ClockFreq+0x5c>
 80113a4:	697b      	ldr	r3, [r7, #20]
 80113a6:	2b02      	cmp	r3, #2
 80113a8:	d824      	bhi.n	80113f4 <LL_RCC_GetPLL3ClockFreq+0x6c>
 80113aa:	697b      	ldr	r3, [r7, #20]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d003      	beq.n	80113b8 <LL_RCC_GetPLL3ClockFreq+0x30>
 80113b0:	697b      	ldr	r3, [r7, #20]
 80113b2:	2b01      	cmp	r3, #1
 80113b4:	d00e      	beq.n	80113d4 <LL_RCC_GetPLL3ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 80113b6:	e01d      	b.n	80113f4 <LL_RCC_GetPLL3ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 80113b8:	f7ff fbc8 	bl	8010b4c <LL_RCC_HSI_IsReady>
 80113bc:	4603      	mov	r3, r0
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d01a      	beq.n	80113f8 <LL_RCC_GetPLL3ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 80113c2:	f7ff fbd5 	bl	8010b70 <LL_RCC_HSI_GetDivider>
 80113c6:	4603      	mov	r3, r0
 80113c8:	08db      	lsrs	r3, r3, #3
 80113ca:	4a39      	ldr	r2, [pc, #228]	@ (80114b0 <LL_RCC_GetPLL3ClockFreq+0x128>)
 80113cc:	fa22 f303 	lsr.w	r3, r2, r3
 80113d0:	61fb      	str	r3, [r7, #28]
      break;
 80113d2:	e011      	b.n	80113f8 <LL_RCC_GetPLL3ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 80113d4:	f7ff fbda 	bl	8010b8c <LL_RCC_CSI_IsReady>
 80113d8:	4603      	mov	r3, r0
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d00e      	beq.n	80113fc <LL_RCC_GetPLL3ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 80113de:	4b35      	ldr	r3, [pc, #212]	@ (80114b4 <LL_RCC_GetPLL3ClockFreq+0x12c>)
 80113e0:	61fb      	str	r3, [r7, #28]
      break;
 80113e2:	e00b      	b.n	80113fc <LL_RCC_GetPLL3ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 80113e4:	f7ff fb9e 	bl	8010b24 <LL_RCC_HSE_IsReady>
 80113e8:	4603      	mov	r3, r0
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d008      	beq.n	8011400 <LL_RCC_GetPLL3ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 80113ee:	4b32      	ldr	r3, [pc, #200]	@ (80114b8 <LL_RCC_GetPLL3ClockFreq+0x130>)
 80113f0:	61fb      	str	r3, [r7, #28]
      break;
 80113f2:	e005      	b.n	8011400 <LL_RCC_GetPLL3ClockFreq+0x78>
      break;
 80113f4:	bf00      	nop
 80113f6:	e004      	b.n	8011402 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 80113f8:	bf00      	nop
 80113fa:	e002      	b.n	8011402 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 80113fc:	bf00      	nop
 80113fe:	e000      	b.n	8011402 <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 8011400:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	2200      	movs	r2, #0
 8011406:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	2200      	movs	r2, #0
 801140c:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	2200      	movs	r2, #0
 8011412:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL3_GetM();
 8011414:	f7ff fe3c 	bl	8011090 <LL_RCC_PLL3_GetM>
 8011418:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL3_GetN();
 801141a:	f7ff fe2b 	bl	8011074 <LL_RCC_PLL3_GetN>
 801141e:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL3FRACN_IsEnabled() != 0U)
 8011420:	f7ff fe14 	bl	801104c <LL_RCC_PLL3FRACN_IsEnabled>
 8011424:	4603      	mov	r3, r0
 8011426:	2b00      	cmp	r3, #0
 8011428:	d002      	beq.n	8011430 <LL_RCC_GetPLL3ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL3_GetFRACN();
 801142a:	f7ff fe6f 	bl	801110c <LL_RCC_PLL3_GetFRACN>
 801142e:	61b8      	str	r0, [r7, #24]
  }

  if ((m != 0U) && (pllinputfreq != 0U))
 8011430:	693b      	ldr	r3, [r7, #16]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d038      	beq.n	80114a8 <LL_RCC_GetPLL3ClockFreq+0x120>
 8011436:	69fb      	ldr	r3, [r7, #28]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d035      	beq.n	80114a8 <LL_RCC_GetPLL3ClockFreq+0x120>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
 801143c:	f7ff fdca 	bl	8010fd4 <LL_RCC_PLL3P_IsEnabled>
 8011440:	4603      	mov	r3, r0
 8011442:	2b00      	cmp	r3, #0
 8011444:	d00c      	beq.n	8011460 <LL_RCC_GetPLL3ClockFreq+0xd8>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetP());
 8011446:	f7ff fe31 	bl	80110ac <LL_RCC_PLL3_GetP>
 801144a:	4603      	mov	r3, r0
 801144c:	9300      	str	r3, [sp, #0]
 801144e:	69bb      	ldr	r3, [r7, #24]
 8011450:	68fa      	ldr	r2, [r7, #12]
 8011452:	6939      	ldr	r1, [r7, #16]
 8011454:	69f8      	ldr	r0, [r7, #28]
 8011456:	f000 f831 	bl	80114bc <LL_RCC_CalcPLLClockFreq>
 801145a:	4602      	mov	r2, r0
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 8011460:	f7ff fdcc 	bl	8010ffc <LL_RCC_PLL3Q_IsEnabled>
 8011464:	4603      	mov	r3, r0
 8011466:	2b00      	cmp	r3, #0
 8011468:	d00c      	beq.n	8011484 <LL_RCC_GetPLL3ClockFreq+0xfc>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetQ());
 801146a:	f7ff fe2f 	bl	80110cc <LL_RCC_PLL3_GetQ>
 801146e:	4603      	mov	r3, r0
 8011470:	9300      	str	r3, [sp, #0]
 8011472:	69bb      	ldr	r3, [r7, #24]
 8011474:	68fa      	ldr	r2, [r7, #12]
 8011476:	6939      	ldr	r1, [r7, #16]
 8011478:	69f8      	ldr	r0, [r7, #28]
 801147a:	f000 f81f 	bl	80114bc <LL_RCC_CalcPLLClockFreq>
 801147e:	4602      	mov	r2, r0
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL3R_IsEnabled() != 0U)
 8011484:	f7ff fdce 	bl	8011024 <LL_RCC_PLL3R_IsEnabled>
 8011488:	4603      	mov	r3, r0
 801148a:	2b00      	cmp	r3, #0
 801148c:	d00c      	beq.n	80114a8 <LL_RCC_GetPLL3ClockFreq+0x120>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetR());
 801148e:	f7ff fe2d 	bl	80110ec <LL_RCC_PLL3_GetR>
 8011492:	4603      	mov	r3, r0
 8011494:	9300      	str	r3, [sp, #0]
 8011496:	69bb      	ldr	r3, [r7, #24]
 8011498:	68fa      	ldr	r2, [r7, #12]
 801149a:	6939      	ldr	r1, [r7, #16]
 801149c:	69f8      	ldr	r0, [r7, #28]
 801149e:	f000 f80d 	bl	80114bc <LL_RCC_CalcPLLClockFreq>
 80114a2:	4602      	mov	r2, r0
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	609a      	str	r2, [r3, #8]
    }
  }
}
 80114a8:	bf00      	nop
 80114aa:	3720      	adds	r7, #32
 80114ac:	46bd      	mov	sp, r7
 80114ae:	bd80      	pop	{r7, pc}
 80114b0:	03d09000 	.word	0x03d09000
 80114b4:	003d0900 	.word	0x003d0900
 80114b8:	017d7840 	.word	0x017d7840

080114bc <LL_RCC_CalcPLLClockFreq>:
  * @param  PQR    VCO output divider (P, Q or R)
  *                Between 1 and 128, except for PLL1P Odd value not allowed
  * @retval PLL1 clock frequency (in Hz)
  */
uint32_t LL_RCC_CalcPLLClockFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t PQR)
{
 80114bc:	b480      	push	{r7}
 80114be:	b087      	sub	sp, #28
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	60f8      	str	r0, [r7, #12]
 80114c4:	60b9      	str	r1, [r7, #8]
 80114c6:	607a      	str	r2, [r7, #4]
 80114c8:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN / (float_t)0x2000));
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	ee07 3a90 	vmov	s15, r3
 80114d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80114d4:	68bb      	ldr	r3, [r7, #8]
 80114d6:	ee07 3a90 	vmov	s15, r3
 80114da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80114de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	ee07 3a90 	vmov	s15, r3
 80114e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80114ec:	683b      	ldr	r3, [r7, #0]
 80114ee:	ee07 3a90 	vmov	s15, r3
 80114f2:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80114f6:	eddf 5a10 	vldr	s11, [pc, #64]	@ 8011538 <LL_RCC_CalcPLLClockFreq+0x7c>
 80114fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80114fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011506:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)PQR;
 801150a:	6a3b      	ldr	r3, [r7, #32]
 801150c:	ee07 3a90 	vmov	s15, r3
 8011510:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011514:	edd7 6a05 	vldr	s13, [r7, #20]
 8011518:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801151c:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
 8011520:	edd7 7a05 	vldr	s15, [r7, #20]
 8011524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011528:	ee17 3a90 	vmov	r3, s15
}
 801152c:	4618      	mov	r0, r3
 801152e:	371c      	adds	r7, #28
 8011530:	46bd      	mov	sp, r7
 8011532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011536:	4770      	bx	lr
 8011538:	46000000 	.word	0x46000000

0801153c <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 801153c:	b590      	push	{r4, r7, lr}
 801153e:	b087      	sub	sp, #28
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8011544:	2300      	movs	r3, #0
 8011546:	617b      	str	r3, [r7, #20]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8011548:	6878      	ldr	r0, [r7, #4]
 801154a:	f7ff fbb1 	bl	8010cb0 <LL_RCC_GetUSARTClockSource>
 801154e:	4603      	mov	r3, r0
 8011550:	4a62      	ldr	r2, [pc, #392]	@ (80116dc <LL_RCC_GetUSARTClockFreq+0x1a0>)
 8011552:	4293      	cmp	r3, r2
 8011554:	f000 80a9 	beq.w	80116aa <LL_RCC_GetUSARTClockFreq+0x16e>
 8011558:	4a60      	ldr	r2, [pc, #384]	@ (80116dc <LL_RCC_GetUSARTClockFreq+0x1a0>)
 801155a:	4293      	cmp	r3, r2
 801155c:	f200 80ae 	bhi.w	80116bc <LL_RCC_GetUSARTClockFreq+0x180>
 8011560:	4a5f      	ldr	r2, [pc, #380]	@ (80116e0 <LL_RCC_GetUSARTClockFreq+0x1a4>)
 8011562:	4293      	cmp	r3, r2
 8011564:	f000 80a1 	beq.w	80116aa <LL_RCC_GetUSARTClockFreq+0x16e>
 8011568:	4a5d      	ldr	r2, [pc, #372]	@ (80116e0 <LL_RCC_GetUSARTClockFreq+0x1a4>)
 801156a:	4293      	cmp	r3, r2
 801156c:	f200 80a6 	bhi.w	80116bc <LL_RCC_GetUSARTClockFreq+0x180>
 8011570:	4a5c      	ldr	r2, [pc, #368]	@ (80116e4 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 8011572:	4293      	cmp	r3, r2
 8011574:	f000 8091 	beq.w	801169a <LL_RCC_GetUSARTClockFreq+0x15e>
 8011578:	4a5a      	ldr	r2, [pc, #360]	@ (80116e4 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 801157a:	4293      	cmp	r3, r2
 801157c:	f200 809e 	bhi.w	80116bc <LL_RCC_GetUSARTClockFreq+0x180>
 8011580:	4a59      	ldr	r2, [pc, #356]	@ (80116e8 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 8011582:	4293      	cmp	r3, r2
 8011584:	f000 8089 	beq.w	801169a <LL_RCC_GetUSARTClockFreq+0x15e>
 8011588:	4a57      	ldr	r2, [pc, #348]	@ (80116e8 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 801158a:	4293      	cmp	r3, r2
 801158c:	f200 8096 	bhi.w	80116bc <LL_RCC_GetUSARTClockFreq+0x180>
 8011590:	4a56      	ldr	r2, [pc, #344]	@ (80116ec <LL_RCC_GetUSARTClockFreq+0x1b0>)
 8011592:	4293      	cmp	r3, r2
 8011594:	d073      	beq.n	801167e <LL_RCC_GetUSARTClockFreq+0x142>
 8011596:	4a55      	ldr	r2, [pc, #340]	@ (80116ec <LL_RCC_GetUSARTClockFreq+0x1b0>)
 8011598:	4293      	cmp	r3, r2
 801159a:	f200 808f 	bhi.w	80116bc <LL_RCC_GetUSARTClockFreq+0x180>
 801159e:	4a54      	ldr	r2, [pc, #336]	@ (80116f0 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 80115a0:	4293      	cmp	r3, r2
 80115a2:	d06c      	beq.n	801167e <LL_RCC_GetUSARTClockFreq+0x142>
 80115a4:	4a52      	ldr	r2, [pc, #328]	@ (80116f0 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 80115a6:	4293      	cmp	r3, r2
 80115a8:	f200 8088 	bhi.w	80116bc <LL_RCC_GetUSARTClockFreq+0x180>
 80115ac:	4a51      	ldr	r2, [pc, #324]	@ (80116f4 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80115ae:	4293      	cmp	r3, r2
 80115b0:	d058      	beq.n	8011664 <LL_RCC_GetUSARTClockFreq+0x128>
 80115b2:	4a50      	ldr	r2, [pc, #320]	@ (80116f4 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80115b4:	4293      	cmp	r3, r2
 80115b6:	f200 8081 	bhi.w	80116bc <LL_RCC_GetUSARTClockFreq+0x180>
 80115ba:	4a4f      	ldr	r2, [pc, #316]	@ (80116f8 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80115bc:	4293      	cmp	r3, r2
 80115be:	d051      	beq.n	8011664 <LL_RCC_GetUSARTClockFreq+0x128>
 80115c0:	4a4d      	ldr	r2, [pc, #308]	@ (80116f8 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80115c2:	4293      	cmp	r3, r2
 80115c4:	d87a      	bhi.n	80116bc <LL_RCC_GetUSARTClockFreq+0x180>
 80115c6:	4a4d      	ldr	r2, [pc, #308]	@ (80116fc <LL_RCC_GetUSARTClockFreq+0x1c0>)
 80115c8:	4293      	cmp	r3, r2
 80115ca:	d03e      	beq.n	801164a <LL_RCC_GetUSARTClockFreq+0x10e>
 80115cc:	4a4b      	ldr	r2, [pc, #300]	@ (80116fc <LL_RCC_GetUSARTClockFreq+0x1c0>)
 80115ce:	4293      	cmp	r3, r2
 80115d0:	d874      	bhi.n	80116bc <LL_RCC_GetUSARTClockFreq+0x180>
 80115d2:	4a4b      	ldr	r2, [pc, #300]	@ (8011700 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 80115d4:	4293      	cmp	r3, r2
 80115d6:	d038      	beq.n	801164a <LL_RCC_GetUSARTClockFreq+0x10e>
 80115d8:	4a49      	ldr	r2, [pc, #292]	@ (8011700 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 80115da:	4293      	cmp	r3, r2
 80115dc:	d86e      	bhi.n	80116bc <LL_RCC_GetUSARTClockFreq+0x180>
 80115de:	4a49      	ldr	r2, [pc, #292]	@ (8011704 <LL_RCC_GetUSARTClockFreq+0x1c8>)
 80115e0:	4293      	cmp	r3, r2
 80115e2:	d01a      	beq.n	801161a <LL_RCC_GetUSARTClockFreq+0xde>
 80115e4:	4a48      	ldr	r2, [pc, #288]	@ (8011708 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 80115e6:	4293      	cmp	r3, r2
 80115e8:	d168      	bne.n	80116bc <LL_RCC_GetUSARTClockFreq+0x180>
  {
    case LL_RCC_USART16_CLKSOURCE_PCLK2:
      usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 80115ea:	f000 f895 	bl	8011718 <RCC_GetSystemClockFreq>
 80115ee:	4604      	mov	r4, r0
 80115f0:	f7ff fb00 	bl	8010bf4 <LL_RCC_GetSysPrescaler>
 80115f4:	4603      	mov	r3, r0
 80115f6:	0a1b      	lsrs	r3, r3, #8
 80115f8:	f003 030f 	and.w	r3, r3, #15
 80115fc:	4a43      	ldr	r2, [pc, #268]	@ (801170c <LL_RCC_GetUSARTClockFreq+0x1d0>)
 80115fe:	5cd3      	ldrb	r3, [r2, r3]
 8011600:	f003 031f 	and.w	r3, r3, #31
 8011604:	fa24 f303 	lsr.w	r3, r4, r3
 8011608:	4618      	mov	r0, r3
 801160a:	f000 f8e7 	bl	80117dc <RCC_GetHCLKClockFreq>
 801160e:	4603      	mov	r3, r0
 8011610:	4618      	mov	r0, r3
 8011612:	f000 f911 	bl	8011838 <RCC_GetPCLK2ClockFreq>
 8011616:	6178      	str	r0, [r7, #20]
      break;
 8011618:	e05b      	b.n	80116d2 <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART234578_CLKSOURCE_PCLK1:
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 801161a:	f000 f87d 	bl	8011718 <RCC_GetSystemClockFreq>
 801161e:	4604      	mov	r4, r0
 8011620:	f7ff fae8 	bl	8010bf4 <LL_RCC_GetSysPrescaler>
 8011624:	4603      	mov	r3, r0
 8011626:	0a1b      	lsrs	r3, r3, #8
 8011628:	f003 030f 	and.w	r3, r3, #15
 801162c:	4a37      	ldr	r2, [pc, #220]	@ (801170c <LL_RCC_GetUSARTClockFreq+0x1d0>)
 801162e:	5cd3      	ldrb	r3, [r2, r3]
 8011630:	f003 031f 	and.w	r3, r3, #31
 8011634:	fa24 f303 	lsr.w	r3, r4, r3
 8011638:	4618      	mov	r0, r3
 801163a:	f000 f8cf 	bl	80117dc <RCC_GetHCLKClockFreq>
 801163e:	4603      	mov	r3, r0
 8011640:	4618      	mov	r0, r3
 8011642:	f000 f8e1 	bl	8011808 <RCC_GetPCLK1ClockFreq>
 8011646:	6178      	str	r0, [r7, #20]
      break;
 8011648:	e043      	b.n	80116d2 <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART16_CLKSOURCE_PLL2Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL2Q:
      if (LL_RCC_PLL2_IsReady() != 0U)
 801164a:	f7ff fbf3 	bl	8010e34 <LL_RCC_PLL2_IsReady>
 801164e:	4603      	mov	r3, r0
 8011650:	2b00      	cmp	r3, #0
 8011652:	d035      	beq.n	80116c0 <LL_RCC_GetUSARTClockFreq+0x184>
      {
        LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 8011654:	f107 0308 	add.w	r3, r7, #8
 8011658:	4618      	mov	r0, r3
 801165a:	f7ff fdfd 	bl	8011258 <LL_RCC_GetPLL2ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	617b      	str	r3, [r7, #20]
      }
      break;
 8011662:	e02d      	b.n	80116c0 <LL_RCC_GetUSARTClockFreq+0x184>

    case LL_RCC_USART16_CLKSOURCE_PLL3Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL3Q:
      if (LL_RCC_PLL3_IsReady() != 0U)
 8011664:	f7ff fca2 	bl	8010fac <LL_RCC_PLL3_IsReady>
 8011668:	4603      	mov	r3, r0
 801166a:	2b00      	cmp	r3, #0
 801166c:	d02a      	beq.n	80116c4 <LL_RCC_GetUSARTClockFreq+0x188>
      {
        LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 801166e:	f107 0308 	add.w	r3, r7, #8
 8011672:	4618      	mov	r0, r3
 8011674:	f7ff fe88 	bl	8011388 <LL_RCC_GetPLL3ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	617b      	str	r3, [r7, #20]
      }
      break;
 801167c:	e022      	b.n	80116c4 <LL_RCC_GetUSARTClockFreq+0x188>

    case LL_RCC_USART16_CLKSOURCE_HSI:
    case LL_RCC_USART234578_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
 801167e:	f7ff fa65 	bl	8010b4c <LL_RCC_HSI_IsReady>
 8011682:	4603      	mov	r3, r0
 8011684:	2b00      	cmp	r3, #0
 8011686:	d01f      	beq.n	80116c8 <LL_RCC_GetUSARTClockFreq+0x18c>
      {
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8011688:	f7ff fa72 	bl	8010b70 <LL_RCC_HSI_GetDivider>
 801168c:	4603      	mov	r3, r0
 801168e:	08db      	lsrs	r3, r3, #3
 8011690:	4a1f      	ldr	r2, [pc, #124]	@ (8011710 <LL_RCC_GetUSARTClockFreq+0x1d4>)
 8011692:	fa22 f303 	lsr.w	r3, r2, r3
 8011696:	617b      	str	r3, [r7, #20]
      }
      break;
 8011698:	e016      	b.n	80116c8 <LL_RCC_GetUSARTClockFreq+0x18c>

    case LL_RCC_USART16_CLKSOURCE_CSI:
    case LL_RCC_USART234578_CLKSOURCE_CSI:
      if (LL_RCC_CSI_IsReady() != 0U)
 801169a:	f7ff fa77 	bl	8010b8c <LL_RCC_CSI_IsReady>
 801169e:	4603      	mov	r3, r0
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d013      	beq.n	80116cc <LL_RCC_GetUSARTClockFreq+0x190>
      {
        usart_frequency = CSI_VALUE;
 80116a4:	4b1b      	ldr	r3, [pc, #108]	@ (8011714 <LL_RCC_GetUSARTClockFreq+0x1d8>)
 80116a6:	617b      	str	r3, [r7, #20]
      }
      break;
 80116a8:	e010      	b.n	80116cc <LL_RCC_GetUSARTClockFreq+0x190>

    case LL_RCC_USART16_CLKSOURCE_LSE:
    case LL_RCC_USART234578_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
 80116aa:	f7ff fa83 	bl	8010bb4 <LL_RCC_LSE_IsReady>
 80116ae:	4603      	mov	r3, r0
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d00d      	beq.n	80116d0 <LL_RCC_GetUSARTClockFreq+0x194>
      {
        usart_frequency = LSE_VALUE;
 80116b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80116b8:	617b      	str	r3, [r7, #20]
      }
      break;
 80116ba:	e009      	b.n	80116d0 <LL_RCC_GetUSARTClockFreq+0x194>

    default:
      /* Kernel clock disabled */
      break;
 80116bc:	bf00      	nop
 80116be:	e008      	b.n	80116d2 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 80116c0:	bf00      	nop
 80116c2:	e006      	b.n	80116d2 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 80116c4:	bf00      	nop
 80116c6:	e004      	b.n	80116d2 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 80116c8:	bf00      	nop
 80116ca:	e002      	b.n	80116d2 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 80116cc:	bf00      	nop
 80116ce:	e000      	b.n	80116d2 <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 80116d0:	bf00      	nop
  }

  return usart_frequency;
 80116d2:	697b      	ldr	r3, [r7, #20]
}
 80116d4:	4618      	mov	r0, r3
 80116d6:	371c      	adds	r7, #28
 80116d8:	46bd      	mov	sp, r7
 80116da:	bd90      	pop	{r4, r7, pc}
 80116dc:	07050308 	.word	0x07050308
 80116e0:	07050008 	.word	0x07050008
 80116e4:	07040308 	.word	0x07040308
 80116e8:	07040008 	.word	0x07040008
 80116ec:	07030308 	.word	0x07030308
 80116f0:	07030008 	.word	0x07030008
 80116f4:	07020308 	.word	0x07020308
 80116f8:	07020008 	.word	0x07020008
 80116fc:	07010308 	.word	0x07010308
 8011700:	07010008 	.word	0x07010008
 8011704:	07000008 	.word	0x07000008
 8011708:	07000308 	.word	0x07000308
 801170c:	080145d4 	.word	0x080145d4
 8011710:	03d09000 	.word	0x03d09000
 8011714:	003d0900 	.word	0x003d0900

08011718 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8011718:	b580      	push	{r7, lr}
 801171a:	b084      	sub	sp, #16
 801171c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 801171e:	2300      	movs	r3, #0
 8011720:	60fb      	str	r3, [r7, #12]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8011722:	f7ff fa59 	bl	8010bd8 <LL_RCC_GetSysClkSource>
 8011726:	4603      	mov	r3, r0
 8011728:	2b18      	cmp	r3, #24
 801172a:	d84b      	bhi.n	80117c4 <RCC_GetSystemClockFreq+0xac>
 801172c:	a201      	add	r2, pc, #4	@ (adr r2, 8011734 <RCC_GetSystemClockFreq+0x1c>)
 801172e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011732:	bf00      	nop
 8011734:	08011799 	.word	0x08011799
 8011738:	080117c5 	.word	0x080117c5
 801173c:	080117c5 	.word	0x080117c5
 8011740:	080117c5 	.word	0x080117c5
 8011744:	080117c5 	.word	0x080117c5
 8011748:	080117c5 	.word	0x080117c5
 801174c:	080117c5 	.word	0x080117c5
 8011750:	080117c5 	.word	0x080117c5
 8011754:	080117ab 	.word	0x080117ab
 8011758:	080117c5 	.word	0x080117c5
 801175c:	080117c5 	.word	0x080117c5
 8011760:	080117c5 	.word	0x080117c5
 8011764:	080117c5 	.word	0x080117c5
 8011768:	080117c5 	.word	0x080117c5
 801176c:	080117c5 	.word	0x080117c5
 8011770:	080117c5 	.word	0x080117c5
 8011774:	080117b1 	.word	0x080117b1
 8011778:	080117c5 	.word	0x080117c5
 801177c:	080117c5 	.word	0x080117c5
 8011780:	080117c5 	.word	0x080117c5
 8011784:	080117c5 	.word	0x080117c5
 8011788:	080117c5 	.word	0x080117c5
 801178c:	080117c5 	.word	0x080117c5
 8011790:	080117c5 	.word	0x080117c5
 8011794:	080117b7 	.word	0x080117b7
  {
    /* No check on Ready: Won't be selected by hardware if not */
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8011798:	f7ff f9ea 	bl	8010b70 <LL_RCC_HSI_GetDivider>
 801179c:	4603      	mov	r3, r0
 801179e:	08db      	lsrs	r3, r3, #3
 80117a0:	4a0b      	ldr	r2, [pc, #44]	@ (80117d0 <RCC_GetSystemClockFreq+0xb8>)
 80117a2:	fa22 f303 	lsr.w	r3, r2, r3
 80117a6:	60fb      	str	r3, [r7, #12]
      break;
 80117a8:	e00d      	b.n	80117c6 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_CSI:
      frequency = CSI_VALUE;
 80117aa:	4b0a      	ldr	r3, [pc, #40]	@ (80117d4 <RCC_GetSystemClockFreq+0xbc>)
 80117ac:	60fb      	str	r3, [r7, #12]
      break;
 80117ae:	e00a      	b.n	80117c6 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:
      frequency = HSE_VALUE;
 80117b0:	4b09      	ldr	r3, [pc, #36]	@ (80117d8 <RCC_GetSystemClockFreq+0xc0>)
 80117b2:	60fb      	str	r3, [r7, #12]
      break;
 80117b4:	e007      	b.n	80117c6 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL1:
      LL_RCC_GetPLL1ClockFreq(&PLL_Clocks);
 80117b6:	463b      	mov	r3, r7
 80117b8:	4618      	mov	r0, r3
 80117ba:	f7ff fcb5 	bl	8011128 <LL_RCC_GetPLL1ClockFreq>
      frequency = PLL_Clocks.PLL_P_Frequency;
 80117be:	683b      	ldr	r3, [r7, #0]
 80117c0:	60fb      	str	r3, [r7, #12]
      break;
 80117c2:	e000      	b.n	80117c6 <RCC_GetSystemClockFreq+0xae>

    default:
      /* Nothing to do */
      break;
 80117c4:	bf00      	nop
  }

  return frequency;
 80117c6:	68fb      	ldr	r3, [r7, #12]
}
 80117c8:	4618      	mov	r0, r3
 80117ca:	3710      	adds	r7, #16
 80117cc:	46bd      	mov	sp, r7
 80117ce:	bd80      	pop	{r7, pc}
 80117d0:	03d09000 	.word	0x03d09000
 80117d4:	003d0900 	.word	0x003d0900
 80117d8:	017d7840 	.word	0x017d7840

080117dc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b082      	sub	sp, #8
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80117e4:	f7ff fa14 	bl	8010c10 <LL_RCC_GetAHBPrescaler>
 80117e8:	4603      	mov	r3, r0
 80117ea:	f003 030f 	and.w	r3, r3, #15
 80117ee:	4a05      	ldr	r2, [pc, #20]	@ (8011804 <RCC_GetHCLKClockFreq+0x28>)
 80117f0:	5cd3      	ldrb	r3, [r2, r3]
 80117f2:	f003 031f 	and.w	r3, r3, #31
 80117f6:	687a      	ldr	r2, [r7, #4]
 80117f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80117fc:	4618      	mov	r0, r3
 80117fe:	3708      	adds	r7, #8
 8011800:	46bd      	mov	sp, r7
 8011802:	bd80      	pop	{r7, pc}
 8011804:	080145d4 	.word	0x080145d4

08011808 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8011808:	b580      	push	{r7, lr}
 801180a:	b082      	sub	sp, #8
 801180c:	af00      	add	r7, sp, #0
 801180e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8011810:	f7ff fa0c 	bl	8010c2c <LL_RCC_GetAPB1Prescaler>
 8011814:	4603      	mov	r3, r0
 8011816:	091b      	lsrs	r3, r3, #4
 8011818:	f003 0307 	and.w	r3, r3, #7
 801181c:	4a05      	ldr	r2, [pc, #20]	@ (8011834 <RCC_GetPCLK1ClockFreq+0x2c>)
 801181e:	5cd3      	ldrb	r3, [r2, r3]
 8011820:	f003 031f 	and.w	r3, r3, #31
 8011824:	687a      	ldr	r2, [r7, #4]
 8011826:	fa22 f303 	lsr.w	r3, r2, r3
}
 801182a:	4618      	mov	r0, r3
 801182c:	3708      	adds	r7, #8
 801182e:	46bd      	mov	sp, r7
 8011830:	bd80      	pop	{r7, pc}
 8011832:	bf00      	nop
 8011834:	080145d4 	.word	0x080145d4

08011838 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8011838:	b580      	push	{r7, lr}
 801183a:	b082      	sub	sp, #8
 801183c:	af00      	add	r7, sp, #0
 801183e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8011840:	f7ff fa02 	bl	8010c48 <LL_RCC_GetAPB2Prescaler>
 8011844:	4603      	mov	r3, r0
 8011846:	0a1b      	lsrs	r3, r3, #8
 8011848:	f003 0307 	and.w	r3, r3, #7
 801184c:	4a05      	ldr	r2, [pc, #20]	@ (8011864 <RCC_GetPCLK2ClockFreq+0x2c>)
 801184e:	5cd3      	ldrb	r3, [r2, r3]
 8011850:	f003 031f 	and.w	r3, r3, #31
 8011854:	687a      	ldr	r2, [r7, #4]
 8011856:	fa22 f303 	lsr.w	r3, r2, r3
}
 801185a:	4618      	mov	r0, r3
 801185c:	3708      	adds	r7, #8
 801185e:	46bd      	mov	sp, r7
 8011860:	bd80      	pop	{r7, pc}
 8011862:	bf00      	nop
 8011864:	080145d4 	.word	0x080145d4

08011868 <LL_USART_IsEnabled>:
{
 8011868:	b480      	push	{r7}
 801186a:	b083      	sub	sp, #12
 801186c:	af00      	add	r7, sp, #0
 801186e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	f003 0301 	and.w	r3, r3, #1
 8011878:	2b01      	cmp	r3, #1
 801187a:	d101      	bne.n	8011880 <LL_USART_IsEnabled+0x18>
 801187c:	2301      	movs	r3, #1
 801187e:	e000      	b.n	8011882 <LL_USART_IsEnabled+0x1a>
 8011880:	2300      	movs	r3, #0
}
 8011882:	4618      	mov	r0, r3
 8011884:	370c      	adds	r7, #12
 8011886:	46bd      	mov	sp, r7
 8011888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801188c:	4770      	bx	lr

0801188e <LL_USART_SetPrescaler>:
{
 801188e:	b480      	push	{r7}
 8011890:	b083      	sub	sp, #12
 8011892:	af00      	add	r7, sp, #0
 8011894:	6078      	str	r0, [r7, #4]
 8011896:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801189c:	f023 030f 	bic.w	r3, r3, #15
 80118a0:	683a      	ldr	r2, [r7, #0]
 80118a2:	b292      	uxth	r2, r2
 80118a4:	431a      	orrs	r2, r3
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80118aa:	bf00      	nop
 80118ac:	370c      	adds	r7, #12
 80118ae:	46bd      	mov	sp, r7
 80118b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b4:	4770      	bx	lr

080118b6 <LL_USART_SetStopBitsLength>:
{
 80118b6:	b480      	push	{r7}
 80118b8:	b083      	sub	sp, #12
 80118ba:	af00      	add	r7, sp, #0
 80118bc:	6078      	str	r0, [r7, #4]
 80118be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	685b      	ldr	r3, [r3, #4]
 80118c4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80118c8:	683b      	ldr	r3, [r7, #0]
 80118ca:	431a      	orrs	r2, r3
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	605a      	str	r2, [r3, #4]
}
 80118d0:	bf00      	nop
 80118d2:	370c      	adds	r7, #12
 80118d4:	46bd      	mov	sp, r7
 80118d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118da:	4770      	bx	lr

080118dc <LL_USART_SetHWFlowCtrl>:
{
 80118dc:	b480      	push	{r7}
 80118de:	b083      	sub	sp, #12
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	6078      	str	r0, [r7, #4]
 80118e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	689b      	ldr	r3, [r3, #8]
 80118ea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80118ee:	683b      	ldr	r3, [r7, #0]
 80118f0:	431a      	orrs	r2, r3
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	609a      	str	r2, [r3, #8]
}
 80118f6:	bf00      	nop
 80118f8:	370c      	adds	r7, #12
 80118fa:	46bd      	mov	sp, r7
 80118fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011900:	4770      	bx	lr
	...

08011904 <LL_USART_SetBaudRate>:
{
 8011904:	b480      	push	{r7}
 8011906:	b087      	sub	sp, #28
 8011908:	af00      	add	r7, sp, #0
 801190a:	60f8      	str	r0, [r7, #12]
 801190c:	60b9      	str	r1, [r7, #8]
 801190e:	607a      	str	r2, [r7, #4]
 8011910:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	2b0b      	cmp	r3, #11
 8011916:	d83c      	bhi.n	8011992 <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 8011918:	6a3b      	ldr	r3, [r7, #32]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d039      	beq.n	8011992 <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 801191e:	683b      	ldr	r3, [r7, #0]
 8011920:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011924:	d122      	bne.n	801196c <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	b2db      	uxtb	r3, r3
 801192a:	461a      	mov	r2, r3
 801192c:	4b1c      	ldr	r3, [pc, #112]	@ (80119a0 <LL_USART_SetBaudRate+0x9c>)
 801192e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011932:	68ba      	ldr	r2, [r7, #8]
 8011934:	fbb2 f3f3 	udiv	r3, r2, r3
 8011938:	005a      	lsls	r2, r3, #1
 801193a:	6a3b      	ldr	r3, [r7, #32]
 801193c:	085b      	lsrs	r3, r3, #1
 801193e:	441a      	add	r2, r3
 8011940:	6a3b      	ldr	r3, [r7, #32]
 8011942:	fbb2 f3f3 	udiv	r3, r2, r3
 8011946:	b29b      	uxth	r3, r3
 8011948:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 801194a:	697a      	ldr	r2, [r7, #20]
 801194c:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8011950:	4013      	ands	r3, r2
 8011952:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011954:	697b      	ldr	r3, [r7, #20]
 8011956:	085b      	lsrs	r3, r3, #1
 8011958:	b29b      	uxth	r3, r3
 801195a:	f003 0307 	and.w	r3, r3, #7
 801195e:	693a      	ldr	r2, [r7, #16]
 8011960:	4313      	orrs	r3, r2
 8011962:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	693a      	ldr	r2, [r7, #16]
 8011968:	60da      	str	r2, [r3, #12]
}
 801196a:	e012      	b.n	8011992 <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	b2db      	uxtb	r3, r3
 8011970:	461a      	mov	r2, r3
 8011972:	4b0b      	ldr	r3, [pc, #44]	@ (80119a0 <LL_USART_SetBaudRate+0x9c>)
 8011974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011978:	68ba      	ldr	r2, [r7, #8]
 801197a:	fbb2 f2f3 	udiv	r2, r2, r3
 801197e:	6a3b      	ldr	r3, [r7, #32]
 8011980:	085b      	lsrs	r3, r3, #1
 8011982:	441a      	add	r2, r3
 8011984:	6a3b      	ldr	r3, [r7, #32]
 8011986:	fbb2 f3f3 	udiv	r3, r2, r3
 801198a:	b29b      	uxth	r3, r3
 801198c:	461a      	mov	r2, r3
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	60da      	str	r2, [r3, #12]
}
 8011992:	bf00      	nop
 8011994:	371c      	adds	r7, #28
 8011996:	46bd      	mov	sp, r7
 8011998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801199c:	4770      	bx	lr
 801199e:	bf00      	nop
 80119a0:	080145e4 	.word	0x080145e4

080119a4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b086      	sub	sp, #24
 80119a8:	af02      	add	r7, sp, #8
 80119aa:	6078      	str	r0, [r7, #4]
 80119ac:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80119ae:	2301      	movs	r3, #1
 80119b0:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80119b2:	2300      	movs	r3, #0
 80119b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80119b6:	6878      	ldr	r0, [r7, #4]
 80119b8:	f7ff ff56 	bl	8011868 <LL_USART_IsEnabled>
 80119bc:	4603      	mov	r3, r0
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d17f      	bne.n	8011ac2 <LL_USART_Init+0x11e>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	681a      	ldr	r2, [r3, #0]
 80119c6:	4b41      	ldr	r3, [pc, #260]	@ (8011acc <LL_USART_Init+0x128>)
 80119c8:	4013      	ands	r3, r2
 80119ca:	683a      	ldr	r2, [r7, #0]
 80119cc:	6891      	ldr	r1, [r2, #8]
 80119ce:	683a      	ldr	r2, [r7, #0]
 80119d0:	6912      	ldr	r2, [r2, #16]
 80119d2:	4311      	orrs	r1, r2
 80119d4:	683a      	ldr	r2, [r7, #0]
 80119d6:	6952      	ldr	r2, [r2, #20]
 80119d8:	4311      	orrs	r1, r2
 80119da:	683a      	ldr	r2, [r7, #0]
 80119dc:	69d2      	ldr	r2, [r2, #28]
 80119de:	430a      	orrs	r2, r1
 80119e0:	431a      	orrs	r2, r3
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80119e6:	683b      	ldr	r3, [r7, #0]
 80119e8:	68db      	ldr	r3, [r3, #12]
 80119ea:	4619      	mov	r1, r3
 80119ec:	6878      	ldr	r0, [r7, #4]
 80119ee:	f7ff ff62 	bl	80118b6 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80119f2:	683b      	ldr	r3, [r7, #0]
 80119f4:	699b      	ldr	r3, [r3, #24]
 80119f6:	4619      	mov	r1, r3
 80119f8:	6878      	ldr	r0, [r7, #4]
 80119fa:	f7ff ff6f 	bl	80118dc <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	4a33      	ldr	r2, [pc, #204]	@ (8011ad0 <LL_USART_Init+0x12c>)
 8011a02:	4293      	cmp	r3, r2
 8011a04:	d104      	bne.n	8011a10 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8011a06:	4833      	ldr	r0, [pc, #204]	@ (8011ad4 <LL_USART_Init+0x130>)
 8011a08:	f7ff fd98 	bl	801153c <LL_RCC_GetUSARTClockFreq>
 8011a0c:	60b8      	str	r0, [r7, #8]
 8011a0e:	e03d      	b.n	8011a8c <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART2)
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	4a31      	ldr	r2, [pc, #196]	@ (8011ad8 <LL_USART_Init+0x134>)
 8011a14:	4293      	cmp	r3, r2
 8011a16:	d104      	bne.n	8011a22 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8011a18:	4830      	ldr	r0, [pc, #192]	@ (8011adc <LL_USART_Init+0x138>)
 8011a1a:	f7ff fd8f 	bl	801153c <LL_RCC_GetUSARTClockFreq>
 8011a1e:	60b8      	str	r0, [r7, #8]
 8011a20:	e034      	b.n	8011a8c <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART3)
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	4a2e      	ldr	r2, [pc, #184]	@ (8011ae0 <LL_USART_Init+0x13c>)
 8011a26:	4293      	cmp	r3, r2
 8011a28:	d104      	bne.n	8011a34 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8011a2a:	482c      	ldr	r0, [pc, #176]	@ (8011adc <LL_USART_Init+0x138>)
 8011a2c:	f7ff fd86 	bl	801153c <LL_RCC_GetUSARTClockFreq>
 8011a30:	60b8      	str	r0, [r7, #8]
 8011a32:	e02b      	b.n	8011a8c <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART4)
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	4a2b      	ldr	r2, [pc, #172]	@ (8011ae4 <LL_USART_Init+0x140>)
 8011a38:	4293      	cmp	r3, r2
 8011a3a:	d104      	bne.n	8011a46 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8011a3c:	4827      	ldr	r0, [pc, #156]	@ (8011adc <LL_USART_Init+0x138>)
 8011a3e:	f7ff fd7d 	bl	801153c <LL_RCC_GetUSARTClockFreq>
 8011a42:	60b8      	str	r0, [r7, #8]
 8011a44:	e022      	b.n	8011a8c <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART5)
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	4a27      	ldr	r2, [pc, #156]	@ (8011ae8 <LL_USART_Init+0x144>)
 8011a4a:	4293      	cmp	r3, r2
 8011a4c:	d104      	bne.n	8011a58 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8011a4e:	4823      	ldr	r0, [pc, #140]	@ (8011adc <LL_USART_Init+0x138>)
 8011a50:	f7ff fd74 	bl	801153c <LL_RCC_GetUSARTClockFreq>
 8011a54:	60b8      	str	r0, [r7, #8]
 8011a56:	e019      	b.n	8011a8c <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART6)
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	4a24      	ldr	r2, [pc, #144]	@ (8011aec <LL_USART_Init+0x148>)
 8011a5c:	4293      	cmp	r3, r2
 8011a5e:	d104      	bne.n	8011a6a <LL_USART_Init+0xc6>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8011a60:	481c      	ldr	r0, [pc, #112]	@ (8011ad4 <LL_USART_Init+0x130>)
 8011a62:	f7ff fd6b 	bl	801153c <LL_RCC_GetUSARTClockFreq>
 8011a66:	60b8      	str	r0, [r7, #8]
 8011a68:	e010      	b.n	8011a8c <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART7)
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	4a20      	ldr	r2, [pc, #128]	@ (8011af0 <LL_USART_Init+0x14c>)
 8011a6e:	4293      	cmp	r3, r2
 8011a70:	d104      	bne.n	8011a7c <LL_USART_Init+0xd8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8011a72:	481a      	ldr	r0, [pc, #104]	@ (8011adc <LL_USART_Init+0x138>)
 8011a74:	f7ff fd62 	bl	801153c <LL_RCC_GetUSARTClockFreq>
 8011a78:	60b8      	str	r0, [r7, #8]
 8011a7a:	e007      	b.n	8011a8c <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART8)
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	4a1d      	ldr	r2, [pc, #116]	@ (8011af4 <LL_USART_Init+0x150>)
 8011a80:	4293      	cmp	r3, r2
 8011a82:	d103      	bne.n	8011a8c <LL_USART_Init+0xe8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8011a84:	4815      	ldr	r0, [pc, #84]	@ (8011adc <LL_USART_Init+0x138>)
 8011a86:	f7ff fd59 	bl	801153c <LL_RCC_GetUSARTClockFreq>
 8011a8a:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8011a8c:	68bb      	ldr	r3, [r7, #8]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d011      	beq.n	8011ab6 <LL_USART_Init+0x112>
        && (USART_InitStruct->BaudRate != 0U))
 8011a92:	683b      	ldr	r3, [r7, #0]
 8011a94:	685b      	ldr	r3, [r3, #4]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d00d      	beq.n	8011ab6 <LL_USART_Init+0x112>
    {
      status = SUCCESS;
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 8011a9e:	683b      	ldr	r3, [r7, #0]
 8011aa0:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 8011aa2:	683b      	ldr	r3, [r7, #0]
 8011aa4:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 8011aa6:	683b      	ldr	r3, [r7, #0]
 8011aa8:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 8011aaa:	9300      	str	r3, [sp, #0]
 8011aac:	460b      	mov	r3, r1
 8011aae:	68b9      	ldr	r1, [r7, #8]
 8011ab0:	6878      	ldr	r0, [r7, #4]
 8011ab2:	f7ff ff27 	bl	8011904 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8011ab6:	683b      	ldr	r3, [r7, #0]
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	4619      	mov	r1, r3
 8011abc:	6878      	ldr	r0, [r7, #4]
 8011abe:	f7ff fee6 	bl	801188e <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8011ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	3710      	adds	r7, #16
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	bd80      	pop	{r7, pc}
 8011acc:	efff69f3 	.word	0xefff69f3
 8011ad0:	40011000 	.word	0x40011000
 8011ad4:	07000308 	.word	0x07000308
 8011ad8:	40004400 	.word	0x40004400
 8011adc:	07000008 	.word	0x07000008
 8011ae0:	40004800 	.word	0x40004800
 8011ae4:	40004c00 	.word	0x40004c00
 8011ae8:	40005000 	.word	0x40005000
 8011aec:	40011400 	.word	0x40011400
 8011af0:	40007800 	.word	0x40007800
 8011af4:	40007c00 	.word	0x40007c00

08011af8 <srand>:
 8011af8:	b538      	push	{r3, r4, r5, lr}
 8011afa:	4b10      	ldr	r3, [pc, #64]	@ (8011b3c <srand+0x44>)
 8011afc:	681d      	ldr	r5, [r3, #0]
 8011afe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011b00:	4604      	mov	r4, r0
 8011b02:	b9b3      	cbnz	r3, 8011b32 <srand+0x3a>
 8011b04:	2018      	movs	r0, #24
 8011b06:	f000 fca1 	bl	801244c <malloc>
 8011b0a:	4602      	mov	r2, r0
 8011b0c:	6328      	str	r0, [r5, #48]	@ 0x30
 8011b0e:	b920      	cbnz	r0, 8011b1a <srand+0x22>
 8011b10:	4b0b      	ldr	r3, [pc, #44]	@ (8011b40 <srand+0x48>)
 8011b12:	480c      	ldr	r0, [pc, #48]	@ (8011b44 <srand+0x4c>)
 8011b14:	2146      	movs	r1, #70	@ 0x46
 8011b16:	f000 fc31 	bl	801237c <__assert_func>
 8011b1a:	490b      	ldr	r1, [pc, #44]	@ (8011b48 <srand+0x50>)
 8011b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8011b4c <srand+0x54>)
 8011b1e:	e9c0 1300 	strd	r1, r3, [r0]
 8011b22:	4b0b      	ldr	r3, [pc, #44]	@ (8011b50 <srand+0x58>)
 8011b24:	6083      	str	r3, [r0, #8]
 8011b26:	230b      	movs	r3, #11
 8011b28:	8183      	strh	r3, [r0, #12]
 8011b2a:	2100      	movs	r1, #0
 8011b2c:	2001      	movs	r0, #1
 8011b2e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011b32:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011b34:	2200      	movs	r2, #0
 8011b36:	611c      	str	r4, [r3, #16]
 8011b38:	615a      	str	r2, [r3, #20]
 8011b3a:	bd38      	pop	{r3, r4, r5, pc}
 8011b3c:	240000e8 	.word	0x240000e8
 8011b40:	08014614 	.word	0x08014614
 8011b44:	0801462b 	.word	0x0801462b
 8011b48:	abcd330e 	.word	0xabcd330e
 8011b4c:	e66d1234 	.word	0xe66d1234
 8011b50:	0005deec 	.word	0x0005deec

08011b54 <rand>:
 8011b54:	4b16      	ldr	r3, [pc, #88]	@ (8011bb0 <rand+0x5c>)
 8011b56:	b510      	push	{r4, lr}
 8011b58:	681c      	ldr	r4, [r3, #0]
 8011b5a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011b5c:	b9b3      	cbnz	r3, 8011b8c <rand+0x38>
 8011b5e:	2018      	movs	r0, #24
 8011b60:	f000 fc74 	bl	801244c <malloc>
 8011b64:	4602      	mov	r2, r0
 8011b66:	6320      	str	r0, [r4, #48]	@ 0x30
 8011b68:	b920      	cbnz	r0, 8011b74 <rand+0x20>
 8011b6a:	4b12      	ldr	r3, [pc, #72]	@ (8011bb4 <rand+0x60>)
 8011b6c:	4812      	ldr	r0, [pc, #72]	@ (8011bb8 <rand+0x64>)
 8011b6e:	2152      	movs	r1, #82	@ 0x52
 8011b70:	f000 fc04 	bl	801237c <__assert_func>
 8011b74:	4911      	ldr	r1, [pc, #68]	@ (8011bbc <rand+0x68>)
 8011b76:	4b12      	ldr	r3, [pc, #72]	@ (8011bc0 <rand+0x6c>)
 8011b78:	e9c0 1300 	strd	r1, r3, [r0]
 8011b7c:	4b11      	ldr	r3, [pc, #68]	@ (8011bc4 <rand+0x70>)
 8011b7e:	6083      	str	r3, [r0, #8]
 8011b80:	230b      	movs	r3, #11
 8011b82:	8183      	strh	r3, [r0, #12]
 8011b84:	2100      	movs	r1, #0
 8011b86:	2001      	movs	r0, #1
 8011b88:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011b8c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011b8e:	480e      	ldr	r0, [pc, #56]	@ (8011bc8 <rand+0x74>)
 8011b90:	690b      	ldr	r3, [r1, #16]
 8011b92:	694c      	ldr	r4, [r1, #20]
 8011b94:	4a0d      	ldr	r2, [pc, #52]	@ (8011bcc <rand+0x78>)
 8011b96:	4358      	muls	r0, r3
 8011b98:	fb02 0004 	mla	r0, r2, r4, r0
 8011b9c:	fba3 3202 	umull	r3, r2, r3, r2
 8011ba0:	3301      	adds	r3, #1
 8011ba2:	eb40 0002 	adc.w	r0, r0, r2
 8011ba6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8011baa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8011bae:	bd10      	pop	{r4, pc}
 8011bb0:	240000e8 	.word	0x240000e8
 8011bb4:	08014614 	.word	0x08014614
 8011bb8:	0801462b 	.word	0x0801462b
 8011bbc:	abcd330e 	.word	0xabcd330e
 8011bc0:	e66d1234 	.word	0xe66d1234
 8011bc4:	0005deec 	.word	0x0005deec
 8011bc8:	5851f42d 	.word	0x5851f42d
 8011bcc:	4c957f2d 	.word	0x4c957f2d

08011bd0 <_strtol_l.isra.0>:
 8011bd0:	2b24      	cmp	r3, #36	@ 0x24
 8011bd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011bd6:	4686      	mov	lr, r0
 8011bd8:	4690      	mov	r8, r2
 8011bda:	d801      	bhi.n	8011be0 <_strtol_l.isra.0+0x10>
 8011bdc:	2b01      	cmp	r3, #1
 8011bde:	d106      	bne.n	8011bee <_strtol_l.isra.0+0x1e>
 8011be0:	f000 fb90 	bl	8012304 <__errno>
 8011be4:	2316      	movs	r3, #22
 8011be6:	6003      	str	r3, [r0, #0]
 8011be8:	2000      	movs	r0, #0
 8011bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bee:	4834      	ldr	r0, [pc, #208]	@ (8011cc0 <_strtol_l.isra.0+0xf0>)
 8011bf0:	460d      	mov	r5, r1
 8011bf2:	462a      	mov	r2, r5
 8011bf4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011bf8:	5d06      	ldrb	r6, [r0, r4]
 8011bfa:	f016 0608 	ands.w	r6, r6, #8
 8011bfe:	d1f8      	bne.n	8011bf2 <_strtol_l.isra.0+0x22>
 8011c00:	2c2d      	cmp	r4, #45	@ 0x2d
 8011c02:	d110      	bne.n	8011c26 <_strtol_l.isra.0+0x56>
 8011c04:	782c      	ldrb	r4, [r5, #0]
 8011c06:	2601      	movs	r6, #1
 8011c08:	1c95      	adds	r5, r2, #2
 8011c0a:	f033 0210 	bics.w	r2, r3, #16
 8011c0e:	d115      	bne.n	8011c3c <_strtol_l.isra.0+0x6c>
 8011c10:	2c30      	cmp	r4, #48	@ 0x30
 8011c12:	d10d      	bne.n	8011c30 <_strtol_l.isra.0+0x60>
 8011c14:	782a      	ldrb	r2, [r5, #0]
 8011c16:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011c1a:	2a58      	cmp	r2, #88	@ 0x58
 8011c1c:	d108      	bne.n	8011c30 <_strtol_l.isra.0+0x60>
 8011c1e:	786c      	ldrb	r4, [r5, #1]
 8011c20:	3502      	adds	r5, #2
 8011c22:	2310      	movs	r3, #16
 8011c24:	e00a      	b.n	8011c3c <_strtol_l.isra.0+0x6c>
 8011c26:	2c2b      	cmp	r4, #43	@ 0x2b
 8011c28:	bf04      	itt	eq
 8011c2a:	782c      	ldrbeq	r4, [r5, #0]
 8011c2c:	1c95      	addeq	r5, r2, #2
 8011c2e:	e7ec      	b.n	8011c0a <_strtol_l.isra.0+0x3a>
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d1f6      	bne.n	8011c22 <_strtol_l.isra.0+0x52>
 8011c34:	2c30      	cmp	r4, #48	@ 0x30
 8011c36:	bf14      	ite	ne
 8011c38:	230a      	movne	r3, #10
 8011c3a:	2308      	moveq	r3, #8
 8011c3c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011c40:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011c44:	2200      	movs	r2, #0
 8011c46:	fbbc f9f3 	udiv	r9, ip, r3
 8011c4a:	4610      	mov	r0, r2
 8011c4c:	fb03 ca19 	mls	sl, r3, r9, ip
 8011c50:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011c54:	2f09      	cmp	r7, #9
 8011c56:	d80f      	bhi.n	8011c78 <_strtol_l.isra.0+0xa8>
 8011c58:	463c      	mov	r4, r7
 8011c5a:	42a3      	cmp	r3, r4
 8011c5c:	dd1b      	ble.n	8011c96 <_strtol_l.isra.0+0xc6>
 8011c5e:	1c57      	adds	r7, r2, #1
 8011c60:	d007      	beq.n	8011c72 <_strtol_l.isra.0+0xa2>
 8011c62:	4581      	cmp	r9, r0
 8011c64:	d314      	bcc.n	8011c90 <_strtol_l.isra.0+0xc0>
 8011c66:	d101      	bne.n	8011c6c <_strtol_l.isra.0+0x9c>
 8011c68:	45a2      	cmp	sl, r4
 8011c6a:	db11      	blt.n	8011c90 <_strtol_l.isra.0+0xc0>
 8011c6c:	fb00 4003 	mla	r0, r0, r3, r4
 8011c70:	2201      	movs	r2, #1
 8011c72:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011c76:	e7eb      	b.n	8011c50 <_strtol_l.isra.0+0x80>
 8011c78:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011c7c:	2f19      	cmp	r7, #25
 8011c7e:	d801      	bhi.n	8011c84 <_strtol_l.isra.0+0xb4>
 8011c80:	3c37      	subs	r4, #55	@ 0x37
 8011c82:	e7ea      	b.n	8011c5a <_strtol_l.isra.0+0x8a>
 8011c84:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011c88:	2f19      	cmp	r7, #25
 8011c8a:	d804      	bhi.n	8011c96 <_strtol_l.isra.0+0xc6>
 8011c8c:	3c57      	subs	r4, #87	@ 0x57
 8011c8e:	e7e4      	b.n	8011c5a <_strtol_l.isra.0+0x8a>
 8011c90:	f04f 32ff 	mov.w	r2, #4294967295
 8011c94:	e7ed      	b.n	8011c72 <_strtol_l.isra.0+0xa2>
 8011c96:	1c53      	adds	r3, r2, #1
 8011c98:	d108      	bne.n	8011cac <_strtol_l.isra.0+0xdc>
 8011c9a:	2322      	movs	r3, #34	@ 0x22
 8011c9c:	f8ce 3000 	str.w	r3, [lr]
 8011ca0:	4660      	mov	r0, ip
 8011ca2:	f1b8 0f00 	cmp.w	r8, #0
 8011ca6:	d0a0      	beq.n	8011bea <_strtol_l.isra.0+0x1a>
 8011ca8:	1e69      	subs	r1, r5, #1
 8011caa:	e006      	b.n	8011cba <_strtol_l.isra.0+0xea>
 8011cac:	b106      	cbz	r6, 8011cb0 <_strtol_l.isra.0+0xe0>
 8011cae:	4240      	negs	r0, r0
 8011cb0:	f1b8 0f00 	cmp.w	r8, #0
 8011cb4:	d099      	beq.n	8011bea <_strtol_l.isra.0+0x1a>
 8011cb6:	2a00      	cmp	r2, #0
 8011cb8:	d1f6      	bne.n	8011ca8 <_strtol_l.isra.0+0xd8>
 8011cba:	f8c8 1000 	str.w	r1, [r8]
 8011cbe:	e794      	b.n	8011bea <_strtol_l.isra.0+0x1a>
 8011cc0:	080146f3 	.word	0x080146f3

08011cc4 <strtol>:
 8011cc4:	4613      	mov	r3, r2
 8011cc6:	460a      	mov	r2, r1
 8011cc8:	4601      	mov	r1, r0
 8011cca:	4802      	ldr	r0, [pc, #8]	@ (8011cd4 <strtol+0x10>)
 8011ccc:	6800      	ldr	r0, [r0, #0]
 8011cce:	f7ff bf7f 	b.w	8011bd0 <_strtol_l.isra.0>
 8011cd2:	bf00      	nop
 8011cd4:	240000e8 	.word	0x240000e8

08011cd8 <std>:
 8011cd8:	2300      	movs	r3, #0
 8011cda:	b510      	push	{r4, lr}
 8011cdc:	4604      	mov	r4, r0
 8011cde:	e9c0 3300 	strd	r3, r3, [r0]
 8011ce2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011ce6:	6083      	str	r3, [r0, #8]
 8011ce8:	8181      	strh	r1, [r0, #12]
 8011cea:	6643      	str	r3, [r0, #100]	@ 0x64
 8011cec:	81c2      	strh	r2, [r0, #14]
 8011cee:	6183      	str	r3, [r0, #24]
 8011cf0:	4619      	mov	r1, r3
 8011cf2:	2208      	movs	r2, #8
 8011cf4:	305c      	adds	r0, #92	@ 0x5c
 8011cf6:	f000 fa75 	bl	80121e4 <memset>
 8011cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8011d30 <std+0x58>)
 8011cfc:	6263      	str	r3, [r4, #36]	@ 0x24
 8011cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8011d34 <std+0x5c>)
 8011d00:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011d02:	4b0d      	ldr	r3, [pc, #52]	@ (8011d38 <std+0x60>)
 8011d04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011d06:	4b0d      	ldr	r3, [pc, #52]	@ (8011d3c <std+0x64>)
 8011d08:	6323      	str	r3, [r4, #48]	@ 0x30
 8011d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8011d40 <std+0x68>)
 8011d0c:	6224      	str	r4, [r4, #32]
 8011d0e:	429c      	cmp	r4, r3
 8011d10:	d006      	beq.n	8011d20 <std+0x48>
 8011d12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011d16:	4294      	cmp	r4, r2
 8011d18:	d002      	beq.n	8011d20 <std+0x48>
 8011d1a:	33d0      	adds	r3, #208	@ 0xd0
 8011d1c:	429c      	cmp	r4, r3
 8011d1e:	d105      	bne.n	8011d2c <std+0x54>
 8011d20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d28:	f000 bb16 	b.w	8012358 <__retarget_lock_init_recursive>
 8011d2c:	bd10      	pop	{r4, pc}
 8011d2e:	bf00      	nop
 8011d30:	08011fed 	.word	0x08011fed
 8011d34:	0801200f 	.word	0x0801200f
 8011d38:	08012047 	.word	0x08012047
 8011d3c:	0801206b 	.word	0x0801206b
 8011d40:	24042d44 	.word	0x24042d44

08011d44 <stdio_exit_handler>:
 8011d44:	4a02      	ldr	r2, [pc, #8]	@ (8011d50 <stdio_exit_handler+0xc>)
 8011d46:	4903      	ldr	r1, [pc, #12]	@ (8011d54 <stdio_exit_handler+0x10>)
 8011d48:	4803      	ldr	r0, [pc, #12]	@ (8011d58 <stdio_exit_handler+0x14>)
 8011d4a:	f000 b869 	b.w	8011e20 <_fwalk_sglue>
 8011d4e:	bf00      	nop
 8011d50:	240000dc 	.word	0x240000dc
 8011d54:	08012f0d 	.word	0x08012f0d
 8011d58:	240000ec 	.word	0x240000ec

08011d5c <cleanup_stdio>:
 8011d5c:	6841      	ldr	r1, [r0, #4]
 8011d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8011d90 <cleanup_stdio+0x34>)
 8011d60:	4299      	cmp	r1, r3
 8011d62:	b510      	push	{r4, lr}
 8011d64:	4604      	mov	r4, r0
 8011d66:	d001      	beq.n	8011d6c <cleanup_stdio+0x10>
 8011d68:	f001 f8d0 	bl	8012f0c <_fflush_r>
 8011d6c:	68a1      	ldr	r1, [r4, #8]
 8011d6e:	4b09      	ldr	r3, [pc, #36]	@ (8011d94 <cleanup_stdio+0x38>)
 8011d70:	4299      	cmp	r1, r3
 8011d72:	d002      	beq.n	8011d7a <cleanup_stdio+0x1e>
 8011d74:	4620      	mov	r0, r4
 8011d76:	f001 f8c9 	bl	8012f0c <_fflush_r>
 8011d7a:	68e1      	ldr	r1, [r4, #12]
 8011d7c:	4b06      	ldr	r3, [pc, #24]	@ (8011d98 <cleanup_stdio+0x3c>)
 8011d7e:	4299      	cmp	r1, r3
 8011d80:	d004      	beq.n	8011d8c <cleanup_stdio+0x30>
 8011d82:	4620      	mov	r0, r4
 8011d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d88:	f001 b8c0 	b.w	8012f0c <_fflush_r>
 8011d8c:	bd10      	pop	{r4, pc}
 8011d8e:	bf00      	nop
 8011d90:	24042d44 	.word	0x24042d44
 8011d94:	24042dac 	.word	0x24042dac
 8011d98:	24042e14 	.word	0x24042e14

08011d9c <global_stdio_init.part.0>:
 8011d9c:	b510      	push	{r4, lr}
 8011d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8011dcc <global_stdio_init.part.0+0x30>)
 8011da0:	4c0b      	ldr	r4, [pc, #44]	@ (8011dd0 <global_stdio_init.part.0+0x34>)
 8011da2:	4a0c      	ldr	r2, [pc, #48]	@ (8011dd4 <global_stdio_init.part.0+0x38>)
 8011da4:	601a      	str	r2, [r3, #0]
 8011da6:	4620      	mov	r0, r4
 8011da8:	2200      	movs	r2, #0
 8011daa:	2104      	movs	r1, #4
 8011dac:	f7ff ff94 	bl	8011cd8 <std>
 8011db0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011db4:	2201      	movs	r2, #1
 8011db6:	2109      	movs	r1, #9
 8011db8:	f7ff ff8e 	bl	8011cd8 <std>
 8011dbc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011dc0:	2202      	movs	r2, #2
 8011dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011dc6:	2112      	movs	r1, #18
 8011dc8:	f7ff bf86 	b.w	8011cd8 <std>
 8011dcc:	24042e7c 	.word	0x24042e7c
 8011dd0:	24042d44 	.word	0x24042d44
 8011dd4:	08011d45 	.word	0x08011d45

08011dd8 <__sfp_lock_acquire>:
 8011dd8:	4801      	ldr	r0, [pc, #4]	@ (8011de0 <__sfp_lock_acquire+0x8>)
 8011dda:	f000 babe 	b.w	801235a <__retarget_lock_acquire_recursive>
 8011dde:	bf00      	nop
 8011de0:	24042e85 	.word	0x24042e85

08011de4 <__sfp_lock_release>:
 8011de4:	4801      	ldr	r0, [pc, #4]	@ (8011dec <__sfp_lock_release+0x8>)
 8011de6:	f000 bab9 	b.w	801235c <__retarget_lock_release_recursive>
 8011dea:	bf00      	nop
 8011dec:	24042e85 	.word	0x24042e85

08011df0 <__sinit>:
 8011df0:	b510      	push	{r4, lr}
 8011df2:	4604      	mov	r4, r0
 8011df4:	f7ff fff0 	bl	8011dd8 <__sfp_lock_acquire>
 8011df8:	6a23      	ldr	r3, [r4, #32]
 8011dfa:	b11b      	cbz	r3, 8011e04 <__sinit+0x14>
 8011dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e00:	f7ff bff0 	b.w	8011de4 <__sfp_lock_release>
 8011e04:	4b04      	ldr	r3, [pc, #16]	@ (8011e18 <__sinit+0x28>)
 8011e06:	6223      	str	r3, [r4, #32]
 8011e08:	4b04      	ldr	r3, [pc, #16]	@ (8011e1c <__sinit+0x2c>)
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d1f5      	bne.n	8011dfc <__sinit+0xc>
 8011e10:	f7ff ffc4 	bl	8011d9c <global_stdio_init.part.0>
 8011e14:	e7f2      	b.n	8011dfc <__sinit+0xc>
 8011e16:	bf00      	nop
 8011e18:	08011d5d 	.word	0x08011d5d
 8011e1c:	24042e7c 	.word	0x24042e7c

08011e20 <_fwalk_sglue>:
 8011e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e24:	4607      	mov	r7, r0
 8011e26:	4688      	mov	r8, r1
 8011e28:	4614      	mov	r4, r2
 8011e2a:	2600      	movs	r6, #0
 8011e2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011e30:	f1b9 0901 	subs.w	r9, r9, #1
 8011e34:	d505      	bpl.n	8011e42 <_fwalk_sglue+0x22>
 8011e36:	6824      	ldr	r4, [r4, #0]
 8011e38:	2c00      	cmp	r4, #0
 8011e3a:	d1f7      	bne.n	8011e2c <_fwalk_sglue+0xc>
 8011e3c:	4630      	mov	r0, r6
 8011e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e42:	89ab      	ldrh	r3, [r5, #12]
 8011e44:	2b01      	cmp	r3, #1
 8011e46:	d907      	bls.n	8011e58 <_fwalk_sglue+0x38>
 8011e48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011e4c:	3301      	adds	r3, #1
 8011e4e:	d003      	beq.n	8011e58 <_fwalk_sglue+0x38>
 8011e50:	4629      	mov	r1, r5
 8011e52:	4638      	mov	r0, r7
 8011e54:	47c0      	blx	r8
 8011e56:	4306      	orrs	r6, r0
 8011e58:	3568      	adds	r5, #104	@ 0x68
 8011e5a:	e7e9      	b.n	8011e30 <_fwalk_sglue+0x10>

08011e5c <iprintf>:
 8011e5c:	b40f      	push	{r0, r1, r2, r3}
 8011e5e:	b507      	push	{r0, r1, r2, lr}
 8011e60:	4906      	ldr	r1, [pc, #24]	@ (8011e7c <iprintf+0x20>)
 8011e62:	ab04      	add	r3, sp, #16
 8011e64:	6808      	ldr	r0, [r1, #0]
 8011e66:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e6a:	6881      	ldr	r1, [r0, #8]
 8011e6c:	9301      	str	r3, [sp, #4]
 8011e6e:	f000 fd25 	bl	80128bc <_vfiprintf_r>
 8011e72:	b003      	add	sp, #12
 8011e74:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e78:	b004      	add	sp, #16
 8011e7a:	4770      	bx	lr
 8011e7c:	240000e8 	.word	0x240000e8

08011e80 <_puts_r>:
 8011e80:	6a03      	ldr	r3, [r0, #32]
 8011e82:	b570      	push	{r4, r5, r6, lr}
 8011e84:	6884      	ldr	r4, [r0, #8]
 8011e86:	4605      	mov	r5, r0
 8011e88:	460e      	mov	r6, r1
 8011e8a:	b90b      	cbnz	r3, 8011e90 <_puts_r+0x10>
 8011e8c:	f7ff ffb0 	bl	8011df0 <__sinit>
 8011e90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011e92:	07db      	lsls	r3, r3, #31
 8011e94:	d405      	bmi.n	8011ea2 <_puts_r+0x22>
 8011e96:	89a3      	ldrh	r3, [r4, #12]
 8011e98:	0598      	lsls	r0, r3, #22
 8011e9a:	d402      	bmi.n	8011ea2 <_puts_r+0x22>
 8011e9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011e9e:	f000 fa5c 	bl	801235a <__retarget_lock_acquire_recursive>
 8011ea2:	89a3      	ldrh	r3, [r4, #12]
 8011ea4:	0719      	lsls	r1, r3, #28
 8011ea6:	d502      	bpl.n	8011eae <_puts_r+0x2e>
 8011ea8:	6923      	ldr	r3, [r4, #16]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d135      	bne.n	8011f1a <_puts_r+0x9a>
 8011eae:	4621      	mov	r1, r4
 8011eb0:	4628      	mov	r0, r5
 8011eb2:	f000 f927 	bl	8012104 <__swsetup_r>
 8011eb6:	b380      	cbz	r0, 8011f1a <_puts_r+0x9a>
 8011eb8:	f04f 35ff 	mov.w	r5, #4294967295
 8011ebc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011ebe:	07da      	lsls	r2, r3, #31
 8011ec0:	d405      	bmi.n	8011ece <_puts_r+0x4e>
 8011ec2:	89a3      	ldrh	r3, [r4, #12]
 8011ec4:	059b      	lsls	r3, r3, #22
 8011ec6:	d402      	bmi.n	8011ece <_puts_r+0x4e>
 8011ec8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011eca:	f000 fa47 	bl	801235c <__retarget_lock_release_recursive>
 8011ece:	4628      	mov	r0, r5
 8011ed0:	bd70      	pop	{r4, r5, r6, pc}
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	da04      	bge.n	8011ee0 <_puts_r+0x60>
 8011ed6:	69a2      	ldr	r2, [r4, #24]
 8011ed8:	429a      	cmp	r2, r3
 8011eda:	dc17      	bgt.n	8011f0c <_puts_r+0x8c>
 8011edc:	290a      	cmp	r1, #10
 8011ede:	d015      	beq.n	8011f0c <_puts_r+0x8c>
 8011ee0:	6823      	ldr	r3, [r4, #0]
 8011ee2:	1c5a      	adds	r2, r3, #1
 8011ee4:	6022      	str	r2, [r4, #0]
 8011ee6:	7019      	strb	r1, [r3, #0]
 8011ee8:	68a3      	ldr	r3, [r4, #8]
 8011eea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011eee:	3b01      	subs	r3, #1
 8011ef0:	60a3      	str	r3, [r4, #8]
 8011ef2:	2900      	cmp	r1, #0
 8011ef4:	d1ed      	bne.n	8011ed2 <_puts_r+0x52>
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	da11      	bge.n	8011f1e <_puts_r+0x9e>
 8011efa:	4622      	mov	r2, r4
 8011efc:	210a      	movs	r1, #10
 8011efe:	4628      	mov	r0, r5
 8011f00:	f000 f8c2 	bl	8012088 <__swbuf_r>
 8011f04:	3001      	adds	r0, #1
 8011f06:	d0d7      	beq.n	8011eb8 <_puts_r+0x38>
 8011f08:	250a      	movs	r5, #10
 8011f0a:	e7d7      	b.n	8011ebc <_puts_r+0x3c>
 8011f0c:	4622      	mov	r2, r4
 8011f0e:	4628      	mov	r0, r5
 8011f10:	f000 f8ba 	bl	8012088 <__swbuf_r>
 8011f14:	3001      	adds	r0, #1
 8011f16:	d1e7      	bne.n	8011ee8 <_puts_r+0x68>
 8011f18:	e7ce      	b.n	8011eb8 <_puts_r+0x38>
 8011f1a:	3e01      	subs	r6, #1
 8011f1c:	e7e4      	b.n	8011ee8 <_puts_r+0x68>
 8011f1e:	6823      	ldr	r3, [r4, #0]
 8011f20:	1c5a      	adds	r2, r3, #1
 8011f22:	6022      	str	r2, [r4, #0]
 8011f24:	220a      	movs	r2, #10
 8011f26:	701a      	strb	r2, [r3, #0]
 8011f28:	e7ee      	b.n	8011f08 <_puts_r+0x88>
	...

08011f2c <puts>:
 8011f2c:	4b02      	ldr	r3, [pc, #8]	@ (8011f38 <puts+0xc>)
 8011f2e:	4601      	mov	r1, r0
 8011f30:	6818      	ldr	r0, [r3, #0]
 8011f32:	f7ff bfa5 	b.w	8011e80 <_puts_r>
 8011f36:	bf00      	nop
 8011f38:	240000e8 	.word	0x240000e8

08011f3c <sniprintf>:
 8011f3c:	b40c      	push	{r2, r3}
 8011f3e:	b530      	push	{r4, r5, lr}
 8011f40:	4b18      	ldr	r3, [pc, #96]	@ (8011fa4 <sniprintf+0x68>)
 8011f42:	1e0c      	subs	r4, r1, #0
 8011f44:	681d      	ldr	r5, [r3, #0]
 8011f46:	b09d      	sub	sp, #116	@ 0x74
 8011f48:	da08      	bge.n	8011f5c <sniprintf+0x20>
 8011f4a:	238b      	movs	r3, #139	@ 0x8b
 8011f4c:	602b      	str	r3, [r5, #0]
 8011f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8011f52:	b01d      	add	sp, #116	@ 0x74
 8011f54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011f58:	b002      	add	sp, #8
 8011f5a:	4770      	bx	lr
 8011f5c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8011f60:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011f64:	f04f 0300 	mov.w	r3, #0
 8011f68:	931b      	str	r3, [sp, #108]	@ 0x6c
 8011f6a:	bf14      	ite	ne
 8011f6c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011f70:	4623      	moveq	r3, r4
 8011f72:	9304      	str	r3, [sp, #16]
 8011f74:	9307      	str	r3, [sp, #28]
 8011f76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011f7a:	9002      	str	r0, [sp, #8]
 8011f7c:	9006      	str	r0, [sp, #24]
 8011f7e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011f82:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011f84:	ab21      	add	r3, sp, #132	@ 0x84
 8011f86:	a902      	add	r1, sp, #8
 8011f88:	4628      	mov	r0, r5
 8011f8a:	9301      	str	r3, [sp, #4]
 8011f8c:	f000 fb70 	bl	8012670 <_svfiprintf_r>
 8011f90:	1c43      	adds	r3, r0, #1
 8011f92:	bfbc      	itt	lt
 8011f94:	238b      	movlt	r3, #139	@ 0x8b
 8011f96:	602b      	strlt	r3, [r5, #0]
 8011f98:	2c00      	cmp	r4, #0
 8011f9a:	d0da      	beq.n	8011f52 <sniprintf+0x16>
 8011f9c:	9b02      	ldr	r3, [sp, #8]
 8011f9e:	2200      	movs	r2, #0
 8011fa0:	701a      	strb	r2, [r3, #0]
 8011fa2:	e7d6      	b.n	8011f52 <sniprintf+0x16>
 8011fa4:	240000e8 	.word	0x240000e8

08011fa8 <siprintf>:
 8011fa8:	b40e      	push	{r1, r2, r3}
 8011faa:	b510      	push	{r4, lr}
 8011fac:	b09d      	sub	sp, #116	@ 0x74
 8011fae:	ab1f      	add	r3, sp, #124	@ 0x7c
 8011fb0:	9002      	str	r0, [sp, #8]
 8011fb2:	9006      	str	r0, [sp, #24]
 8011fb4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011fb8:	480a      	ldr	r0, [pc, #40]	@ (8011fe4 <siprintf+0x3c>)
 8011fba:	9107      	str	r1, [sp, #28]
 8011fbc:	9104      	str	r1, [sp, #16]
 8011fbe:	490a      	ldr	r1, [pc, #40]	@ (8011fe8 <siprintf+0x40>)
 8011fc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8011fc4:	9105      	str	r1, [sp, #20]
 8011fc6:	2400      	movs	r4, #0
 8011fc8:	a902      	add	r1, sp, #8
 8011fca:	6800      	ldr	r0, [r0, #0]
 8011fcc:	9301      	str	r3, [sp, #4]
 8011fce:	941b      	str	r4, [sp, #108]	@ 0x6c
 8011fd0:	f000 fb4e 	bl	8012670 <_svfiprintf_r>
 8011fd4:	9b02      	ldr	r3, [sp, #8]
 8011fd6:	701c      	strb	r4, [r3, #0]
 8011fd8:	b01d      	add	sp, #116	@ 0x74
 8011fda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011fde:	b003      	add	sp, #12
 8011fe0:	4770      	bx	lr
 8011fe2:	bf00      	nop
 8011fe4:	240000e8 	.word	0x240000e8
 8011fe8:	ffff0208 	.word	0xffff0208

08011fec <__sread>:
 8011fec:	b510      	push	{r4, lr}
 8011fee:	460c      	mov	r4, r1
 8011ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ff4:	f000 f962 	bl	80122bc <_read_r>
 8011ff8:	2800      	cmp	r0, #0
 8011ffa:	bfab      	itete	ge
 8011ffc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011ffe:	89a3      	ldrhlt	r3, [r4, #12]
 8012000:	181b      	addge	r3, r3, r0
 8012002:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012006:	bfac      	ite	ge
 8012008:	6563      	strge	r3, [r4, #84]	@ 0x54
 801200a:	81a3      	strhlt	r3, [r4, #12]
 801200c:	bd10      	pop	{r4, pc}

0801200e <__swrite>:
 801200e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012012:	461f      	mov	r7, r3
 8012014:	898b      	ldrh	r3, [r1, #12]
 8012016:	05db      	lsls	r3, r3, #23
 8012018:	4605      	mov	r5, r0
 801201a:	460c      	mov	r4, r1
 801201c:	4616      	mov	r6, r2
 801201e:	d505      	bpl.n	801202c <__swrite+0x1e>
 8012020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012024:	2302      	movs	r3, #2
 8012026:	2200      	movs	r2, #0
 8012028:	f000 f936 	bl	8012298 <_lseek_r>
 801202c:	89a3      	ldrh	r3, [r4, #12]
 801202e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012032:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012036:	81a3      	strh	r3, [r4, #12]
 8012038:	4632      	mov	r2, r6
 801203a:	463b      	mov	r3, r7
 801203c:	4628      	mov	r0, r5
 801203e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012042:	f000 b94d 	b.w	80122e0 <_write_r>

08012046 <__sseek>:
 8012046:	b510      	push	{r4, lr}
 8012048:	460c      	mov	r4, r1
 801204a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801204e:	f000 f923 	bl	8012298 <_lseek_r>
 8012052:	1c43      	adds	r3, r0, #1
 8012054:	89a3      	ldrh	r3, [r4, #12]
 8012056:	bf15      	itete	ne
 8012058:	6560      	strne	r0, [r4, #84]	@ 0x54
 801205a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801205e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012062:	81a3      	strheq	r3, [r4, #12]
 8012064:	bf18      	it	ne
 8012066:	81a3      	strhne	r3, [r4, #12]
 8012068:	bd10      	pop	{r4, pc}

0801206a <__sclose>:
 801206a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801206e:	f000 b903 	b.w	8012278 <_close_r>
	...

08012074 <viprintf>:
 8012074:	460b      	mov	r3, r1
 8012076:	4903      	ldr	r1, [pc, #12]	@ (8012084 <viprintf+0x10>)
 8012078:	4602      	mov	r2, r0
 801207a:	6808      	ldr	r0, [r1, #0]
 801207c:	6881      	ldr	r1, [r0, #8]
 801207e:	f000 bc1d 	b.w	80128bc <_vfiprintf_r>
 8012082:	bf00      	nop
 8012084:	240000e8 	.word	0x240000e8

08012088 <__swbuf_r>:
 8012088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801208a:	460e      	mov	r6, r1
 801208c:	4614      	mov	r4, r2
 801208e:	4605      	mov	r5, r0
 8012090:	b118      	cbz	r0, 801209a <__swbuf_r+0x12>
 8012092:	6a03      	ldr	r3, [r0, #32]
 8012094:	b90b      	cbnz	r3, 801209a <__swbuf_r+0x12>
 8012096:	f7ff feab 	bl	8011df0 <__sinit>
 801209a:	69a3      	ldr	r3, [r4, #24]
 801209c:	60a3      	str	r3, [r4, #8]
 801209e:	89a3      	ldrh	r3, [r4, #12]
 80120a0:	071a      	lsls	r2, r3, #28
 80120a2:	d501      	bpl.n	80120a8 <__swbuf_r+0x20>
 80120a4:	6923      	ldr	r3, [r4, #16]
 80120a6:	b943      	cbnz	r3, 80120ba <__swbuf_r+0x32>
 80120a8:	4621      	mov	r1, r4
 80120aa:	4628      	mov	r0, r5
 80120ac:	f000 f82a 	bl	8012104 <__swsetup_r>
 80120b0:	b118      	cbz	r0, 80120ba <__swbuf_r+0x32>
 80120b2:	f04f 37ff 	mov.w	r7, #4294967295
 80120b6:	4638      	mov	r0, r7
 80120b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120ba:	6823      	ldr	r3, [r4, #0]
 80120bc:	6922      	ldr	r2, [r4, #16]
 80120be:	1a98      	subs	r0, r3, r2
 80120c0:	6963      	ldr	r3, [r4, #20]
 80120c2:	b2f6      	uxtb	r6, r6
 80120c4:	4283      	cmp	r3, r0
 80120c6:	4637      	mov	r7, r6
 80120c8:	dc05      	bgt.n	80120d6 <__swbuf_r+0x4e>
 80120ca:	4621      	mov	r1, r4
 80120cc:	4628      	mov	r0, r5
 80120ce:	f000 ff1d 	bl	8012f0c <_fflush_r>
 80120d2:	2800      	cmp	r0, #0
 80120d4:	d1ed      	bne.n	80120b2 <__swbuf_r+0x2a>
 80120d6:	68a3      	ldr	r3, [r4, #8]
 80120d8:	3b01      	subs	r3, #1
 80120da:	60a3      	str	r3, [r4, #8]
 80120dc:	6823      	ldr	r3, [r4, #0]
 80120de:	1c5a      	adds	r2, r3, #1
 80120e0:	6022      	str	r2, [r4, #0]
 80120e2:	701e      	strb	r6, [r3, #0]
 80120e4:	6962      	ldr	r2, [r4, #20]
 80120e6:	1c43      	adds	r3, r0, #1
 80120e8:	429a      	cmp	r2, r3
 80120ea:	d004      	beq.n	80120f6 <__swbuf_r+0x6e>
 80120ec:	89a3      	ldrh	r3, [r4, #12]
 80120ee:	07db      	lsls	r3, r3, #31
 80120f0:	d5e1      	bpl.n	80120b6 <__swbuf_r+0x2e>
 80120f2:	2e0a      	cmp	r6, #10
 80120f4:	d1df      	bne.n	80120b6 <__swbuf_r+0x2e>
 80120f6:	4621      	mov	r1, r4
 80120f8:	4628      	mov	r0, r5
 80120fa:	f000 ff07 	bl	8012f0c <_fflush_r>
 80120fe:	2800      	cmp	r0, #0
 8012100:	d0d9      	beq.n	80120b6 <__swbuf_r+0x2e>
 8012102:	e7d6      	b.n	80120b2 <__swbuf_r+0x2a>

08012104 <__swsetup_r>:
 8012104:	b538      	push	{r3, r4, r5, lr}
 8012106:	4b29      	ldr	r3, [pc, #164]	@ (80121ac <__swsetup_r+0xa8>)
 8012108:	4605      	mov	r5, r0
 801210a:	6818      	ldr	r0, [r3, #0]
 801210c:	460c      	mov	r4, r1
 801210e:	b118      	cbz	r0, 8012118 <__swsetup_r+0x14>
 8012110:	6a03      	ldr	r3, [r0, #32]
 8012112:	b90b      	cbnz	r3, 8012118 <__swsetup_r+0x14>
 8012114:	f7ff fe6c 	bl	8011df0 <__sinit>
 8012118:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801211c:	0719      	lsls	r1, r3, #28
 801211e:	d422      	bmi.n	8012166 <__swsetup_r+0x62>
 8012120:	06da      	lsls	r2, r3, #27
 8012122:	d407      	bmi.n	8012134 <__swsetup_r+0x30>
 8012124:	2209      	movs	r2, #9
 8012126:	602a      	str	r2, [r5, #0]
 8012128:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801212c:	81a3      	strh	r3, [r4, #12]
 801212e:	f04f 30ff 	mov.w	r0, #4294967295
 8012132:	e033      	b.n	801219c <__swsetup_r+0x98>
 8012134:	0758      	lsls	r0, r3, #29
 8012136:	d512      	bpl.n	801215e <__swsetup_r+0x5a>
 8012138:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801213a:	b141      	cbz	r1, 801214e <__swsetup_r+0x4a>
 801213c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012140:	4299      	cmp	r1, r3
 8012142:	d002      	beq.n	801214a <__swsetup_r+0x46>
 8012144:	4628      	mov	r0, r5
 8012146:	f000 f937 	bl	80123b8 <_free_r>
 801214a:	2300      	movs	r3, #0
 801214c:	6363      	str	r3, [r4, #52]	@ 0x34
 801214e:	89a3      	ldrh	r3, [r4, #12]
 8012150:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012154:	81a3      	strh	r3, [r4, #12]
 8012156:	2300      	movs	r3, #0
 8012158:	6063      	str	r3, [r4, #4]
 801215a:	6923      	ldr	r3, [r4, #16]
 801215c:	6023      	str	r3, [r4, #0]
 801215e:	89a3      	ldrh	r3, [r4, #12]
 8012160:	f043 0308 	orr.w	r3, r3, #8
 8012164:	81a3      	strh	r3, [r4, #12]
 8012166:	6923      	ldr	r3, [r4, #16]
 8012168:	b94b      	cbnz	r3, 801217e <__swsetup_r+0x7a>
 801216a:	89a3      	ldrh	r3, [r4, #12]
 801216c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012170:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012174:	d003      	beq.n	801217e <__swsetup_r+0x7a>
 8012176:	4621      	mov	r1, r4
 8012178:	4628      	mov	r0, r5
 801217a:	f000 ff27 	bl	8012fcc <__smakebuf_r>
 801217e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012182:	f013 0201 	ands.w	r2, r3, #1
 8012186:	d00a      	beq.n	801219e <__swsetup_r+0x9a>
 8012188:	2200      	movs	r2, #0
 801218a:	60a2      	str	r2, [r4, #8]
 801218c:	6962      	ldr	r2, [r4, #20]
 801218e:	4252      	negs	r2, r2
 8012190:	61a2      	str	r2, [r4, #24]
 8012192:	6922      	ldr	r2, [r4, #16]
 8012194:	b942      	cbnz	r2, 80121a8 <__swsetup_r+0xa4>
 8012196:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801219a:	d1c5      	bne.n	8012128 <__swsetup_r+0x24>
 801219c:	bd38      	pop	{r3, r4, r5, pc}
 801219e:	0799      	lsls	r1, r3, #30
 80121a0:	bf58      	it	pl
 80121a2:	6962      	ldrpl	r2, [r4, #20]
 80121a4:	60a2      	str	r2, [r4, #8]
 80121a6:	e7f4      	b.n	8012192 <__swsetup_r+0x8e>
 80121a8:	2000      	movs	r0, #0
 80121aa:	e7f7      	b.n	801219c <__swsetup_r+0x98>
 80121ac:	240000e8 	.word	0x240000e8

080121b0 <memmove>:
 80121b0:	4288      	cmp	r0, r1
 80121b2:	b510      	push	{r4, lr}
 80121b4:	eb01 0402 	add.w	r4, r1, r2
 80121b8:	d902      	bls.n	80121c0 <memmove+0x10>
 80121ba:	4284      	cmp	r4, r0
 80121bc:	4623      	mov	r3, r4
 80121be:	d807      	bhi.n	80121d0 <memmove+0x20>
 80121c0:	1e43      	subs	r3, r0, #1
 80121c2:	42a1      	cmp	r1, r4
 80121c4:	d008      	beq.n	80121d8 <memmove+0x28>
 80121c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80121ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80121ce:	e7f8      	b.n	80121c2 <memmove+0x12>
 80121d0:	4402      	add	r2, r0
 80121d2:	4601      	mov	r1, r0
 80121d4:	428a      	cmp	r2, r1
 80121d6:	d100      	bne.n	80121da <memmove+0x2a>
 80121d8:	bd10      	pop	{r4, pc}
 80121da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80121de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80121e2:	e7f7      	b.n	80121d4 <memmove+0x24>

080121e4 <memset>:
 80121e4:	4402      	add	r2, r0
 80121e6:	4603      	mov	r3, r0
 80121e8:	4293      	cmp	r3, r2
 80121ea:	d100      	bne.n	80121ee <memset+0xa>
 80121ec:	4770      	bx	lr
 80121ee:	f803 1b01 	strb.w	r1, [r3], #1
 80121f2:	e7f9      	b.n	80121e8 <memset+0x4>

080121f4 <strchr>:
 80121f4:	b2c9      	uxtb	r1, r1
 80121f6:	4603      	mov	r3, r0
 80121f8:	4618      	mov	r0, r3
 80121fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80121fe:	b112      	cbz	r2, 8012206 <strchr+0x12>
 8012200:	428a      	cmp	r2, r1
 8012202:	d1f9      	bne.n	80121f8 <strchr+0x4>
 8012204:	4770      	bx	lr
 8012206:	2900      	cmp	r1, #0
 8012208:	bf18      	it	ne
 801220a:	2000      	movne	r0, #0
 801220c:	4770      	bx	lr
	...

08012210 <strncasecmp>:
 8012210:	b570      	push	{r4, r5, r6, lr}
 8012212:	4e0e      	ldr	r6, [pc, #56]	@ (801224c <strncasecmp+0x3c>)
 8012214:	4605      	mov	r5, r0
 8012216:	440a      	add	r2, r1
 8012218:	428a      	cmp	r2, r1
 801221a:	d101      	bne.n	8012220 <strncasecmp+0x10>
 801221c:	2000      	movs	r0, #0
 801221e:	e013      	b.n	8012248 <strncasecmp+0x38>
 8012220:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012224:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012228:	5cf0      	ldrb	r0, [r6, r3]
 801222a:	f000 0003 	and.w	r0, r0, #3
 801222e:	2801      	cmp	r0, #1
 8012230:	5d30      	ldrb	r0, [r6, r4]
 8012232:	f000 0003 	and.w	r0, r0, #3
 8012236:	bf08      	it	eq
 8012238:	3320      	addeq	r3, #32
 801223a:	2801      	cmp	r0, #1
 801223c:	bf08      	it	eq
 801223e:	3420      	addeq	r4, #32
 8012240:	1b18      	subs	r0, r3, r4
 8012242:	d101      	bne.n	8012248 <strncasecmp+0x38>
 8012244:	2c00      	cmp	r4, #0
 8012246:	d1e7      	bne.n	8012218 <strncasecmp+0x8>
 8012248:	bd70      	pop	{r4, r5, r6, pc}
 801224a:	bf00      	nop
 801224c:	080146f3 	.word	0x080146f3

08012250 <strncpy>:
 8012250:	b510      	push	{r4, lr}
 8012252:	3901      	subs	r1, #1
 8012254:	4603      	mov	r3, r0
 8012256:	b132      	cbz	r2, 8012266 <strncpy+0x16>
 8012258:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801225c:	f803 4b01 	strb.w	r4, [r3], #1
 8012260:	3a01      	subs	r2, #1
 8012262:	2c00      	cmp	r4, #0
 8012264:	d1f7      	bne.n	8012256 <strncpy+0x6>
 8012266:	441a      	add	r2, r3
 8012268:	2100      	movs	r1, #0
 801226a:	4293      	cmp	r3, r2
 801226c:	d100      	bne.n	8012270 <strncpy+0x20>
 801226e:	bd10      	pop	{r4, pc}
 8012270:	f803 1b01 	strb.w	r1, [r3], #1
 8012274:	e7f9      	b.n	801226a <strncpy+0x1a>
	...

08012278 <_close_r>:
 8012278:	b538      	push	{r3, r4, r5, lr}
 801227a:	4d06      	ldr	r5, [pc, #24]	@ (8012294 <_close_r+0x1c>)
 801227c:	2300      	movs	r3, #0
 801227e:	4604      	mov	r4, r0
 8012280:	4608      	mov	r0, r1
 8012282:	602b      	str	r3, [r5, #0]
 8012284:	f7ef fc22 	bl	8001acc <_close>
 8012288:	1c43      	adds	r3, r0, #1
 801228a:	d102      	bne.n	8012292 <_close_r+0x1a>
 801228c:	682b      	ldr	r3, [r5, #0]
 801228e:	b103      	cbz	r3, 8012292 <_close_r+0x1a>
 8012290:	6023      	str	r3, [r4, #0]
 8012292:	bd38      	pop	{r3, r4, r5, pc}
 8012294:	24042e80 	.word	0x24042e80

08012298 <_lseek_r>:
 8012298:	b538      	push	{r3, r4, r5, lr}
 801229a:	4d07      	ldr	r5, [pc, #28]	@ (80122b8 <_lseek_r+0x20>)
 801229c:	4604      	mov	r4, r0
 801229e:	4608      	mov	r0, r1
 80122a0:	4611      	mov	r1, r2
 80122a2:	2200      	movs	r2, #0
 80122a4:	602a      	str	r2, [r5, #0]
 80122a6:	461a      	mov	r2, r3
 80122a8:	f7ef fc37 	bl	8001b1a <_lseek>
 80122ac:	1c43      	adds	r3, r0, #1
 80122ae:	d102      	bne.n	80122b6 <_lseek_r+0x1e>
 80122b0:	682b      	ldr	r3, [r5, #0]
 80122b2:	b103      	cbz	r3, 80122b6 <_lseek_r+0x1e>
 80122b4:	6023      	str	r3, [r4, #0]
 80122b6:	bd38      	pop	{r3, r4, r5, pc}
 80122b8:	24042e80 	.word	0x24042e80

080122bc <_read_r>:
 80122bc:	b538      	push	{r3, r4, r5, lr}
 80122be:	4d07      	ldr	r5, [pc, #28]	@ (80122dc <_read_r+0x20>)
 80122c0:	4604      	mov	r4, r0
 80122c2:	4608      	mov	r0, r1
 80122c4:	4611      	mov	r1, r2
 80122c6:	2200      	movs	r2, #0
 80122c8:	602a      	str	r2, [r5, #0]
 80122ca:	461a      	mov	r2, r3
 80122cc:	f7ef fbc5 	bl	8001a5a <_read>
 80122d0:	1c43      	adds	r3, r0, #1
 80122d2:	d102      	bne.n	80122da <_read_r+0x1e>
 80122d4:	682b      	ldr	r3, [r5, #0]
 80122d6:	b103      	cbz	r3, 80122da <_read_r+0x1e>
 80122d8:	6023      	str	r3, [r4, #0]
 80122da:	bd38      	pop	{r3, r4, r5, pc}
 80122dc:	24042e80 	.word	0x24042e80

080122e0 <_write_r>:
 80122e0:	b538      	push	{r3, r4, r5, lr}
 80122e2:	4d07      	ldr	r5, [pc, #28]	@ (8012300 <_write_r+0x20>)
 80122e4:	4604      	mov	r4, r0
 80122e6:	4608      	mov	r0, r1
 80122e8:	4611      	mov	r1, r2
 80122ea:	2200      	movs	r2, #0
 80122ec:	602a      	str	r2, [r5, #0]
 80122ee:	461a      	mov	r2, r3
 80122f0:	f7ef fbd0 	bl	8001a94 <_write>
 80122f4:	1c43      	adds	r3, r0, #1
 80122f6:	d102      	bne.n	80122fe <_write_r+0x1e>
 80122f8:	682b      	ldr	r3, [r5, #0]
 80122fa:	b103      	cbz	r3, 80122fe <_write_r+0x1e>
 80122fc:	6023      	str	r3, [r4, #0]
 80122fe:	bd38      	pop	{r3, r4, r5, pc}
 8012300:	24042e80 	.word	0x24042e80

08012304 <__errno>:
 8012304:	4b01      	ldr	r3, [pc, #4]	@ (801230c <__errno+0x8>)
 8012306:	6818      	ldr	r0, [r3, #0]
 8012308:	4770      	bx	lr
 801230a:	bf00      	nop
 801230c:	240000e8 	.word	0x240000e8

08012310 <__libc_init_array>:
 8012310:	b570      	push	{r4, r5, r6, lr}
 8012312:	4d0d      	ldr	r5, [pc, #52]	@ (8012348 <__libc_init_array+0x38>)
 8012314:	4c0d      	ldr	r4, [pc, #52]	@ (801234c <__libc_init_array+0x3c>)
 8012316:	1b64      	subs	r4, r4, r5
 8012318:	10a4      	asrs	r4, r4, #2
 801231a:	2600      	movs	r6, #0
 801231c:	42a6      	cmp	r6, r4
 801231e:	d109      	bne.n	8012334 <__libc_init_array+0x24>
 8012320:	4d0b      	ldr	r5, [pc, #44]	@ (8012350 <__libc_init_array+0x40>)
 8012322:	4c0c      	ldr	r4, [pc, #48]	@ (8012354 <__libc_init_array+0x44>)
 8012324:	f000 ff42 	bl	80131ac <_init>
 8012328:	1b64      	subs	r4, r4, r5
 801232a:	10a4      	asrs	r4, r4, #2
 801232c:	2600      	movs	r6, #0
 801232e:	42a6      	cmp	r6, r4
 8012330:	d105      	bne.n	801233e <__libc_init_array+0x2e>
 8012332:	bd70      	pop	{r4, r5, r6, pc}
 8012334:	f855 3b04 	ldr.w	r3, [r5], #4
 8012338:	4798      	blx	r3
 801233a:	3601      	adds	r6, #1
 801233c:	e7ee      	b.n	801231c <__libc_init_array+0xc>
 801233e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012342:	4798      	blx	r3
 8012344:	3601      	adds	r6, #1
 8012346:	e7f2      	b.n	801232e <__libc_init_array+0x1e>
 8012348:	080147fc 	.word	0x080147fc
 801234c:	080147fc 	.word	0x080147fc
 8012350:	080147fc 	.word	0x080147fc
 8012354:	08014800 	.word	0x08014800

08012358 <__retarget_lock_init_recursive>:
 8012358:	4770      	bx	lr

0801235a <__retarget_lock_acquire_recursive>:
 801235a:	4770      	bx	lr

0801235c <__retarget_lock_release_recursive>:
 801235c:	4770      	bx	lr

0801235e <memcpy>:
 801235e:	440a      	add	r2, r1
 8012360:	4291      	cmp	r1, r2
 8012362:	f100 33ff 	add.w	r3, r0, #4294967295
 8012366:	d100      	bne.n	801236a <memcpy+0xc>
 8012368:	4770      	bx	lr
 801236a:	b510      	push	{r4, lr}
 801236c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012370:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012374:	4291      	cmp	r1, r2
 8012376:	d1f9      	bne.n	801236c <memcpy+0xe>
 8012378:	bd10      	pop	{r4, pc}
	...

0801237c <__assert_func>:
 801237c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801237e:	4614      	mov	r4, r2
 8012380:	461a      	mov	r2, r3
 8012382:	4b09      	ldr	r3, [pc, #36]	@ (80123a8 <__assert_func+0x2c>)
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	4605      	mov	r5, r0
 8012388:	68d8      	ldr	r0, [r3, #12]
 801238a:	b14c      	cbz	r4, 80123a0 <__assert_func+0x24>
 801238c:	4b07      	ldr	r3, [pc, #28]	@ (80123ac <__assert_func+0x30>)
 801238e:	9100      	str	r1, [sp, #0]
 8012390:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012394:	4906      	ldr	r1, [pc, #24]	@ (80123b0 <__assert_func+0x34>)
 8012396:	462b      	mov	r3, r5
 8012398:	f000 fde0 	bl	8012f5c <fiprintf>
 801239c:	f000 fe84 	bl	80130a8 <abort>
 80123a0:	4b04      	ldr	r3, [pc, #16]	@ (80123b4 <__assert_func+0x38>)
 80123a2:	461c      	mov	r4, r3
 80123a4:	e7f3      	b.n	801238e <__assert_func+0x12>
 80123a6:	bf00      	nop
 80123a8:	240000e8 	.word	0x240000e8
 80123ac:	08014683 	.word	0x08014683
 80123b0:	08014690 	.word	0x08014690
 80123b4:	080146be 	.word	0x080146be

080123b8 <_free_r>:
 80123b8:	b538      	push	{r3, r4, r5, lr}
 80123ba:	4605      	mov	r5, r0
 80123bc:	2900      	cmp	r1, #0
 80123be:	d041      	beq.n	8012444 <_free_r+0x8c>
 80123c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80123c4:	1f0c      	subs	r4, r1, #4
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	bfb8      	it	lt
 80123ca:	18e4      	addlt	r4, r4, r3
 80123cc:	f000 f8e8 	bl	80125a0 <__malloc_lock>
 80123d0:	4a1d      	ldr	r2, [pc, #116]	@ (8012448 <_free_r+0x90>)
 80123d2:	6813      	ldr	r3, [r2, #0]
 80123d4:	b933      	cbnz	r3, 80123e4 <_free_r+0x2c>
 80123d6:	6063      	str	r3, [r4, #4]
 80123d8:	6014      	str	r4, [r2, #0]
 80123da:	4628      	mov	r0, r5
 80123dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80123e0:	f000 b8e4 	b.w	80125ac <__malloc_unlock>
 80123e4:	42a3      	cmp	r3, r4
 80123e6:	d908      	bls.n	80123fa <_free_r+0x42>
 80123e8:	6820      	ldr	r0, [r4, #0]
 80123ea:	1821      	adds	r1, r4, r0
 80123ec:	428b      	cmp	r3, r1
 80123ee:	bf01      	itttt	eq
 80123f0:	6819      	ldreq	r1, [r3, #0]
 80123f2:	685b      	ldreq	r3, [r3, #4]
 80123f4:	1809      	addeq	r1, r1, r0
 80123f6:	6021      	streq	r1, [r4, #0]
 80123f8:	e7ed      	b.n	80123d6 <_free_r+0x1e>
 80123fa:	461a      	mov	r2, r3
 80123fc:	685b      	ldr	r3, [r3, #4]
 80123fe:	b10b      	cbz	r3, 8012404 <_free_r+0x4c>
 8012400:	42a3      	cmp	r3, r4
 8012402:	d9fa      	bls.n	80123fa <_free_r+0x42>
 8012404:	6811      	ldr	r1, [r2, #0]
 8012406:	1850      	adds	r0, r2, r1
 8012408:	42a0      	cmp	r0, r4
 801240a:	d10b      	bne.n	8012424 <_free_r+0x6c>
 801240c:	6820      	ldr	r0, [r4, #0]
 801240e:	4401      	add	r1, r0
 8012410:	1850      	adds	r0, r2, r1
 8012412:	4283      	cmp	r3, r0
 8012414:	6011      	str	r1, [r2, #0]
 8012416:	d1e0      	bne.n	80123da <_free_r+0x22>
 8012418:	6818      	ldr	r0, [r3, #0]
 801241a:	685b      	ldr	r3, [r3, #4]
 801241c:	6053      	str	r3, [r2, #4]
 801241e:	4408      	add	r0, r1
 8012420:	6010      	str	r0, [r2, #0]
 8012422:	e7da      	b.n	80123da <_free_r+0x22>
 8012424:	d902      	bls.n	801242c <_free_r+0x74>
 8012426:	230c      	movs	r3, #12
 8012428:	602b      	str	r3, [r5, #0]
 801242a:	e7d6      	b.n	80123da <_free_r+0x22>
 801242c:	6820      	ldr	r0, [r4, #0]
 801242e:	1821      	adds	r1, r4, r0
 8012430:	428b      	cmp	r3, r1
 8012432:	bf04      	itt	eq
 8012434:	6819      	ldreq	r1, [r3, #0]
 8012436:	685b      	ldreq	r3, [r3, #4]
 8012438:	6063      	str	r3, [r4, #4]
 801243a:	bf04      	itt	eq
 801243c:	1809      	addeq	r1, r1, r0
 801243e:	6021      	streq	r1, [r4, #0]
 8012440:	6054      	str	r4, [r2, #4]
 8012442:	e7ca      	b.n	80123da <_free_r+0x22>
 8012444:	bd38      	pop	{r3, r4, r5, pc}
 8012446:	bf00      	nop
 8012448:	24042e8c 	.word	0x24042e8c

0801244c <malloc>:
 801244c:	4b02      	ldr	r3, [pc, #8]	@ (8012458 <malloc+0xc>)
 801244e:	4601      	mov	r1, r0
 8012450:	6818      	ldr	r0, [r3, #0]
 8012452:	f000 b825 	b.w	80124a0 <_malloc_r>
 8012456:	bf00      	nop
 8012458:	240000e8 	.word	0x240000e8

0801245c <sbrk_aligned>:
 801245c:	b570      	push	{r4, r5, r6, lr}
 801245e:	4e0f      	ldr	r6, [pc, #60]	@ (801249c <sbrk_aligned+0x40>)
 8012460:	460c      	mov	r4, r1
 8012462:	6831      	ldr	r1, [r6, #0]
 8012464:	4605      	mov	r5, r0
 8012466:	b911      	cbnz	r1, 801246e <sbrk_aligned+0x12>
 8012468:	f000 fe0e 	bl	8013088 <_sbrk_r>
 801246c:	6030      	str	r0, [r6, #0]
 801246e:	4621      	mov	r1, r4
 8012470:	4628      	mov	r0, r5
 8012472:	f000 fe09 	bl	8013088 <_sbrk_r>
 8012476:	1c43      	adds	r3, r0, #1
 8012478:	d103      	bne.n	8012482 <sbrk_aligned+0x26>
 801247a:	f04f 34ff 	mov.w	r4, #4294967295
 801247e:	4620      	mov	r0, r4
 8012480:	bd70      	pop	{r4, r5, r6, pc}
 8012482:	1cc4      	adds	r4, r0, #3
 8012484:	f024 0403 	bic.w	r4, r4, #3
 8012488:	42a0      	cmp	r0, r4
 801248a:	d0f8      	beq.n	801247e <sbrk_aligned+0x22>
 801248c:	1a21      	subs	r1, r4, r0
 801248e:	4628      	mov	r0, r5
 8012490:	f000 fdfa 	bl	8013088 <_sbrk_r>
 8012494:	3001      	adds	r0, #1
 8012496:	d1f2      	bne.n	801247e <sbrk_aligned+0x22>
 8012498:	e7ef      	b.n	801247a <sbrk_aligned+0x1e>
 801249a:	bf00      	nop
 801249c:	24042e88 	.word	0x24042e88

080124a0 <_malloc_r>:
 80124a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124a4:	1ccd      	adds	r5, r1, #3
 80124a6:	f025 0503 	bic.w	r5, r5, #3
 80124aa:	3508      	adds	r5, #8
 80124ac:	2d0c      	cmp	r5, #12
 80124ae:	bf38      	it	cc
 80124b0:	250c      	movcc	r5, #12
 80124b2:	2d00      	cmp	r5, #0
 80124b4:	4606      	mov	r6, r0
 80124b6:	db01      	blt.n	80124bc <_malloc_r+0x1c>
 80124b8:	42a9      	cmp	r1, r5
 80124ba:	d904      	bls.n	80124c6 <_malloc_r+0x26>
 80124bc:	230c      	movs	r3, #12
 80124be:	6033      	str	r3, [r6, #0]
 80124c0:	2000      	movs	r0, #0
 80124c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801259c <_malloc_r+0xfc>
 80124ca:	f000 f869 	bl	80125a0 <__malloc_lock>
 80124ce:	f8d8 3000 	ldr.w	r3, [r8]
 80124d2:	461c      	mov	r4, r3
 80124d4:	bb44      	cbnz	r4, 8012528 <_malloc_r+0x88>
 80124d6:	4629      	mov	r1, r5
 80124d8:	4630      	mov	r0, r6
 80124da:	f7ff ffbf 	bl	801245c <sbrk_aligned>
 80124de:	1c43      	adds	r3, r0, #1
 80124e0:	4604      	mov	r4, r0
 80124e2:	d158      	bne.n	8012596 <_malloc_r+0xf6>
 80124e4:	f8d8 4000 	ldr.w	r4, [r8]
 80124e8:	4627      	mov	r7, r4
 80124ea:	2f00      	cmp	r7, #0
 80124ec:	d143      	bne.n	8012576 <_malloc_r+0xd6>
 80124ee:	2c00      	cmp	r4, #0
 80124f0:	d04b      	beq.n	801258a <_malloc_r+0xea>
 80124f2:	6823      	ldr	r3, [r4, #0]
 80124f4:	4639      	mov	r1, r7
 80124f6:	4630      	mov	r0, r6
 80124f8:	eb04 0903 	add.w	r9, r4, r3
 80124fc:	f000 fdc4 	bl	8013088 <_sbrk_r>
 8012500:	4581      	cmp	r9, r0
 8012502:	d142      	bne.n	801258a <_malloc_r+0xea>
 8012504:	6821      	ldr	r1, [r4, #0]
 8012506:	1a6d      	subs	r5, r5, r1
 8012508:	4629      	mov	r1, r5
 801250a:	4630      	mov	r0, r6
 801250c:	f7ff ffa6 	bl	801245c <sbrk_aligned>
 8012510:	3001      	adds	r0, #1
 8012512:	d03a      	beq.n	801258a <_malloc_r+0xea>
 8012514:	6823      	ldr	r3, [r4, #0]
 8012516:	442b      	add	r3, r5
 8012518:	6023      	str	r3, [r4, #0]
 801251a:	f8d8 3000 	ldr.w	r3, [r8]
 801251e:	685a      	ldr	r2, [r3, #4]
 8012520:	bb62      	cbnz	r2, 801257c <_malloc_r+0xdc>
 8012522:	f8c8 7000 	str.w	r7, [r8]
 8012526:	e00f      	b.n	8012548 <_malloc_r+0xa8>
 8012528:	6822      	ldr	r2, [r4, #0]
 801252a:	1b52      	subs	r2, r2, r5
 801252c:	d420      	bmi.n	8012570 <_malloc_r+0xd0>
 801252e:	2a0b      	cmp	r2, #11
 8012530:	d917      	bls.n	8012562 <_malloc_r+0xc2>
 8012532:	1961      	adds	r1, r4, r5
 8012534:	42a3      	cmp	r3, r4
 8012536:	6025      	str	r5, [r4, #0]
 8012538:	bf18      	it	ne
 801253a:	6059      	strne	r1, [r3, #4]
 801253c:	6863      	ldr	r3, [r4, #4]
 801253e:	bf08      	it	eq
 8012540:	f8c8 1000 	streq.w	r1, [r8]
 8012544:	5162      	str	r2, [r4, r5]
 8012546:	604b      	str	r3, [r1, #4]
 8012548:	4630      	mov	r0, r6
 801254a:	f000 f82f 	bl	80125ac <__malloc_unlock>
 801254e:	f104 000b 	add.w	r0, r4, #11
 8012552:	1d23      	adds	r3, r4, #4
 8012554:	f020 0007 	bic.w	r0, r0, #7
 8012558:	1ac2      	subs	r2, r0, r3
 801255a:	bf1c      	itt	ne
 801255c:	1a1b      	subne	r3, r3, r0
 801255e:	50a3      	strne	r3, [r4, r2]
 8012560:	e7af      	b.n	80124c2 <_malloc_r+0x22>
 8012562:	6862      	ldr	r2, [r4, #4]
 8012564:	42a3      	cmp	r3, r4
 8012566:	bf0c      	ite	eq
 8012568:	f8c8 2000 	streq.w	r2, [r8]
 801256c:	605a      	strne	r2, [r3, #4]
 801256e:	e7eb      	b.n	8012548 <_malloc_r+0xa8>
 8012570:	4623      	mov	r3, r4
 8012572:	6864      	ldr	r4, [r4, #4]
 8012574:	e7ae      	b.n	80124d4 <_malloc_r+0x34>
 8012576:	463c      	mov	r4, r7
 8012578:	687f      	ldr	r7, [r7, #4]
 801257a:	e7b6      	b.n	80124ea <_malloc_r+0x4a>
 801257c:	461a      	mov	r2, r3
 801257e:	685b      	ldr	r3, [r3, #4]
 8012580:	42a3      	cmp	r3, r4
 8012582:	d1fb      	bne.n	801257c <_malloc_r+0xdc>
 8012584:	2300      	movs	r3, #0
 8012586:	6053      	str	r3, [r2, #4]
 8012588:	e7de      	b.n	8012548 <_malloc_r+0xa8>
 801258a:	230c      	movs	r3, #12
 801258c:	6033      	str	r3, [r6, #0]
 801258e:	4630      	mov	r0, r6
 8012590:	f000 f80c 	bl	80125ac <__malloc_unlock>
 8012594:	e794      	b.n	80124c0 <_malloc_r+0x20>
 8012596:	6005      	str	r5, [r0, #0]
 8012598:	e7d6      	b.n	8012548 <_malloc_r+0xa8>
 801259a:	bf00      	nop
 801259c:	24042e8c 	.word	0x24042e8c

080125a0 <__malloc_lock>:
 80125a0:	4801      	ldr	r0, [pc, #4]	@ (80125a8 <__malloc_lock+0x8>)
 80125a2:	f7ff beda 	b.w	801235a <__retarget_lock_acquire_recursive>
 80125a6:	bf00      	nop
 80125a8:	24042e84 	.word	0x24042e84

080125ac <__malloc_unlock>:
 80125ac:	4801      	ldr	r0, [pc, #4]	@ (80125b4 <__malloc_unlock+0x8>)
 80125ae:	f7ff bed5 	b.w	801235c <__retarget_lock_release_recursive>
 80125b2:	bf00      	nop
 80125b4:	24042e84 	.word	0x24042e84

080125b8 <__ssputs_r>:
 80125b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80125bc:	688e      	ldr	r6, [r1, #8]
 80125be:	461f      	mov	r7, r3
 80125c0:	42be      	cmp	r6, r7
 80125c2:	680b      	ldr	r3, [r1, #0]
 80125c4:	4682      	mov	sl, r0
 80125c6:	460c      	mov	r4, r1
 80125c8:	4690      	mov	r8, r2
 80125ca:	d82d      	bhi.n	8012628 <__ssputs_r+0x70>
 80125cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80125d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80125d4:	d026      	beq.n	8012624 <__ssputs_r+0x6c>
 80125d6:	6965      	ldr	r5, [r4, #20]
 80125d8:	6909      	ldr	r1, [r1, #16]
 80125da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80125de:	eba3 0901 	sub.w	r9, r3, r1
 80125e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80125e6:	1c7b      	adds	r3, r7, #1
 80125e8:	444b      	add	r3, r9
 80125ea:	106d      	asrs	r5, r5, #1
 80125ec:	429d      	cmp	r5, r3
 80125ee:	bf38      	it	cc
 80125f0:	461d      	movcc	r5, r3
 80125f2:	0553      	lsls	r3, r2, #21
 80125f4:	d527      	bpl.n	8012646 <__ssputs_r+0x8e>
 80125f6:	4629      	mov	r1, r5
 80125f8:	f7ff ff52 	bl	80124a0 <_malloc_r>
 80125fc:	4606      	mov	r6, r0
 80125fe:	b360      	cbz	r0, 801265a <__ssputs_r+0xa2>
 8012600:	6921      	ldr	r1, [r4, #16]
 8012602:	464a      	mov	r2, r9
 8012604:	f7ff feab 	bl	801235e <memcpy>
 8012608:	89a3      	ldrh	r3, [r4, #12]
 801260a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801260e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012612:	81a3      	strh	r3, [r4, #12]
 8012614:	6126      	str	r6, [r4, #16]
 8012616:	6165      	str	r5, [r4, #20]
 8012618:	444e      	add	r6, r9
 801261a:	eba5 0509 	sub.w	r5, r5, r9
 801261e:	6026      	str	r6, [r4, #0]
 8012620:	60a5      	str	r5, [r4, #8]
 8012622:	463e      	mov	r6, r7
 8012624:	42be      	cmp	r6, r7
 8012626:	d900      	bls.n	801262a <__ssputs_r+0x72>
 8012628:	463e      	mov	r6, r7
 801262a:	6820      	ldr	r0, [r4, #0]
 801262c:	4632      	mov	r2, r6
 801262e:	4641      	mov	r1, r8
 8012630:	f7ff fdbe 	bl	80121b0 <memmove>
 8012634:	68a3      	ldr	r3, [r4, #8]
 8012636:	1b9b      	subs	r3, r3, r6
 8012638:	60a3      	str	r3, [r4, #8]
 801263a:	6823      	ldr	r3, [r4, #0]
 801263c:	4433      	add	r3, r6
 801263e:	6023      	str	r3, [r4, #0]
 8012640:	2000      	movs	r0, #0
 8012642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012646:	462a      	mov	r2, r5
 8012648:	f000 fd35 	bl	80130b6 <_realloc_r>
 801264c:	4606      	mov	r6, r0
 801264e:	2800      	cmp	r0, #0
 8012650:	d1e0      	bne.n	8012614 <__ssputs_r+0x5c>
 8012652:	6921      	ldr	r1, [r4, #16]
 8012654:	4650      	mov	r0, sl
 8012656:	f7ff feaf 	bl	80123b8 <_free_r>
 801265a:	230c      	movs	r3, #12
 801265c:	f8ca 3000 	str.w	r3, [sl]
 8012660:	89a3      	ldrh	r3, [r4, #12]
 8012662:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012666:	81a3      	strh	r3, [r4, #12]
 8012668:	f04f 30ff 	mov.w	r0, #4294967295
 801266c:	e7e9      	b.n	8012642 <__ssputs_r+0x8a>
	...

08012670 <_svfiprintf_r>:
 8012670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012674:	4698      	mov	r8, r3
 8012676:	898b      	ldrh	r3, [r1, #12]
 8012678:	061b      	lsls	r3, r3, #24
 801267a:	b09d      	sub	sp, #116	@ 0x74
 801267c:	4607      	mov	r7, r0
 801267e:	460d      	mov	r5, r1
 8012680:	4614      	mov	r4, r2
 8012682:	d510      	bpl.n	80126a6 <_svfiprintf_r+0x36>
 8012684:	690b      	ldr	r3, [r1, #16]
 8012686:	b973      	cbnz	r3, 80126a6 <_svfiprintf_r+0x36>
 8012688:	2140      	movs	r1, #64	@ 0x40
 801268a:	f7ff ff09 	bl	80124a0 <_malloc_r>
 801268e:	6028      	str	r0, [r5, #0]
 8012690:	6128      	str	r0, [r5, #16]
 8012692:	b930      	cbnz	r0, 80126a2 <_svfiprintf_r+0x32>
 8012694:	230c      	movs	r3, #12
 8012696:	603b      	str	r3, [r7, #0]
 8012698:	f04f 30ff 	mov.w	r0, #4294967295
 801269c:	b01d      	add	sp, #116	@ 0x74
 801269e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126a2:	2340      	movs	r3, #64	@ 0x40
 80126a4:	616b      	str	r3, [r5, #20]
 80126a6:	2300      	movs	r3, #0
 80126a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80126aa:	2320      	movs	r3, #32
 80126ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80126b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80126b4:	2330      	movs	r3, #48	@ 0x30
 80126b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012854 <_svfiprintf_r+0x1e4>
 80126ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80126be:	f04f 0901 	mov.w	r9, #1
 80126c2:	4623      	mov	r3, r4
 80126c4:	469a      	mov	sl, r3
 80126c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80126ca:	b10a      	cbz	r2, 80126d0 <_svfiprintf_r+0x60>
 80126cc:	2a25      	cmp	r2, #37	@ 0x25
 80126ce:	d1f9      	bne.n	80126c4 <_svfiprintf_r+0x54>
 80126d0:	ebba 0b04 	subs.w	fp, sl, r4
 80126d4:	d00b      	beq.n	80126ee <_svfiprintf_r+0x7e>
 80126d6:	465b      	mov	r3, fp
 80126d8:	4622      	mov	r2, r4
 80126da:	4629      	mov	r1, r5
 80126dc:	4638      	mov	r0, r7
 80126de:	f7ff ff6b 	bl	80125b8 <__ssputs_r>
 80126e2:	3001      	adds	r0, #1
 80126e4:	f000 80a7 	beq.w	8012836 <_svfiprintf_r+0x1c6>
 80126e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80126ea:	445a      	add	r2, fp
 80126ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80126ee:	f89a 3000 	ldrb.w	r3, [sl]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	f000 809f 	beq.w	8012836 <_svfiprintf_r+0x1c6>
 80126f8:	2300      	movs	r3, #0
 80126fa:	f04f 32ff 	mov.w	r2, #4294967295
 80126fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012702:	f10a 0a01 	add.w	sl, sl, #1
 8012706:	9304      	str	r3, [sp, #16]
 8012708:	9307      	str	r3, [sp, #28]
 801270a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801270e:	931a      	str	r3, [sp, #104]	@ 0x68
 8012710:	4654      	mov	r4, sl
 8012712:	2205      	movs	r2, #5
 8012714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012718:	484e      	ldr	r0, [pc, #312]	@ (8012854 <_svfiprintf_r+0x1e4>)
 801271a:	f7ed fdf9 	bl	8000310 <memchr>
 801271e:	9a04      	ldr	r2, [sp, #16]
 8012720:	b9d8      	cbnz	r0, 801275a <_svfiprintf_r+0xea>
 8012722:	06d0      	lsls	r0, r2, #27
 8012724:	bf44      	itt	mi
 8012726:	2320      	movmi	r3, #32
 8012728:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801272c:	0711      	lsls	r1, r2, #28
 801272e:	bf44      	itt	mi
 8012730:	232b      	movmi	r3, #43	@ 0x2b
 8012732:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012736:	f89a 3000 	ldrb.w	r3, [sl]
 801273a:	2b2a      	cmp	r3, #42	@ 0x2a
 801273c:	d015      	beq.n	801276a <_svfiprintf_r+0xfa>
 801273e:	9a07      	ldr	r2, [sp, #28]
 8012740:	4654      	mov	r4, sl
 8012742:	2000      	movs	r0, #0
 8012744:	f04f 0c0a 	mov.w	ip, #10
 8012748:	4621      	mov	r1, r4
 801274a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801274e:	3b30      	subs	r3, #48	@ 0x30
 8012750:	2b09      	cmp	r3, #9
 8012752:	d94b      	bls.n	80127ec <_svfiprintf_r+0x17c>
 8012754:	b1b0      	cbz	r0, 8012784 <_svfiprintf_r+0x114>
 8012756:	9207      	str	r2, [sp, #28]
 8012758:	e014      	b.n	8012784 <_svfiprintf_r+0x114>
 801275a:	eba0 0308 	sub.w	r3, r0, r8
 801275e:	fa09 f303 	lsl.w	r3, r9, r3
 8012762:	4313      	orrs	r3, r2
 8012764:	9304      	str	r3, [sp, #16]
 8012766:	46a2      	mov	sl, r4
 8012768:	e7d2      	b.n	8012710 <_svfiprintf_r+0xa0>
 801276a:	9b03      	ldr	r3, [sp, #12]
 801276c:	1d19      	adds	r1, r3, #4
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	9103      	str	r1, [sp, #12]
 8012772:	2b00      	cmp	r3, #0
 8012774:	bfbb      	ittet	lt
 8012776:	425b      	neglt	r3, r3
 8012778:	f042 0202 	orrlt.w	r2, r2, #2
 801277c:	9307      	strge	r3, [sp, #28]
 801277e:	9307      	strlt	r3, [sp, #28]
 8012780:	bfb8      	it	lt
 8012782:	9204      	strlt	r2, [sp, #16]
 8012784:	7823      	ldrb	r3, [r4, #0]
 8012786:	2b2e      	cmp	r3, #46	@ 0x2e
 8012788:	d10a      	bne.n	80127a0 <_svfiprintf_r+0x130>
 801278a:	7863      	ldrb	r3, [r4, #1]
 801278c:	2b2a      	cmp	r3, #42	@ 0x2a
 801278e:	d132      	bne.n	80127f6 <_svfiprintf_r+0x186>
 8012790:	9b03      	ldr	r3, [sp, #12]
 8012792:	1d1a      	adds	r2, r3, #4
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	9203      	str	r2, [sp, #12]
 8012798:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801279c:	3402      	adds	r4, #2
 801279e:	9305      	str	r3, [sp, #20]
 80127a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012864 <_svfiprintf_r+0x1f4>
 80127a4:	7821      	ldrb	r1, [r4, #0]
 80127a6:	2203      	movs	r2, #3
 80127a8:	4650      	mov	r0, sl
 80127aa:	f7ed fdb1 	bl	8000310 <memchr>
 80127ae:	b138      	cbz	r0, 80127c0 <_svfiprintf_r+0x150>
 80127b0:	9b04      	ldr	r3, [sp, #16]
 80127b2:	eba0 000a 	sub.w	r0, r0, sl
 80127b6:	2240      	movs	r2, #64	@ 0x40
 80127b8:	4082      	lsls	r2, r0
 80127ba:	4313      	orrs	r3, r2
 80127bc:	3401      	adds	r4, #1
 80127be:	9304      	str	r3, [sp, #16]
 80127c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127c4:	4824      	ldr	r0, [pc, #144]	@ (8012858 <_svfiprintf_r+0x1e8>)
 80127c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80127ca:	2206      	movs	r2, #6
 80127cc:	f7ed fda0 	bl	8000310 <memchr>
 80127d0:	2800      	cmp	r0, #0
 80127d2:	d036      	beq.n	8012842 <_svfiprintf_r+0x1d2>
 80127d4:	4b21      	ldr	r3, [pc, #132]	@ (801285c <_svfiprintf_r+0x1ec>)
 80127d6:	bb1b      	cbnz	r3, 8012820 <_svfiprintf_r+0x1b0>
 80127d8:	9b03      	ldr	r3, [sp, #12]
 80127da:	3307      	adds	r3, #7
 80127dc:	f023 0307 	bic.w	r3, r3, #7
 80127e0:	3308      	adds	r3, #8
 80127e2:	9303      	str	r3, [sp, #12]
 80127e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80127e6:	4433      	add	r3, r6
 80127e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80127ea:	e76a      	b.n	80126c2 <_svfiprintf_r+0x52>
 80127ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80127f0:	460c      	mov	r4, r1
 80127f2:	2001      	movs	r0, #1
 80127f4:	e7a8      	b.n	8012748 <_svfiprintf_r+0xd8>
 80127f6:	2300      	movs	r3, #0
 80127f8:	3401      	adds	r4, #1
 80127fa:	9305      	str	r3, [sp, #20]
 80127fc:	4619      	mov	r1, r3
 80127fe:	f04f 0c0a 	mov.w	ip, #10
 8012802:	4620      	mov	r0, r4
 8012804:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012808:	3a30      	subs	r2, #48	@ 0x30
 801280a:	2a09      	cmp	r2, #9
 801280c:	d903      	bls.n	8012816 <_svfiprintf_r+0x1a6>
 801280e:	2b00      	cmp	r3, #0
 8012810:	d0c6      	beq.n	80127a0 <_svfiprintf_r+0x130>
 8012812:	9105      	str	r1, [sp, #20]
 8012814:	e7c4      	b.n	80127a0 <_svfiprintf_r+0x130>
 8012816:	fb0c 2101 	mla	r1, ip, r1, r2
 801281a:	4604      	mov	r4, r0
 801281c:	2301      	movs	r3, #1
 801281e:	e7f0      	b.n	8012802 <_svfiprintf_r+0x192>
 8012820:	ab03      	add	r3, sp, #12
 8012822:	9300      	str	r3, [sp, #0]
 8012824:	462a      	mov	r2, r5
 8012826:	4b0e      	ldr	r3, [pc, #56]	@ (8012860 <_svfiprintf_r+0x1f0>)
 8012828:	a904      	add	r1, sp, #16
 801282a:	4638      	mov	r0, r7
 801282c:	f3af 8000 	nop.w
 8012830:	1c42      	adds	r2, r0, #1
 8012832:	4606      	mov	r6, r0
 8012834:	d1d6      	bne.n	80127e4 <_svfiprintf_r+0x174>
 8012836:	89ab      	ldrh	r3, [r5, #12]
 8012838:	065b      	lsls	r3, r3, #25
 801283a:	f53f af2d 	bmi.w	8012698 <_svfiprintf_r+0x28>
 801283e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012840:	e72c      	b.n	801269c <_svfiprintf_r+0x2c>
 8012842:	ab03      	add	r3, sp, #12
 8012844:	9300      	str	r3, [sp, #0]
 8012846:	462a      	mov	r2, r5
 8012848:	4b05      	ldr	r3, [pc, #20]	@ (8012860 <_svfiprintf_r+0x1f0>)
 801284a:	a904      	add	r1, sp, #16
 801284c:	4638      	mov	r0, r7
 801284e:	f000 f9bb 	bl	8012bc8 <_printf_i>
 8012852:	e7ed      	b.n	8012830 <_svfiprintf_r+0x1c0>
 8012854:	080146bf 	.word	0x080146bf
 8012858:	080146c9 	.word	0x080146c9
 801285c:	00000000 	.word	0x00000000
 8012860:	080125b9 	.word	0x080125b9
 8012864:	080146c5 	.word	0x080146c5

08012868 <__sfputc_r>:
 8012868:	6893      	ldr	r3, [r2, #8]
 801286a:	3b01      	subs	r3, #1
 801286c:	2b00      	cmp	r3, #0
 801286e:	b410      	push	{r4}
 8012870:	6093      	str	r3, [r2, #8]
 8012872:	da08      	bge.n	8012886 <__sfputc_r+0x1e>
 8012874:	6994      	ldr	r4, [r2, #24]
 8012876:	42a3      	cmp	r3, r4
 8012878:	db01      	blt.n	801287e <__sfputc_r+0x16>
 801287a:	290a      	cmp	r1, #10
 801287c:	d103      	bne.n	8012886 <__sfputc_r+0x1e>
 801287e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012882:	f7ff bc01 	b.w	8012088 <__swbuf_r>
 8012886:	6813      	ldr	r3, [r2, #0]
 8012888:	1c58      	adds	r0, r3, #1
 801288a:	6010      	str	r0, [r2, #0]
 801288c:	7019      	strb	r1, [r3, #0]
 801288e:	4608      	mov	r0, r1
 8012890:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012894:	4770      	bx	lr

08012896 <__sfputs_r>:
 8012896:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012898:	4606      	mov	r6, r0
 801289a:	460f      	mov	r7, r1
 801289c:	4614      	mov	r4, r2
 801289e:	18d5      	adds	r5, r2, r3
 80128a0:	42ac      	cmp	r4, r5
 80128a2:	d101      	bne.n	80128a8 <__sfputs_r+0x12>
 80128a4:	2000      	movs	r0, #0
 80128a6:	e007      	b.n	80128b8 <__sfputs_r+0x22>
 80128a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80128ac:	463a      	mov	r2, r7
 80128ae:	4630      	mov	r0, r6
 80128b0:	f7ff ffda 	bl	8012868 <__sfputc_r>
 80128b4:	1c43      	adds	r3, r0, #1
 80128b6:	d1f3      	bne.n	80128a0 <__sfputs_r+0xa>
 80128b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080128bc <_vfiprintf_r>:
 80128bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128c0:	460d      	mov	r5, r1
 80128c2:	b09d      	sub	sp, #116	@ 0x74
 80128c4:	4614      	mov	r4, r2
 80128c6:	4698      	mov	r8, r3
 80128c8:	4606      	mov	r6, r0
 80128ca:	b118      	cbz	r0, 80128d4 <_vfiprintf_r+0x18>
 80128cc:	6a03      	ldr	r3, [r0, #32]
 80128ce:	b90b      	cbnz	r3, 80128d4 <_vfiprintf_r+0x18>
 80128d0:	f7ff fa8e 	bl	8011df0 <__sinit>
 80128d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80128d6:	07d9      	lsls	r1, r3, #31
 80128d8:	d405      	bmi.n	80128e6 <_vfiprintf_r+0x2a>
 80128da:	89ab      	ldrh	r3, [r5, #12]
 80128dc:	059a      	lsls	r2, r3, #22
 80128de:	d402      	bmi.n	80128e6 <_vfiprintf_r+0x2a>
 80128e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80128e2:	f7ff fd3a 	bl	801235a <__retarget_lock_acquire_recursive>
 80128e6:	89ab      	ldrh	r3, [r5, #12]
 80128e8:	071b      	lsls	r3, r3, #28
 80128ea:	d501      	bpl.n	80128f0 <_vfiprintf_r+0x34>
 80128ec:	692b      	ldr	r3, [r5, #16]
 80128ee:	b99b      	cbnz	r3, 8012918 <_vfiprintf_r+0x5c>
 80128f0:	4629      	mov	r1, r5
 80128f2:	4630      	mov	r0, r6
 80128f4:	f7ff fc06 	bl	8012104 <__swsetup_r>
 80128f8:	b170      	cbz	r0, 8012918 <_vfiprintf_r+0x5c>
 80128fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80128fc:	07dc      	lsls	r4, r3, #31
 80128fe:	d504      	bpl.n	801290a <_vfiprintf_r+0x4e>
 8012900:	f04f 30ff 	mov.w	r0, #4294967295
 8012904:	b01d      	add	sp, #116	@ 0x74
 8012906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801290a:	89ab      	ldrh	r3, [r5, #12]
 801290c:	0598      	lsls	r0, r3, #22
 801290e:	d4f7      	bmi.n	8012900 <_vfiprintf_r+0x44>
 8012910:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012912:	f7ff fd23 	bl	801235c <__retarget_lock_release_recursive>
 8012916:	e7f3      	b.n	8012900 <_vfiprintf_r+0x44>
 8012918:	2300      	movs	r3, #0
 801291a:	9309      	str	r3, [sp, #36]	@ 0x24
 801291c:	2320      	movs	r3, #32
 801291e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012922:	f8cd 800c 	str.w	r8, [sp, #12]
 8012926:	2330      	movs	r3, #48	@ 0x30
 8012928:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012ad8 <_vfiprintf_r+0x21c>
 801292c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012930:	f04f 0901 	mov.w	r9, #1
 8012934:	4623      	mov	r3, r4
 8012936:	469a      	mov	sl, r3
 8012938:	f813 2b01 	ldrb.w	r2, [r3], #1
 801293c:	b10a      	cbz	r2, 8012942 <_vfiprintf_r+0x86>
 801293e:	2a25      	cmp	r2, #37	@ 0x25
 8012940:	d1f9      	bne.n	8012936 <_vfiprintf_r+0x7a>
 8012942:	ebba 0b04 	subs.w	fp, sl, r4
 8012946:	d00b      	beq.n	8012960 <_vfiprintf_r+0xa4>
 8012948:	465b      	mov	r3, fp
 801294a:	4622      	mov	r2, r4
 801294c:	4629      	mov	r1, r5
 801294e:	4630      	mov	r0, r6
 8012950:	f7ff ffa1 	bl	8012896 <__sfputs_r>
 8012954:	3001      	adds	r0, #1
 8012956:	f000 80a7 	beq.w	8012aa8 <_vfiprintf_r+0x1ec>
 801295a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801295c:	445a      	add	r2, fp
 801295e:	9209      	str	r2, [sp, #36]	@ 0x24
 8012960:	f89a 3000 	ldrb.w	r3, [sl]
 8012964:	2b00      	cmp	r3, #0
 8012966:	f000 809f 	beq.w	8012aa8 <_vfiprintf_r+0x1ec>
 801296a:	2300      	movs	r3, #0
 801296c:	f04f 32ff 	mov.w	r2, #4294967295
 8012970:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012974:	f10a 0a01 	add.w	sl, sl, #1
 8012978:	9304      	str	r3, [sp, #16]
 801297a:	9307      	str	r3, [sp, #28]
 801297c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012980:	931a      	str	r3, [sp, #104]	@ 0x68
 8012982:	4654      	mov	r4, sl
 8012984:	2205      	movs	r2, #5
 8012986:	f814 1b01 	ldrb.w	r1, [r4], #1
 801298a:	4853      	ldr	r0, [pc, #332]	@ (8012ad8 <_vfiprintf_r+0x21c>)
 801298c:	f7ed fcc0 	bl	8000310 <memchr>
 8012990:	9a04      	ldr	r2, [sp, #16]
 8012992:	b9d8      	cbnz	r0, 80129cc <_vfiprintf_r+0x110>
 8012994:	06d1      	lsls	r1, r2, #27
 8012996:	bf44      	itt	mi
 8012998:	2320      	movmi	r3, #32
 801299a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801299e:	0713      	lsls	r3, r2, #28
 80129a0:	bf44      	itt	mi
 80129a2:	232b      	movmi	r3, #43	@ 0x2b
 80129a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80129a8:	f89a 3000 	ldrb.w	r3, [sl]
 80129ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80129ae:	d015      	beq.n	80129dc <_vfiprintf_r+0x120>
 80129b0:	9a07      	ldr	r2, [sp, #28]
 80129b2:	4654      	mov	r4, sl
 80129b4:	2000      	movs	r0, #0
 80129b6:	f04f 0c0a 	mov.w	ip, #10
 80129ba:	4621      	mov	r1, r4
 80129bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80129c0:	3b30      	subs	r3, #48	@ 0x30
 80129c2:	2b09      	cmp	r3, #9
 80129c4:	d94b      	bls.n	8012a5e <_vfiprintf_r+0x1a2>
 80129c6:	b1b0      	cbz	r0, 80129f6 <_vfiprintf_r+0x13a>
 80129c8:	9207      	str	r2, [sp, #28]
 80129ca:	e014      	b.n	80129f6 <_vfiprintf_r+0x13a>
 80129cc:	eba0 0308 	sub.w	r3, r0, r8
 80129d0:	fa09 f303 	lsl.w	r3, r9, r3
 80129d4:	4313      	orrs	r3, r2
 80129d6:	9304      	str	r3, [sp, #16]
 80129d8:	46a2      	mov	sl, r4
 80129da:	e7d2      	b.n	8012982 <_vfiprintf_r+0xc6>
 80129dc:	9b03      	ldr	r3, [sp, #12]
 80129de:	1d19      	adds	r1, r3, #4
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	9103      	str	r1, [sp, #12]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	bfbb      	ittet	lt
 80129e8:	425b      	neglt	r3, r3
 80129ea:	f042 0202 	orrlt.w	r2, r2, #2
 80129ee:	9307      	strge	r3, [sp, #28]
 80129f0:	9307      	strlt	r3, [sp, #28]
 80129f2:	bfb8      	it	lt
 80129f4:	9204      	strlt	r2, [sp, #16]
 80129f6:	7823      	ldrb	r3, [r4, #0]
 80129f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80129fa:	d10a      	bne.n	8012a12 <_vfiprintf_r+0x156>
 80129fc:	7863      	ldrb	r3, [r4, #1]
 80129fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8012a00:	d132      	bne.n	8012a68 <_vfiprintf_r+0x1ac>
 8012a02:	9b03      	ldr	r3, [sp, #12]
 8012a04:	1d1a      	adds	r2, r3, #4
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	9203      	str	r2, [sp, #12]
 8012a0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012a0e:	3402      	adds	r4, #2
 8012a10:	9305      	str	r3, [sp, #20]
 8012a12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012ae8 <_vfiprintf_r+0x22c>
 8012a16:	7821      	ldrb	r1, [r4, #0]
 8012a18:	2203      	movs	r2, #3
 8012a1a:	4650      	mov	r0, sl
 8012a1c:	f7ed fc78 	bl	8000310 <memchr>
 8012a20:	b138      	cbz	r0, 8012a32 <_vfiprintf_r+0x176>
 8012a22:	9b04      	ldr	r3, [sp, #16]
 8012a24:	eba0 000a 	sub.w	r0, r0, sl
 8012a28:	2240      	movs	r2, #64	@ 0x40
 8012a2a:	4082      	lsls	r2, r0
 8012a2c:	4313      	orrs	r3, r2
 8012a2e:	3401      	adds	r4, #1
 8012a30:	9304      	str	r3, [sp, #16]
 8012a32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a36:	4829      	ldr	r0, [pc, #164]	@ (8012adc <_vfiprintf_r+0x220>)
 8012a38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012a3c:	2206      	movs	r2, #6
 8012a3e:	f7ed fc67 	bl	8000310 <memchr>
 8012a42:	2800      	cmp	r0, #0
 8012a44:	d03f      	beq.n	8012ac6 <_vfiprintf_r+0x20a>
 8012a46:	4b26      	ldr	r3, [pc, #152]	@ (8012ae0 <_vfiprintf_r+0x224>)
 8012a48:	bb1b      	cbnz	r3, 8012a92 <_vfiprintf_r+0x1d6>
 8012a4a:	9b03      	ldr	r3, [sp, #12]
 8012a4c:	3307      	adds	r3, #7
 8012a4e:	f023 0307 	bic.w	r3, r3, #7
 8012a52:	3308      	adds	r3, #8
 8012a54:	9303      	str	r3, [sp, #12]
 8012a56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a58:	443b      	add	r3, r7
 8012a5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8012a5c:	e76a      	b.n	8012934 <_vfiprintf_r+0x78>
 8012a5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012a62:	460c      	mov	r4, r1
 8012a64:	2001      	movs	r0, #1
 8012a66:	e7a8      	b.n	80129ba <_vfiprintf_r+0xfe>
 8012a68:	2300      	movs	r3, #0
 8012a6a:	3401      	adds	r4, #1
 8012a6c:	9305      	str	r3, [sp, #20]
 8012a6e:	4619      	mov	r1, r3
 8012a70:	f04f 0c0a 	mov.w	ip, #10
 8012a74:	4620      	mov	r0, r4
 8012a76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012a7a:	3a30      	subs	r2, #48	@ 0x30
 8012a7c:	2a09      	cmp	r2, #9
 8012a7e:	d903      	bls.n	8012a88 <_vfiprintf_r+0x1cc>
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d0c6      	beq.n	8012a12 <_vfiprintf_r+0x156>
 8012a84:	9105      	str	r1, [sp, #20]
 8012a86:	e7c4      	b.n	8012a12 <_vfiprintf_r+0x156>
 8012a88:	fb0c 2101 	mla	r1, ip, r1, r2
 8012a8c:	4604      	mov	r4, r0
 8012a8e:	2301      	movs	r3, #1
 8012a90:	e7f0      	b.n	8012a74 <_vfiprintf_r+0x1b8>
 8012a92:	ab03      	add	r3, sp, #12
 8012a94:	9300      	str	r3, [sp, #0]
 8012a96:	462a      	mov	r2, r5
 8012a98:	4b12      	ldr	r3, [pc, #72]	@ (8012ae4 <_vfiprintf_r+0x228>)
 8012a9a:	a904      	add	r1, sp, #16
 8012a9c:	4630      	mov	r0, r6
 8012a9e:	f3af 8000 	nop.w
 8012aa2:	4607      	mov	r7, r0
 8012aa4:	1c78      	adds	r0, r7, #1
 8012aa6:	d1d6      	bne.n	8012a56 <_vfiprintf_r+0x19a>
 8012aa8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012aaa:	07d9      	lsls	r1, r3, #31
 8012aac:	d405      	bmi.n	8012aba <_vfiprintf_r+0x1fe>
 8012aae:	89ab      	ldrh	r3, [r5, #12]
 8012ab0:	059a      	lsls	r2, r3, #22
 8012ab2:	d402      	bmi.n	8012aba <_vfiprintf_r+0x1fe>
 8012ab4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012ab6:	f7ff fc51 	bl	801235c <__retarget_lock_release_recursive>
 8012aba:	89ab      	ldrh	r3, [r5, #12]
 8012abc:	065b      	lsls	r3, r3, #25
 8012abe:	f53f af1f 	bmi.w	8012900 <_vfiprintf_r+0x44>
 8012ac2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012ac4:	e71e      	b.n	8012904 <_vfiprintf_r+0x48>
 8012ac6:	ab03      	add	r3, sp, #12
 8012ac8:	9300      	str	r3, [sp, #0]
 8012aca:	462a      	mov	r2, r5
 8012acc:	4b05      	ldr	r3, [pc, #20]	@ (8012ae4 <_vfiprintf_r+0x228>)
 8012ace:	a904      	add	r1, sp, #16
 8012ad0:	4630      	mov	r0, r6
 8012ad2:	f000 f879 	bl	8012bc8 <_printf_i>
 8012ad6:	e7e4      	b.n	8012aa2 <_vfiprintf_r+0x1e6>
 8012ad8:	080146bf 	.word	0x080146bf
 8012adc:	080146c9 	.word	0x080146c9
 8012ae0:	00000000 	.word	0x00000000
 8012ae4:	08012897 	.word	0x08012897
 8012ae8:	080146c5 	.word	0x080146c5

08012aec <_printf_common>:
 8012aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012af0:	4616      	mov	r6, r2
 8012af2:	4698      	mov	r8, r3
 8012af4:	688a      	ldr	r2, [r1, #8]
 8012af6:	690b      	ldr	r3, [r1, #16]
 8012af8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012afc:	4293      	cmp	r3, r2
 8012afe:	bfb8      	it	lt
 8012b00:	4613      	movlt	r3, r2
 8012b02:	6033      	str	r3, [r6, #0]
 8012b04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012b08:	4607      	mov	r7, r0
 8012b0a:	460c      	mov	r4, r1
 8012b0c:	b10a      	cbz	r2, 8012b12 <_printf_common+0x26>
 8012b0e:	3301      	adds	r3, #1
 8012b10:	6033      	str	r3, [r6, #0]
 8012b12:	6823      	ldr	r3, [r4, #0]
 8012b14:	0699      	lsls	r1, r3, #26
 8012b16:	bf42      	ittt	mi
 8012b18:	6833      	ldrmi	r3, [r6, #0]
 8012b1a:	3302      	addmi	r3, #2
 8012b1c:	6033      	strmi	r3, [r6, #0]
 8012b1e:	6825      	ldr	r5, [r4, #0]
 8012b20:	f015 0506 	ands.w	r5, r5, #6
 8012b24:	d106      	bne.n	8012b34 <_printf_common+0x48>
 8012b26:	f104 0a19 	add.w	sl, r4, #25
 8012b2a:	68e3      	ldr	r3, [r4, #12]
 8012b2c:	6832      	ldr	r2, [r6, #0]
 8012b2e:	1a9b      	subs	r3, r3, r2
 8012b30:	42ab      	cmp	r3, r5
 8012b32:	dc26      	bgt.n	8012b82 <_printf_common+0x96>
 8012b34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012b38:	6822      	ldr	r2, [r4, #0]
 8012b3a:	3b00      	subs	r3, #0
 8012b3c:	bf18      	it	ne
 8012b3e:	2301      	movne	r3, #1
 8012b40:	0692      	lsls	r2, r2, #26
 8012b42:	d42b      	bmi.n	8012b9c <_printf_common+0xb0>
 8012b44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012b48:	4641      	mov	r1, r8
 8012b4a:	4638      	mov	r0, r7
 8012b4c:	47c8      	blx	r9
 8012b4e:	3001      	adds	r0, #1
 8012b50:	d01e      	beq.n	8012b90 <_printf_common+0xa4>
 8012b52:	6823      	ldr	r3, [r4, #0]
 8012b54:	6922      	ldr	r2, [r4, #16]
 8012b56:	f003 0306 	and.w	r3, r3, #6
 8012b5a:	2b04      	cmp	r3, #4
 8012b5c:	bf02      	ittt	eq
 8012b5e:	68e5      	ldreq	r5, [r4, #12]
 8012b60:	6833      	ldreq	r3, [r6, #0]
 8012b62:	1aed      	subeq	r5, r5, r3
 8012b64:	68a3      	ldr	r3, [r4, #8]
 8012b66:	bf0c      	ite	eq
 8012b68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012b6c:	2500      	movne	r5, #0
 8012b6e:	4293      	cmp	r3, r2
 8012b70:	bfc4      	itt	gt
 8012b72:	1a9b      	subgt	r3, r3, r2
 8012b74:	18ed      	addgt	r5, r5, r3
 8012b76:	2600      	movs	r6, #0
 8012b78:	341a      	adds	r4, #26
 8012b7a:	42b5      	cmp	r5, r6
 8012b7c:	d11a      	bne.n	8012bb4 <_printf_common+0xc8>
 8012b7e:	2000      	movs	r0, #0
 8012b80:	e008      	b.n	8012b94 <_printf_common+0xa8>
 8012b82:	2301      	movs	r3, #1
 8012b84:	4652      	mov	r2, sl
 8012b86:	4641      	mov	r1, r8
 8012b88:	4638      	mov	r0, r7
 8012b8a:	47c8      	blx	r9
 8012b8c:	3001      	adds	r0, #1
 8012b8e:	d103      	bne.n	8012b98 <_printf_common+0xac>
 8012b90:	f04f 30ff 	mov.w	r0, #4294967295
 8012b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b98:	3501      	adds	r5, #1
 8012b9a:	e7c6      	b.n	8012b2a <_printf_common+0x3e>
 8012b9c:	18e1      	adds	r1, r4, r3
 8012b9e:	1c5a      	adds	r2, r3, #1
 8012ba0:	2030      	movs	r0, #48	@ 0x30
 8012ba2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012ba6:	4422      	add	r2, r4
 8012ba8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012bac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012bb0:	3302      	adds	r3, #2
 8012bb2:	e7c7      	b.n	8012b44 <_printf_common+0x58>
 8012bb4:	2301      	movs	r3, #1
 8012bb6:	4622      	mov	r2, r4
 8012bb8:	4641      	mov	r1, r8
 8012bba:	4638      	mov	r0, r7
 8012bbc:	47c8      	blx	r9
 8012bbe:	3001      	adds	r0, #1
 8012bc0:	d0e6      	beq.n	8012b90 <_printf_common+0xa4>
 8012bc2:	3601      	adds	r6, #1
 8012bc4:	e7d9      	b.n	8012b7a <_printf_common+0x8e>
	...

08012bc8 <_printf_i>:
 8012bc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012bcc:	7e0f      	ldrb	r7, [r1, #24]
 8012bce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012bd0:	2f78      	cmp	r7, #120	@ 0x78
 8012bd2:	4691      	mov	r9, r2
 8012bd4:	4680      	mov	r8, r0
 8012bd6:	460c      	mov	r4, r1
 8012bd8:	469a      	mov	sl, r3
 8012bda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012bde:	d807      	bhi.n	8012bf0 <_printf_i+0x28>
 8012be0:	2f62      	cmp	r7, #98	@ 0x62
 8012be2:	d80a      	bhi.n	8012bfa <_printf_i+0x32>
 8012be4:	2f00      	cmp	r7, #0
 8012be6:	f000 80d1 	beq.w	8012d8c <_printf_i+0x1c4>
 8012bea:	2f58      	cmp	r7, #88	@ 0x58
 8012bec:	f000 80b8 	beq.w	8012d60 <_printf_i+0x198>
 8012bf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012bf4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012bf8:	e03a      	b.n	8012c70 <_printf_i+0xa8>
 8012bfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012bfe:	2b15      	cmp	r3, #21
 8012c00:	d8f6      	bhi.n	8012bf0 <_printf_i+0x28>
 8012c02:	a101      	add	r1, pc, #4	@ (adr r1, 8012c08 <_printf_i+0x40>)
 8012c04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012c08:	08012c61 	.word	0x08012c61
 8012c0c:	08012c75 	.word	0x08012c75
 8012c10:	08012bf1 	.word	0x08012bf1
 8012c14:	08012bf1 	.word	0x08012bf1
 8012c18:	08012bf1 	.word	0x08012bf1
 8012c1c:	08012bf1 	.word	0x08012bf1
 8012c20:	08012c75 	.word	0x08012c75
 8012c24:	08012bf1 	.word	0x08012bf1
 8012c28:	08012bf1 	.word	0x08012bf1
 8012c2c:	08012bf1 	.word	0x08012bf1
 8012c30:	08012bf1 	.word	0x08012bf1
 8012c34:	08012d73 	.word	0x08012d73
 8012c38:	08012c9f 	.word	0x08012c9f
 8012c3c:	08012d2d 	.word	0x08012d2d
 8012c40:	08012bf1 	.word	0x08012bf1
 8012c44:	08012bf1 	.word	0x08012bf1
 8012c48:	08012d95 	.word	0x08012d95
 8012c4c:	08012bf1 	.word	0x08012bf1
 8012c50:	08012c9f 	.word	0x08012c9f
 8012c54:	08012bf1 	.word	0x08012bf1
 8012c58:	08012bf1 	.word	0x08012bf1
 8012c5c:	08012d35 	.word	0x08012d35
 8012c60:	6833      	ldr	r3, [r6, #0]
 8012c62:	1d1a      	adds	r2, r3, #4
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	6032      	str	r2, [r6, #0]
 8012c68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012c6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012c70:	2301      	movs	r3, #1
 8012c72:	e09c      	b.n	8012dae <_printf_i+0x1e6>
 8012c74:	6833      	ldr	r3, [r6, #0]
 8012c76:	6820      	ldr	r0, [r4, #0]
 8012c78:	1d19      	adds	r1, r3, #4
 8012c7a:	6031      	str	r1, [r6, #0]
 8012c7c:	0606      	lsls	r6, r0, #24
 8012c7e:	d501      	bpl.n	8012c84 <_printf_i+0xbc>
 8012c80:	681d      	ldr	r5, [r3, #0]
 8012c82:	e003      	b.n	8012c8c <_printf_i+0xc4>
 8012c84:	0645      	lsls	r5, r0, #25
 8012c86:	d5fb      	bpl.n	8012c80 <_printf_i+0xb8>
 8012c88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012c8c:	2d00      	cmp	r5, #0
 8012c8e:	da03      	bge.n	8012c98 <_printf_i+0xd0>
 8012c90:	232d      	movs	r3, #45	@ 0x2d
 8012c92:	426d      	negs	r5, r5
 8012c94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012c98:	4858      	ldr	r0, [pc, #352]	@ (8012dfc <_printf_i+0x234>)
 8012c9a:	230a      	movs	r3, #10
 8012c9c:	e011      	b.n	8012cc2 <_printf_i+0xfa>
 8012c9e:	6821      	ldr	r1, [r4, #0]
 8012ca0:	6833      	ldr	r3, [r6, #0]
 8012ca2:	0608      	lsls	r0, r1, #24
 8012ca4:	f853 5b04 	ldr.w	r5, [r3], #4
 8012ca8:	d402      	bmi.n	8012cb0 <_printf_i+0xe8>
 8012caa:	0649      	lsls	r1, r1, #25
 8012cac:	bf48      	it	mi
 8012cae:	b2ad      	uxthmi	r5, r5
 8012cb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8012cb2:	4852      	ldr	r0, [pc, #328]	@ (8012dfc <_printf_i+0x234>)
 8012cb4:	6033      	str	r3, [r6, #0]
 8012cb6:	bf14      	ite	ne
 8012cb8:	230a      	movne	r3, #10
 8012cba:	2308      	moveq	r3, #8
 8012cbc:	2100      	movs	r1, #0
 8012cbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012cc2:	6866      	ldr	r6, [r4, #4]
 8012cc4:	60a6      	str	r6, [r4, #8]
 8012cc6:	2e00      	cmp	r6, #0
 8012cc8:	db05      	blt.n	8012cd6 <_printf_i+0x10e>
 8012cca:	6821      	ldr	r1, [r4, #0]
 8012ccc:	432e      	orrs	r6, r5
 8012cce:	f021 0104 	bic.w	r1, r1, #4
 8012cd2:	6021      	str	r1, [r4, #0]
 8012cd4:	d04b      	beq.n	8012d6e <_printf_i+0x1a6>
 8012cd6:	4616      	mov	r6, r2
 8012cd8:	fbb5 f1f3 	udiv	r1, r5, r3
 8012cdc:	fb03 5711 	mls	r7, r3, r1, r5
 8012ce0:	5dc7      	ldrb	r7, [r0, r7]
 8012ce2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012ce6:	462f      	mov	r7, r5
 8012ce8:	42bb      	cmp	r3, r7
 8012cea:	460d      	mov	r5, r1
 8012cec:	d9f4      	bls.n	8012cd8 <_printf_i+0x110>
 8012cee:	2b08      	cmp	r3, #8
 8012cf0:	d10b      	bne.n	8012d0a <_printf_i+0x142>
 8012cf2:	6823      	ldr	r3, [r4, #0]
 8012cf4:	07df      	lsls	r7, r3, #31
 8012cf6:	d508      	bpl.n	8012d0a <_printf_i+0x142>
 8012cf8:	6923      	ldr	r3, [r4, #16]
 8012cfa:	6861      	ldr	r1, [r4, #4]
 8012cfc:	4299      	cmp	r1, r3
 8012cfe:	bfde      	ittt	le
 8012d00:	2330      	movle	r3, #48	@ 0x30
 8012d02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012d06:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012d0a:	1b92      	subs	r2, r2, r6
 8012d0c:	6122      	str	r2, [r4, #16]
 8012d0e:	f8cd a000 	str.w	sl, [sp]
 8012d12:	464b      	mov	r3, r9
 8012d14:	aa03      	add	r2, sp, #12
 8012d16:	4621      	mov	r1, r4
 8012d18:	4640      	mov	r0, r8
 8012d1a:	f7ff fee7 	bl	8012aec <_printf_common>
 8012d1e:	3001      	adds	r0, #1
 8012d20:	d14a      	bne.n	8012db8 <_printf_i+0x1f0>
 8012d22:	f04f 30ff 	mov.w	r0, #4294967295
 8012d26:	b004      	add	sp, #16
 8012d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d2c:	6823      	ldr	r3, [r4, #0]
 8012d2e:	f043 0320 	orr.w	r3, r3, #32
 8012d32:	6023      	str	r3, [r4, #0]
 8012d34:	4832      	ldr	r0, [pc, #200]	@ (8012e00 <_printf_i+0x238>)
 8012d36:	2778      	movs	r7, #120	@ 0x78
 8012d38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012d3c:	6823      	ldr	r3, [r4, #0]
 8012d3e:	6831      	ldr	r1, [r6, #0]
 8012d40:	061f      	lsls	r7, r3, #24
 8012d42:	f851 5b04 	ldr.w	r5, [r1], #4
 8012d46:	d402      	bmi.n	8012d4e <_printf_i+0x186>
 8012d48:	065f      	lsls	r7, r3, #25
 8012d4a:	bf48      	it	mi
 8012d4c:	b2ad      	uxthmi	r5, r5
 8012d4e:	6031      	str	r1, [r6, #0]
 8012d50:	07d9      	lsls	r1, r3, #31
 8012d52:	bf44      	itt	mi
 8012d54:	f043 0320 	orrmi.w	r3, r3, #32
 8012d58:	6023      	strmi	r3, [r4, #0]
 8012d5a:	b11d      	cbz	r5, 8012d64 <_printf_i+0x19c>
 8012d5c:	2310      	movs	r3, #16
 8012d5e:	e7ad      	b.n	8012cbc <_printf_i+0xf4>
 8012d60:	4826      	ldr	r0, [pc, #152]	@ (8012dfc <_printf_i+0x234>)
 8012d62:	e7e9      	b.n	8012d38 <_printf_i+0x170>
 8012d64:	6823      	ldr	r3, [r4, #0]
 8012d66:	f023 0320 	bic.w	r3, r3, #32
 8012d6a:	6023      	str	r3, [r4, #0]
 8012d6c:	e7f6      	b.n	8012d5c <_printf_i+0x194>
 8012d6e:	4616      	mov	r6, r2
 8012d70:	e7bd      	b.n	8012cee <_printf_i+0x126>
 8012d72:	6833      	ldr	r3, [r6, #0]
 8012d74:	6825      	ldr	r5, [r4, #0]
 8012d76:	6961      	ldr	r1, [r4, #20]
 8012d78:	1d18      	adds	r0, r3, #4
 8012d7a:	6030      	str	r0, [r6, #0]
 8012d7c:	062e      	lsls	r6, r5, #24
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	d501      	bpl.n	8012d86 <_printf_i+0x1be>
 8012d82:	6019      	str	r1, [r3, #0]
 8012d84:	e002      	b.n	8012d8c <_printf_i+0x1c4>
 8012d86:	0668      	lsls	r0, r5, #25
 8012d88:	d5fb      	bpl.n	8012d82 <_printf_i+0x1ba>
 8012d8a:	8019      	strh	r1, [r3, #0]
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	6123      	str	r3, [r4, #16]
 8012d90:	4616      	mov	r6, r2
 8012d92:	e7bc      	b.n	8012d0e <_printf_i+0x146>
 8012d94:	6833      	ldr	r3, [r6, #0]
 8012d96:	1d1a      	adds	r2, r3, #4
 8012d98:	6032      	str	r2, [r6, #0]
 8012d9a:	681e      	ldr	r6, [r3, #0]
 8012d9c:	6862      	ldr	r2, [r4, #4]
 8012d9e:	2100      	movs	r1, #0
 8012da0:	4630      	mov	r0, r6
 8012da2:	f7ed fab5 	bl	8000310 <memchr>
 8012da6:	b108      	cbz	r0, 8012dac <_printf_i+0x1e4>
 8012da8:	1b80      	subs	r0, r0, r6
 8012daa:	6060      	str	r0, [r4, #4]
 8012dac:	6863      	ldr	r3, [r4, #4]
 8012dae:	6123      	str	r3, [r4, #16]
 8012db0:	2300      	movs	r3, #0
 8012db2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012db6:	e7aa      	b.n	8012d0e <_printf_i+0x146>
 8012db8:	6923      	ldr	r3, [r4, #16]
 8012dba:	4632      	mov	r2, r6
 8012dbc:	4649      	mov	r1, r9
 8012dbe:	4640      	mov	r0, r8
 8012dc0:	47d0      	blx	sl
 8012dc2:	3001      	adds	r0, #1
 8012dc4:	d0ad      	beq.n	8012d22 <_printf_i+0x15a>
 8012dc6:	6823      	ldr	r3, [r4, #0]
 8012dc8:	079b      	lsls	r3, r3, #30
 8012dca:	d413      	bmi.n	8012df4 <_printf_i+0x22c>
 8012dcc:	68e0      	ldr	r0, [r4, #12]
 8012dce:	9b03      	ldr	r3, [sp, #12]
 8012dd0:	4298      	cmp	r0, r3
 8012dd2:	bfb8      	it	lt
 8012dd4:	4618      	movlt	r0, r3
 8012dd6:	e7a6      	b.n	8012d26 <_printf_i+0x15e>
 8012dd8:	2301      	movs	r3, #1
 8012dda:	4632      	mov	r2, r6
 8012ddc:	4649      	mov	r1, r9
 8012dde:	4640      	mov	r0, r8
 8012de0:	47d0      	blx	sl
 8012de2:	3001      	adds	r0, #1
 8012de4:	d09d      	beq.n	8012d22 <_printf_i+0x15a>
 8012de6:	3501      	adds	r5, #1
 8012de8:	68e3      	ldr	r3, [r4, #12]
 8012dea:	9903      	ldr	r1, [sp, #12]
 8012dec:	1a5b      	subs	r3, r3, r1
 8012dee:	42ab      	cmp	r3, r5
 8012df0:	dcf2      	bgt.n	8012dd8 <_printf_i+0x210>
 8012df2:	e7eb      	b.n	8012dcc <_printf_i+0x204>
 8012df4:	2500      	movs	r5, #0
 8012df6:	f104 0619 	add.w	r6, r4, #25
 8012dfa:	e7f5      	b.n	8012de8 <_printf_i+0x220>
 8012dfc:	080146d0 	.word	0x080146d0
 8012e00:	080146e1 	.word	0x080146e1

08012e04 <__sflush_r>:
 8012e04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e0c:	0716      	lsls	r6, r2, #28
 8012e0e:	4605      	mov	r5, r0
 8012e10:	460c      	mov	r4, r1
 8012e12:	d454      	bmi.n	8012ebe <__sflush_r+0xba>
 8012e14:	684b      	ldr	r3, [r1, #4]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	dc02      	bgt.n	8012e20 <__sflush_r+0x1c>
 8012e1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	dd48      	ble.n	8012eb2 <__sflush_r+0xae>
 8012e20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012e22:	2e00      	cmp	r6, #0
 8012e24:	d045      	beq.n	8012eb2 <__sflush_r+0xae>
 8012e26:	2300      	movs	r3, #0
 8012e28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012e2c:	682f      	ldr	r7, [r5, #0]
 8012e2e:	6a21      	ldr	r1, [r4, #32]
 8012e30:	602b      	str	r3, [r5, #0]
 8012e32:	d030      	beq.n	8012e96 <__sflush_r+0x92>
 8012e34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012e36:	89a3      	ldrh	r3, [r4, #12]
 8012e38:	0759      	lsls	r1, r3, #29
 8012e3a:	d505      	bpl.n	8012e48 <__sflush_r+0x44>
 8012e3c:	6863      	ldr	r3, [r4, #4]
 8012e3e:	1ad2      	subs	r2, r2, r3
 8012e40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012e42:	b10b      	cbz	r3, 8012e48 <__sflush_r+0x44>
 8012e44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012e46:	1ad2      	subs	r2, r2, r3
 8012e48:	2300      	movs	r3, #0
 8012e4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012e4c:	6a21      	ldr	r1, [r4, #32]
 8012e4e:	4628      	mov	r0, r5
 8012e50:	47b0      	blx	r6
 8012e52:	1c43      	adds	r3, r0, #1
 8012e54:	89a3      	ldrh	r3, [r4, #12]
 8012e56:	d106      	bne.n	8012e66 <__sflush_r+0x62>
 8012e58:	6829      	ldr	r1, [r5, #0]
 8012e5a:	291d      	cmp	r1, #29
 8012e5c:	d82b      	bhi.n	8012eb6 <__sflush_r+0xb2>
 8012e5e:	4a2a      	ldr	r2, [pc, #168]	@ (8012f08 <__sflush_r+0x104>)
 8012e60:	40ca      	lsrs	r2, r1
 8012e62:	07d6      	lsls	r6, r2, #31
 8012e64:	d527      	bpl.n	8012eb6 <__sflush_r+0xb2>
 8012e66:	2200      	movs	r2, #0
 8012e68:	6062      	str	r2, [r4, #4]
 8012e6a:	04d9      	lsls	r1, r3, #19
 8012e6c:	6922      	ldr	r2, [r4, #16]
 8012e6e:	6022      	str	r2, [r4, #0]
 8012e70:	d504      	bpl.n	8012e7c <__sflush_r+0x78>
 8012e72:	1c42      	adds	r2, r0, #1
 8012e74:	d101      	bne.n	8012e7a <__sflush_r+0x76>
 8012e76:	682b      	ldr	r3, [r5, #0]
 8012e78:	b903      	cbnz	r3, 8012e7c <__sflush_r+0x78>
 8012e7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8012e7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012e7e:	602f      	str	r7, [r5, #0]
 8012e80:	b1b9      	cbz	r1, 8012eb2 <__sflush_r+0xae>
 8012e82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012e86:	4299      	cmp	r1, r3
 8012e88:	d002      	beq.n	8012e90 <__sflush_r+0x8c>
 8012e8a:	4628      	mov	r0, r5
 8012e8c:	f7ff fa94 	bl	80123b8 <_free_r>
 8012e90:	2300      	movs	r3, #0
 8012e92:	6363      	str	r3, [r4, #52]	@ 0x34
 8012e94:	e00d      	b.n	8012eb2 <__sflush_r+0xae>
 8012e96:	2301      	movs	r3, #1
 8012e98:	4628      	mov	r0, r5
 8012e9a:	47b0      	blx	r6
 8012e9c:	4602      	mov	r2, r0
 8012e9e:	1c50      	adds	r0, r2, #1
 8012ea0:	d1c9      	bne.n	8012e36 <__sflush_r+0x32>
 8012ea2:	682b      	ldr	r3, [r5, #0]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d0c6      	beq.n	8012e36 <__sflush_r+0x32>
 8012ea8:	2b1d      	cmp	r3, #29
 8012eaa:	d001      	beq.n	8012eb0 <__sflush_r+0xac>
 8012eac:	2b16      	cmp	r3, #22
 8012eae:	d11e      	bne.n	8012eee <__sflush_r+0xea>
 8012eb0:	602f      	str	r7, [r5, #0]
 8012eb2:	2000      	movs	r0, #0
 8012eb4:	e022      	b.n	8012efc <__sflush_r+0xf8>
 8012eb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012eba:	b21b      	sxth	r3, r3
 8012ebc:	e01b      	b.n	8012ef6 <__sflush_r+0xf2>
 8012ebe:	690f      	ldr	r7, [r1, #16]
 8012ec0:	2f00      	cmp	r7, #0
 8012ec2:	d0f6      	beq.n	8012eb2 <__sflush_r+0xae>
 8012ec4:	0793      	lsls	r3, r2, #30
 8012ec6:	680e      	ldr	r6, [r1, #0]
 8012ec8:	bf08      	it	eq
 8012eca:	694b      	ldreq	r3, [r1, #20]
 8012ecc:	600f      	str	r7, [r1, #0]
 8012ece:	bf18      	it	ne
 8012ed0:	2300      	movne	r3, #0
 8012ed2:	eba6 0807 	sub.w	r8, r6, r7
 8012ed6:	608b      	str	r3, [r1, #8]
 8012ed8:	f1b8 0f00 	cmp.w	r8, #0
 8012edc:	dde9      	ble.n	8012eb2 <__sflush_r+0xae>
 8012ede:	6a21      	ldr	r1, [r4, #32]
 8012ee0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012ee2:	4643      	mov	r3, r8
 8012ee4:	463a      	mov	r2, r7
 8012ee6:	4628      	mov	r0, r5
 8012ee8:	47b0      	blx	r6
 8012eea:	2800      	cmp	r0, #0
 8012eec:	dc08      	bgt.n	8012f00 <__sflush_r+0xfc>
 8012eee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ef2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012ef6:	81a3      	strh	r3, [r4, #12]
 8012ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8012efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f00:	4407      	add	r7, r0
 8012f02:	eba8 0800 	sub.w	r8, r8, r0
 8012f06:	e7e7      	b.n	8012ed8 <__sflush_r+0xd4>
 8012f08:	20400001 	.word	0x20400001

08012f0c <_fflush_r>:
 8012f0c:	b538      	push	{r3, r4, r5, lr}
 8012f0e:	690b      	ldr	r3, [r1, #16]
 8012f10:	4605      	mov	r5, r0
 8012f12:	460c      	mov	r4, r1
 8012f14:	b913      	cbnz	r3, 8012f1c <_fflush_r+0x10>
 8012f16:	2500      	movs	r5, #0
 8012f18:	4628      	mov	r0, r5
 8012f1a:	bd38      	pop	{r3, r4, r5, pc}
 8012f1c:	b118      	cbz	r0, 8012f26 <_fflush_r+0x1a>
 8012f1e:	6a03      	ldr	r3, [r0, #32]
 8012f20:	b90b      	cbnz	r3, 8012f26 <_fflush_r+0x1a>
 8012f22:	f7fe ff65 	bl	8011df0 <__sinit>
 8012f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d0f3      	beq.n	8012f16 <_fflush_r+0xa>
 8012f2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012f30:	07d0      	lsls	r0, r2, #31
 8012f32:	d404      	bmi.n	8012f3e <_fflush_r+0x32>
 8012f34:	0599      	lsls	r1, r3, #22
 8012f36:	d402      	bmi.n	8012f3e <_fflush_r+0x32>
 8012f38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012f3a:	f7ff fa0e 	bl	801235a <__retarget_lock_acquire_recursive>
 8012f3e:	4628      	mov	r0, r5
 8012f40:	4621      	mov	r1, r4
 8012f42:	f7ff ff5f 	bl	8012e04 <__sflush_r>
 8012f46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012f48:	07da      	lsls	r2, r3, #31
 8012f4a:	4605      	mov	r5, r0
 8012f4c:	d4e4      	bmi.n	8012f18 <_fflush_r+0xc>
 8012f4e:	89a3      	ldrh	r3, [r4, #12]
 8012f50:	059b      	lsls	r3, r3, #22
 8012f52:	d4e1      	bmi.n	8012f18 <_fflush_r+0xc>
 8012f54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012f56:	f7ff fa01 	bl	801235c <__retarget_lock_release_recursive>
 8012f5a:	e7dd      	b.n	8012f18 <_fflush_r+0xc>

08012f5c <fiprintf>:
 8012f5c:	b40e      	push	{r1, r2, r3}
 8012f5e:	b503      	push	{r0, r1, lr}
 8012f60:	4601      	mov	r1, r0
 8012f62:	ab03      	add	r3, sp, #12
 8012f64:	4805      	ldr	r0, [pc, #20]	@ (8012f7c <fiprintf+0x20>)
 8012f66:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f6a:	6800      	ldr	r0, [r0, #0]
 8012f6c:	9301      	str	r3, [sp, #4]
 8012f6e:	f7ff fca5 	bl	80128bc <_vfiprintf_r>
 8012f72:	b002      	add	sp, #8
 8012f74:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f78:	b003      	add	sp, #12
 8012f7a:	4770      	bx	lr
 8012f7c:	240000e8 	.word	0x240000e8

08012f80 <__swhatbuf_r>:
 8012f80:	b570      	push	{r4, r5, r6, lr}
 8012f82:	460c      	mov	r4, r1
 8012f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f88:	2900      	cmp	r1, #0
 8012f8a:	b096      	sub	sp, #88	@ 0x58
 8012f8c:	4615      	mov	r5, r2
 8012f8e:	461e      	mov	r6, r3
 8012f90:	da0d      	bge.n	8012fae <__swhatbuf_r+0x2e>
 8012f92:	89a3      	ldrh	r3, [r4, #12]
 8012f94:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012f98:	f04f 0100 	mov.w	r1, #0
 8012f9c:	bf14      	ite	ne
 8012f9e:	2340      	movne	r3, #64	@ 0x40
 8012fa0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012fa4:	2000      	movs	r0, #0
 8012fa6:	6031      	str	r1, [r6, #0]
 8012fa8:	602b      	str	r3, [r5, #0]
 8012faa:	b016      	add	sp, #88	@ 0x58
 8012fac:	bd70      	pop	{r4, r5, r6, pc}
 8012fae:	466a      	mov	r2, sp
 8012fb0:	f000 f848 	bl	8013044 <_fstat_r>
 8012fb4:	2800      	cmp	r0, #0
 8012fb6:	dbec      	blt.n	8012f92 <__swhatbuf_r+0x12>
 8012fb8:	9901      	ldr	r1, [sp, #4]
 8012fba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012fbe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012fc2:	4259      	negs	r1, r3
 8012fc4:	4159      	adcs	r1, r3
 8012fc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012fca:	e7eb      	b.n	8012fa4 <__swhatbuf_r+0x24>

08012fcc <__smakebuf_r>:
 8012fcc:	898b      	ldrh	r3, [r1, #12]
 8012fce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012fd0:	079d      	lsls	r5, r3, #30
 8012fd2:	4606      	mov	r6, r0
 8012fd4:	460c      	mov	r4, r1
 8012fd6:	d507      	bpl.n	8012fe8 <__smakebuf_r+0x1c>
 8012fd8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012fdc:	6023      	str	r3, [r4, #0]
 8012fde:	6123      	str	r3, [r4, #16]
 8012fe0:	2301      	movs	r3, #1
 8012fe2:	6163      	str	r3, [r4, #20]
 8012fe4:	b003      	add	sp, #12
 8012fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012fe8:	ab01      	add	r3, sp, #4
 8012fea:	466a      	mov	r2, sp
 8012fec:	f7ff ffc8 	bl	8012f80 <__swhatbuf_r>
 8012ff0:	9f00      	ldr	r7, [sp, #0]
 8012ff2:	4605      	mov	r5, r0
 8012ff4:	4639      	mov	r1, r7
 8012ff6:	4630      	mov	r0, r6
 8012ff8:	f7ff fa52 	bl	80124a0 <_malloc_r>
 8012ffc:	b948      	cbnz	r0, 8013012 <__smakebuf_r+0x46>
 8012ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013002:	059a      	lsls	r2, r3, #22
 8013004:	d4ee      	bmi.n	8012fe4 <__smakebuf_r+0x18>
 8013006:	f023 0303 	bic.w	r3, r3, #3
 801300a:	f043 0302 	orr.w	r3, r3, #2
 801300e:	81a3      	strh	r3, [r4, #12]
 8013010:	e7e2      	b.n	8012fd8 <__smakebuf_r+0xc>
 8013012:	89a3      	ldrh	r3, [r4, #12]
 8013014:	6020      	str	r0, [r4, #0]
 8013016:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801301a:	81a3      	strh	r3, [r4, #12]
 801301c:	9b01      	ldr	r3, [sp, #4]
 801301e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013022:	b15b      	cbz	r3, 801303c <__smakebuf_r+0x70>
 8013024:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013028:	4630      	mov	r0, r6
 801302a:	f000 f81d 	bl	8013068 <_isatty_r>
 801302e:	b128      	cbz	r0, 801303c <__smakebuf_r+0x70>
 8013030:	89a3      	ldrh	r3, [r4, #12]
 8013032:	f023 0303 	bic.w	r3, r3, #3
 8013036:	f043 0301 	orr.w	r3, r3, #1
 801303a:	81a3      	strh	r3, [r4, #12]
 801303c:	89a3      	ldrh	r3, [r4, #12]
 801303e:	431d      	orrs	r5, r3
 8013040:	81a5      	strh	r5, [r4, #12]
 8013042:	e7cf      	b.n	8012fe4 <__smakebuf_r+0x18>

08013044 <_fstat_r>:
 8013044:	b538      	push	{r3, r4, r5, lr}
 8013046:	4d07      	ldr	r5, [pc, #28]	@ (8013064 <_fstat_r+0x20>)
 8013048:	2300      	movs	r3, #0
 801304a:	4604      	mov	r4, r0
 801304c:	4608      	mov	r0, r1
 801304e:	4611      	mov	r1, r2
 8013050:	602b      	str	r3, [r5, #0]
 8013052:	f7ee fd47 	bl	8001ae4 <_fstat>
 8013056:	1c43      	adds	r3, r0, #1
 8013058:	d102      	bne.n	8013060 <_fstat_r+0x1c>
 801305a:	682b      	ldr	r3, [r5, #0]
 801305c:	b103      	cbz	r3, 8013060 <_fstat_r+0x1c>
 801305e:	6023      	str	r3, [r4, #0]
 8013060:	bd38      	pop	{r3, r4, r5, pc}
 8013062:	bf00      	nop
 8013064:	24042e80 	.word	0x24042e80

08013068 <_isatty_r>:
 8013068:	b538      	push	{r3, r4, r5, lr}
 801306a:	4d06      	ldr	r5, [pc, #24]	@ (8013084 <_isatty_r+0x1c>)
 801306c:	2300      	movs	r3, #0
 801306e:	4604      	mov	r4, r0
 8013070:	4608      	mov	r0, r1
 8013072:	602b      	str	r3, [r5, #0]
 8013074:	f7ee fd46 	bl	8001b04 <_isatty>
 8013078:	1c43      	adds	r3, r0, #1
 801307a:	d102      	bne.n	8013082 <_isatty_r+0x1a>
 801307c:	682b      	ldr	r3, [r5, #0]
 801307e:	b103      	cbz	r3, 8013082 <_isatty_r+0x1a>
 8013080:	6023      	str	r3, [r4, #0]
 8013082:	bd38      	pop	{r3, r4, r5, pc}
 8013084:	24042e80 	.word	0x24042e80

08013088 <_sbrk_r>:
 8013088:	b538      	push	{r3, r4, r5, lr}
 801308a:	4d06      	ldr	r5, [pc, #24]	@ (80130a4 <_sbrk_r+0x1c>)
 801308c:	2300      	movs	r3, #0
 801308e:	4604      	mov	r4, r0
 8013090:	4608      	mov	r0, r1
 8013092:	602b      	str	r3, [r5, #0]
 8013094:	f7ee fd4e 	bl	8001b34 <_sbrk>
 8013098:	1c43      	adds	r3, r0, #1
 801309a:	d102      	bne.n	80130a2 <_sbrk_r+0x1a>
 801309c:	682b      	ldr	r3, [r5, #0]
 801309e:	b103      	cbz	r3, 80130a2 <_sbrk_r+0x1a>
 80130a0:	6023      	str	r3, [r4, #0]
 80130a2:	bd38      	pop	{r3, r4, r5, pc}
 80130a4:	24042e80 	.word	0x24042e80

080130a8 <abort>:
 80130a8:	b508      	push	{r3, lr}
 80130aa:	2006      	movs	r0, #6
 80130ac:	f000 f85a 	bl	8013164 <raise>
 80130b0:	2001      	movs	r0, #1
 80130b2:	f7ee fcc7 	bl	8001a44 <_exit>

080130b6 <_realloc_r>:
 80130b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130ba:	4607      	mov	r7, r0
 80130bc:	4614      	mov	r4, r2
 80130be:	460d      	mov	r5, r1
 80130c0:	b921      	cbnz	r1, 80130cc <_realloc_r+0x16>
 80130c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80130c6:	4611      	mov	r1, r2
 80130c8:	f7ff b9ea 	b.w	80124a0 <_malloc_r>
 80130cc:	b92a      	cbnz	r2, 80130da <_realloc_r+0x24>
 80130ce:	f7ff f973 	bl	80123b8 <_free_r>
 80130d2:	4625      	mov	r5, r4
 80130d4:	4628      	mov	r0, r5
 80130d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130da:	f000 f85f 	bl	801319c <_malloc_usable_size_r>
 80130de:	4284      	cmp	r4, r0
 80130e0:	4606      	mov	r6, r0
 80130e2:	d802      	bhi.n	80130ea <_realloc_r+0x34>
 80130e4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80130e8:	d8f4      	bhi.n	80130d4 <_realloc_r+0x1e>
 80130ea:	4621      	mov	r1, r4
 80130ec:	4638      	mov	r0, r7
 80130ee:	f7ff f9d7 	bl	80124a0 <_malloc_r>
 80130f2:	4680      	mov	r8, r0
 80130f4:	b908      	cbnz	r0, 80130fa <_realloc_r+0x44>
 80130f6:	4645      	mov	r5, r8
 80130f8:	e7ec      	b.n	80130d4 <_realloc_r+0x1e>
 80130fa:	42b4      	cmp	r4, r6
 80130fc:	4622      	mov	r2, r4
 80130fe:	4629      	mov	r1, r5
 8013100:	bf28      	it	cs
 8013102:	4632      	movcs	r2, r6
 8013104:	f7ff f92b 	bl	801235e <memcpy>
 8013108:	4629      	mov	r1, r5
 801310a:	4638      	mov	r0, r7
 801310c:	f7ff f954 	bl	80123b8 <_free_r>
 8013110:	e7f1      	b.n	80130f6 <_realloc_r+0x40>

08013112 <_raise_r>:
 8013112:	291f      	cmp	r1, #31
 8013114:	b538      	push	{r3, r4, r5, lr}
 8013116:	4605      	mov	r5, r0
 8013118:	460c      	mov	r4, r1
 801311a:	d904      	bls.n	8013126 <_raise_r+0x14>
 801311c:	2316      	movs	r3, #22
 801311e:	6003      	str	r3, [r0, #0]
 8013120:	f04f 30ff 	mov.w	r0, #4294967295
 8013124:	bd38      	pop	{r3, r4, r5, pc}
 8013126:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013128:	b112      	cbz	r2, 8013130 <_raise_r+0x1e>
 801312a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801312e:	b94b      	cbnz	r3, 8013144 <_raise_r+0x32>
 8013130:	4628      	mov	r0, r5
 8013132:	f000 f831 	bl	8013198 <_getpid_r>
 8013136:	4622      	mov	r2, r4
 8013138:	4601      	mov	r1, r0
 801313a:	4628      	mov	r0, r5
 801313c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013140:	f000 b818 	b.w	8013174 <_kill_r>
 8013144:	2b01      	cmp	r3, #1
 8013146:	d00a      	beq.n	801315e <_raise_r+0x4c>
 8013148:	1c59      	adds	r1, r3, #1
 801314a:	d103      	bne.n	8013154 <_raise_r+0x42>
 801314c:	2316      	movs	r3, #22
 801314e:	6003      	str	r3, [r0, #0]
 8013150:	2001      	movs	r0, #1
 8013152:	e7e7      	b.n	8013124 <_raise_r+0x12>
 8013154:	2100      	movs	r1, #0
 8013156:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801315a:	4620      	mov	r0, r4
 801315c:	4798      	blx	r3
 801315e:	2000      	movs	r0, #0
 8013160:	e7e0      	b.n	8013124 <_raise_r+0x12>
	...

08013164 <raise>:
 8013164:	4b02      	ldr	r3, [pc, #8]	@ (8013170 <raise+0xc>)
 8013166:	4601      	mov	r1, r0
 8013168:	6818      	ldr	r0, [r3, #0]
 801316a:	f7ff bfd2 	b.w	8013112 <_raise_r>
 801316e:	bf00      	nop
 8013170:	240000e8 	.word	0x240000e8

08013174 <_kill_r>:
 8013174:	b538      	push	{r3, r4, r5, lr}
 8013176:	4d07      	ldr	r5, [pc, #28]	@ (8013194 <_kill_r+0x20>)
 8013178:	2300      	movs	r3, #0
 801317a:	4604      	mov	r4, r0
 801317c:	4608      	mov	r0, r1
 801317e:	4611      	mov	r1, r2
 8013180:	602b      	str	r3, [r5, #0]
 8013182:	f7ee fc4f 	bl	8001a24 <_kill>
 8013186:	1c43      	adds	r3, r0, #1
 8013188:	d102      	bne.n	8013190 <_kill_r+0x1c>
 801318a:	682b      	ldr	r3, [r5, #0]
 801318c:	b103      	cbz	r3, 8013190 <_kill_r+0x1c>
 801318e:	6023      	str	r3, [r4, #0]
 8013190:	bd38      	pop	{r3, r4, r5, pc}
 8013192:	bf00      	nop
 8013194:	24042e80 	.word	0x24042e80

08013198 <_getpid_r>:
 8013198:	f7ee bc3c 	b.w	8001a14 <_getpid>

0801319c <_malloc_usable_size_r>:
 801319c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80131a0:	1f18      	subs	r0, r3, #4
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	bfbc      	itt	lt
 80131a6:	580b      	ldrlt	r3, [r1, r0]
 80131a8:	18c0      	addlt	r0, r0, r3
 80131aa:	4770      	bx	lr

080131ac <_init>:
 80131ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131ae:	bf00      	nop
 80131b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80131b2:	bc08      	pop	{r3}
 80131b4:	469e      	mov	lr, r3
 80131b6:	4770      	bx	lr

080131b8 <_fini>:
 80131b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131ba:	bf00      	nop
 80131bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80131be:	bc08      	pop	{r3}
 80131c0:	469e      	mov	lr, r3
 80131c2:	4770      	bx	lr
