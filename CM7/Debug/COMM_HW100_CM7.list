
COMM_HW100_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010ce0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001638  08010f80  08010f80  00011f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080125b8  080125b8  00014138  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080125b8  080125b8  000135b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080125c0  080125c0  00014138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080125c0  080125c0  000135c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080125c4  080125c4  000135c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000138  24000000  080125c8  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00042cf0  24000138  08012700  00014138  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24042e28  08012700  00014e28  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00014138  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027a03  00000000  00000000  00014166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000073a8  00000000  00000000  0003bb69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002360  00000000  00000000  00042f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a94  00000000  00000000  00045278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00049694  00000000  00000000  00046d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f537  00000000  00000000  000903a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001baf9b  00000000  00000000  000bf8d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0027a872  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009b6c  00000000  00000000  0027a8b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00284424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000138 	.word	0x24000138
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010f68 	.word	0x08010f68

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400013c 	.word	0x2400013c
 80002dc:	08010f68 	.word	0x08010f68

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80003b4:	4b49      	ldr	r3, [pc, #292]	@ (80004dc <SystemInit+0x12c>)
 80003b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003ba:	4a48      	ldr	r2, [pc, #288]	@ (80004dc <SystemInit+0x12c>)
 80003bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80003c4:	4b45      	ldr	r3, [pc, #276]	@ (80004dc <SystemInit+0x12c>)
 80003c6:	691b      	ldr	r3, [r3, #16]
 80003c8:	4a44      	ldr	r2, [pc, #272]	@ (80004dc <SystemInit+0x12c>)
 80003ca:	f043 0310 	orr.w	r3, r3, #16
 80003ce:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003d0:	4b43      	ldr	r3, [pc, #268]	@ (80004e0 <SystemInit+0x130>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	f003 030f 	and.w	r3, r3, #15
 80003d8:	2b06      	cmp	r3, #6
 80003da:	d807      	bhi.n	80003ec <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003dc:	4b40      	ldr	r3, [pc, #256]	@ (80004e0 <SystemInit+0x130>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	f023 030f 	bic.w	r3, r3, #15
 80003e4:	4a3e      	ldr	r2, [pc, #248]	@ (80004e0 <SystemInit+0x130>)
 80003e6:	f043 0307 	orr.w	r3, r3, #7
 80003ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003ec:	4b3d      	ldr	r3, [pc, #244]	@ (80004e4 <SystemInit+0x134>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a3c      	ldr	r2, [pc, #240]	@ (80004e4 <SystemInit+0x134>)
 80003f2:	f043 0301 	orr.w	r3, r3, #1
 80003f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003f8:	4b3a      	ldr	r3, [pc, #232]	@ (80004e4 <SystemInit+0x134>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003fe:	4b39      	ldr	r3, [pc, #228]	@ (80004e4 <SystemInit+0x134>)
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	4938      	ldr	r1, [pc, #224]	@ (80004e4 <SystemInit+0x134>)
 8000404:	4b38      	ldr	r3, [pc, #224]	@ (80004e8 <SystemInit+0x138>)
 8000406:	4013      	ands	r3, r2
 8000408:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800040a:	4b35      	ldr	r3, [pc, #212]	@ (80004e0 <SystemInit+0x130>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f003 0308 	and.w	r3, r3, #8
 8000412:	2b00      	cmp	r3, #0
 8000414:	d007      	beq.n	8000426 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000416:	4b32      	ldr	r3, [pc, #200]	@ (80004e0 <SystemInit+0x130>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	f023 030f 	bic.w	r3, r3, #15
 800041e:	4a30      	ldr	r2, [pc, #192]	@ (80004e0 <SystemInit+0x130>)
 8000420:	f043 0307 	orr.w	r3, r3, #7
 8000424:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000426:	4b2f      	ldr	r3, [pc, #188]	@ (80004e4 <SystemInit+0x134>)
 8000428:	2200      	movs	r2, #0
 800042a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800042c:	4b2d      	ldr	r3, [pc, #180]	@ (80004e4 <SystemInit+0x134>)
 800042e:	2200      	movs	r2, #0
 8000430:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000432:	4b2c      	ldr	r3, [pc, #176]	@ (80004e4 <SystemInit+0x134>)
 8000434:	2200      	movs	r2, #0
 8000436:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000438:	4b2a      	ldr	r3, [pc, #168]	@ (80004e4 <SystemInit+0x134>)
 800043a:	4a2c      	ldr	r2, [pc, #176]	@ (80004ec <SystemInit+0x13c>)
 800043c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800043e:	4b29      	ldr	r3, [pc, #164]	@ (80004e4 <SystemInit+0x134>)
 8000440:	4a2b      	ldr	r2, [pc, #172]	@ (80004f0 <SystemInit+0x140>)
 8000442:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000444:	4b27      	ldr	r3, [pc, #156]	@ (80004e4 <SystemInit+0x134>)
 8000446:	4a2b      	ldr	r2, [pc, #172]	@ (80004f4 <SystemInit+0x144>)
 8000448:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800044a:	4b26      	ldr	r3, [pc, #152]	@ (80004e4 <SystemInit+0x134>)
 800044c:	2200      	movs	r2, #0
 800044e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000450:	4b24      	ldr	r3, [pc, #144]	@ (80004e4 <SystemInit+0x134>)
 8000452:	4a28      	ldr	r2, [pc, #160]	@ (80004f4 <SystemInit+0x144>)
 8000454:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000456:	4b23      	ldr	r3, [pc, #140]	@ (80004e4 <SystemInit+0x134>)
 8000458:	2200      	movs	r2, #0
 800045a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800045c:	4b21      	ldr	r3, [pc, #132]	@ (80004e4 <SystemInit+0x134>)
 800045e:	4a25      	ldr	r2, [pc, #148]	@ (80004f4 <SystemInit+0x144>)
 8000460:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000462:	4b20      	ldr	r3, [pc, #128]	@ (80004e4 <SystemInit+0x134>)
 8000464:	2200      	movs	r2, #0
 8000466:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000468:	4b1e      	ldr	r3, [pc, #120]	@ (80004e4 <SystemInit+0x134>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a1d      	ldr	r2, [pc, #116]	@ (80004e4 <SystemInit+0x134>)
 800046e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000472:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000474:	4b1b      	ldr	r3, [pc, #108]	@ (80004e4 <SystemInit+0x134>)
 8000476:	2200      	movs	r2, #0
 8000478:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800047a:	4b1f      	ldr	r3, [pc, #124]	@ (80004f8 <SystemInit+0x148>)
 800047c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800047e:	4a1e      	ldr	r2, [pc, #120]	@ (80004f8 <SystemInit+0x148>)
 8000480:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000484:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000486:	4b1d      	ldr	r3, [pc, #116]	@ (80004fc <SystemInit+0x14c>)
 8000488:	681a      	ldr	r2, [r3, #0]
 800048a:	4b1d      	ldr	r3, [pc, #116]	@ (8000500 <SystemInit+0x150>)
 800048c:	4013      	ands	r3, r2
 800048e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000492:	d202      	bcs.n	800049a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000494:	4b1b      	ldr	r3, [pc, #108]	@ (8000504 <SystemInit+0x154>)
 8000496:	2201      	movs	r2, #1
 8000498:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800049a:	4b12      	ldr	r3, [pc, #72]	@ (80004e4 <SystemInit+0x134>)
 800049c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80004a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d113      	bne.n	80004d0 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80004a8:	4b0e      	ldr	r3, [pc, #56]	@ (80004e4 <SystemInit+0x134>)
 80004aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80004ae:	4a0d      	ldr	r2, [pc, #52]	@ (80004e4 <SystemInit+0x134>)
 80004b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80004b4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80004b8:	4b13      	ldr	r3, [pc, #76]	@ (8000508 <SystemInit+0x158>)
 80004ba:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80004be:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80004c0:	4b08      	ldr	r3, [pc, #32]	@ (80004e4 <SystemInit+0x134>)
 80004c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80004c6:	4a07      	ldr	r2, [pc, #28]	@ (80004e4 <SystemInit+0x134>)
 80004c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80004cc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	e000ed00 	.word	0xe000ed00
 80004e0:	52002000 	.word	0x52002000
 80004e4:	58024400 	.word	0x58024400
 80004e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80004ec:	02020200 	.word	0x02020200
 80004f0:	01ff0000 	.word	0x01ff0000
 80004f4:	01010280 	.word	0x01010280
 80004f8:	580000c0 	.word	0x580000c0
 80004fc:	5c001000 	.word	0x5c001000
 8000500:	ffff0000 	.word	0xffff0000
 8000504:	51008108 	.word	0x51008108
 8000508:	52004000 	.word	0x52004000

0800050c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
#if defined(USE_PWR_LDO_SUPPLY)
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
 8000510:	4b0a      	ldr	r3, [pc, #40]	@ (800053c <ExitRun0Mode+0x30>)
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	f023 0306 	bic.w	r3, r3, #6
 8000518:	4a08      	ldr	r2, [pc, #32]	@ (800053c <ExitRun0Mode+0x30>)
 800051a:	f043 0302 	orr.w	r3, r3, #2
 800051e:	60d3      	str	r3, [r2, #12]
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000520:	bf00      	nop
 8000522:	4b06      	ldr	r3, [pc, #24]	@ (800053c <ExitRun0Mode+0x30>)
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800052a:	2b00      	cmp	r3, #0
 800052c:	d0f9      	beq.n	8000522 <ExitRun0Mode+0x16>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800052e:	bf00      	nop
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	58024800 	.word	0x58024800

08000540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000544:	4b04      	ldr	r3, [pc, #16]	@ (8000558 <__NVIC_GetPriorityGrouping+0x18>)
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	0a1b      	lsrs	r3, r3, #8
 800054a:	f003 0307 	and.w	r3, r3, #7
}
 800054e:	4618      	mov	r0, r3
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	e000ed00 	.word	0xe000ed00

0800055c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800056a:	2b00      	cmp	r3, #0
 800056c:	db0b      	blt.n	8000586 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800056e:	88fb      	ldrh	r3, [r7, #6]
 8000570:	f003 021f 	and.w	r2, r3, #31
 8000574:	4907      	ldr	r1, [pc, #28]	@ (8000594 <__NVIC_EnableIRQ+0x38>)
 8000576:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800057a:	095b      	lsrs	r3, r3, #5
 800057c:	2001      	movs	r0, #1
 800057e:	fa00 f202 	lsl.w	r2, r0, r2
 8000582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	e000e100 	.word	0xe000e100

08000598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	6039      	str	r1, [r7, #0]
 80005a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80005a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	db0a      	blt.n	80005c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	b2da      	uxtb	r2, r3
 80005b0:	490c      	ldr	r1, [pc, #48]	@ (80005e4 <__NVIC_SetPriority+0x4c>)
 80005b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005b6:	0112      	lsls	r2, r2, #4
 80005b8:	b2d2      	uxtb	r2, r2
 80005ba:	440b      	add	r3, r1
 80005bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005c0:	e00a      	b.n	80005d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	4908      	ldr	r1, [pc, #32]	@ (80005e8 <__NVIC_SetPriority+0x50>)
 80005c8:	88fb      	ldrh	r3, [r7, #6]
 80005ca:	f003 030f 	and.w	r3, r3, #15
 80005ce:	3b04      	subs	r3, #4
 80005d0:	0112      	lsls	r2, r2, #4
 80005d2:	b2d2      	uxtb	r2, r2
 80005d4:	440b      	add	r3, r1
 80005d6:	761a      	strb	r2, [r3, #24]
}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	e000e100 	.word	0xe000e100
 80005e8:	e000ed00 	.word	0xe000ed00

080005ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b089      	sub	sp, #36	@ 0x24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000600:	69fb      	ldr	r3, [r7, #28]
 8000602:	f1c3 0307 	rsb	r3, r3, #7
 8000606:	2b04      	cmp	r3, #4
 8000608:	bf28      	it	cs
 800060a:	2304      	movcs	r3, #4
 800060c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	3304      	adds	r3, #4
 8000612:	2b06      	cmp	r3, #6
 8000614:	d902      	bls.n	800061c <NVIC_EncodePriority+0x30>
 8000616:	69fb      	ldr	r3, [r7, #28]
 8000618:	3b03      	subs	r3, #3
 800061a:	e000      	b.n	800061e <NVIC_EncodePriority+0x32>
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000620:	f04f 32ff 	mov.w	r2, #4294967295
 8000624:	69bb      	ldr	r3, [r7, #24]
 8000626:	fa02 f303 	lsl.w	r3, r2, r3
 800062a:	43da      	mvns	r2, r3
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	401a      	ands	r2, r3
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000634:	f04f 31ff 	mov.w	r1, #4294967295
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	fa01 f303 	lsl.w	r3, r1, r3
 800063e:	43d9      	mvns	r1, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000644:	4313      	orrs	r3, r2
         );
}
 8000646:	4618      	mov	r0, r3
 8000648:	3724      	adds	r7, #36	@ 0x24
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr

08000652 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000652:	b480      	push	{r7}
 8000654:	b087      	sub	sp, #28
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
 800065a:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000662:	2b00      	cmp	r3, #0
 8000664:	d107      	bne.n	8000676 <LL_ADC_SetChannelPreselection+0x24>
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	0e9b      	lsrs	r3, r3, #26
 800066a:	f003 031f 	and.w	r3, r3, #31
 800066e:	2201      	movs	r2, #1
 8000670:	fa02 f303 	lsl.w	r3, r2, r3
 8000674:	e015      	b.n	80006a2 <LL_ADC_SetChannelPreselection+0x50>
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800067a:	693b      	ldr	r3, [r7, #16]
 800067c:	fa93 f3a3 	rbit	r3, r3
 8000680:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d101      	bne.n	8000690 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 800068c:	2320      	movs	r3, #32
 800068e:	e003      	b.n	8000698 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	fab3 f383 	clz	r3, r3
 8000696:	b2db      	uxtb	r3, r3
 8000698:	f003 031f 	and.w	r3, r3, #31
 800069c:	2201      	movs	r2, #1
 800069e:	fa02 f303 	lsl.w	r3, r2, r3
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	69d2      	ldr	r2, [r2, #28]
 80006a6:	431a      	orrs	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 80006ac:	bf00      	nop
 80006ae:	371c      	adds	r7, #28
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr

080006b8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b087      	sub	sp, #28
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	3330      	adds	r3, #48	@ 0x30
 80006c8:	461a      	mov	r2, r3
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	0a1b      	lsrs	r3, r3, #8
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	f003 030c 	and.w	r3, r3, #12
 80006d4:	4413      	add	r3, r2
 80006d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	f003 031f 	and.w	r3, r3, #31
 80006e2:	211f      	movs	r1, #31
 80006e4:	fa01 f303 	lsl.w	r3, r1, r3
 80006e8:	43db      	mvns	r3, r3
 80006ea:	401a      	ands	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	0e9b      	lsrs	r3, r3, #26
 80006f0:	f003 011f 	and.w	r1, r3, #31
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	f003 031f 	and.w	r3, r3, #31
 80006fa:	fa01 f303 	lsl.w	r3, r1, r3
 80006fe:	431a      	orrs	r2, r3
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000704:	bf00      	nop
 8000706:	371c      	adds	r7, #28
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	68db      	ldr	r3, [r3, #12]
 800071e:	f023 0203 	bic.w	r2, r3, #3
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	431a      	orrs	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	60da      	str	r2, [r3, #12]
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000736:	b480      	push	{r7}
 8000738:	b087      	sub	sp, #28
 800073a:	af00      	add	r7, sp, #0
 800073c:	60f8      	str	r0, [r7, #12]
 800073e:	60b9      	str	r1, [r7, #8]
 8000740:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	3314      	adds	r3, #20
 8000746:	461a      	mov	r2, r3
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	0e5b      	lsrs	r3, r3, #25
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	4413      	add	r3, r2
 8000754:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	0d1b      	lsrs	r3, r3, #20
 800075e:	f003 031f 	and.w	r3, r3, #31
 8000762:	2107      	movs	r1, #7
 8000764:	fa01 f303 	lsl.w	r3, r1, r3
 8000768:	43db      	mvns	r3, r3
 800076a:	401a      	ands	r2, r3
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	0d1b      	lsrs	r3, r3, #20
 8000770:	f003 031f 	and.w	r3, r3, #31
 8000774:	6879      	ldr	r1, [r7, #4]
 8000776:	fa01 f303 	lsl.w	r3, r1, r3
 800077a:	431a      	orrs	r2, r3
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000780:	bf00      	nop
 8000782:	371c      	adds	r7, #28
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80007a4:	43db      	mvns	r3, r3
 80007a6:	401a      	ands	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	f003 0318 	and.w	r3, r3, #24
 80007ae:	4908      	ldr	r1, [pc, #32]	@ (80007d0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80007b0:	40d9      	lsrs	r1, r3
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	400b      	ands	r3, r1
 80007b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80007ba:	431a      	orrs	r2, r3
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80007c2:	bf00      	nop
 80007c4:	3714      	adds	r7, #20
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	000fffff 	.word	0x000fffff

080007d4 <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_GRP_INJECTED
  *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	691a      	ldr	r2, [r3, #16]
 80007e2:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <LL_ADC_SetOverSamplingScope+0x28>)
 80007e4:	4013      	ands	r3, r2
 80007e6:	683a      	ldr	r2, [r7, #0]
 80007e8:	431a      	orrs	r2, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	611a      	str	r2, [r3, #16]
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	fffffbfc 	.word	0xfffffbfc

08000800 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	689a      	ldr	r2, [r3, #8]
 800080c:	4b04      	ldr	r3, [pc, #16]	@ (8000820 <LL_ADC_DisableDeepPowerDown+0x20>)
 800080e:	4013      	ands	r3, r2
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	6093      	str	r3, [r2, #8]
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	5fffffc0 	.word	0x5fffffc0

08000824 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	689a      	ldr	r2, [r3, #8]
 8000830:	4b05      	ldr	r3, [pc, #20]	@ (8000848 <LL_ADC_EnableInternalRegulator+0x24>)
 8000832:	4013      	ands	r3, r2
 8000834:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	6fffffc0 	.word	0x6fffffc0

0800084c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	689a      	ldr	r2, [r3, #8]
 8000858:	4b05      	ldr	r3, [pc, #20]	@ (8000870 <LL_ADC_Enable+0x24>)
 800085a:	4013      	ands	r3, r2
 800085c:	f043 0201 	orr.w	r2, r3, #1
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	7fffffc0 	.word	0x7fffffc0

08000874 <LL_ADC_IsActiveFlag_ADRDY>:
  * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(const ADC_TypeDef *ADCx)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	2b01      	cmp	r3, #1
 8000886:	d101      	bne.n	800088c <LL_ADC_IsActiveFlag_ADRDY+0x18>
 8000888:	2301      	movs	r3, #1
 800088a:	e000      	b.n	800088e <LL_ADC_IsActiveFlag_ADRDY+0x1a>
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 800089a:	b480      	push	{r7}
 800089c:	b083      	sub	sp, #12
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	601a      	str	r2, [r3, #0]
}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr

080008ba <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 80008ba:	b480      	push	{r7}
 80008bc:	b083      	sub	sp, #12
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	601a      	str	r2, [r3, #0]
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
	...

080008dc <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	68da      	ldr	r2, [r3, #12]
 80008ec:	4b06      	ldr	r3, [pc, #24]	@ (8000908 <LL_I2C_SetOwnAddress2+0x2c>)
 80008ee:	4013      	ands	r3, r2
 80008f0:	68b9      	ldr	r1, [r7, #8]
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	430a      	orrs	r2, r1
 80008f6:	431a      	orrs	r2, r3
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	60da      	str	r2, [r3, #12]
}
 80008fc:	bf00      	nop
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	fffff801 	.word	0xfffff801

0800090c <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	60da      	str	r2, [r3, #12]
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	605a      	str	r2, [r3, #4]
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f043 0201 	orr.w	r2, r3, #1
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	601a      	str	r2, [r3, #0]
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	601a      	str	r2, [r3, #0]
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 800098c:	b480      	push	{r7}
 800098e:	b089      	sub	sp, #36	@ 0x24
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	3308      	adds	r3, #8
 800099a:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	e853 3f00 	ldrex	r3, [r3]
 80009a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	075b      	lsls	r3, r3, #29
 80009ae:	4313      	orrs	r3, r2
 80009b0:	61fb      	str	r3, [r7, #28]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	3308      	adds	r3, #8
 80009b6:	69fa      	ldr	r2, [r7, #28]
 80009b8:	61ba      	str	r2, [r7, #24]
 80009ba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80009bc:	6979      	ldr	r1, [r7, #20]
 80009be:	69ba      	ldr	r2, [r7, #24]
 80009c0:	e841 2300 	strex	r3, r2, [r1]
 80009c4:	613b      	str	r3, [r7, #16]
   return(result);
 80009c6:	693b      	ldr	r3, [r7, #16]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d1e4      	bne.n	8000996 <LL_USART_SetTXFIFOThreshold+0xa>
}
 80009cc:	bf00      	nop
 80009ce:	bf00      	nop
 80009d0:	3724      	adds	r7, #36	@ 0x24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 80009da:	b480      	push	{r7}
 80009dc:	b089      	sub	sp, #36	@ 0x24
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
 80009e2:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3308      	adds	r3, #8
 80009e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	e853 3f00 	ldrex	r3, [r3]
 80009f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	065b      	lsls	r3, r3, #25
 80009fc:	4313      	orrs	r3, r2
 80009fe:	61fb      	str	r3, [r7, #28]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3308      	adds	r3, #8
 8000a04:	69fa      	ldr	r2, [r7, #28]
 8000a06:	61ba      	str	r2, [r7, #24]
 8000a08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000a0a:	6979      	ldr	r1, [r7, #20]
 8000a0c:	69ba      	ldr	r2, [r7, #24]
 8000a0e:	e841 2300 	strex	r3, r2, [r1]
 8000a12:	613b      	str	r3, [r7, #16]
   return(result);
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d1e4      	bne.n	80009e4 <LL_USART_SetRXFIFOThreshold+0xa>
}
 8000a1a:	bf00      	nop
 8000a1c:	bf00      	nop
 8000a1e:	3724      	adds	r7, #36	@ 0x24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	609a      	str	r2, [r3, #8]
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	69db      	ldr	r3, [r3, #28]
 8000a60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8000a68:	d101      	bne.n	8000a6e <LL_USART_IsActiveFlag_TEACK+0x1a>
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e000      	b.n	8000a70 <LL_USART_IsActiveFlag_TEACK+0x1c>
 8000a6e:	2300      	movs	r3, #0
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	69db      	ldr	r3, [r3, #28]
 8000a88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000a90:	d101      	bne.n	8000a96 <LL_USART_IsActiveFlag_REACK+0x1a>
 8000a92:	2301      	movs	r3, #1
 8000a94:	e000      	b.n	8000a98 <LL_USART_IsActiveFlag_REACK+0x1c>
 8000a96:	2300      	movs	r3, #0
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <LL_SYSCFG_OpenAnalogSwitch>:
  *         @arg LL_SYSCFG_ANALOG_SWITCH_PC2 : PC2 analog switch
  *         @arg LL_SYSCFG_ANALOG_SWITCH_PC3:  PC3 analog switch
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_OpenAnalogSwitch(uint32_t AnalogSwitch)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->PMCR, AnalogSwitch);
 8000aac:	4b05      	ldr	r3, [pc, #20]	@ (8000ac4 <LL_SYSCFG_OpenAnalogSwitch+0x20>)
 8000aae:	685a      	ldr	r2, [r3, #4]
 8000ab0:	4904      	ldr	r1, [pc, #16]	@ (8000ac4 <LL_SYSCFG_OpenAnalogSwitch+0x20>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	604b      	str	r3, [r1, #4]
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	58000400 	.word	0x58000400

08000ac8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	683a      	ldr	r2, [r7, #0]
 8000ad6:	619a      	str	r2, [r3, #24]
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	041a      	lsls	r2, r3, #16
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	619a      	str	r2, [r3, #24]
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000b02:	b480      	push	{r7}
 8000b04:	b085      	sub	sp, #20
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
 8000b0a:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	695b      	ldr	r3, [r3, #20]
 8000b10:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000b12:	68fa      	ldr	r2, [r7, #12]
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	4013      	ands	r3, r2
 8000b18:	041a      	lsls	r2, r3, #16
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	43d9      	mvns	r1, r3
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	400b      	ands	r3, r1
 8000b22:	431a      	orrs	r2, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	619a      	str	r2, [r3, #24]
}
 8000b28:	bf00      	nop
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b68 <LL_AHB1_GRP1_EnableClock+0x34>)
 8000b3e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8000b42:	4909      	ldr	r1, [pc, #36]	@ (8000b68 <LL_AHB1_GRP1_EnableClock+0x34>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	f8c1 30d8 	str.w	r3, [r1, #216]	@ 0xd8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000b4c:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <LL_AHB1_GRP1_EnableClock+0x34>)
 8000b4e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4013      	ands	r3, r2
 8000b56:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b58:	68fb      	ldr	r3, [r7, #12]
}
 8000b5a:	bf00      	nop
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	58024400 	.word	0x58024400

08000b6c <LL_AHB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 8000b74:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba0 <LL_AHB4_GRP1_EnableClock+0x34>)
 8000b76:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000b7a:	4909      	ldr	r1, [pc, #36]	@ (8000ba0 <LL_AHB4_GRP1_EnableClock+0x34>)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8000b84:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <LL_AHB4_GRP1_EnableClock+0x34>)
 8000b86:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b90:	68fb      	ldr	r3, [r7, #12]
}
 8000b92:	bf00      	nop
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	58024400 	.word	0x58024400

08000ba4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1LENR, Periphs);
 8000bac:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd8 <LL_APB1_GRP1_EnableClock+0x34>)
 8000bae:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8000bb2:	4909      	ldr	r1, [pc, #36]	@ (8000bd8 <LL_APB1_GRP1_EnableClock+0x34>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8000bbc:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <LL_APB1_GRP1_EnableClock+0x34>)
 8000bbe:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
}
 8000bca:	bf00      	nop
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	58024400 	.word	0x58024400

08000bdc <csp_conf_get_defaults>:
} csp_conf_t;

/**
   Get default CSP configuration.
*/
static inline void csp_conf_get_defaults(csp_conf_t * conf) {
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	conf->address = 1;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2201      	movs	r2, #1
 8000be8:	701a      	strb	r2, [r3, #0]
	conf->hostname = "hostname";
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a13      	ldr	r2, [pc, #76]	@ (8000c3c <csp_conf_get_defaults+0x60>)
 8000bee:	605a      	str	r2, [r3, #4]
	conf->model = "model";
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a13      	ldr	r2, [pc, #76]	@ (8000c40 <csp_conf_get_defaults+0x64>)
 8000bf4:	609a      	str	r2, [r3, #8]
	conf->revision = "resvision";
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a12      	ldr	r2, [pc, #72]	@ (8000c44 <csp_conf_get_defaults+0x68>)
 8000bfa:	60da      	str	r2, [r3, #12]
	conf->conn_max = 10;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	220a      	movs	r2, #10
 8000c00:	741a      	strb	r2, [r3, #16]
	conf->conn_queue_length = 10;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	220a      	movs	r2, #10
 8000c06:	745a      	strb	r2, [r3, #17]
	conf->fifo_length = 25;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2219      	movs	r2, #25
 8000c0c:	749a      	strb	r2, [r3, #18]
	conf->port_max_bind = 24;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2218      	movs	r2, #24
 8000c12:	74da      	strb	r2, [r3, #19]
	conf->rdp_max_window = 20;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2214      	movs	r2, #20
 8000c18:	751a      	strb	r2, [r3, #20]
	conf->buffers = 10;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	220a      	movs	r2, #10
 8000c1e:	82da      	strh	r2, [r3, #22]
	conf->buffer_data_size = 256;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c26:	831a      	strh	r2, [r3, #24]
	conf->conn_dfl_so = CSP_O_NONE;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	08010f80 	.word	0x08010f80
 8000c40:	08010f8c 	.word	0x08010f8c
 8000c44:	08010f94 	.word	0x08010f94

08000c48 <blink>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void blink( void * parameters )
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
    ( void ) parameters;

    for( ; ; )
    {
    	LL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8000c50:	2110      	movs	r1, #16
 8000c52:	4804      	ldr	r0, [pc, #16]	@ (8000c64 <blink+0x1c>)
 8000c54:	f7ff ff55 	bl	8000b02 <LL_GPIO_TogglePin>
        vTaskDelay( 500 );
 8000c58:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c5c:	f004 fd4c 	bl	80056f8 <vTaskDelay>
    	LL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8000c60:	bf00      	nop
 8000c62:	e7f5      	b.n	8000c50 <blink+0x8>
 8000c64:	58020000 	.word	0x58020000

08000c68 <CLI_Polling_Task>:
    }
}

static void CLI_Polling_Task( void * parameters )
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
//            }
//            embeddedCliProcess(get_COMM_USB_CliPointer());
//            CDC_setRxReady(0);
//        }

        if (UART_Driver_IsDataAvailable(UART4))
 8000c70:	480e      	ldr	r0, [pc, #56]	@ (8000cac <CLI_Polling_Task+0x44>)
 8000c72:	f001 fa3b 	bl	80020ec <UART_Driver_IsDataAvailable>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d012      	beq.n	8000ca2 <CLI_Polling_Task+0x3a>
        {
        	rxData = UART_Driver_Read(UART4);
 8000c7c:	480b      	ldr	r0, [pc, #44]	@ (8000cac <CLI_Polling_Task+0x44>)
 8000c7e:	f001 f9f1 	bl	8002064 <UART_Driver_Read>
 8000c82:	4603      	mov	r3, r0
 8000c84:	73fb      	strb	r3, [r7, #15]
            embeddedCliReceiveChar(get_COMM_UART_CliPointer(), (char)rxData);
 8000c86:	f001 fe63 	bl	8002950 <get_COMM_UART_CliPointer>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4610      	mov	r0, r2
 8000c92:	f001 ff53 	bl	8002b3c <embeddedCliReceiveChar>
            embeddedCliProcess(get_COMM_UART_CliPointer());
 8000c96:	f001 fe5b 	bl	8002950 <get_COMM_UART_CliPointer>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f001 ff70 	bl	8002b82 <embeddedCliProcess>
        }

        vTaskDelay(1);
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f004 fd28 	bl	80056f8 <vTaskDelay>
    {
 8000ca8:	e7e2      	b.n	8000c70 <CLI_Polling_Task+0x8>
 8000caa:	bf00      	nop
 8000cac:	40004c00 	.word	0x40004c00

08000cb0 <csp_rx_task>:

		vTaskDelay(2000);
	}
}

void csp_rx_task(void *argument) {
 8000cb0:	b590      	push	{r4, r7, lr}
 8000cb2:	b0af      	sub	sp, #188	@ 0xbc
 8000cb4:	af04      	add	r7, sp, #16
 8000cb6:	6078      	str	r0, [r7, #4]
	/* Create socket with no specific socket options, e.g. accepts CRC32, HMAC, XTEA, etc. if enabled during compilation */
	csp_socket_t *sock = csp_socket(CSP_SO_NONE);
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f007 fe7f 	bl	80089bc <csp_socket>
 8000cbe:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

	/* Bind socket to all ports, e.g. all incoming connections will be handled here */
	csp_bind(sock, CSP_ANY);
 8000cc2:	21ff      	movs	r1, #255	@ 0xff
 8000cc4:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8000cc8:	f008 f8e0 	bl	8008e8c <csp_bind>

	/* Create a backlog of 10 connections, i.e. up to 10 new connections can be queued */
	csp_listen(sock, 10);
 8000ccc:	210a      	movs	r1, #10
 8000cce:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8000cd2:	f008 f8b5 	bl	8008e40 <csp_listen>

	/* Wait for connections and then process packets on the connection */
	while (1) {
		/* Wait for a new connection, 1000 mS timeout */
		csp_conn_t *conn;
		if ((conn = csp_accept(sock, 1000)) == NULL) {
 8000cd6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000cda:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8000cde:	f007 fef7 	bl	8008ad0 <csp_accept>
 8000ce2:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 8000ce6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f000 811e 	beq.w	8000f2c <csp_rx_task+0x27c>
			continue;
		}

		/* Read packets on connection, timout is 100 mS */
		csp_packet_t *packet;
		while ((packet = csp_read(conn, 100)) != NULL) {
 8000cf0:	e108      	b.n	8000f04 <csp_rx_task+0x254>
			switch (csp_conn_dport(conn)) {
 8000cf2:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8000cf6:	f007 fcfd 	bl	80086f4 <csp_conn_dport>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	3b07      	subs	r3, #7
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	f200 80fa 	bhi.w	8000ef8 <csp_rx_task+0x248>
			case 8:
			case 7:

				if ((packet->data[0] & 0xF0)== 0x00/* 0x00 */) {
 8000d04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000d08:	7c1b      	ldrb	r3, [r3, #16]
 8000d0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f000 80b8 	beq.w	8000e84 <csp_rx_task+0x1d4>

				}
				else if ((packet->data[0] & 0xF0)== 0x10/* 0x01 */) {
 8000d14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000d18:	7c1b      	ldrb	r3, [r3, #16]
 8000d1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000d1e:	2b10      	cmp	r3, #16
 8000d20:	f040 80b0 	bne.w	8000e84 <csp_rx_task+0x1d4>

//					if ((packet->data[0] & 0x0F) == 0x06) {

					if(packet->data[1]== 0x04) {
 8000d24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000d28:	7c5b      	ldrb	r3, [r3, #17]
 8000d2a:	2b04      	cmp	r3, #4
 8000d2c:	d13b      	bne.n	8000da6 <csp_rx_task+0xf6>
						size_t len = 6;
 8000d2e:	2306      	movs	r3, #6
 8000d30:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
						csp_packet_t *reply = csp_buffer_get(sizeof(len));
 8000d34:	2004      	movs	r0, #4
 8000d36:	f007 f839 	bl	8007dac <csp_buffer_get>
 8000d3a:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
						reply->data[0]= packet->data[0]&0x0F;
 8000d3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000d42:	7c1b      	ldrb	r3, [r3, #16]
 8000d44:	f003 030f 	and.w	r3, r3, #15
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000d4e:	741a      	strb	r2, [r3, #16]
						reply->data[1]= packet->data[1];
 8000d50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000d54:	7c5a      	ldrb	r2, [r3, #17]
 8000d56:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000d5a:	745a      	strb	r2, [r3, #17]
						reply->data[2]= 0x00;
 8000d5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000d60:	2200      	movs	r2, #0
 8000d62:	749a      	strb	r2, [r3, #18]
						reply->data[3]= 0x00;
 8000d64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000d68:	2200      	movs	r2, #0
 8000d6a:	74da      	strb	r2, [r3, #19]
						reply->data[4]= 0x00;
 8000d6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000d70:	2200      	movs	r2, #0
 8000d72:	751a      	strb	r2, [r3, #20]
						reply->data[5]= 0x18;
 8000d74:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000d78:	2218      	movs	r2, #24
 8000d7a:	755a      	strb	r2, [r3, #21]
						reply->length= 6;
 8000d7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000d80:	2206      	movs	r2, #6
 8000d82:	815a      	strh	r2, [r3, #10]

						if (csp_send(conn, reply, 1000) == CSP_ERR_NONE)
 8000d84:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d88:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8000d8c:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8000d90:	f007 ffca 	bl	8008d28 <csp_send>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f040 80b3 	bne.w	8000f02 <csp_rx_task+0x252>
						csp_buffer_free(reply);
 8000d9c:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8000da0:	f007 f8a0 	bl	8007ee4 <csp_buffer_free>

						break;
 8000da4:	e0ad      	b.n	8000f02 <csp_rx_task+0x252>
					}

					uint16_t raw= ADC1_ReadIndex(packet->data[1]);
 8000da6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000daa:	7c5b      	ldrb	r3, [r3, #17]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 ff97 	bl	8001ce0 <ADC1_ReadIndex>
 8000db2:	4603      	mov	r3, r0
 8000db4:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
					int32_t temperature = ((raw* 3300)- (500* 65535))/ 65535;
 8000db8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8000dbc:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000dc0:	fb03 f202 	mul.w	r2, r3, r2
 8000dc4:	4b5a      	ldr	r3, [pc, #360]	@ (8000f30 <csp_rx_task+0x280>)
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a5a      	ldr	r2, [pc, #360]	@ (8000f34 <csp_rx_task+0x284>)
 8000dca:	fb82 1203 	smull	r1, r2, r2, r3
 8000dce:	441a      	add	r2, r3
 8000dd0:	13d2      	asrs	r2, r2, #15
 8000dd2:	17db      	asrs	r3, r3, #31
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
					if(temperature > 1250) {
 8000dda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000dde:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8000de2:	4293      	cmp	r3, r2
 8000de4:	dd04      	ble.n	8000df0 <csp_rx_task+0x140>
						temperature = 1250;
 8000de6:	f240 43e2 	movw	r3, #1250	@ 0x4e2
 8000dea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000dee:	e007      	b.n	8000e00 <csp_rx_task+0x150>
					} else if(temperature < -400) {
 8000df0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000df4:	f513 7fc8 	cmn.w	r3, #400	@ 0x190
 8000df8:	da02      	bge.n	8000e00 <csp_rx_task+0x150>
						temperature = -400;
 8000dfa:	4b4f      	ldr	r3, [pc, #316]	@ (8000f38 <csp_rx_task+0x288>)
 8000dfc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
					}

					csp_packet_t *reply = csp_buffer_get(sizeof(temperature));
 8000e00:	2004      	movs	r0, #4
 8000e02:	f006 ffd3 	bl	8007dac <csp_buffer_get>
 8000e06:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
					reply->data[0]= packet->data[0]&0x0F;
 8000e0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000e0e:	7c1b      	ldrb	r3, [r3, #16]
 8000e10:	f003 030f 	and.w	r3, r3, #15
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000e1a:	741a      	strb	r2, [r3, #16]
					reply->data[1]= packet->data[1];
 8000e1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000e20:	7c5a      	ldrb	r2, [r3, #17]
 8000e22:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000e26:	745a      	strb	r2, [r3, #17]
					reply->data[2]= (uint8_t)((temperature>> 24)& 0xFF);
 8000e28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e2c:	161b      	asrs	r3, r3, #24
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000e34:	749a      	strb	r2, [r3, #18]
					reply->data[3]= (uint8_t)((temperature>> 16)& 0xFF);
 8000e36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e3a:	141b      	asrs	r3, r3, #16
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000e42:	74da      	strb	r2, [r3, #19]
					reply->data[4]= (uint8_t)((temperature>> 8)& 0xFF);
 8000e44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e48:	121b      	asrs	r3, r3, #8
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000e50:	751a      	strb	r2, [r3, #20]
					reply->data[5]= (uint8_t)(temperature& 0xFF);
 8000e52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000e5c:	755a      	strb	r2, [r3, #21]
					reply->length= 6;
 8000e5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000e62:	2206      	movs	r2, #6
 8000e64:	815a      	strh	r2, [r3, #10]

//				        if (reply) {
//				            memcpy(reply->data, &temperature, sizeof(temperature));
//				            reply->length = sizeof(temperature);

					if (csp_send(conn, reply, 1000) == CSP_ERR_NONE)
 8000e66:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8000e6e:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8000e72:	f007 ff59 	bl	8008d28 <csp_send>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d103      	bne.n	8000e84 <csp_rx_task+0x1d4>
					csp_buffer_free(reply);
 8000e7c:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000e80:	f007 f830 	bl	8007ee4 <csp_buffer_free>
//						}
//					}
				}

				/* Process packet here */
				csp_log_info("Packet received on MY_SERVER_PORT: %s", (char *) packet->data);
 8000e84:	4b2d      	ldr	r3, [pc, #180]	@ (8000f3c <csp_rx_task+0x28c>)
 8000e86:	789b      	ldrb	r3, [r3, #2]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d007      	beq.n	8000e9c <csp_rx_task+0x1ec>
 8000e8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000e90:	3310      	adds	r3, #16
 8000e92:	461a      	mov	r2, r3
 8000e94:	492a      	ldr	r1, [pc, #168]	@ (8000f40 <csp_rx_task+0x290>)
 8000e96:	2002      	movs	r0, #2
 8000e98:	f007 fc4a 	bl	8008730 <do_csp_debug>

				char out[128];
				snprintf(out, sizeof(out),
 8000e9c:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8000ea0:	f007 fc37 	bl	8008712 <csp_conn_src>
 8000ea4:	4604      	mov	r4, r0
 8000ea6:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8000eaa:	f007 fc23 	bl	80086f4 <csp_conn_dport>
 8000eae:	4602      	mov	r2, r0
				         "RxData from node %u port %u: %.*s",
				         csp_conn_src(conn),
				         csp_conn_dport(conn),
				         packet->length,
 8000eb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000eb4:	895b      	ldrh	r3, [r3, #10]
				snprintf(out, sizeof(out),
 8000eb6:	4619      	mov	r1, r3
				         (char *)packet->data);
 8000eb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000ebc:	3310      	adds	r3, #16
				snprintf(out, sizeof(out),
 8000ebe:	f107 0008 	add.w	r0, r7, #8
 8000ec2:	9302      	str	r3, [sp, #8]
 8000ec4:	9101      	str	r1, [sp, #4]
 8000ec6:	9200      	str	r2, [sp, #0]
 8000ec8:	4623      	mov	r3, r4
 8000eca:	4a1e      	ldr	r2, [pc, #120]	@ (8000f44 <csp_rx_task+0x294>)
 8000ecc:	2180      	movs	r1, #128	@ 0x80
 8000ece:	f00e ff13 	bl	800fcf8 <sniprintf>

				embeddedCliPrint(get_COMM_UART_CliPointer(), out);
 8000ed2:	f001 fd3d 	bl	8002950 <get_COMM_UART_CliPointer>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	f107 0308 	add.w	r3, r7, #8
 8000edc:	4619      	mov	r1, r3
 8000ede:	4610      	mov	r0, r2
 8000ee0:	f001 fee0 	bl	8002ca4 <embeddedCliPrint>

				csp_buffer_free(packet);
 8000ee4:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8000ee8:	f006 fffc 	bl	8007ee4 <csp_buffer_free>
				++server_received;
 8000eec:	4b16      	ldr	r3, [pc, #88]	@ (8000f48 <csp_rx_task+0x298>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	4a15      	ldr	r2, [pc, #84]	@ (8000f48 <csp_rx_task+0x298>)
 8000ef4:	6013      	str	r3, [r2, #0]
				break;
 8000ef6:	e005      	b.n	8000f04 <csp_rx_task+0x254>
//				         csp_conn_dport(conn),
//				         packet->length,
//				         (char *)packet->data);
//
//				embeddedCliPrint(get_COMM_UART_CliPointer(), out);
				csp_buffer_free(packet);
 8000ef8:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8000efc:	f006 fff2 	bl	8007ee4 <csp_buffer_free>
//
				break;
 8000f00:	e000      	b.n	8000f04 <csp_rx_task+0x254>
						break;
 8000f02:	bf00      	nop
		while ((packet = csp_read(conn, 100)) != NULL) {
 8000f04:	2164      	movs	r1, #100	@ 0x64
 8000f06:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8000f0a:	f007 fe03 	bl	8008b14 <csp_read>
 8000f0e:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
 8000f12:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f47f aeeb 	bne.w	8000cf2 <csp_rx_task+0x42>
			}
		}
		/* Close current connection */
		csp_close(conn);
 8000f1c:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8000f20:	f007 fa83 	bl	800842a <csp_close>

		vTaskDelay(100);
 8000f24:	2064      	movs	r0, #100	@ 0x64
 8000f26:	f004 fbe7 	bl	80056f8 <vTaskDelay>
 8000f2a:	e6d4      	b.n	8000cd6 <csp_rx_task+0x26>
			continue;
 8000f2c:	bf00      	nop
	while (1) {
 8000f2e:	e6d2      	b.n	8000cd6 <csp_rx_task+0x26>
 8000f30:	fe0c01f4 	.word	0xfe0c01f4
 8000f34:	80008001 	.word	0x80008001
 8000f38:	fffffe70 	.word	0xfffffe70
 8000f3c:	2400008c 	.word	0x2400008c
 8000f40:	08010fa8 	.word	0x08010fa8
 8000f44:	08010fd0 	.word	0x08010fd0
 8000f48:	240001f4 	.word	0x240001f4

08000f4c <watchdog_task>:
	}
}

void watchdog_task(void *argument) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
	    LL_GPIO_ResetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 8000f54:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f58:	4808      	ldr	r0, [pc, #32]	@ (8000f7c <watchdog_task+0x30>)
 8000f5a:	f7ff fdc3 	bl	8000ae4 <LL_GPIO_ResetOutputPin>
	    vTaskDelay(pdMS_TO_TICKS(200));
 8000f5e:	20c8      	movs	r0, #200	@ 0xc8
 8000f60:	f004 fbca 	bl	80056f8 <vTaskDelay>
	    LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 8000f64:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f68:	4804      	ldr	r0, [pc, #16]	@ (8000f7c <watchdog_task+0x30>)
 8000f6a:	f7ff fdad 	bl	8000ac8 <LL_GPIO_SetOutputPin>
	    vTaskDelay(pdMS_TO_TICKS(600));
 8000f6e:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000f72:	f004 fbc1 	bl	80056f8 <vTaskDelay>
	    LL_GPIO_ResetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 8000f76:	bf00      	nop
 8000f78:	e7ec      	b.n	8000f54 <watchdog_task+0x8>
 8000f7a:	bf00      	nop
 8000f7c:	58020c00 	.word	0x58020c00

08000f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af02      	add	r7, sp, #8
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f86:	f009 f911 	bl	800a1ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f8a:	f000 f87b 	bl	8001084 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f8e:	f000 f8f5 	bl	800117c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f92:	f000 fc29 	bl	80017e8 <MX_GPIO_Init>
  MX_UART4_Init();
 8000f96:	f000 fb87 	bl	80016a8 <MX_UART4_Init>
  MX_FDCAN2_Init();
 8000f9a:	f000 fa9d 	bl	80014d8 <MX_FDCAN2_Init>
  MX_I2C1_Init();
 8000f9e:	f000 faff 	bl	80015a0 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000fa2:	f000 f91b 	bl	80011dc <MX_ADC1_Init>
  MX_ADC2_Init();
 8000fa6:	f000 f9f9 	bl	800139c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  CDC_RingBuffer_Init();
 8000faa:	f001 f919 	bl	80021e0 <CDC_RingBuffer_Init>
  UART_Driver_Init();
 8000fae:	f001 f82f 	bl	8002010 <UART_Driver_Init>
  SystemCLI_Init();
 8000fb2:	f001 fc81 	bl	80028b8 <SystemCLI_Init>

  /*CSP INIT*/
  csp_conf_get_defaults(&csp_conf);
 8000fb6:	4829      	ldr	r0, [pc, #164]	@ (800105c <main+0xdc>)
 8000fb8:	f7ff fe10 	bl	8000bdc <csp_conf_get_defaults>
  csp_conf.address = 12;
 8000fbc:	4b27      	ldr	r3, [pc, #156]	@ (800105c <main+0xdc>)
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	701a      	strb	r2, [r3, #0]
  csp_init(&csp_conf);
 8000fc2:	4826      	ldr	r0, [pc, #152]	@ (800105c <main+0xdc>)
 8000fc4:	f007 fcb6 	bl	8008934 <csp_init>
  /*CSP INTERFACE INIT*/
  can_csp_init();
 8000fc8:	f008 fb08 	bl	80095dc <can_csp_init>
  csp_route_start_task(500, 6);
 8000fcc:	2106      	movs	r1, #6
 8000fce:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fd2:	f008 faa9 	bl	8009528 <csp_route_start_task>
  csp_rtable_set(3, CSP_ID_HOST_SIZE, &can_iface, CSP_NO_VIA_ADDRESS);
 8000fd6:	23ff      	movs	r3, #255	@ 0xff
 8000fd8:	4a21      	ldr	r2, [pc, #132]	@ (8001060 <main+0xe0>)
 8000fda:	2105      	movs	r1, #5
 8000fdc:	2003      	movs	r0, #3
 8000fde:	f008 fec1 	bl	8009d64 <csp_rtable_set>
  csp_rtable_set(2, CSP_ID_HOST_SIZE, &can_iface, CSP_NO_VIA_ADDRESS);
 8000fe2:	23ff      	movs	r3, #255	@ 0xff
 8000fe4:	4a1e      	ldr	r2, [pc, #120]	@ (8001060 <main+0xe0>)
 8000fe6:	2105      	movs	r1, #5
 8000fe8:	2002      	movs	r0, #2
 8000fea:	f008 febb 	bl	8009d64 <csp_rtable_set>
  csp_rtable_set(1, CSP_ID_HOST_SIZE, &can_iface, CSP_NO_VIA_ADDRESS);
 8000fee:	23ff      	movs	r3, #255	@ 0xff
 8000ff0:	4a1b      	ldr	r2, [pc, #108]	@ (8001060 <main+0xe0>)
 8000ff2:	2105      	movs	r1, #5
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f008 feb5 	bl	8009d64 <csp_rtable_set>
//  SRAM_Initialize(&IS66WV);

//  xTaskCreate(UsbInitTask,		"USB_Init",				configMINIMAL_STACK_SIZE * 10, 	NULL, configMAX_PRIORITIES - 3U, NULL);
  xTaskCreate(blink,			"Blink",				configMINIMAL_STACK_SIZE * 10, 	NULL, configMAX_PRIORITIES - 3U, NULL);
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	9301      	str	r3, [sp, #4]
 8000ffe:	2304      	movs	r3, #4
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2300      	movs	r3, #0
 8001004:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8001008:	4916      	ldr	r1, [pc, #88]	@ (8001064 <main+0xe4>)
 800100a:	4817      	ldr	r0, [pc, #92]	@ (8001068 <main+0xe8>)
 800100c:	f004 fa25 	bl	800545a <xTaskCreate>
  xTaskCreate(CLI_Polling_Task, "CLI_Polling_Task",		configMINIMAL_STACK_SIZE * 10, 	NULL, configMAX_PRIORITIES - 1U, NULL);
 8001010:	2300      	movs	r3, #0
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	2306      	movs	r3, #6
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2300      	movs	r3, #0
 800101a:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 800101e:	4913      	ldr	r1, [pc, #76]	@ (800106c <main+0xec>)
 8001020:	4813      	ldr	r0, [pc, #76]	@ (8001070 <main+0xf0>)
 8001022:	f004 fa1a 	bl	800545a <xTaskCreate>
//  xTaskCreate(USB_HS_Task,		"USB_HS_Task",			configMINIMAL_STACK_SIZE * 10, 	NULL, configMAX_PRIORITIES - 3U, NULL);
//  xTaskCreate(USB_FS_Task,		"USB_FS_Task",			configMINIMAL_STACK_SIZE * 10, 	NULL, configMAX_PRIORITIES - 3U, NULL);
//  xTaskCreate(csp_tx_task, 		"csp_can_tx", 			configMINIMAL_STACK_SIZE * 10, 	NULL, configMAX_PRIORITIES - 3U, NULL);
  xTaskCreate(csp_rx_task, 		"csp_can_rx", 			configMINIMAL_STACK_SIZE * 10, 	NULL, configMAX_PRIORITIES - 1U, NULL);
 8001026:	2300      	movs	r3, #0
 8001028:	9301      	str	r3, [sp, #4]
 800102a:	2306      	movs	r3, #6
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	2300      	movs	r3, #0
 8001030:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8001034:	490f      	ldr	r1, [pc, #60]	@ (8001074 <main+0xf4>)
 8001036:	4810      	ldr	r0, [pc, #64]	@ (8001078 <main+0xf8>)
 8001038:	f004 fa0f 	bl	800545a <xTaskCreate>
  xTaskCreate(watchdog_task, 	"watch_dog", 			configMINIMAL_STACK_SIZE * 5, 	NULL, configMAX_PRIORITIES - 1U, NULL);
 800103c:	2300      	movs	r3, #0
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	2306      	movs	r3, #6
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2300      	movs	r3, #0
 8001046:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800104a:	490c      	ldr	r1, [pc, #48]	@ (800107c <main+0xfc>)
 800104c:	480c      	ldr	r0, [pc, #48]	@ (8001080 <main+0x100>)
 800104e:	f004 fa04 	bl	800545a <xTaskCreate>

  vTaskStartScheduler();
 8001052:	f004 fbf1 	bl	8005838 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001056:	bf00      	nop
 8001058:	e7fd      	b.n	8001056 <main+0xd6>
 800105a:	bf00      	nop
 800105c:	24042bec 	.word	0x24042bec
 8001060:	24042c1c 	.word	0x24042c1c
 8001064:	08010ff4 	.word	0x08010ff4
 8001068:	08000c49 	.word	0x08000c49
 800106c:	08010ffc 	.word	0x08010ffc
 8001070:	08000c69 	.word	0x08000c69
 8001074:	08011010 	.word	0x08011010
 8001078:	08000cb1 	.word	0x08000cb1
 800107c:	0801101c 	.word	0x0801101c
 8001080:	08000f4d 	.word	0x08000f4d

08001084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b09c      	sub	sp, #112	@ 0x70
 8001088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800108e:	224c      	movs	r2, #76	@ 0x4c
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f00e ff84 	bl	800ffa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	2220      	movs	r2, #32
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f00e ff7e 	bl	800ffa0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80010a4:	2002      	movs	r0, #2
 80010a6:	f00a fdad 	bl	800bc04 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010aa:	2300      	movs	r3, #0
 80010ac:	603b      	str	r3, [r7, #0]
 80010ae:	4b31      	ldr	r3, [pc, #196]	@ (8001174 <SystemClock_Config+0xf0>)
 80010b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010b2:	4a30      	ldr	r2, [pc, #192]	@ (8001174 <SystemClock_Config+0xf0>)
 80010b4:	f023 0301 	bic.w	r3, r3, #1
 80010b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80010ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001174 <SystemClock_Config+0xf0>)
 80010bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001178 <SystemClock_Config+0xf4>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80010cc:	4a2a      	ldr	r2, [pc, #168]	@ (8001178 <SystemClock_Config+0xf4>)
 80010ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010d2:	6193      	str	r3, [r2, #24]
 80010d4:	4b28      	ldr	r3, [pc, #160]	@ (8001178 <SystemClock_Config+0xf4>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010dc:	603b      	str	r3, [r7, #0]
 80010de:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010e0:	bf00      	nop
 80010e2:	4b25      	ldr	r3, [pc, #148]	@ (8001178 <SystemClock_Config+0xf4>)
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80010ee:	d1f8      	bne.n	80010e2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f0:	2301      	movs	r3, #1
 80010f2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fa:	2302      	movs	r3, #2
 80010fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010fe:	2302      	movs	r3, #2
 8001100:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001102:	2302      	movs	r3, #2
 8001104:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001106:	230c      	movs	r3, #12
 8001108:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800110a:	2302      	movs	r3, #2
 800110c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800110e:	2303      	movs	r3, #3
 8001110:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001112:	2302      	movs	r3, #2
 8001114:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001116:	230c      	movs	r3, #12
 8001118:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800111a:	2302      	movs	r3, #2
 800111c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001122:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001126:	4618      	mov	r0, r3
 8001128:	f00a fdc6 	bl	800bcb8 <HAL_RCC_OscConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001132:	f000 fbb5 	bl	80018a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001136:	233f      	movs	r3, #63	@ 0x3f
 8001138:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800113a:	2303      	movs	r3, #3
 800113c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800114a:	2340      	movs	r3, #64	@ 0x40
 800114c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001152:	2300      	movs	r3, #0
 8001154:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2101      	movs	r1, #1
 800115a:	4618      	mov	r0, r3
 800115c:	f00b fa06 	bl	800c56c <HAL_RCC_ClockConfig>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001166:	f000 fb9b 	bl	80018a0 <Error_Handler>
  }
}
 800116a:	bf00      	nop
 800116c:	3770      	adds	r7, #112	@ 0x70
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	58000400 	.word	0x58000400
 8001178:	58024800 	.word	0x58024800

0800117c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b0b0      	sub	sp, #192	@ 0xc0
 8001180:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001182:	463b      	mov	r3, r7
 8001184:	22c0      	movs	r2, #192	@ 0xc0
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f00e ff09 	bl	800ffa0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800118e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001192:	f04f 0300 	mov.w	r3, #0
 8001196:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800119a:	2302      	movs	r3, #2
 800119c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800119e:	230c      	movs	r3, #12
 80011a0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 80011a2:	2303      	movs	r3, #3
 80011a4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80011a6:	2302      	movs	r3, #2
 80011a8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80011aa:	2302      	movs	r3, #2
 80011ac:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80011ae:	23c0      	movs	r3, #192	@ 0xc0
 80011b0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80011b2:	2320      	movs	r3, #32
 80011b4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80011ba:	2300      	movs	r3, #0
 80011bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011c0:	463b      	mov	r3, r7
 80011c2:	4618      	mov	r0, r3
 80011c4:	f00b fd02 	bl	800cbcc <HAL_RCCEx_PeriphCLKConfig>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80011ce:	f000 fb67 	bl	80018a0 <Error_Handler>
  }
}
 80011d2:	bf00      	nop
 80011d4:	37c0      	adds	r7, #192	@ 0xc0
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b094      	sub	sp, #80	@ 0x50
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80011e2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80011ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	611a      	str	r2, [r3, #16]
 80011fe:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001200:	f107 031c 	add.w	r3, r7, #28
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
 800121c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 800121e:	2020      	movs	r0, #32
 8001220:	f7ff fc88 	bl	8000b34 <LL_AHB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 8001224:	2001      	movs	r0, #1
 8001226:	f7ff fca1 	bl	8000b6c <LL_AHB4_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA6   ------> ADC1_INP3
  PA0_C   ------> ADC1_INP0
  PA1_C   ------> ADC1_INP1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800122a:	2340      	movs	r3, #64	@ 0x40
 800122c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800122e:	2303      	movs	r3, #3
 8001230:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	4619      	mov	r1, r3
 800123a:	4850      	ldr	r0, [pc, #320]	@ (800137c <MX_ADC1_Init+0x1a0>)
 800123c:	f00d fa02 	bl	800e644 <LL_GPIO_Init>

  LL_SYSCFG_OpenAnalogSwitch(LL_SYSCFG_ANALOG_SWITCH_PA0|LL_SYSCFG_ANALOG_SWITCH_PA1);
 8001240:	f04f 7040 	mov.w	r0, #50331648	@ 0x3000000
 8001244:	f7ff fc2e 	bl	8000aa4 <LL_SYSCFG_OpenAnalogSwitch>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 8001248:	2100      	movs	r1, #0
 800124a:	484d      	ldr	r0, [pc, #308]	@ (8001380 <MX_ADC1_Init+0x1a4>)
 800124c:	f7ff fac2 	bl	80007d4 <LL_ADC_SetOverSamplingScope>
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_16B;
 8001250:	2300      	movs	r3, #0
 8001252:	647b      	str	r3, [r7, #68]	@ 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8001254:	2300      	movs	r3, #0
 8001256:	64fb      	str	r3, [r7, #76]	@ 0x4c
  ADC_InitStruct.LeftBitShift = LL_ADC_LEFT_BIT_SHIFT_NONE;
 8001258:	2300      	movs	r3, #0
 800125a:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800125c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001260:	4619      	mov	r1, r3
 8001262:	4847      	ldr	r0, [pc, #284]	@ (8001380 <MX_ADC1_Init+0x1a4>)
 8001264:	f00d f89e 	bl	800e3a4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001268:	2300      	movs	r3, #0
 800126a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS;
 800126c:	2302      	movs	r3, #2
 800126e:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_REG_InitStruct.SequencerDiscont = DISABLE;
 8001270:	2300      	movs	r3, #0
 8001272:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8001274:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001278:	63bb      	str	r3, [r7, #56]	@ 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 800127a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800127e:	643b      	str	r3, [r7, #64]	@ 0x40
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001280:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001284:	4619      	mov	r1, r3
 8001286:	483e      	ldr	r0, [pc, #248]	@ (8001380 <MX_ADC1_Init+0x1a4>)
 8001288:	f00d f8b8 	bl	800e3fc <LL_ADC_REG_Init>
  LL_ADC_REG_SetDataTransferMode(ADC1, LL_ADC_REG_DR_TRANSFER);
 800128c:	2100      	movs	r1, #0
 800128e:	483c      	ldr	r0, [pc, #240]	@ (8001380 <MX_ADC1_Init+0x1a4>)
 8001290:	f7ff fa3e 	bl	8000710 <LL_ADC_REG_SetDataTransferMode>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV2;
 8001294:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001298:	61fb      	str	r3, [r7, #28]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 800129a:	2300      	movs	r3, #0
 800129c:	623b      	str	r3, [r7, #32]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 800129e:	f107 031c 	add.w	r3, r7, #28
 80012a2:	4619      	mov	r1, r3
 80012a4:	4837      	ldr	r0, [pc, #220]	@ (8001384 <MX_ADC1_Init+0x1a8>)
 80012a6:	f00d f825 	bl	800e2f4 <LL_ADC_CommonInit>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 80012aa:	4835      	ldr	r0, [pc, #212]	@ (8001380 <MX_ADC1_Init+0x1a4>)
 80012ac:	f7ff faa8 	bl	8000800 <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 80012b0:	4833      	ldr	r0, [pc, #204]	@ (8001380 <MX_ADC1_Init+0x1a4>)
 80012b2:	f7ff fab7 	bl	8000824 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  __IO uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 80012b6:	4b34      	ldr	r3, [pc, #208]	@ (8001388 <MX_ADC1_Init+0x1ac>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	099b      	lsrs	r3, r3, #6
 80012bc:	4a33      	ldr	r2, [pc, #204]	@ (800138c <MX_ADC1_Init+0x1b0>)
 80012be:	fba2 2303 	umull	r2, r3, r2, r3
 80012c2:	099a      	lsrs	r2, r3, #6
 80012c4:	4613      	mov	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b30      	ldr	r3, [pc, #192]	@ (8001390 <MX_ADC1_Init+0x1b4>)
 80012d0:	fba3 2302 	umull	r2, r3, r3, r2
 80012d4:	08db      	lsrs	r3, r3, #3
 80012d6:	603b      	str	r3, [r7, #0]
  while(wait_loop_index != 0)
 80012d8:	e002      	b.n	80012e0 <MX_ADC1_Init+0x104>
  {
    wait_loop_index--;
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	3b01      	subs	r3, #1
 80012de:	603b      	str	r3, [r7, #0]
  while(wait_loop_index != 0)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f9      	bne.n	80012da <MX_ADC1_Init+0xfe>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 80012e6:	2201      	movs	r2, #1
 80012e8:	2106      	movs	r1, #6
 80012ea:	4825      	ldr	r0, [pc, #148]	@ (8001380 <MX_ADC1_Init+0x1a4>)
 80012ec:	f7ff f9e4 	bl	80006b8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2101      	movs	r1, #1
 80012f4:	4822      	ldr	r0, [pc, #136]	@ (8001380 <MX_ADC1_Init+0x1a4>)
 80012f6:	f7ff fa1e 	bl	8000736 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SINGLE_ENDED);
 80012fa:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80012fe:	2101      	movs	r1, #1
 8001300:	481f      	ldr	r0, [pc, #124]	@ (8001380 <MX_ADC1_Init+0x1a4>)
 8001302:	f7ff fa43 	bl	800078c <LL_ADC_SetChannelSingleDiff>
  LL_ADC_SetChannelPreselection(ADC1, LL_ADC_CHANNEL_0);
 8001306:	2101      	movs	r1, #1
 8001308:	481d      	ldr	r0, [pc, #116]	@ (8001380 <MX_ADC1_Init+0x1a4>)
 800130a:	f7ff f9a2 	bl	8000652 <LL_ADC_SetChannelPreselection>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_1);
 800130e:	4a21      	ldr	r2, [pc, #132]	@ (8001394 <MX_ADC1_Init+0x1b8>)
 8001310:	210c      	movs	r1, #12
 8001312:	481b      	ldr	r0, [pc, #108]	@ (8001380 <MX_ADC1_Init+0x1a4>)
 8001314:	f7ff f9d0 	bl	80006b8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8001318:	2200      	movs	r2, #0
 800131a:	491e      	ldr	r1, [pc, #120]	@ (8001394 <MX_ADC1_Init+0x1b8>)
 800131c:	4818      	ldr	r0, [pc, #96]	@ (8001380 <MX_ADC1_Init+0x1a4>)
 800131e:	f7ff fa0a 	bl	8000736 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 8001322:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001326:	491b      	ldr	r1, [pc, #108]	@ (8001394 <MX_ADC1_Init+0x1b8>)
 8001328:	4815      	ldr	r0, [pc, #84]	@ (8001380 <MX_ADC1_Init+0x1a4>)
 800132a:	f7ff fa2f 	bl	800078c <LL_ADC_SetChannelSingleDiff>
  LL_ADC_SetChannelPreselection(ADC1, LL_ADC_CHANNEL_1);
 800132e:	4919      	ldr	r1, [pc, #100]	@ (8001394 <MX_ADC1_Init+0x1b8>)
 8001330:	4813      	ldr	r0, [pc, #76]	@ (8001380 <MX_ADC1_Init+0x1a4>)
 8001332:	f7ff f98e 	bl	8000652 <LL_ADC_SetChannelPreselection>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_3);
 8001336:	4a18      	ldr	r2, [pc, #96]	@ (8001398 <MX_ADC1_Init+0x1bc>)
 8001338:	2112      	movs	r1, #18
 800133a:	4811      	ldr	r0, [pc, #68]	@ (8001380 <MX_ADC1_Init+0x1a4>)
 800133c:	f7ff f9bc 	bl	80006b8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8001340:	2200      	movs	r2, #0
 8001342:	4915      	ldr	r1, [pc, #84]	@ (8001398 <MX_ADC1_Init+0x1bc>)
 8001344:	480e      	ldr	r0, [pc, #56]	@ (8001380 <MX_ADC1_Init+0x1a4>)
 8001346:	f7ff f9f6 	bl	8000736 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SINGLE_ENDED);
 800134a:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800134e:	4912      	ldr	r1, [pc, #72]	@ (8001398 <MX_ADC1_Init+0x1bc>)
 8001350:	480b      	ldr	r0, [pc, #44]	@ (8001380 <MX_ADC1_Init+0x1a4>)
 8001352:	f7ff fa1b 	bl	800078c <LL_ADC_SetChannelSingleDiff>
  LL_ADC_SetChannelPreselection(ADC1, LL_ADC_CHANNEL_3);
 8001356:	4910      	ldr	r1, [pc, #64]	@ (8001398 <MX_ADC1_Init+0x1bc>)
 8001358:	4809      	ldr	r0, [pc, #36]	@ (8001380 <MX_ADC1_Init+0x1a4>)
 800135a:	f7ff f97a 	bl	8000652 <LL_ADC_SetChannelPreselection>
  /* USER CODE BEGIN ADC1_Init 2 */

  LL_ADC_Enable(ADC1);
 800135e:	4808      	ldr	r0, [pc, #32]	@ (8001380 <MX_ADC1_Init+0x1a4>)
 8001360:	f7ff fa74 	bl	800084c <LL_ADC_Enable>
  while (!LL_ADC_IsActiveFlag_ADRDY(ADC1));
 8001364:	bf00      	nop
 8001366:	4806      	ldr	r0, [pc, #24]	@ (8001380 <MX_ADC1_Init+0x1a4>)
 8001368:	f7ff fa84 	bl	8000874 <LL_ADC_IsActiveFlag_ADRDY>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0f9      	beq.n	8001366 <MX_ADC1_Init+0x18a>
  /* USER CODE END ADC1_Init 2 */

}
 8001372:	bf00      	nop
 8001374:	bf00      	nop
 8001376:	3750      	adds	r7, #80	@ 0x50
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	58020000 	.word	0x58020000
 8001380:	40022000 	.word	0x40022000
 8001384:	40022300 	.word	0x40022300
 8001388:	24000000 	.word	0x24000000
 800138c:	053e2d63 	.word	0x053e2d63
 8001390:	cccccccd 	.word	0xcccccccd
 8001394:	04300002 	.word	0x04300002
 8001398:	0c900008 	.word	0x0c900008

0800139c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b090      	sub	sp, #64	@ 0x40
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80013a2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]
 80013be:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
 80013cc:	611a      	str	r2, [r3, #16]
 80013ce:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 80013d0:	2020      	movs	r0, #32
 80013d2:	f7ff fbaf 	bl	8000b34 <LL_AHB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 80013d6:	2004      	movs	r0, #4
 80013d8:	f7ff fbc8 	bl	8000b6c <LL_AHB4_GRP1_EnableClock>
  /**ADC2 GPIO Configuration
  PC4   ------> ADC2_INP4
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80013dc:	2310      	movs	r3, #16
 80013de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80013e0:	2303      	movs	r3, #3
 80013e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	4619      	mov	r1, r3
 80013ec:	4834      	ldr	r0, [pc, #208]	@ (80014c0 <MX_ADC2_Init+0x124>)
 80013ee:	f00d f929 	bl	800e644 <LL_GPIO_Init>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  LL_ADC_SetOverSamplingScope(ADC2, LL_ADC_OVS_DISABLE);
 80013f2:	2100      	movs	r1, #0
 80013f4:	4833      	ldr	r0, [pc, #204]	@ (80014c4 <MX_ADC2_Init+0x128>)
 80013f6:	f7ff f9ed 	bl	80007d4 <LL_ADC_SetOverSamplingScope>
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_16B;
 80013fa:	2300      	movs	r3, #0
 80013fc:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 80013fe:	2300      	movs	r3, #0
 8001400:	63fb      	str	r3, [r7, #60]	@ 0x3c
  ADC_InitStruct.LeftBitShift = LL_ADC_LEFT_BIT_SHIFT_NONE;
 8001402:	2300      	movs	r3, #0
 8001404:	63bb      	str	r3, [r7, #56]	@ 0x38
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8001406:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800140a:	4619      	mov	r1, r3
 800140c:	482d      	ldr	r0, [pc, #180]	@ (80014c4 <MX_ADC2_Init+0x128>)
 800140e:	f00c ffc9 	bl	800e3a4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8001416:	2300      	movs	r3, #0
 8001418:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.SequencerDiscont = DISABLE;
 800141a:	2300      	movs	r3, #0
 800141c:	627b      	str	r3, [r7, #36]	@ 0x24
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 800141e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001422:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 8001424:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001428:	633b      	str	r3, [r7, #48]	@ 0x30
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 800142a:	f107 031c 	add.w	r3, r7, #28
 800142e:	4619      	mov	r1, r3
 8001430:	4824      	ldr	r0, [pc, #144]	@ (80014c4 <MX_ADC2_Init+0x128>)
 8001432:	f00c ffe3 	bl	800e3fc <LL_ADC_REG_Init>
  LL_ADC_REG_SetDataTransferMode(ADC2, LL_ADC_REG_DR_TRANSFER);
 8001436:	2100      	movs	r1, #0
 8001438:	4822      	ldr	r0, [pc, #136]	@ (80014c4 <MX_ADC2_Init+0x128>)
 800143a:	f7ff f969 	bl	8000710 <LL_ADC_REG_SetDataTransferMode>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC2);
 800143e:	4821      	ldr	r0, [pc, #132]	@ (80014c4 <MX_ADC2_Init+0x128>)
 8001440:	f7ff f9de 	bl	8000800 <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC2);
 8001444:	481f      	ldr	r0, [pc, #124]	@ (80014c4 <MX_ADC2_Init+0x128>)
 8001446:	f7ff f9ed 	bl	8000824 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  __IO uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 800144a:	4b1f      	ldr	r3, [pc, #124]	@ (80014c8 <MX_ADC2_Init+0x12c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	099b      	lsrs	r3, r3, #6
 8001450:	4a1e      	ldr	r2, [pc, #120]	@ (80014cc <MX_ADC2_Init+0x130>)
 8001452:	fba2 2303 	umull	r2, r3, r2, r3
 8001456:	099a      	lsrs	r2, r3, #6
 8001458:	4613      	mov	r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4413      	add	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	461a      	mov	r2, r3
 8001462:	4b1b      	ldr	r3, [pc, #108]	@ (80014d0 <MX_ADC2_Init+0x134>)
 8001464:	fba3 2302 	umull	r2, r3, r3, r2
 8001468:	08db      	lsrs	r3, r3, #3
 800146a:	603b      	str	r3, [r7, #0]
  while(wait_loop_index != 0)
 800146c:	e002      	b.n	8001474 <MX_ADC2_Init+0xd8>
  {
    wait_loop_index--;
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	3b01      	subs	r3, #1
 8001472:	603b      	str	r3, [r7, #0]
  while(wait_loop_index != 0)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f9      	bne.n	800146e <MX_ADC2_Init+0xd2>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
 800147a:	4a16      	ldr	r2, [pc, #88]	@ (80014d4 <MX_ADC2_Init+0x138>)
 800147c:	2106      	movs	r1, #6
 800147e:	4811      	ldr	r0, [pc, #68]	@ (80014c4 <MX_ADC2_Init+0x128>)
 8001480:	f7ff f91a 	bl	80006b8 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8001484:	2200      	movs	r2, #0
 8001486:	4913      	ldr	r1, [pc, #76]	@ (80014d4 <MX_ADC2_Init+0x138>)
 8001488:	480e      	ldr	r0, [pc, #56]	@ (80014c4 <MX_ADC2_Init+0x128>)
 800148a:	f7ff f954 	bl	8000736 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_4, LL_ADC_SINGLE_ENDED);
 800148e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001492:	4910      	ldr	r1, [pc, #64]	@ (80014d4 <MX_ADC2_Init+0x138>)
 8001494:	480b      	ldr	r0, [pc, #44]	@ (80014c4 <MX_ADC2_Init+0x128>)
 8001496:	f7ff f979 	bl	800078c <LL_ADC_SetChannelSingleDiff>
  LL_ADC_SetChannelPreselection(ADC2, LL_ADC_CHANNEL_4);
 800149a:	490e      	ldr	r1, [pc, #56]	@ (80014d4 <MX_ADC2_Init+0x138>)
 800149c:	4809      	ldr	r0, [pc, #36]	@ (80014c4 <MX_ADC2_Init+0x128>)
 800149e:	f7ff f8d8 	bl	8000652 <LL_ADC_SetChannelPreselection>
  /* USER CODE BEGIN ADC2_Init 2 */
  LL_ADC_Enable(ADC2);
 80014a2:	4808      	ldr	r0, [pc, #32]	@ (80014c4 <MX_ADC2_Init+0x128>)
 80014a4:	f7ff f9d2 	bl	800084c <LL_ADC_Enable>
  while (!LL_ADC_IsActiveFlag_ADRDY(ADC2));
 80014a8:	bf00      	nop
 80014aa:	4806      	ldr	r0, [pc, #24]	@ (80014c4 <MX_ADC2_Init+0x128>)
 80014ac:	f7ff f9e2 	bl	8000874 <LL_ADC_IsActiveFlag_ADRDY>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f9      	beq.n	80014aa <MX_ADC2_Init+0x10e>
  /* USER CODE END ADC2_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	bf00      	nop
 80014ba:	3740      	adds	r7, #64	@ 0x40
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	58020800 	.word	0x58020800
 80014c4:	40022100 	.word	0x40022100
 80014c8:	24000000 	.word	0x24000000
 80014cc:	053e2d63 	.word	0x053e2d63
 80014d0:	cccccccd 	.word	0xcccccccd
 80014d4:	10c00010 	.word	0x10c00010

080014d8 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80014dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001598 <MX_FDCAN2_Init+0xc0>)
 80014de:	4a2f      	ldr	r2, [pc, #188]	@ (800159c <MX_FDCAN2_Init+0xc4>)
 80014e0:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80014e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001598 <MX_FDCAN2_Init+0xc0>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80014e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001598 <MX_FDCAN2_Init+0xc0>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80014ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001598 <MX_FDCAN2_Init+0xc0>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80014f4:	4b28      	ldr	r3, [pc, #160]	@ (8001598 <MX_FDCAN2_Init+0xc0>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80014fa:	4b27      	ldr	r3, [pc, #156]	@ (8001598 <MX_FDCAN2_Init+0xc0>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 10;
 8001500:	4b25      	ldr	r3, [pc, #148]	@ (8001598 <MX_FDCAN2_Init+0xc0>)
 8001502:	220a      	movs	r2, #10
 8001504:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001506:	4b24      	ldr	r3, [pc, #144]	@ (8001598 <MX_FDCAN2_Init+0xc0>)
 8001508:	2201      	movs	r2, #1
 800150a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 8;
 800150c:	4b22      	ldr	r3, [pc, #136]	@ (8001598 <MX_FDCAN2_Init+0xc0>)
 800150e:	2208      	movs	r2, #8
 8001510:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 1;
 8001512:	4b21      	ldr	r3, [pc, #132]	@ (8001598 <MX_FDCAN2_Init+0xc0>)
 8001514:	2201      	movs	r2, #1
 8001516:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001518:	4b1f      	ldr	r3, [pc, #124]	@ (8001598 <MX_FDCAN2_Init+0xc0>)
 800151a:	2201      	movs	r2, #1
 800151c:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800151e:	4b1e      	ldr	r3, [pc, #120]	@ (8001598 <MX_FDCAN2_Init+0xc0>)
 8001520:	2201      	movs	r2, #1
 8001522:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001524:	4b1c      	ldr	r3, [pc, #112]	@ (8001598 <MX_FDCAN2_Init+0xc0>)
 8001526:	2201      	movs	r2, #1
 8001528:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800152a:	4b1b      	ldr	r3, [pc, #108]	@ (8001598 <MX_FDCAN2_Init+0xc0>)
 800152c:	2201      	movs	r2, #1
 800152e:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8001530:	4b19      	ldr	r3, [pc, #100]	@ (8001598 <MX_FDCAN2_Init+0xc0>)
 8001532:	2200      	movs	r2, #0
 8001534:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8001536:	4b18      	ldr	r3, [pc, #96]	@ (8001598 <MX_FDCAN2_Init+0xc0>)
 8001538:	2200      	movs	r2, #0
 800153a:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 1;
 800153c:	4b16      	ldr	r3, [pc, #88]	@ (8001598 <MX_FDCAN2_Init+0xc0>)
 800153e:	2201      	movs	r2, #1
 8001540:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 8;
 8001542:	4b15      	ldr	r3, [pc, #84]	@ (8001598 <MX_FDCAN2_Init+0xc0>)
 8001544:	2208      	movs	r2, #8
 8001546:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001548:	4b13      	ldr	r3, [pc, #76]	@ (8001598 <MX_FDCAN2_Init+0xc0>)
 800154a:	2204      	movs	r2, #4
 800154c:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800154e:	4b12      	ldr	r3, [pc, #72]	@ (8001598 <MX_FDCAN2_Init+0xc0>)
 8001550:	2200      	movs	r2, #0
 8001552:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001554:	4b10      	ldr	r3, [pc, #64]	@ (8001598 <MX_FDCAN2_Init+0xc0>)
 8001556:	2204      	movs	r2, #4
 8001558:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 800155a:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <MX_FDCAN2_Init+0xc0>)
 800155c:	2200      	movs	r2, #0
 800155e:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001560:	4b0d      	ldr	r3, [pc, #52]	@ (8001598 <MX_FDCAN2_Init+0xc0>)
 8001562:	2204      	movs	r2, #4
 8001564:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8001566:	4b0c      	ldr	r3, [pc, #48]	@ (8001598 <MX_FDCAN2_Init+0xc0>)
 8001568:	2200      	movs	r2, #0
 800156a:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 800156c:	4b0a      	ldr	r3, [pc, #40]	@ (8001598 <MX_FDCAN2_Init+0xc0>)
 800156e:	2200      	movs	r2, #0
 8001570:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 8;
 8001572:	4b09      	ldr	r3, [pc, #36]	@ (8001598 <MX_FDCAN2_Init+0xc0>)
 8001574:	2208      	movs	r2, #8
 8001576:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001578:	4b07      	ldr	r3, [pc, #28]	@ (8001598 <MX_FDCAN2_Init+0xc0>)
 800157a:	2200      	movs	r2, #0
 800157c:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800157e:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <MX_FDCAN2_Init+0xc0>)
 8001580:	2204      	movs	r2, #4
 8001582:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001584:	4804      	ldr	r0, [pc, #16]	@ (8001598 <MX_FDCAN2_Init+0xc0>)
 8001586:	f008 ffbf 	bl	800a508 <HAL_FDCAN_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8001590:	f000 f986 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}
 8001598:	24000154 	.word	0x24000154
 800159c:	4000a400 	.word	0x4000a400

080015a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b0be      	sub	sp, #248	@ 0xf8
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80015a6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
 80015b4:	611a      	str	r2, [r3, #16]
 80015b6:	615a      	str	r2, [r3, #20]
 80015b8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ba:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
 80015c8:	611a      	str	r2, [r3, #16]
 80015ca:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015cc:	463b      	mov	r3, r7
 80015ce:	22c0      	movs	r2, #192	@ 0xc0
 80015d0:	2100      	movs	r1, #0
 80015d2:	4618      	mov	r0, r3
 80015d4:	f00e fce4 	bl	800ffa0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015d8:	f04f 0208 	mov.w	r2, #8
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ea:	463b      	mov	r3, r7
 80015ec:	4618      	mov	r0, r3
 80015ee:	f00b faed 	bl	800cbcc <HAL_RCCEx_PeriphCLKConfig>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015f8:	f000 f952 	bl	80018a0 <Error_Handler>
  }

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOB);
 80015fc:	2002      	movs	r0, #2
 80015fe:	f7ff fab5 	bl	8000b6c <LL_AHB4_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001602:	23c0      	movs	r3, #192	@ 0xc0
 8001604:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001608:	2302      	movs	r3, #2
 800160a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001614:	2301      	movs	r3, #1
 8001616:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800161a:	2300      	movs	r3, #0
 800161c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001620:	2304      	movs	r3, #4
 8001622:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001626:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800162a:	4619      	mov	r1, r3
 800162c:	481b      	ldr	r0, [pc, #108]	@ (800169c <MX_I2C1_Init+0xfc>)
 800162e:	f00d f809 	bl	800e644 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001632:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001636:	f7ff fab5 	bl	8000ba4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 800163a:	4819      	ldr	r0, [pc, #100]	@ (80016a0 <MX_I2C1_Init+0x100>)
 800163c:	f7ff f976 	bl	800092c <LL_I2C_EnableAutoEndMode>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001640:	2200      	movs	r2, #0
 8001642:	2100      	movs	r1, #0
 8001644:	4816      	ldr	r0, [pc, #88]	@ (80016a0 <MX_I2C1_Init+0x100>)
 8001646:	f7ff f949 	bl	80008dc <LL_I2C_SetOwnAddress2>
  LL_I2C_DisableOwnAddress2(I2C1);
 800164a:	4815      	ldr	r0, [pc, #84]	@ (80016a0 <MX_I2C1_Init+0x100>)
 800164c:	f7ff f95e 	bl	800090c <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001650:	4813      	ldr	r0, [pc, #76]	@ (80016a0 <MX_I2C1_Init+0x100>)
 8001652:	f7ff f932 	bl	80008ba <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001656:	4812      	ldr	r0, [pc, #72]	@ (80016a0 <MX_I2C1_Init+0x100>)
 8001658:	f7ff f91f 	bl	800089a <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800165c:	2300      	movs	r3, #0
 800165e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  I2C_InitStruct.Timing = 0x00909FCE;
 8001662:	4b10      	ldr	r3, [pc, #64]	@ (80016a4 <MX_I2C1_Init+0x104>)
 8001664:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001668:	2300      	movs	r3, #0
 800166a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  I2C_InitStruct.DigitalFilter = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  I2C_InitStruct.OwnAddress1 = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800167a:	2300      	movs	r3, #0
 800167c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001680:	2300      	movs	r3, #0
 8001682:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001686:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800168a:	4619      	mov	r1, r3
 800168c:	4804      	ldr	r0, [pc, #16]	@ (80016a0 <MX_I2C1_Init+0x100>)
 800168e:	f00d f8eb 	bl	800e868 <LL_I2C_Init>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001692:	bf00      	nop
 8001694:	37f8      	adds	r7, #248	@ 0xf8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	58020400 	.word	0x58020400
 80016a0:	40005400 	.word	0x40005400
 80016a4:	00909fce 	.word	0x00909fce

080016a8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b0be      	sub	sp, #248	@ 0xf8
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef UART_InitStruct = {0};
 80016ae:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80016b2:	2220      	movs	r2, #32
 80016b4:	2100      	movs	r1, #0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f00e fc72 	bl	800ffa0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
 80016cc:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016ce:	463b      	mov	r3, r7
 80016d0:	22c0      	movs	r2, #192	@ 0xc0
 80016d2:	2100      	movs	r1, #0
 80016d4:	4618      	mov	r0, r3
 80016d6:	f00e fc63 	bl	800ffa0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80016da:	f04f 0202 	mov.w	r2, #2
 80016de:	f04f 0300 	mov.w	r3, #0
 80016e2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80016e6:	2300      	movs	r3, #0
 80016e8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ea:	463b      	mov	r3, r7
 80016ec:	4618      	mov	r0, r3
 80016ee:	f00b fa6d 	bl	800cbcc <HAL_RCCEx_PeriphCLKConfig>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_UART4_Init+0x54>
  {
    Error_Handler();
 80016f8:	f000 f8d2 	bl	80018a0 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 80016fc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001700:	f7ff fa50 	bl	8000ba4 <LL_APB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 8001704:	2001      	movs	r0, #1
 8001706:	f7ff fa31 	bl	8000b6c <LL_AHB4_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PA1   ------> UART4_RX
  PA0   ------> UART4_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_0;
 800170a:	2303      	movs	r3, #3
 800170c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001710:	2302      	movs	r3, #2
 8001712:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001716:	2300      	movs	r3, #0
 8001718:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001722:	2300      	movs	r3, #0
 8001724:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8001728:	2308      	movs	r3, #8
 800172a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172e:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001732:	4619      	mov	r1, r3
 8001734:	482a      	ldr	r0, [pc, #168]	@ (80017e0 <MX_UART4_Init+0x138>)
 8001736:	f00c ff85 	bl	800e644 <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800173a:	f7fe ff01 	bl	8000540 <__NVIC_GetPriorityGrouping>
 800173e:	4603      	mov	r3, r0
 8001740:	2200      	movs	r2, #0
 8001742:	2100      	movs	r1, #0
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe ff51 	bl	80005ec <NVIC_EncodePriority>
 800174a:	4603      	mov	r3, r0
 800174c:	4619      	mov	r1, r3
 800174e:	2034      	movs	r0, #52	@ 0x34
 8001750:	f7fe ff22 	bl	8000598 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 8001754:	2034      	movs	r0, #52	@ 0x34
 8001756:	f7fe ff01 	bl	800055c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  UART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 800175a:	2300      	movs	r3, #0
 800175c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  UART_InitStruct.BaudRate = 115200;
 8001760:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001764:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  UART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001768:	2300      	movs	r3, #0
 800176a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  UART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800176e:	2300      	movs	r3, #0
 8001770:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  UART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001774:	2300      	movs	r3, #0
 8001776:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  UART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800177a:	230c      	movs	r3, #12
 800177c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  UART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001780:	2300      	movs	r3, #0
 8001782:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  UART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001786:	2300      	movs	r3, #0
 8001788:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  LL_USART_Init(UART4, &UART_InitStruct);
 800178c:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001790:	4619      	mov	r1, r3
 8001792:	4814      	ldr	r0, [pc, #80]	@ (80017e4 <MX_UART4_Init+0x13c>)
 8001794:	f00d ffe4 	bl	800f760 <LL_USART_Init>
  LL_USART_DisableFIFO(UART4);
 8001798:	4812      	ldr	r0, [pc, #72]	@ (80017e4 <MX_UART4_Init+0x13c>)
 800179a:	f7ff f8e7 	bl	800096c <LL_USART_DisableFIFO>
  LL_USART_SetTXFIFOThreshold(UART4, LL_USART_FIFOTHRESHOLD_1_8);
 800179e:	2100      	movs	r1, #0
 80017a0:	4810      	ldr	r0, [pc, #64]	@ (80017e4 <MX_UART4_Init+0x13c>)
 80017a2:	f7ff f8f3 	bl	800098c <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(UART4, LL_USART_FIFOTHRESHOLD_1_8);
 80017a6:	2100      	movs	r1, #0
 80017a8:	480e      	ldr	r0, [pc, #56]	@ (80017e4 <MX_UART4_Init+0x13c>)
 80017aa:	f7ff f916 	bl	80009da <LL_USART_SetRXFIFOThreshold>
  LL_USART_ConfigAsyncMode(UART4);
 80017ae:	480d      	ldr	r0, [pc, #52]	@ (80017e4 <MX_UART4_Init+0x13c>)
 80017b0:	f7ff f93a 	bl	8000a28 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType UART4 */

  /* USER CODE END WKUPType UART4 */

  LL_USART_Enable(UART4);
 80017b4:	480b      	ldr	r0, [pc, #44]	@ (80017e4 <MX_UART4_Init+0x13c>)
 80017b6:	f7ff f8c9 	bl	800094c <LL_USART_Enable>

  /* Polling UART4 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(UART4))) || (!(LL_USART_IsActiveFlag_REACK(UART4))))
 80017ba:	bf00      	nop
 80017bc:	4809      	ldr	r0, [pc, #36]	@ (80017e4 <MX_UART4_Init+0x13c>)
 80017be:	f7ff f949 	bl	8000a54 <LL_USART_IsActiveFlag_TEACK>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0f9      	beq.n	80017bc <MX_UART4_Init+0x114>
 80017c8:	4806      	ldr	r0, [pc, #24]	@ (80017e4 <MX_UART4_Init+0x13c>)
 80017ca:	f7ff f957 	bl	8000a7c <LL_USART_IsActiveFlag_REACK>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0f3      	beq.n	80017bc <MX_UART4_Init+0x114>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80017d4:	bf00      	nop
 80017d6:	bf00      	nop
 80017d8:	37f8      	adds	r7, #248	@ 0xf8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	58020000 	.word	0x58020000
 80017e4:	40004c00 	.word	0x40004c00

080017e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ee:	463b      	mov	r3, r7
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
 80017fc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOB);
 80017fe:	2002      	movs	r0, #2
 8001800:	f7ff f9b4 	bl	8000b6c <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 8001804:	2001      	movs	r0, #1
 8001806:	f7ff f9b1 	bl	8000b6c <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOD);
 800180a:	2008      	movs	r0, #8
 800180c:	f7ff f9ae 	bl	8000b6c <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 8001810:	2004      	movs	r0, #4
 8001812:	f7ff f9ab 	bl	8000b6c <LL_AHB4_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(WD_DONE_GPIO_Port, WD_DONE_Pin);
 8001816:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800181a:	481e      	ldr	r0, [pc, #120]	@ (8001894 <MX_GPIO_Init+0xac>)
 800181c:	f7ff f954 	bl	8000ac8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LED_B_Pin|LED_G_Pin);
 8001820:	2118      	movs	r1, #24
 8001822:	481d      	ldr	r0, [pc, #116]	@ (8001898 <MX_GPIO_Init+0xb0>)
 8001824:	f7ff f95e 	bl	8000ae4 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = WD_DONE_Pin;
 8001828:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800182c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800182e:	2301      	movs	r3, #1
 8001830:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800183a:	2300      	movs	r3, #0
 800183c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(WD_DONE_GPIO_Port, &GPIO_InitStruct);
 800183e:	463b      	mov	r3, r7
 8001840:	4619      	mov	r1, r3
 8001842:	4814      	ldr	r0, [pc, #80]	@ (8001894 <MX_GPIO_Init+0xac>)
 8001844:	f00c fefe 	bl	800e644 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15|LL_GPIO_PIN_14;
 8001848:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800184c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800184e:	2302      	movs	r3, #2
 8001850:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001852:	2300      	movs	r3, #0
 8001854:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 800185e:	230c      	movs	r3, #12
 8001860:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001862:	463b      	mov	r3, r7
 8001864:	4619      	mov	r1, r3
 8001866:	480d      	ldr	r0, [pc, #52]	@ (800189c <MX_GPIO_Init+0xb4>)
 8001868:	f00c feec 	bl	800e644 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_B_Pin|LED_G_Pin;
 800186c:	2318      	movs	r3, #24
 800186e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001870:	2301      	movs	r3, #1
 8001872:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001874:	2300      	movs	r3, #0
 8001876:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800187c:	2300      	movs	r3, #0
 800187e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001880:	463b      	mov	r3, r7
 8001882:	4619      	mov	r1, r3
 8001884:	4804      	ldr	r0, [pc, #16]	@ (8001898 <MX_GPIO_Init+0xb0>)
 8001886:	f00c fedd 	bl	800e644 <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800188a:	bf00      	nop
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	58020c00 	.word	0x58020c00
 8001898:	58020000 	.word	0x58020000
 800189c:	58020400 	.word	0x58020400

080018a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018a4:	b672      	cpsid	i
}
 80018a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a8:	bf00      	nop
 80018aa:	e7fd      	b.n	80018a8 <Error_Handler+0x8>

080018ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b2:	4b0a      	ldr	r3, [pc, #40]	@ (80018dc <HAL_MspInit+0x30>)
 80018b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018b8:	4a08      	ldr	r2, [pc, #32]	@ (80018dc <HAL_MspInit+0x30>)
 80018ba:	f043 0302 	orr.w	r3, r3, #2
 80018be:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80018c2:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <HAL_MspInit+0x30>)
 80018c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	58024400 	.word	0x58024400

080018e0 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b0ba      	sub	sp, #232	@ 0xe8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018f8:	f107 0310 	add.w	r3, r7, #16
 80018fc:	22c0      	movs	r2, #192	@ 0xc0
 80018fe:	2100      	movs	r1, #0
 8001900:	4618      	mov	r0, r3
 8001902:	f00e fb4d 	bl	800ffa0 <memset>
  if(hfdcan->Instance==FDCAN2)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a2b      	ldr	r2, [pc, #172]	@ (80019b8 <HAL_FDCAN_MspInit+0xd8>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d14f      	bne.n	80019b0 <HAL_FDCAN_MspInit+0xd0>

    /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001910:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001914:	f04f 0300 	mov.w	r3, #0
 8001918:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800191c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001920:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001924:	f107 0310 	add.w	r3, r7, #16
 8001928:	4618      	mov	r0, r3
 800192a:	f00b f94f 	bl	800cbcc <HAL_RCCEx_PeriphCLKConfig>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001934:	f7ff ffb4 	bl	80018a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001938:	4b20      	ldr	r3, [pc, #128]	@ (80019bc <HAL_FDCAN_MspInit+0xdc>)
 800193a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800193e:	4a1f      	ldr	r2, [pc, #124]	@ (80019bc <HAL_FDCAN_MspInit+0xdc>)
 8001940:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001944:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001948:	4b1c      	ldr	r3, [pc, #112]	@ (80019bc <HAL_FDCAN_MspInit+0xdc>)
 800194a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800194e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001956:	4b19      	ldr	r3, [pc, #100]	@ (80019bc <HAL_FDCAN_MspInit+0xdc>)
 8001958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800195c:	4a17      	ldr	r2, [pc, #92]	@ (80019bc <HAL_FDCAN_MspInit+0xdc>)
 800195e:	f043 0302 	orr.w	r3, r3, #2
 8001962:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001966:	4b15      	ldr	r3, [pc, #84]	@ (80019bc <HAL_FDCAN_MspInit+0xdc>)
 8001968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001974:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001978:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	2302      	movs	r3, #2
 800197e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2300      	movs	r3, #0
 800198a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800198e:	2309      	movs	r3, #9
 8001990:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001994:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001998:	4619      	mov	r1, r3
 800199a:	4809      	ldr	r0, [pc, #36]	@ (80019c0 <HAL_FDCAN_MspInit+0xe0>)
 800199c:	f009 ff82 	bl	800b8a4 <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 5, 0);
 80019a0:	2200      	movs	r2, #0
 80019a2:	2105      	movs	r1, #5
 80019a4:	2014      	movs	r0, #20
 80019a6:	f008 fd7a 	bl	800a49e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 80019aa:	2014      	movs	r0, #20
 80019ac:	f008 fd91 	bl	800a4d2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 80019b0:	bf00      	nop
 80019b2:	37e8      	adds	r7, #232	@ 0xe8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	4000a400 	.word	0x4000a400
 80019bc:	58024400 	.word	0x58024400
 80019c0:	58020400 	.word	0x58020400

080019c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019c8:	bf00      	nop
 80019ca:	e7fd      	b.n	80019c8 <NMI_Handler+0x4>

080019cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <HardFault_Handler+0x4>

080019d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d8:	bf00      	nop
 80019da:	e7fd      	b.n	80019d8 <MemManage_Handler+0x4>

080019dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e0:	bf00      	nop
 80019e2:	e7fd      	b.n	80019e0 <BusFault_Handler+0x4>

080019e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e8:	bf00      	nop
 80019ea:	e7fd      	b.n	80019e8 <UsageFault_Handler+0x4>

080019ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019fe:	f008 fc47 	bl	800a290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
//	#if (INCLUDE_xTaskGetSchedulerState == 1 )
//	  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
//	  {
//	#endif /* INCLUDE_xTaskGetSchedulerState */
	  xPortSysTickHandler();
 8001a02:	f005 fc41 	bl	8007288 <xPortSysTickHandler>
//	#if (INCLUDE_xTaskGetSchedulerState == 1 )
//	  }
//	#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE END SysTick_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8001a10:	4802      	ldr	r0, [pc, #8]	@ (8001a1c <FDCAN2_IT0_IRQHandler+0x10>)
 8001a12:	f009 fa39 	bl	800ae88 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	24000154 	.word	0x24000154

08001a20 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	UART_Driver_ISR(UART4);
 8001a24:	4802      	ldr	r0, [pc, #8]	@ (8001a30 <UART4_IRQHandler+0x10>)
 8001a26:	f000 fb78 	bl	800211a <UART_Driver_ISR>
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40004c00 	.word	0x40004c00

08001a34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return 1;
 8001a38:	2301      	movs	r3, #1
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <_kill>:

int _kill(int pid, int sig)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a4e:	f00e fb37 	bl	80100c0 <__errno>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2216      	movs	r2, #22
 8001a56:	601a      	str	r2, [r3, #0]
  return -1;
 8001a58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <_exit>:

void _exit (int status)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ffe7 	bl	8001a44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a76:	bf00      	nop
 8001a78:	e7fd      	b.n	8001a76 <_exit+0x12>

08001a7a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b086      	sub	sp, #24
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	60f8      	str	r0, [r7, #12]
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	e00a      	b.n	8001aa2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a8c:	f3af 8000 	nop.w
 8001a90:	4601      	mov	r1, r0
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	1c5a      	adds	r2, r3, #1
 8001a96:	60ba      	str	r2, [r7, #8]
 8001a98:	b2ca      	uxtb	r2, r1
 8001a9a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	dbf0      	blt.n	8001a8c <_read+0x12>
  }

  return len;
 8001aaa:	687b      	ldr	r3, [r7, #4]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	e009      	b.n	8001ada <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	1c5a      	adds	r2, r3, #1
 8001aca:	60ba      	str	r2, [r7, #8]
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	dbf1      	blt.n	8001ac6 <_write+0x12>
  }
  return len;
 8001ae2:	687b      	ldr	r3, [r7, #4]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <_close>:

int _close(int file)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001af4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b14:	605a      	str	r2, [r3, #4]
  return 0;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <_isatty>:

int _isatty(int file)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b2c:	2301      	movs	r3, #1
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b085      	sub	sp, #20
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	60f8      	str	r0, [r7, #12]
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b5c:	4a14      	ldr	r2, [pc, #80]	@ (8001bb0 <_sbrk+0x5c>)
 8001b5e:	4b15      	ldr	r3, [pc, #84]	@ (8001bb4 <_sbrk+0x60>)
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b68:	4b13      	ldr	r3, [pc, #76]	@ (8001bb8 <_sbrk+0x64>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d102      	bne.n	8001b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b70:	4b11      	ldr	r3, [pc, #68]	@ (8001bb8 <_sbrk+0x64>)
 8001b72:	4a12      	ldr	r2, [pc, #72]	@ (8001bbc <_sbrk+0x68>)
 8001b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b76:	4b10      	ldr	r3, [pc, #64]	@ (8001bb8 <_sbrk+0x64>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d207      	bcs.n	8001b94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b84:	f00e fa9c 	bl	80100c0 <__errno>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	220c      	movs	r2, #12
 8001b8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b92:	e009      	b.n	8001ba8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b94:	4b08      	ldr	r3, [pc, #32]	@ (8001bb8 <_sbrk+0x64>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b9a:	4b07      	ldr	r3, [pc, #28]	@ (8001bb8 <_sbrk+0x64>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	4a05      	ldr	r2, [pc, #20]	@ (8001bb8 <_sbrk+0x64>)
 8001ba4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	24080000 	.word	0x24080000
 8001bb4:	00000400 	.word	0x00000400
 8001bb8:	240001f8 	.word	0x240001f8
 8001bbc:	24042e28 	.word	0x24042e28

08001bc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001bc0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001bfc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001bc4:	f7fe fca2 	bl	800050c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bc8:	f7fe fbf2 	bl	80003b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bcc:	480c      	ldr	r0, [pc, #48]	@ (8001c00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bce:	490d      	ldr	r1, [pc, #52]	@ (8001c04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001c08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd4:	e002      	b.n	8001bdc <LoopCopyDataInit>

08001bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bda:	3304      	adds	r3, #4

08001bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be0:	d3f9      	bcc.n	8001bd6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be2:	4a0a      	ldr	r2, [pc, #40]	@ (8001c0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001be4:	4c0a      	ldr	r4, [pc, #40]	@ (8001c10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be8:	e001      	b.n	8001bee <LoopFillZerobss>

08001bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bec:	3204      	adds	r2, #4

08001bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf0:	d3fb      	bcc.n	8001bea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bf2:	f00e fa6b 	bl	80100cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bf6:	f7ff f9c3 	bl	8000f80 <main>
  bx  lr
 8001bfa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bfc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001c00:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c04:	24000138 	.word	0x24000138
  ldr r2, =_sidata
 8001c08:	080125c8 	.word	0x080125c8
  ldr r2, =_sbss
 8001c0c:	24000138 	.word	0x24000138
  ldr r4, =_ebss
 8001c10:	24042e28 	.word	0x24042e28

08001c14 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c14:	e7fe      	b.n	8001c14 <ADC3_IRQHandler>
	...

08001c18 <LL_ADC_REG_StartConversion>:
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	4b05      	ldr	r3, [pc, #20]	@ (8001c3c <LL_ADC_REG_StartConversion+0x24>)
 8001c26:	4013      	ands	r3, r2
 8001c28:	f043 0204 	orr.w	r2, r3, #4
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	7fffffc0 	.word	0x7fffffc0

08001c40 <LL_ADC_REG_ReadConversionData16>:
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4c:	b29b      	uxth	r3, r3
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(const ADC_TypeDef *ADCx)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d101      	bne.n	8001c72 <LL_ADC_IsActiveFlag_EOC+0x18>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <LL_ADC_IsActiveFlag_EOC+0x1a>
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2204      	movs	r2, #4
 8001c8c:	601a      	str	r2, [r3, #0]
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <ADC2_Read>:

uint16_t live_buf[3];
uint16_t live_buf_2;

uint16_t ADC2_Read()
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0

    LL_ADC_ClearFlag_EOC(ADC2);
 8001ca0:	480d      	ldr	r0, [pc, #52]	@ (8001cd8 <ADC2_Read+0x3c>)
 8001ca2:	f7ff ffed 	bl	8001c80 <LL_ADC_ClearFlag_EOC>
    LL_ADC_REG_StartConversion(ADC2);
 8001ca6:	480c      	ldr	r0, [pc, #48]	@ (8001cd8 <ADC2_Read+0x3c>)
 8001ca8:	f7ff ffb6 	bl	8001c18 <LL_ADC_REG_StartConversion>

    while (!LL_ADC_IsActiveFlag_EOC(ADC2));
 8001cac:	bf00      	nop
 8001cae:	480a      	ldr	r0, [pc, #40]	@ (8001cd8 <ADC2_Read+0x3c>)
 8001cb0:	f7ff ffd3 	bl	8001c5a <LL_ADC_IsActiveFlag_EOC>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f9      	beq.n	8001cae <ADC2_Read+0x12>
    LL_ADC_ClearFlag_EOC(ADC2);
 8001cba:	4807      	ldr	r0, [pc, #28]	@ (8001cd8 <ADC2_Read+0x3c>)
 8001cbc:	f7ff ffe0 	bl	8001c80 <LL_ADC_ClearFlag_EOC>

    live_buf_2 = LL_ADC_REG_ReadConversionData16(ADC2);
 8001cc0:	4805      	ldr	r0, [pc, #20]	@ (8001cd8 <ADC2_Read+0x3c>)
 8001cc2:	f7ff ffbd 	bl	8001c40 <LL_ADC_REG_ReadConversionData16>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4b04      	ldr	r3, [pc, #16]	@ (8001cdc <ADC2_Read+0x40>)
 8001ccc:	801a      	strh	r2, [r3, #0]

    return live_buf_2;
 8001cce:	4b03      	ldr	r3, [pc, #12]	@ (8001cdc <ADC2_Read+0x40>)
 8001cd0:	881b      	ldrh	r3, [r3, #0]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40022100 	.word	0x40022100
 8001cdc:	24000202 	.word	0x24000202

08001ce0 <ADC1_ReadIndex>:

uint16_t ADC1_ReadIndex(uint8_t index)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]

    LL_ADC_ClearFlag_EOC(ADC1);
 8001cea:	481d      	ldr	r0, [pc, #116]	@ (8001d60 <ADC1_ReadIndex+0x80>)
 8001cec:	f7ff ffc8 	bl	8001c80 <LL_ADC_ClearFlag_EOC>
//    LL_ADC_ClearFlag_EOS(ADC1);
    LL_ADC_REG_StartConversion(ADC1);
 8001cf0:	481b      	ldr	r0, [pc, #108]	@ (8001d60 <ADC1_ReadIndex+0x80>)
 8001cf2:	f7ff ff91 	bl	8001c18 <LL_ADC_REG_StartConversion>

    for (int i = 0; i < 3; i++) {
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	e015      	b.n	8001d28 <ADC1_ReadIndex+0x48>
        while (!LL_ADC_IsActiveFlag_EOC(ADC1));
 8001cfc:	bf00      	nop
 8001cfe:	4818      	ldr	r0, [pc, #96]	@ (8001d60 <ADC1_ReadIndex+0x80>)
 8001d00:	f7ff ffab 	bl	8001c5a <LL_ADC_IsActiveFlag_EOC>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f9      	beq.n	8001cfe <ADC1_ReadIndex+0x1e>
        LL_ADC_ClearFlag_EOC(ADC1);
 8001d0a:	4815      	ldr	r0, [pc, #84]	@ (8001d60 <ADC1_ReadIndex+0x80>)
 8001d0c:	f7ff ffb8 	bl	8001c80 <LL_ADC_ClearFlag_EOC>
        live_buf[i] = LL_ADC_REG_ReadConversionData16(ADC1);
 8001d10:	4813      	ldr	r0, [pc, #76]	@ (8001d60 <ADC1_ReadIndex+0x80>)
 8001d12:	f7ff ff95 	bl	8001c40 <LL_ADC_REG_ReadConversionData16>
 8001d16:	4603      	mov	r3, r0
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4a12      	ldr	r2, [pc, #72]	@ (8001d64 <ADC1_ReadIndex+0x84>)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < 3; i++) {
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	3301      	adds	r3, #1
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	dde6      	ble.n	8001cfc <ADC1_ReadIndex+0x1c>
    }
//    while (!LL_ADC_IsActiveFlag_EOS(ADC1));
//    LL_ADC_ClearFlag_EOS(ADC1);

    switch (index) {
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	2b03      	cmp	r3, #3
 8001d32:	d00c      	beq.n	8001d4e <ADC1_ReadIndex+0x6e>
 8001d34:	2b03      	cmp	r3, #3
 8001d36:	dc0d      	bgt.n	8001d54 <ADC1_ReadIndex+0x74>
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d002      	beq.n	8001d42 <ADC1_ReadIndex+0x62>
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d003      	beq.n	8001d48 <ADC1_ReadIndex+0x68>
 8001d40:	e008      	b.n	8001d54 <ADC1_ReadIndex+0x74>
        case 1: return live_buf[0]; // INP0
 8001d42:	4b08      	ldr	r3, [pc, #32]	@ (8001d64 <ADC1_ReadIndex+0x84>)
 8001d44:	881b      	ldrh	r3, [r3, #0]
 8001d46:	e007      	b.n	8001d58 <ADC1_ReadIndex+0x78>
        case 2: return live_buf[1]; // INP1
 8001d48:	4b06      	ldr	r3, [pc, #24]	@ (8001d64 <ADC1_ReadIndex+0x84>)
 8001d4a:	885b      	ldrh	r3, [r3, #2]
 8001d4c:	e004      	b.n	8001d58 <ADC1_ReadIndex+0x78>
        case 3: return live_buf[2]; // INP3
 8001d4e:	4b05      	ldr	r3, [pc, #20]	@ (8001d64 <ADC1_ReadIndex+0x84>)
 8001d50:	889b      	ldrh	r3, [r3, #4]
 8001d52:	e001      	b.n	8001d58 <ADC1_ReadIndex+0x78>
        default: return 0xFFFF; // invalid
 8001d54:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    }
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40022000 	.word	0x40022000
 8001d64:	240001fc 	.word	0x240001fc

08001d68 <LL_USART_IsActiveFlag_FE>:
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d101      	bne.n	8001d80 <LL_USART_IsActiveFlag_FE+0x18>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <LL_USART_IsActiveFlag_FE+0x1a>
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <LL_USART_IsActiveFlag_NE>:
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	d101      	bne.n	8001da6 <LL_USART_IsActiveFlag_NE+0x18>
 8001da2:	2301      	movs	r3, #1
 8001da4:	e000      	b.n	8001da8 <LL_USART_IsActiveFlag_NE+0x1a>
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <LL_USART_IsActiveFlag_ORE>:
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d101      	bne.n	8001dcc <LL_USART_IsActiveFlag_ORE+0x18>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <LL_USART_IsActiveFlag_ORE+0x1a>
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	f003 0320 	and.w	r3, r3, #32
 8001dea:	2b20      	cmp	r3, #32
 8001dec:	d101      	bne.n	8001df2 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <LL_USART_IsActiveFlag_TXE_TXFNF>:
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e10:	2b80      	cmp	r3, #128	@ 0x80
 8001e12:	d101      	bne.n	8001e18 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 8001e14:	2301      	movs	r3, #1
 8001e16:	e000      	b.n	8001e1a <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <LL_USART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2202      	movs	r2, #2
 8001e32:	621a      	str	r2, [r3, #32]
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <LL_USART_ClearFlag_NE>:
  * @rmtoll ICR          NECF          LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2204      	movs	r2, #4
 8001e4c:	621a      	str	r2, [r3, #32]
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2208      	movs	r2, #8
 8001e66:	621a      	str	r2, [r3, #32]
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b089      	sub	sp, #36	@ 0x24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	e853 3f00 	ldrex	r3, [r3]
 8001e86:	60bb      	str	r3, [r7, #8]
   return(result);
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	f043 0320 	orr.w	r3, r3, #32
 8001e8e:	61fb      	str	r3, [r7, #28]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69fa      	ldr	r2, [r7, #28]
 8001e94:	61ba      	str	r2, [r7, #24]
 8001e96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e98:	6979      	ldr	r1, [r7, #20]
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	e841 2300 	strex	r3, r2, [r1]
 8001ea0:	613b      	str	r3, [r7, #16]
   return(result);
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1e9      	bne.n	8001e7c <LL_USART_EnableIT_RXNE_RXFNE+0x8>
}
 8001ea8:	bf00      	nop
 8001eaa:	bf00      	nop
 8001eac:	3724      	adds	r7, #36	@ 0x24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <LL_USART_EnableIT_TXE_TXFNF>:
  * @rmtoll CR1         TXEIE_TXFNFIE  LL_USART_EnableIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b089      	sub	sp, #36	@ 0x24
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	e853 3f00 	ldrex	r3, [r3]
 8001ec8:	60bb      	str	r3, [r7, #8]
   return(result);
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ed0:	61fb      	str	r3, [r7, #28]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69fa      	ldr	r2, [r7, #28]
 8001ed6:	61ba      	str	r2, [r7, #24]
 8001ed8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eda:	6979      	ldr	r1, [r7, #20]
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	e841 2300 	strex	r3, r2, [r1]
 8001ee2:	613b      	str	r3, [r7, #16]
   return(result);
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1e9      	bne.n	8001ebe <LL_USART_EnableIT_TXE_TXFNF+0x8>
}
 8001eea:	bf00      	nop
 8001eec:	bf00      	nop
 8001eee:	3724      	adds	r7, #36	@ 0x24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <LL_USART_DisableIT_TXE_TXFNF>:
  * @rmtoll CR1        TXEIE_TXFNFIE  LL_USART_DisableIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b089      	sub	sp, #36	@ 0x24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	e853 3f00 	ldrex	r3, [r3]
 8001f0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f12:	61fb      	str	r3, [r7, #28]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	69fa      	ldr	r2, [r7, #28]
 8001f18:	61ba      	str	r2, [r7, #24]
 8001f1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f1c:	6979      	ldr	r1, [r7, #20]
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	e841 2300 	strex	r3, r2, [r1]
 8001f24:	613b      	str	r3, [r7, #16]
   return(result);
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1e9      	bne.n	8001f00 <LL_USART_DisableIT_TXE_TXFNF+0x8>
}
 8001f2c:	bf00      	nop
 8001f2e:	bf00      	nop
 8001f30:	3724      	adds	r7, #36	@ 0x24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <LL_USART_IsEnabledIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_IsEnabledIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE_RXFNE(const USART_TypeDef *USARTx)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0320 	and.w	r3, r3, #32
 8001f4a:	2b20      	cmp	r3, #32
 8001f4c:	d101      	bne.n	8001f52 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <LL_USART_IsEnabledIT_TXE_TXFNF>:
  * @rmtoll CR1         TXEIE_TXFNFIE  LL_USART_IsEnabledIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE_TXFNF(const USART_TypeDef *USARTx)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE) == (USART_CR1_TXEIE_TXFNFIE)) ? 1UL : 0UL);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f70:	2b80      	cmp	r3, #128	@ 0x80
 8001f72:	d101      	bne.n	8001f78 <LL_USART_IsEnabledIT_TXE_TXFNF+0x18>
 8001f74:	2301      	movs	r3, #1
 8001f76:	e000      	b.n	8001f7a <LL_USART_IsEnabledIT_TXE_TXFNF+0x1a>
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f92:	b2db      	uxtb	r3, r3
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8001fac:	78fa      	ldrb	r2, [r7, #3]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
	...

08001fc0 <UART_Driver_Get>:
/*************************************************
 *                  HELPER                       *
 *************************************************/

static UART_Driver_t *UART_Driver_Get(USART_TypeDef *uart)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < UART_DRIVER_COUNT; i++)
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	e013      	b.n	8001ff6 <UART_Driver_Get+0x36>
    {
        if (uart_drivers[i].uart == uart)
 8001fce:	4a0f      	ldr	r2, [pc, #60]	@ (800200c <UART_Driver_Get+0x4c>)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2164      	movs	r1, #100	@ 0x64
 8001fd4:	fb01 f303 	mul.w	r3, r1, r3
 8001fd8:	4413      	add	r3, r2
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d106      	bne.n	8001ff0 <UART_Driver_Get+0x30>
        {
            return &uart_drivers[i];
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2264      	movs	r2, #100	@ 0x64
 8001fe6:	fb02 f303 	mul.w	r3, r2, r3
 8001fea:	4a08      	ldr	r2, [pc, #32]	@ (800200c <UART_Driver_Get+0x4c>)
 8001fec:	4413      	add	r3, r2
 8001fee:	e006      	b.n	8001ffe <UART_Driver_Get+0x3e>
    for (int i = 0; i < UART_DRIVER_COUNT; i++)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	dde8      	ble.n	8001fce <UART_Driver_Get+0xe>
        }
    }
    return NULL;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	24000008 	.word	0x24000008

08002010 <UART_Driver_Init>:
/*************************************************
 *                    Init                       *
 *************************************************/

Std_ReturnType UART_Driver_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af02      	add	r7, sp, #8
    RingBuffer_Create(&uart_drivers[0].rx_buffer, 1, "UART4_RX", uart4_rx_data, UART6_BUFFER_SIZE);
 8002016:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	4b0a      	ldr	r3, [pc, #40]	@ (8002048 <UART_Driver_Init+0x38>)
 800201e:	4a0b      	ldr	r2, [pc, #44]	@ (800204c <UART_Driver_Init+0x3c>)
 8002020:	2101      	movs	r1, #1
 8002022:	480b      	ldr	r0, [pc, #44]	@ (8002050 <UART_Driver_Init+0x40>)
 8002024:	f007 ffe2 	bl	8009fec <RingBuffer_Create>
    RingBuffer_Create(&uart_drivers[0].tx_buffer, 2, "UART4_TX", uart4_tx_data, UART6_BUFFER_SIZE);
 8002028:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	4b09      	ldr	r3, [pc, #36]	@ (8002054 <UART_Driver_Init+0x44>)
 8002030:	4a09      	ldr	r2, [pc, #36]	@ (8002058 <UART_Driver_Init+0x48>)
 8002032:	2102      	movs	r1, #2
 8002034:	4809      	ldr	r0, [pc, #36]	@ (800205c <UART_Driver_Init+0x4c>)
 8002036:	f007 ffd9 	bl	8009fec <RingBuffer_Create>

//    LL_USART_EnableIT_ERROR(UART4);
    LL_USART_EnableIT_RXNE(UART4);
 800203a:	4809      	ldr	r0, [pc, #36]	@ (8002060 <UART_Driver_Init+0x50>)
 800203c:	f7ff ff1a 	bl	8001e74 <LL_USART_EnableIT_RXNE_RXFNE>

    return E_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	24000204 	.word	0x24000204
 800204c:	08011028 	.word	0x08011028
 8002050:	2400000c 	.word	0x2400000c
 8002054:	24000604 	.word	0x24000604
 8002058:	08011034 	.word	0x08011034
 800205c:	2400003c 	.word	0x2400003c
 8002060:	40004c00 	.word	0x40004c00

08002064 <UART_Driver_Read>:
/*************************************************
 *                     API                       *
 *************************************************/

int UART_Driver_Read(USART_TypeDef *uart)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
    UART_Driver_t *driver = UART_Driver_Get(uart);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff ffa7 	bl	8001fc0 <UART_Driver_Get>
 8002072:	60f8      	str	r0, [r7, #12]
    if (driver == NULL)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d102      	bne.n	8002080 <UART_Driver_Read+0x1c>
        return -1;
 800207a:	f04f 33ff 	mov.w	r3, #4294967295
 800207e:	e00e      	b.n	800209e <UART_Driver_Read+0x3a>

    RingBufElement data;
    if (RingBuffer_Get(&driver->rx_buffer, &data))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	3304      	adds	r3, #4
 8002084:	f107 020b 	add.w	r2, r7, #11
 8002088:	4611      	mov	r1, r2
 800208a:	4618      	mov	r0, r3
 800208c:	f008 f827 	bl	800a0de <RingBuffer_Get>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <UART_Driver_Read+0x36>
    {
        return data;
 8002096:	7afb      	ldrb	r3, [r7, #11]
 8002098:	e001      	b.n	800209e <UART_Driver_Read+0x3a>
    }
    return -1;
 800209a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <UART_Driver_Write>:

void UART_Driver_Write(USART_TypeDef *uart, uint8_t data)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b084      	sub	sp, #16
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
 80020ae:	460b      	mov	r3, r1
 80020b0:	70fb      	strb	r3, [r7, #3]
    UART_Driver_t *driver = UART_Driver_Get(uart);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff ff84 	bl	8001fc0 <UART_Driver_Get>
 80020b8:	60f8      	str	r0, [r7, #12]
    if (driver == NULL)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d011      	beq.n	80020e4 <UART_Driver_Write+0x3e>
        return;

    while (!RingBuffer_Put(&driver->tx_buffer, data))
 80020c0:	bf00      	nop
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	3334      	adds	r3, #52	@ 0x34
 80020c6:	78fa      	ldrb	r2, [r7, #3]
 80020c8:	4611      	mov	r1, r2
 80020ca:	4618      	mov	r0, r3
 80020cc:	f007 ffc1 	bl	800a052 <RingBuffer_Put>
 80020d0:	4603      	mov	r3, r0
 80020d2:	f083 0301 	eor.w	r3, r3, #1
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1f2      	bne.n	80020c2 <UART_Driver_Write+0x1c>
    {
        // vTaskDelay(pdMS_TO_TICKS(1));
    }
    LL_USART_EnableIT_TXE(uart);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff feea 	bl	8001eb6 <LL_USART_EnableIT_TXE_TXFNF>
 80020e2:	e000      	b.n	80020e6 <UART_Driver_Write+0x40>
        return;
 80020e4:	bf00      	nop
}
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <UART_Driver_IsDataAvailable>:
        str++;
    }
}

_Bool UART_Driver_IsDataAvailable(USART_TypeDef *uart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
    UART_Driver_t *driver = UART_Driver_Get(uart);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff ff63 	bl	8001fc0 <UART_Driver_Get>
 80020fa:	60f8      	str	r0, [r7, #12]
    if (driver == NULL)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <UART_Driver_IsDataAvailable+0x1a>
        return false;
 8002102:	2300      	movs	r3, #0
 8002104:	e005      	b.n	8002112 <UART_Driver_IsDataAvailable+0x26>

    return RingBuffer_IsDataAvailable(&driver->rx_buffer);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	3304      	adds	r3, #4
 800210a:	4618      	mov	r0, r3
 800210c:	f008 f828 	bl	800a160 <RingBuffer_IsDataAvailable>
 8002110:	4603      	mov	r3, r0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <UART_Driver_ISR>:
    UART_Driver_FlushRx(uart);
    UART_Driver_FlushTx(uart);
}

void UART_Driver_ISR(USART_TypeDef *uart)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b084      	sub	sp, #16
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
    UART_Driver_t *driver = UART_Driver_Get(uart);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff ff4c 	bl	8001fc0 <UART_Driver_Get>
 8002128:	60f8      	str	r0, [r7, #12]
    if (driver == NULL)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d053      	beq.n	80021d8 <UART_Driver_ISR+0xbe>
        return;

    if ((LL_USART_IsActiveFlag_RXNE(uart) != RESET) &&
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff fe52 	bl	8001dda <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d02c      	beq.n	8002196 <UART_Driver_ISR+0x7c>
        (LL_USART_IsEnabledIT_RXNE(uart) != RESET))
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff fefc 	bl	8001f3a <LL_USART_IsEnabledIT_RXNE_RXFNE>
 8002142:	4603      	mov	r3, r0
    if ((LL_USART_IsActiveFlag_RXNE(uart) != RESET) &&
 8002144:	2b00      	cmp	r3, #0
 8002146:	d026      	beq.n	8002196 <UART_Driver_ISR+0x7c>
    {
        uint8_t data = LL_USART_ReceiveData8(uart);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff ff1c 	bl	8001f86 <LL_USART_ReceiveData8>
 800214e:	4603      	mov	r3, r0
 8002150:	72fb      	strb	r3, [r7, #11]

        if (LL_USART_IsActiveFlag_ORE(uart))
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff fe2e 	bl	8001db4 <LL_USART_IsActiveFlag_ORE>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d002      	beq.n	8002164 <UART_Driver_ISR+0x4a>
        {
            LL_USART_ClearFlag_ORE(uart);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7ff fe7b 	bl	8001e5a <LL_USART_ClearFlag_ORE>
        }
        if (LL_USART_IsActiveFlag_FE(uart))
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff fdff 	bl	8001d68 <LL_USART_IsActiveFlag_FE>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d002      	beq.n	8002176 <UART_Driver_ISR+0x5c>
        {
            LL_USART_ClearFlag_FE(uart);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff fe58 	bl	8001e26 <LL_USART_ClearFlag_FE>
        }
        if (LL_USART_IsActiveFlag_NE(uart))
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff fe09 	bl	8001d8e <LL_USART_IsActiveFlag_NE>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d002      	beq.n	8002188 <UART_Driver_ISR+0x6e>
        {
            LL_USART_ClearFlag_NE(uart);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff fe5c 	bl	8001e40 <LL_USART_ClearFlag_NE>
        }
        RingBuffer_Put(&driver->rx_buffer, data);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	3304      	adds	r3, #4
 800218c:	7afa      	ldrb	r2, [r7, #11]
 800218e:	4611      	mov	r1, r2
 8002190:	4618      	mov	r0, r3
 8002192:	f007 ff5e 	bl	800a052 <RingBuffer_Put>
    }

    if ((LL_USART_IsActiveFlag_TXE(uart) != RESET) &&
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7ff fe32 	bl	8001e00 <LL_USART_IsActiveFlag_TXE_TXFNF>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d01b      	beq.n	80021da <UART_Driver_ISR+0xc0>
        (LL_USART_IsEnabledIT_TXE(uart) != RESET))
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff fedc 	bl	8001f60 <LL_USART_IsEnabledIT_TXE_TXFNF>
 80021a8:	4603      	mov	r3, r0
    if ((LL_USART_IsActiveFlag_TXE(uart) != RESET) &&
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d015      	beq.n	80021da <UART_Driver_ISR+0xc0>
    {
        uint8_t tx_data;
        if (RingBuffer_Get(&driver->tx_buffer, &tx_data))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	3334      	adds	r3, #52	@ 0x34
 80021b2:	f107 020a 	add.w	r2, r7, #10
 80021b6:	4611      	mov	r1, r2
 80021b8:	4618      	mov	r0, r3
 80021ba:	f007 ff90 	bl	800a0de <RingBuffer_Get>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d005      	beq.n	80021d0 <UART_Driver_ISR+0xb6>
        {
            LL_USART_TransmitData8(uart, tx_data);
 80021c4:	7abb      	ldrb	r3, [r7, #10]
 80021c6:	4619      	mov	r1, r3
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7ff fee9 	bl	8001fa0 <LL_USART_TransmitData8>
 80021ce:	e004      	b.n	80021da <UART_Driver_ISR+0xc0>
        }
        else
        {
            LL_USART_DisableIT_TXE(uart);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7ff fe91 	bl	8001ef8 <LL_USART_DisableIT_TXE_TXFNF>
 80021d6:	e000      	b.n	80021da <UART_Driver_ISR+0xc0>
        return;
 80021d8:	bf00      	nop
        }
    }
}
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <CDC_RingBuffer_Init>:
/*************************************************
 *                 Function Define               *
 *************************************************/

void CDC_RingBuffer_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af02      	add	r7, sp, #8
	RingBuffer_Create(&cdcTxRingBuffer, 3, "CDC_TX", cdcTxBuffer, CDC_TX_RING_BUFFER_SIZE);
 80021e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	4b08      	ldr	r3, [pc, #32]	@ (8002210 <CDC_RingBuffer_Init+0x30>)
 80021ee:	4a09      	ldr	r2, [pc, #36]	@ (8002214 <CDC_RingBuffer_Init+0x34>)
 80021f0:	2103      	movs	r1, #3
 80021f2:	4809      	ldr	r0, [pc, #36]	@ (8002218 <CDC_RingBuffer_Init+0x38>)
 80021f4:	f007 fefa 	bl	8009fec <RingBuffer_Create>
    RingBuffer_Create(&cdcRxRingBuffer, 4, "CDC_RX", cdcRxBuffer, CDC_RX_RING_BUFFER_SIZE);
 80021f8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	4b07      	ldr	r3, [pc, #28]	@ (800221c <CDC_RingBuffer_Init+0x3c>)
 8002200:	4a07      	ldr	r2, [pc, #28]	@ (8002220 <CDC_RingBuffer_Init+0x40>)
 8002202:	2104      	movs	r1, #4
 8002204:	4807      	ldr	r0, [pc, #28]	@ (8002224 <CDC_RingBuffer_Init+0x44>)
 8002206:	f007 fef1 	bl	8009fec <RingBuffer_Create>
}
 800220a:	bf00      	nop
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	24001234 	.word	0x24001234
 8002214:	08011040 	.word	0x08011040
 8002218:	24001a34 	.word	0x24001a34
 800221c:	24000a04 	.word	0x24000a04
 8002220:	08011048 	.word	0x08011048
 8002224:	24001204 	.word	0x24001204

08002228 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800222c:	f3bf 8f4f 	dsb	sy
}
 8002230:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002232:	4b06      	ldr	r3, [pc, #24]	@ (800224c <__NVIC_SystemReset+0x24>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800223a:	4904      	ldr	r1, [pc, #16]	@ (800224c <__NVIC_SystemReset+0x24>)
 800223c:	4b04      	ldr	r3, [pc, #16]	@ (8002250 <__NVIC_SystemReset+0x28>)
 800223e:	4313      	orrs	r3, r2
 8002240:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002242:	f3bf 8f4f 	dsb	sy
}
 8002246:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002248:	bf00      	nop
 800224a:	e7fd      	b.n	8002248 <__NVIC_SystemReset+0x20>
 800224c:	e000ed00 	.word	0xe000ed00
 8002250:	05fa0004 	.word	0x05fa0004

08002254 <CMD_Clear_CLI>:

/*************************************************
 *             Command List Function             *
 *************************************************/

static void CMD_Clear_CLI(EmbeddedCli *cli, char *args, void *context) {
 8002254:	b580      	push	{r7, lr}
 8002256:	b088      	sub	sp, #32
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
    char buffer[10];
    snprintf(buffer, sizeof(buffer), "\33[2J");
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	4a07      	ldr	r2, [pc, #28]	@ (8002284 <CMD_Clear_CLI+0x30>)
 8002266:	210a      	movs	r1, #10
 8002268:	4618      	mov	r0, r3
 800226a:	f00d fd45 	bl	800fcf8 <sniprintf>
    embeddedCliPrint(cli, buffer);
 800226e:	f107 0314 	add.w	r3, r7, #20
 8002272:	4619      	mov	r1, r3
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f000 fd15 	bl	8002ca4 <embeddedCliPrint>
}
 800227a:	bf00      	nop
 800227c:	3720      	adds	r7, #32
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	08011180 	.word	0x08011180

08002288 <CMD_Reset>:

static void CMD_Reset(EmbeddedCli *cli, char *args, void *context) {
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
	NVIC_SystemReset();
 8002294:	f7ff ffc8 	bl	8002228 <__NVIC_SystemReset>

08002298 <CMD_Ping>:
    embeddedCliPrint(cli, "");
}

static void CMD_Ping(EmbeddedCli *cli, char *args, void *context) {
 8002298:	b580      	push	{r7, lr}
 800229a:	b09c      	sub	sp, #112	@ 0x70
 800229c:	af02      	add	r7, sp, #8
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
	(void) context;

    uint16_t tok_count = embeddedCliGetTokenCount(args);
 80022a4:	68b8      	ldr	r0, [r7, #8]
 80022a6:	f000 fdf5 	bl	8002e94 <embeddedCliGetTokenCount>
 80022aa:	4603      	mov	r3, r0
 80022ac:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    if (tok_count < 2) {
 80022b0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d804      	bhi.n	80022c2 <CMD_Ping+0x2a>
        embeddedCliPrint(cli, "Usage: connect <dst> <port>");
 80022b8:	4934      	ldr	r1, [pc, #208]	@ (800238c <CMD_Ping+0xf4>)
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 fcf2 	bl	8002ca4 <embeddedCliPrint>
        return;
 80022c0:	e060      	b.n	8002384 <CMD_Ping+0xec>
    }

    const char *s_dst = embeddedCliGetToken(args, 1);
 80022c2:	2101      	movs	r1, #1
 80022c4:	68b8      	ldr	r0, [r7, #8]
 80022c6:	f000 fdaf 	bl	8002e28 <embeddedCliGetToken>
 80022ca:	6638      	str	r0, [r7, #96]	@ 0x60
    const char *s_port = embeddedCliGetToken(args, 2);
 80022cc:	2102      	movs	r1, #2
 80022ce:	68b8      	ldr	r0, [r7, #8]
 80022d0:	f000 fdaa 	bl	8002e28 <embeddedCliGetToken>
 80022d4:	65f8      	str	r0, [r7, #92]	@ 0x5c

    if (!s_dst || !s_port) {
 80022d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d002      	beq.n	80022e2 <CMD_Ping+0x4a>
 80022dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d104      	bne.n	80022ec <CMD_Ping+0x54>
        embeddedCliPrint(cli, "Usage: connect <dst> <port>");
 80022e2:	492a      	ldr	r1, [pc, #168]	@ (800238c <CMD_Ping+0xf4>)
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f000 fcdd 	bl	8002ca4 <embeddedCliPrint>
        return;
 80022ea:	e04b      	b.n	8002384 <CMD_Ping+0xec>
    }

    long dst_l = strtol(s_dst, NULL, 0);
 80022ec:	2200      	movs	r2, #0
 80022ee:	2100      	movs	r1, #0
 80022f0:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80022f2:	f00d fbc5 	bl	800fa80 <strtol>
 80022f6:	65b8      	str	r0, [r7, #88]	@ 0x58
    long port_l = strtol(s_port, NULL, 0);
 80022f8:	2200      	movs	r2, #0
 80022fa:	2100      	movs	r1, #0
 80022fc:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80022fe:	f00d fbbf 	bl	800fa80 <strtol>
 8002302:	6578      	str	r0, [r7, #84]	@ 0x54

    if (dst_l < 0 || dst_l > 255 || port_l < 0 || port_l > 255) {
 8002304:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002306:	2b00      	cmp	r3, #0
 8002308:	db08      	blt.n	800231c <CMD_Ping+0x84>
 800230a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800230c:	2bff      	cmp	r3, #255	@ 0xff
 800230e:	dc05      	bgt.n	800231c <CMD_Ping+0x84>
 8002310:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002312:	2b00      	cmp	r3, #0
 8002314:	db02      	blt.n	800231c <CMD_Ping+0x84>
 8002316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002318:	2bff      	cmp	r3, #255	@ 0xff
 800231a:	dd04      	ble.n	8002326 <CMD_Ping+0x8e>
        embeddedCliPrint(cli, "Invalid arguments. dst and port: 0..255");
 800231c:	491c      	ldr	r1, [pc, #112]	@ (8002390 <CMD_Ping+0xf8>)
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 fcc0 	bl	8002ca4 <embeddedCliPrint>
        return;
 8002324:	e02e      	b.n	8002384 <CMD_Ping+0xec>
    }

    uint8_t dst = (uint8_t) dst_l;
 8002326:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002328:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    uint8_t port = (uint8_t) port_l;
 800232c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800232e:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

    conn = csp_connect(CSP_PRIO_NORM, dst, port, 1000, CSP_O_NONE);
 8002332:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8002336:	f897 1053 	ldrb.w	r1, [r7, #83]	@ 0x53
 800233a:	2300      	movs	r3, #0
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002342:	2002      	movs	r0, #2
 8002344:	f006 f8d6 	bl	80084f4 <csp_connect>
 8002348:	4603      	mov	r3, r0
 800234a:	4a12      	ldr	r2, [pc, #72]	@ (8002394 <CMD_Ping+0xfc>)
 800234c:	6013      	str	r3, [r2, #0]
    if (conn == NULL) {
 800234e:	4b11      	ldr	r3, [pc, #68]	@ (8002394 <CMD_Ping+0xfc>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d104      	bne.n	8002360 <CMD_Ping+0xc8>
        embeddedCliPrint(cli, "csp_connect: Connection failed (NULL)");
 8002356:	4910      	ldr	r1, [pc, #64]	@ (8002398 <CMD_Ping+0x100>)
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 fca3 	bl	8002ca4 <embeddedCliPrint>
        return;
 800235e:	e011      	b.n	8002384 <CMD_Ping+0xec>
    }

    char out[64];
    snprintf(out, sizeof(out), "Connected to dst=%u port=%u", (unsigned)dst, (unsigned)port);
 8002360:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8002364:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8002368:	f107 0010 	add.w	r0, r7, #16
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	4613      	mov	r3, r2
 8002370:	4a0a      	ldr	r2, [pc, #40]	@ (800239c <CMD_Ping+0x104>)
 8002372:	2140      	movs	r1, #64	@ 0x40
 8002374:	f00d fcc0 	bl	800fcf8 <sniprintf>
    embeddedCliPrint(cli, out);
 8002378:	f107 0310 	add.w	r3, r7, #16
 800237c:	4619      	mov	r1, r3
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f000 fc90 	bl	8002ca4 <embeddedCliPrint>
}
 8002384:	3768      	adds	r7, #104	@ 0x68
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	08011188 	.word	0x08011188
 8002390:	080111a4 	.word	0x080111a4
 8002394:	24001a64 	.word	0x24001a64
 8002398:	080111cc 	.word	0x080111cc
 800239c:	080111f4 	.word	0x080111f4

080023a0 <CMD_Send>:

static void CMD_Send(EmbeddedCli *cli, char *args, void *context) {
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b0c6      	sub	sp, #280	@ 0x118
 80023a4:	af02      	add	r7, sp, #8
 80023a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80023aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80023ae:	6018      	str	r0, [r3, #0]
 80023b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80023b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80023b8:	6019      	str	r1, [r3, #0]
 80023ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80023be:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80023c2:	601a      	str	r2, [r3, #0]
    (void) context;

    uint16_t tok_count = embeddedCliGetTokenCount(args);
 80023c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80023c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80023cc:	6818      	ldr	r0, [r3, #0]
 80023ce:	f000 fd61 	bl	8002e94 <embeddedCliGetTokenCount>
 80023d2:	4603      	mov	r3, r0
 80023d4:	f8a7 3100 	strh.w	r3, [r7, #256]	@ 0x100
    if (tok_count < 3) {
 80023d8:	f8b7 3100 	ldrh.w	r3, [r7, #256]	@ 0x100
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d808      	bhi.n	80023f2 <CMD_Send+0x52>
        embeddedCliPrint(cli, "Usage: csp_send <dst> <port> <message>");
 80023e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80023e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80023e8:	49bc      	ldr	r1, [pc, #752]	@ (80026dc <CMD_Send+0x33c>)
 80023ea:	6818      	ldr	r0, [r3, #0]
 80023ec:	f000 fc5a 	bl	8002ca4 <embeddedCliPrint>
        return;
 80023f0:	e170      	b.n	80026d4 <CMD_Send+0x334>
    }

    const char *s_dst  = embeddedCliGetToken(args, 1);
 80023f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80023f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80023fa:	2101      	movs	r1, #1
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	f000 fd13 	bl	8002e28 <embeddedCliGetToken>
 8002402:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    const char *s_port = embeddedCliGetToken(args, 2);
 8002406:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800240a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800240e:	2102      	movs	r1, #2
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	f000 fd09 	bl	8002e28 <embeddedCliGetToken>
 8002416:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8

    long dst_l  = strtol(s_dst,  NULL, 0);
 800241a:	2200      	movs	r2, #0
 800241c:	2100      	movs	r1, #0
 800241e:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 8002422:	f00d fb2d 	bl	800fa80 <strtol>
 8002426:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
    long port_l = strtol(s_port, NULL, 0);
 800242a:	2200      	movs	r2, #0
 800242c:	2100      	movs	r1, #0
 800242e:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 8002432:	f00d fb25 	bl	800fa80 <strtol>
 8002436:	f8c7 00f0 	str.w	r0, [r7, #240]	@ 0xf0

    if (dst_l < 0 || dst_l > 255 || port_l < 0 || port_l > 255) {
 800243a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800243e:	2b00      	cmp	r3, #0
 8002440:	db0b      	blt.n	800245a <CMD_Send+0xba>
 8002442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002446:	2bff      	cmp	r3, #255	@ 0xff
 8002448:	dc07      	bgt.n	800245a <CMD_Send+0xba>
 800244a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800244e:	2b00      	cmp	r3, #0
 8002450:	db03      	blt.n	800245a <CMD_Send+0xba>
 8002452:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002456:	2bff      	cmp	r3, #255	@ 0xff
 8002458:	dd08      	ble.n	800246c <CMD_Send+0xcc>
        embeddedCliPrint(cli, "Invalid dst/port. Range: 0..255");
 800245a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800245e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002462:	499f      	ldr	r1, [pc, #636]	@ (80026e0 <CMD_Send+0x340>)
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	f000 fc1d 	bl	8002ca4 <embeddedCliPrint>
        return;
 800246a:	e133      	b.n	80026d4 <CMD_Send+0x334>
    }

    uint8_t dst   = (uint8_t) dst_l;
 800246c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002470:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
    uint8_t dport = (uint8_t) port_l;
 8002474:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002478:	f887 30ee 	strb.w	r3, [r7, #238]	@ 0xee

    size_t msg_len = 0;
 800247c:	2300      	movs	r3, #0
 800247e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    for (uint16_t i = 3; i <= tok_count; ++i) {
 8002482:	2303      	movs	r3, #3
 8002484:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
 8002488:	e025      	b.n	80024d6 <CMD_Send+0x136>
        const char *tk = embeddedCliGetToken(args, i);
 800248a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 800248e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002492:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002496:	4611      	mov	r1, r2
 8002498:	6818      	ldr	r0, [r3, #0]
 800249a:	f000 fcc5 	bl	8002e28 <embeddedCliGetToken>
 800249e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
        msg_len += strlen(tk);
 80024a2:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 80024a6:	f7fd ff25 	bl	80002f4 <strlen>
 80024aa:	4602      	mov	r2, r0
 80024ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80024b0:	4413      	add	r3, r2
 80024b2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        if (i != tok_count) msg_len += 1;
 80024b6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 80024ba:	f8b7 3100 	ldrh.w	r3, [r7, #256]	@ 0x100
 80024be:	429a      	cmp	r2, r3
 80024c0:	d004      	beq.n	80024cc <CMD_Send+0x12c>
 80024c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80024c6:	3301      	adds	r3, #1
 80024c8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    for (uint16_t i = 3; i <= tok_count; ++i) {
 80024cc:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 80024d0:	3301      	adds	r3, #1
 80024d2:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
 80024d6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 80024da:	f8b7 3100 	ldrh.w	r3, [r7, #256]	@ 0x100
 80024de:	429a      	cmp	r2, r3
 80024e0:	d9d3      	bls.n	800248a <CMD_Send+0xea>
    }

    if (msg_len == 0) {
 80024e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d108      	bne.n	80024fc <CMD_Send+0x15c>
        embeddedCliPrint(cli, "Empty message");
 80024ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80024ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80024f2:	497c      	ldr	r1, [pc, #496]	@ (80026e4 <CMD_Send+0x344>)
 80024f4:	6818      	ldr	r0, [r3, #0]
 80024f6:	f000 fbd5 	bl	8002ca4 <embeddedCliPrint>
        return;
 80024fa:	e0eb      	b.n	80026d4 <CMD_Send+0x334>
    }

    const uint32_t timeout_ms = 1000;
 80024fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002500:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    csp_conn_t *conn = csp_connect(CSP_PRIO_NORM, dst, dport, timeout_ms, CSP_O_NONE);
 8002504:	f897 20ee 	ldrb.w	r2, [r7, #238]	@ 0xee
 8002508:	f897 10ef 	ldrb.w	r1, [r7, #239]	@ 0xef
 800250c:	2300      	movs	r3, #0
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002514:	2002      	movs	r0, #2
 8002516:	f005 ffed 	bl	80084f4 <csp_connect>
 800251a:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
    if (conn == NULL) {
 800251e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002522:	2b00      	cmp	r3, #0
 8002524:	d108      	bne.n	8002538 <CMD_Send+0x198>
        embeddedCliPrint(cli, "csp_connect failed");
 8002526:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800252a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800252e:	496e      	ldr	r1, [pc, #440]	@ (80026e8 <CMD_Send+0x348>)
 8002530:	6818      	ldr	r0, [r3, #0]
 8002532:	f000 fbb7 	bl	8002ca4 <embeddedCliPrint>
        return;
 8002536:	e0cd      	b.n	80026d4 <CMD_Send+0x334>
    }

    csp_packet_t *pkt = csp_buffer_get(msg_len);
 8002538:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 800253c:	f005 fc36 	bl	8007dac <csp_buffer_get>
 8002540:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
    if (pkt == NULL) {
 8002544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10c      	bne.n	8002566 <CMD_Send+0x1c6>
        csp_close(conn);
 800254c:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 8002550:	f005 ff6b 	bl	800842a <csp_close>
        embeddedCliPrint(cli, "csp_buffer_get failed");
 8002554:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002558:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800255c:	4963      	ldr	r1, [pc, #396]	@ (80026ec <CMD_Send+0x34c>)
 800255e:	6818      	ldr	r0, [r3, #0]
 8002560:	f000 fba0 	bl	8002ca4 <embeddedCliPrint>
        return;
 8002564:	e0b6      	b.n	80026d4 <CMD_Send+0x334>
    }

    size_t off = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    for (uint16_t i = 3; i <= tok_count; ++i) {
 800256c:	2303      	movs	r3, #3
 800256e:	f8a7 3102 	strh.w	r3, [r7, #258]	@ 0x102
 8002572:	e03a      	b.n	80025ea <CMD_Send+0x24a>
        const char *tk = embeddedCliGetToken(args, i);
 8002574:	f8b7 2102 	ldrh.w	r2, [r7, #258]	@ 0x102
 8002578:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800257c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002580:	4611      	mov	r1, r2
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	f000 fc50 	bl	8002e28 <embeddedCliGetToken>
 8002588:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
        size_t l = strlen(tk);
 800258c:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8002590:	f7fd feb0 	bl	80002f4 <strlen>
 8002594:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
        memcpy(&pkt->data[off], tk, l);
 8002598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800259c:	3310      	adds	r3, #16
 800259e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80025a2:	4413      	add	r3, r2
 80025a4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80025a8:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 80025ac:	4618      	mov	r0, r3
 80025ae:	f00d fdb4 	bl	801011a <memcpy>
        off += l;
 80025b2:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80025b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80025ba:	4413      	add	r3, r2
 80025bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        if (i != tok_count) pkt->data[off++] = ' ';
 80025c0:	f8b7 2102 	ldrh.w	r2, [r7, #258]	@ 0x102
 80025c4:	f8b7 3100 	ldrh.w	r3, [r7, #256]	@ 0x100
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d009      	beq.n	80025e0 <CMD_Send+0x240>
 80025cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80025d0:	1c5a      	adds	r2, r3, #1
 80025d2:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 80025d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80025da:	4413      	add	r3, r2
 80025dc:	2220      	movs	r2, #32
 80025de:	741a      	strb	r2, [r3, #16]
    for (uint16_t i = 3; i <= tok_count; ++i) {
 80025e0:	f8b7 3102 	ldrh.w	r3, [r7, #258]	@ 0x102
 80025e4:	3301      	adds	r3, #1
 80025e6:	f8a7 3102 	strh.w	r3, [r7, #258]	@ 0x102
 80025ea:	f8b7 2102 	ldrh.w	r2, [r7, #258]	@ 0x102
 80025ee:	f8b7 3100 	ldrh.w	r3, [r7, #256]	@ 0x100
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d9be      	bls.n	8002574 <CMD_Send+0x1d4>
    }
    pkt->length = (uint16_t) msg_len;
 80025f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002600:	815a      	strh	r2, [r3, #10]

    if (csp_send(conn, pkt, 1000) == CSP_ERR_NONE) {
 8002602:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002606:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 800260a:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 800260e:	f006 fb8b 	bl	8008d28 <csp_send>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d110      	bne.n	800263a <CMD_Send+0x29a>
        csp_buffer_free(pkt);
 8002618:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 800261c:	f005 fc62 	bl	8007ee4 <csp_buffer_free>
        csp_close(conn);
 8002620:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 8002624:	f005 ff01 	bl	800842a <csp_close>
        embeddedCliPrint(cli, "csp_send failed");
 8002628:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800262c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002630:	492f      	ldr	r1, [pc, #188]	@ (80026f0 <CMD_Send+0x350>)
 8002632:	6818      	ldr	r0, [r3, #0]
 8002634:	f000 fb36 	bl	8002ca4 <embeddedCliPrint>
        return;
 8002638:	e04c      	b.n	80026d4 <CMD_Send+0x334>
    }

    csp_packet_t *reply = csp_read(conn, 1000);
 800263a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800263e:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 8002642:	f006 fa67 	bl	8008b14 <csp_read>
 8002646:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
    if (reply) {
 800264a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800264e:	2b00      	cmp	r3, #0
 8002650:	d022      	beq.n	8002698 <CMD_Send+0x2f8>
        char out[128];
        snprintf(out, sizeof(out), "Reply (%u bytes): %.*s", reply->length, reply->length, reply->data);
 8002652:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002656:	895b      	ldrh	r3, [r3, #10]
 8002658:	4619      	mov	r1, r3
 800265a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800265e:	895b      	ldrh	r3, [r3, #10]
 8002660:	461a      	mov	r2, r3
 8002662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002666:	3310      	adds	r3, #16
 8002668:	f107 0010 	add.w	r0, r7, #16
 800266c:	9301      	str	r3, [sp, #4]
 800266e:	9200      	str	r2, [sp, #0]
 8002670:	460b      	mov	r3, r1
 8002672:	4a20      	ldr	r2, [pc, #128]	@ (80026f4 <CMD_Send+0x354>)
 8002674:	2180      	movs	r1, #128	@ 0x80
 8002676:	f00d fb3f 	bl	800fcf8 <sniprintf>
        embeddedCliPrint(cli, out);
 800267a:	f107 0210 	add.w	r2, r7, #16
 800267e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002682:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002686:	4611      	mov	r1, r2
 8002688:	6818      	ldr	r0, [r3, #0]
 800268a:	f000 fb0b 	bl	8002ca4 <embeddedCliPrint>
        csp_buffer_free(reply);
 800268e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8002692:	f005 fc27 	bl	8007ee4 <csp_buffer_free>
 8002696:	e007      	b.n	80026a8 <CMD_Send+0x308>
    } else {
        embeddedCliPrint(cli, "No reply received (timeout)");
 8002698:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800269c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80026a0:	4915      	ldr	r1, [pc, #84]	@ (80026f8 <CMD_Send+0x358>)
 80026a2:	6818      	ldr	r0, [r3, #0]
 80026a4:	f000 fafe 	bl	8002ca4 <embeddedCliPrint>
    }

    csp_close(conn);
 80026a8:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 80026ac:	f005 febd 	bl	800842a <csp_close>

    char out2[64];
    snprintf(out2, sizeof(out2), "Sent %u bytes", (unsigned)msg_len);
 80026b0:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 80026b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80026b8:	4a10      	ldr	r2, [pc, #64]	@ (80026fc <CMD_Send+0x35c>)
 80026ba:	2140      	movs	r1, #64	@ 0x40
 80026bc:	f00d fb1c 	bl	800fcf8 <sniprintf>
    embeddedCliPrint(cli, out2);
 80026c0:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 80026c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80026c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80026cc:	4611      	mov	r1, r2
 80026ce:	6818      	ldr	r0, [r3, #0]
 80026d0:	f000 fae8 	bl	8002ca4 <embeddedCliPrint>
}
 80026d4:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	08011210 	.word	0x08011210
 80026e0:	08011238 	.word	0x08011238
 80026e4:	08011258 	.word	0x08011258
 80026e8:	08011268 	.word	0x08011268
 80026ec:	0801127c 	.word	0x0801127c
 80026f0:	08011294 	.word	0x08011294
 80026f4:	080112a4 	.word	0x080112a4
 80026f8:	080112bc 	.word	0x080112bc
 80026fc:	080112d8 	.word	0x080112d8

08002700 <CMD_Close>:


static void CMD_Close(EmbeddedCli *cli, char *args, void *context){
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
	csp_close(conn);
 800270c:	4b06      	ldr	r3, [pc, #24]	@ (8002728 <CMD_Close+0x28>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4618      	mov	r0, r3
 8002712:	f005 fe8a 	bl	800842a <csp_close>
	embeddedCliPrint(cli, "Close CSP");
 8002716:	4905      	ldr	r1, [pc, #20]	@ (800272c <CMD_Close+0x2c>)
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f000 fac3 	bl	8002ca4 <embeddedCliPrint>
}
 800271e:	bf00      	nop
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	24001a64 	.word	0x24001a64
 800272c:	080112e8 	.word	0x080112e8

08002730 <CMD_Get_Temperature>:

static void CMD_Get_Temperature(EmbeddedCli *cli, char *args, void *context){
 8002730:	b580      	push	{r7, lr}
 8002732:	b09c      	sub	sp, #112	@ 0x70
 8002734:	af02      	add	r7, sp, #8
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
	(void) context;

    uint16_t tok_count = embeddedCliGetTokenCount(args);
 800273c:	68b8      	ldr	r0, [r7, #8]
 800273e:	f000 fba9 	bl	8002e94 <embeddedCliGetTokenCount>
 8002742:	4603      	mov	r3, r0
 8002744:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    if (tok_count < 1) {
 8002748:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800274c:	2b00      	cmp	r3, #0
 800274e:	d104      	bne.n	800275a <CMD_Get_Temperature+0x2a>
        embeddedCliPrint(cli, "Usage: get_temperature <index>");
 8002750:	4927      	ldr	r1, [pc, #156]	@ (80027f0 <CMD_Get_Temperature+0xc0>)
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 faa6 	bl	8002ca4 <embeddedCliPrint>
        return;
 8002758:	e047      	b.n	80027ea <CMD_Get_Temperature+0xba>
    }

    const char *s_index = embeddedCliGetToken(args, 1);
 800275a:	2101      	movs	r1, #1
 800275c:	68b8      	ldr	r0, [r7, #8]
 800275e:	f000 fb63 	bl	8002e28 <embeddedCliGetToken>
 8002762:	6638      	str	r0, [r7, #96]	@ 0x60
    long index = strtol(s_index, NULL, 0);
 8002764:	2200      	movs	r2, #0
 8002766:	2100      	movs	r1, #0
 8002768:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800276a:	f00d f989 	bl	800fa80 <strtol>
 800276e:	65f8      	str	r0, [r7, #92]	@ 0x5c
    if (index < 1 || index > 3) {
 8002770:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002772:	2b00      	cmp	r3, #0
 8002774:	dd02      	ble.n	800277c <CMD_Get_Temperature+0x4c>
 8002776:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002778:	2b03      	cmp	r3, #3
 800277a:	dd04      	ble.n	8002786 <CMD_Get_Temperature+0x56>
        embeddedCliPrint(cli, "Index must be 1, 2, or 3\r\n");
 800277c:	491d      	ldr	r1, [pc, #116]	@ (80027f4 <CMD_Get_Temperature+0xc4>)
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 fa90 	bl	8002ca4 <embeddedCliPrint>
        return;
 8002784:	e031      	b.n	80027ea <CMD_Get_Temperature+0xba>
    }

    uint16_t raw = ADC1_ReadIndex((uint8_t)index);
 8002786:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002788:	b2db      	uxtb	r3, r3
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff faa8 	bl	8001ce0 <ADC1_ReadIndex>
 8002790:	4603      	mov	r3, r0
 8002792:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (raw == 0xFFFF) {
 8002796:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800279a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800279e:	4293      	cmp	r3, r2
 80027a0:	d104      	bne.n	80027ac <CMD_Get_Temperature+0x7c>
        embeddedCliPrint(cli, "Invalid ADC channel index\r\n");
 80027a2:	4915      	ldr	r1, [pc, #84]	@ (80027f8 <CMD_Get_Temperature+0xc8>)
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f000 fa7d 	bl	8002ca4 <embeddedCliPrint>
        return;
 80027aa:	e01e      	b.n	80027ea <CMD_Get_Temperature+0xba>
    }

    int32_t temperature = ((raw* 3300)- (500* 65535))/ 65535 ;
 80027ac:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80027b0:	f640 42e4 	movw	r2, #3300	@ 0xce4
 80027b4:	fb03 f202 	mul.w	r2, r3, r2
 80027b8:	4b10      	ldr	r3, [pc, #64]	@ (80027fc <CMD_Get_Temperature+0xcc>)
 80027ba:	4413      	add	r3, r2
 80027bc:	4a10      	ldr	r2, [pc, #64]	@ (8002800 <CMD_Get_Temperature+0xd0>)
 80027be:	fb82 1203 	smull	r1, r2, r2, r3
 80027c2:	441a      	add	r2, r3
 80027c4:	13d2      	asrs	r2, r2, #15
 80027c6:	17db      	asrs	r3, r3, #31
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	657b      	str	r3, [r7, #84]	@ 0x54

    char buf[64];
    snprintf(buf, sizeof(buf), "board_temp_%ld: temperature=%ld C\r\n", index, temperature);
 80027cc:	f107 0014 	add.w	r0, r7, #20
 80027d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027d6:	4a0b      	ldr	r2, [pc, #44]	@ (8002804 <CMD_Get_Temperature+0xd4>)
 80027d8:	2140      	movs	r1, #64	@ 0x40
 80027da:	f00d fa8d 	bl	800fcf8 <sniprintf>
    embeddedCliPrint(cli, buf);
 80027de:	f107 0314 	add.w	r3, r7, #20
 80027e2:	4619      	mov	r1, r3
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 fa5d 	bl	8002ca4 <embeddedCliPrint>

}
 80027ea:	3768      	adds	r7, #104	@ 0x68
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	080112f4 	.word	0x080112f4
 80027f4:	08011314 	.word	0x08011314
 80027f8:	08011330 	.word	0x08011330
 80027fc:	fe0c01f4 	.word	0xfe0c01f4
 8002800:	80008001 	.word	0x80008001
 8002804:	0801134c 	.word	0x0801134c

08002808 <CMD_Get_Current>:

static void CMD_Get_Current(EmbeddedCli *cli, char *args, void *context){
 8002808:	b580      	push	{r7, lr}
 800280a:	b096      	sub	sp, #88	@ 0x58
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]

	uint16_t raw = ADC2_Read();
 8002814:	f7ff fa42 	bl	8001c9c <ADC2_Read>
 8002818:	4603      	mov	r3, r0
 800281a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
	uint32_t current = ((raw*33)/65535)* 549;
 800281e:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8002822:	4613      	mov	r3, r2
 8002824:	015b      	lsls	r3, r3, #5
 8002826:	4413      	add	r3, r2
 8002828:	4a0e      	ldr	r2, [pc, #56]	@ (8002864 <CMD_Get_Current+0x5c>)
 800282a:	fb82 1203 	smull	r1, r2, r2, r3
 800282e:	441a      	add	r2, r3
 8002830:	13d2      	asrs	r2, r2, #15
 8002832:	17db      	asrs	r3, r3, #31
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	f240 2225 	movw	r2, #549	@ 0x225
 800283a:	fb02 f303 	mul.w	r3, r2, r3
 800283e:	653b      	str	r3, [r7, #80]	@ 0x50

    char buf[64];
    snprintf(buf, sizeof(buf), "board_temp_current: current=%ld mA\r\n", current);
 8002840:	f107 0010 	add.w	r0, r7, #16
 8002844:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002846:	4a08      	ldr	r2, [pc, #32]	@ (8002868 <CMD_Get_Current+0x60>)
 8002848:	2140      	movs	r1, #64	@ 0x40
 800284a:	f00d fa55 	bl	800fcf8 <sniprintf>
    embeddedCliPrint(cli, buf);
 800284e:	f107 0310 	add.w	r3, r7, #16
 8002852:	4619      	mov	r1, r3
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 fa25 	bl	8002ca4 <embeddedCliPrint>
}
 800285a:	bf00      	nop
 800285c:	3758      	adds	r7, #88	@ 0x58
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	80008001 	.word	0x80008001
 8002868:	08011370 	.word	0x08011370

0800286c <getCliStaticBindings>:
 *************************************************/

/*************************************************
 *                Getter - Helper                *
 *************************************************/
const CliCommandBinding *getCliStaticBindings(void) {
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
    return cliStaticBindings_internal;
 8002870:	4b02      	ldr	r3, [pc, #8]	@ (800287c <getCliStaticBindings+0x10>)
}
 8002872:	4618      	mov	r0, r3
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	080122b4 	.word	0x080122b4

08002880 <getCliStaticBindingCount>:

uint16_t getCliStaticBindingCount(void) {
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
    return sizeof(cliStaticBindings_internal) / sizeof(cliStaticBindings_internal[0]);
 8002884:	2308      	movs	r3, #8
}
 8002886:	4618      	mov	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <writeCharTocli_COMM_UART>:
//    while (CDC_Transmit_HS(&b, 1) == USBD_BUSY) {
//    	vTaskDelay(1);
//    }
//}

static void writeCharTocli_COMM_UART(EmbeddedCli *embeddedCli, char c) {
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	460b      	mov	r3, r1
 800289a:	70fb      	strb	r3, [r7, #3]
    uint8_t b = c;
 800289c:	78fb      	ldrb	r3, [r7, #3]
 800289e:	73fb      	strb	r3, [r7, #15]
    UART_Driver_Write(UART4, b);
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
 80028a2:	4619      	mov	r1, r3
 80028a4:	4803      	ldr	r0, [pc, #12]	@ (80028b4 <writeCharTocli_COMM_UART+0x24>)
 80028a6:	f7ff fbfe 	bl	80020a6 <UART_Driver_Write>
}
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40004c00 	.word	0x40004c00

080028b8 <SystemCLI_Init>:

Std_ReturnType SystemCLI_Init() {
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
//        return E_ERROR;
//    }
//    cli_COMM_USB->writeChar = writeCharTocli_COMM_USB;

    // Initialize COMM UART CLi
    EmbeddedCliConfig *COMM_UART_config = embeddedCliDefaultConfig();
 80028be:	f000 f853 	bl	8002968 <embeddedCliDefaultConfig>
 80028c2:	6078      	str	r0, [r7, #4]
    COMM_UART_config->cliBuffer = COMM_UART_cliStaticBuffer;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a1d      	ldr	r2, [pc, #116]	@ (800293c <SystemCLI_Init+0x84>)
 80028c8:	60da      	str	r2, [r3, #12]
    COMM_UART_config->cliBufferSize = COMM_UART_CLI_BUFFER_SIZE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80028d0:	821a      	strh	r2, [r3, #16]
    COMM_UART_config->rxBufferSize = CLI_RX_BUFFER_SIZE;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2210      	movs	r2, #16
 80028d6:	809a      	strh	r2, [r3, #4]
    COMM_UART_config->cmdBufferSize = CLI_CMD_BUFFER_SIZE;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2240      	movs	r2, #64	@ 0x40
 80028dc:	80da      	strh	r2, [r3, #6]
    COMM_UART_config->historyBufferSize = CLI_HISTORY_SIZE;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2280      	movs	r2, #128	@ 0x80
 80028e2:	811a      	strh	r2, [r3, #8]
    COMM_UART_config->maxBindingCount = CLI_MAX_BINDING_COUNT;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2220      	movs	r2, #32
 80028e8:	815a      	strh	r2, [r3, #10]
    COMM_UART_config->enableAutoComplete = CLI_AUTO_COMPLETE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	749a      	strb	r2, [r3, #18]
    COMM_UART_config->invitation = CLI_INITATION_COMM_UART;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a13      	ldr	r2, [pc, #76]	@ (8002940 <SystemCLI_Init+0x88>)
 80028f4:	601a      	str	r2, [r3, #0]
    COMM_UART_config->staticBindings = getCliStaticBindings();
 80028f6:	f7ff ffb9 	bl	800286c <getCliStaticBindings>
 80028fa:	4602      	mov	r2, r0
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	615a      	str	r2, [r3, #20]
    COMM_UART_config->staticBindingCount = getCliStaticBindingCount();
 8002900:	f7ff ffbe 	bl	8002880 <getCliStaticBindingCount>
 8002904:	4603      	mov	r3, r0
 8002906:	461a      	mov	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	831a      	strh	r2, [r3, #24]

    cli_COMM_UART = embeddedCliNew(COMM_UART_config);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f886 	bl	8002a1e <embeddedCliNew>
 8002912:	4603      	mov	r3, r0
 8002914:	4a0b      	ldr	r2, [pc, #44]	@ (8002944 <SystemCLI_Init+0x8c>)
 8002916:	6013      	str	r3, [r2, #0]
    if (cli_COMM_UART == NULL) {
 8002918:	4b0a      	ldr	r3, [pc, #40]	@ (8002944 <SystemCLI_Init+0x8c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <SystemCLI_Init+0x6c>
        return E_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e007      	b.n	8002934 <SystemCLI_Init+0x7c>
    }
    cli_COMM_UART->writeChar = writeCharTocli_COMM_UART;
 8002924:	4b07      	ldr	r3, [pc, #28]	@ (8002944 <SystemCLI_Init+0x8c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a07      	ldr	r2, [pc, #28]	@ (8002948 <SystemCLI_Init+0x90>)
 800292a:	601a      	str	r2, [r3, #0]

//	// Init the CLI with blank screen
//	onClearCLI(cli, NULL, NULL);

    // CLI has now been initialized, set bool to true to enable interrupts.
    cliIsReady = true;
 800292c:	4b07      	ldr	r3, [pc, #28]	@ (800294c <SystemCLI_Init+0x94>)
 800292e:	2201      	movs	r2, #1
 8002930:	701a      	strb	r2, [r3, #0]

    return E_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	24001a68 	.word	0x24001a68
 8002940:	08011398 	.word	0x08011398
 8002944:	24002268 	.word	0x24002268
 8002948:	08002891 	.word	0x08002891
 800294c:	2400226c 	.word	0x2400226c

08002950 <get_COMM_UART_CliPointer>:

//EmbeddedCli *get_COMM_USB_CliPointer() {
//    return cli_COMM_USB;
//}

EmbeddedCli *get_COMM_UART_CliPointer() {
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
    return cli_COMM_UART;
 8002954:	4b03      	ldr	r3, [pc, #12]	@ (8002964 <get_COMM_UART_CliPointer+0x14>)
 8002956:	681b      	ldr	r3, [r3, #0]
}
 8002958:	4618      	mov	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	24002268 	.word	0x24002268

08002968 <embeddedCliDefaultConfig>:
 * @param pos - token position (counted from 1)
 * @return index of first char of specified token
 */
static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos);

EmbeddedCliConfig *embeddedCliDefaultConfig(void) {
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
    defaultConfig.rxBufferSize = 64;
 800296c:	4b11      	ldr	r3, [pc, #68]	@ (80029b4 <embeddedCliDefaultConfig+0x4c>)
 800296e:	2240      	movs	r2, #64	@ 0x40
 8002970:	809a      	strh	r2, [r3, #4]
    defaultConfig.cmdBufferSize = 64;
 8002972:	4b10      	ldr	r3, [pc, #64]	@ (80029b4 <embeddedCliDefaultConfig+0x4c>)
 8002974:	2240      	movs	r2, #64	@ 0x40
 8002976:	80da      	strh	r2, [r3, #6]
    defaultConfig.historyBufferSize = 128;
 8002978:	4b0e      	ldr	r3, [pc, #56]	@ (80029b4 <embeddedCliDefaultConfig+0x4c>)
 800297a:	2280      	movs	r2, #128	@ 0x80
 800297c:	811a      	strh	r2, [r3, #8]
    defaultConfig.cliBuffer = NULL;
 800297e:	4b0d      	ldr	r3, [pc, #52]	@ (80029b4 <embeddedCliDefaultConfig+0x4c>)
 8002980:	2200      	movs	r2, #0
 8002982:	60da      	str	r2, [r3, #12]
    defaultConfig.cliBufferSize = 0;
 8002984:	4b0b      	ldr	r3, [pc, #44]	@ (80029b4 <embeddedCliDefaultConfig+0x4c>)
 8002986:	2200      	movs	r2, #0
 8002988:	821a      	strh	r2, [r3, #16]
    defaultConfig.maxBindingCount = 8;
 800298a:	4b0a      	ldr	r3, [pc, #40]	@ (80029b4 <embeddedCliDefaultConfig+0x4c>)
 800298c:	2208      	movs	r2, #8
 800298e:	815a      	strh	r2, [r3, #10]
    defaultConfig.enableAutoComplete = true;
 8002990:	4b08      	ldr	r3, [pc, #32]	@ (80029b4 <embeddedCliDefaultConfig+0x4c>)
 8002992:	2201      	movs	r2, #1
 8002994:	749a      	strb	r2, [r3, #18]
    defaultConfig.invitation = "> ";
 8002996:	4b07      	ldr	r3, [pc, #28]	@ (80029b4 <embeddedCliDefaultConfig+0x4c>)
 8002998:	4a07      	ldr	r2, [pc, #28]	@ (80029b8 <embeddedCliDefaultConfig+0x50>)
 800299a:	601a      	str	r2, [r3, #0]
    defaultConfig.staticBindingCount = 0;
 800299c:	4b05      	ldr	r3, [pc, #20]	@ (80029b4 <embeddedCliDefaultConfig+0x4c>)
 800299e:	2200      	movs	r2, #0
 80029a0:	831a      	strh	r2, [r3, #24]
    defaultConfig.staticBindings = NULL;
 80029a2:	4b04      	ldr	r3, [pc, #16]	@ (80029b4 <embeddedCliDefaultConfig+0x4c>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	615a      	str	r2, [r3, #20]
    return &defaultConfig;
 80029a8:	4b02      	ldr	r3, [pc, #8]	@ (80029b4 <embeddedCliDefaultConfig+0x4c>)
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	24002270 	.word	0x24002270
 80029b8:	080113c4 	.word	0x080113c4

080029bc <embeddedCliRequiredSize>:

uint16_t embeddedCliRequiredSize(EmbeddedCliConfig *config) {
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
    uint16_t bindingCount = (config->staticBindings == NULL) ?
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d102      	bne.n	80029d2 <embeddedCliRequiredSize+0x16>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	895b      	ldrh	r3, [r3, #10]
 80029d0:	e000      	b.n	80029d4 <embeddedCliRequiredSize+0x18>
 80029d2:	2300      	movs	r3, #0
 80029d4:	81fb      	strh	r3, [r7, #14]
                            (config->maxBindingCount) : 0;
    return (CLI_UINT_SIZE * (
        BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli)) +
        BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl)) +
        BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	889b      	ldrh	r3, [r3, #4]
 80029da:	3303      	adds	r3, #3
 80029dc:	089a      	lsrs	r2, r3, #2
        BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	88db      	ldrh	r3, [r3, #6]
 80029e2:	3303      	adds	r3, #3
 80029e4:	089b      	lsrs	r3, r3, #2
        BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 80029e6:	441a      	add	r2, r3
        BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	891b      	ldrh	r3, [r3, #8]
 80029ec:	3303      	adds	r3, #3
 80029ee:	089b      	lsrs	r3, r3, #2
        BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 80029f0:	18d1      	adds	r1, r2, r3
        BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 80029f2:	89fa      	ldrh	r2, [r7, #14]
 80029f4:	4613      	mov	r3, r2
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	4413      	add	r3, r2
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	3303      	adds	r3, #3
 80029fe:	089b      	lsrs	r3, r3, #2
        BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 8002a00:	18ca      	adds	r2, r1, r3
        BYTES_TO_CLI_UINTS(bindingCount * sizeof(uint8_t))
 8002a02:	89fb      	ldrh	r3, [r7, #14]
 8002a04:	3303      	adds	r3, #3
 8002a06:	089b      	lsrs	r3, r3, #2
        BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 8002a08:	4413      	add	r3, r2
 8002a0a:	3312      	adds	r3, #18
    return (CLI_UINT_SIZE * (
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	b29b      	uxth	r3, r3
    ));
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <embeddedCliNew>:

EmbeddedCli *embeddedCliNew(EmbeddedCliConfig *config) {
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b088      	sub	sp, #32
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
    EmbeddedCli *cli = NULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	61fb      	str	r3, [r7, #28]

    size_t totalSize = embeddedCliRequiredSize(config);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff ffc6 	bl	80029bc <embeddedCliRequiredSize>
 8002a30:	4603      	mov	r3, r0
 8002a32:	61bb      	str	r3, [r7, #24]

    _Bool allocated = false;
 8002a34:	2300      	movs	r3, #0
 8002a36:	75fb      	strb	r3, [r7, #23]

    if (config->cliBuffer == NULL || config->cliBufferSize < totalSize) {
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <embeddedCliNew+0x2e>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	8a1b      	ldrh	r3, [r3, #16]
 8002a44:	461a      	mov	r2, r3
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d901      	bls.n	8002a50 <embeddedCliNew+0x32>
        return NULL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	e071      	b.n	8002b34 <embeddedCliNew+0x116>
    }

    CLI_UINT *buf = config->cliBuffer;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	613b      	str	r3, [r7, #16]

    memset(buf, 0, totalSize);
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	2100      	movs	r1, #0
 8002a5a:	6938      	ldr	r0, [r7, #16]
 8002a5c:	f00d faa0 	bl	800ffa0 <memset>

    cli = (EmbeddedCli *) buf;
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	61fb      	str	r3, [r7, #28]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli));
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	3310      	adds	r3, #16
 8002a68:	613b      	str	r3, [r7, #16]

    cli->_impl = (EmbeddedCliImpl *) buf;
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	60da      	str	r2, [r3, #12]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl));
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	3338      	adds	r3, #56	@ 0x38
 8002a74:	613b      	str	r3, [r7, #16]

    PREPARE_IMPL(cli);
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	60fb      	str	r3, [r7, #12]
    impl->rxBuffer.buf = (char *) buf;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	611a      	str	r2, [r3, #16]
    buf += BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	889b      	ldrh	r3, [r3, #4]
 8002a86:	3303      	adds	r3, #3
 8002a88:	f023 0303 	bic.w	r3, r3, #3
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	4413      	add	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]

    impl->cmdBuffer = (char *) buf;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	61da      	str	r2, [r3, #28]
    buf += BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	88db      	ldrh	r3, [r3, #6]
 8002a9c:	3303      	adds	r3, #3
 8002a9e:	f023 0303 	bic.w	r3, r3, #3
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]


    impl->bindings = (CliCommandBinding *) config->staticBindings;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	695a      	ldr	r2, [r3, #20]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	625a      	str	r2, [r3, #36]	@ 0x24
    impl->bindingsCount = config->staticBindingCount;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	8b1a      	ldrh	r2, [r3, #24]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    impl->maxBindingsCount = config->staticBindingCount;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	8b1a      	ldrh	r2, [r3, #24]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	85da      	strh	r2, [r3, #46]	@ 0x2e


    impl->history.buf = (char *) buf;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	605a      	str	r2, [r3, #4]
    impl->history.bufferSize = config->historyBufferSize;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	891a      	ldrh	r2, [r3, #8]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	811a      	strh	r2, [r3, #8]

    if (allocated)
 8002ace:	7dfb      	ldrb	r3, [r7, #23]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <embeddedCliNew+0xc8>
        SET_FLAG(impl->flags, CLI_FLAG_ALLOCATED);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002ada:	f043 0304 	orr.w	r3, r3, #4
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    if (config->enableAutoComplete)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	7c9b      	ldrb	r3, [r3, #18]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d008      	beq.n	8002b00 <embeddedCliNew+0xe2>
        SET_FLAG(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002af4:	f043 0320 	orr.w	r3, r3, #32
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    impl->rxBuffer.size = config->rxBufferSize;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	889a      	ldrh	r2, [r3, #4]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	831a      	strh	r2, [r3, #24]
    impl->rxBuffer.front = 0;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	829a      	strh	r2, [r3, #20]
    impl->rxBuffer.back = 0;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	82da      	strh	r2, [r3, #22]
    impl->cmdMaxSize = config->cmdBufferSize;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	88da      	ldrh	r2, [r3, #6]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	845a      	strh	r2, [r3, #34]	@ 0x22
    impl->lastChar = '\0';
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    impl->invitation = config->invitation;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	601a      	str	r2, [r3, #0]
    impl->cursorPos = 0;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	869a      	strh	r2, [r3, #52]	@ 0x34

    return cli;
 8002b32:	69fb      	ldr	r3, [r7, #28]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3720      	adds	r7, #32
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <embeddedCliReceiveChar>:

void embeddedCliReceiveChar(EmbeddedCli *cli, char c) {
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	60fb      	str	r3, [r7, #12]

    if (!fifoBufPush(&impl->rxBuffer, c)) {
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	3310      	adds	r3, #16
 8002b52:	78fa      	ldrb	r2, [r7, #3]
 8002b54:	4611      	mov	r1, r2
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 ff8a 	bl	8003a70 <fifoBufPush>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	f083 0301 	eor.w	r3, r3, #1
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d008      	beq.n	8002b7a <embeddedCliReceiveChar+0x3e>
        SET_FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002b6e:	f043 0301 	orr.w	r3, r3, #1
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    }
}
 8002b7a:	bf00      	nop
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <embeddedCliProcess>:

void embeddedCliProcess(EmbeddedCli *cli) {
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b084      	sub	sp, #16
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
    if (cli->writeChar == NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 8083 	beq.w	8002c9a <embeddedCliProcess+0x118>
        return;

    PREPARE_IMPL(cli);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	60fb      	str	r3, [r7, #12]


    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_INIT_COMPLETE)) {
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d155      	bne.n	8002c54 <embeddedCliProcess+0xd2>
        SET_FLAG(impl->flags, CLI_FLAG_INIT_COMPLETE);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002bae:	f043 0302 	orr.w	r3, r3, #2
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        writeToOutput(cli, impl->invitation);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 fe7e 	bl	80038c2 <writeToOutput>
    }

    while (fifoBufAvailable(&impl->rxBuffer)) {
 8002bc6:	e045      	b.n	8002c54 <embeddedCliProcess+0xd2>
        char c = fifoBufPop(&impl->rxBuffer);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	3310      	adds	r3, #16
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 ff27 	bl	8003a20 <fifoBufPop>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	72fb      	strb	r3, [r7, #11]

        if (IS_FLAG_SET(impl->flags, CLI_FLAG_ESCAPE_MODE)) {
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002bdc:	f003 0308 	and.w	r3, r3, #8
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <embeddedCliProcess+0x6e>
            onEscapedInput(cli, c);
 8002be4:	7afb      	ldrb	r3, [r7, #11]
 8002be6:	4619      	mov	r1, r3
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f9f5 	bl	8002fd8 <onEscapedInput>
 8002bee:	e02a      	b.n	8002c46 <embeddedCliProcess+0xc4>
        } else if (impl->lastChar == 0x1B && c == '[') {
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002bf6:	2b1b      	cmp	r3, #27
 8002bf8:	d10c      	bne.n	8002c14 <embeddedCliProcess+0x92>
 8002bfa:	7afb      	ldrb	r3, [r7, #11]
 8002bfc:	2b5b      	cmp	r3, #91	@ 0x5b
 8002bfe:	d109      	bne.n	8002c14 <embeddedCliProcess+0x92>
            //enter escape mode
            SET_FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002c06:	f043 0308 	orr.w	r3, r3, #8
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8002c12:	e018      	b.n	8002c46 <embeddedCliProcess+0xc4>
        } else if (isControlChar(c)) {
 8002c14:	7afb      	ldrb	r3, [r7, #11]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 feaa 	bl	8003970 <isControlChar>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d005      	beq.n	8002c2e <embeddedCliProcess+0xac>
            onControlInput(cli, c);
 8002c22:	7afb      	ldrb	r3, [r7, #11]
 8002c24:	4619      	mov	r1, r3
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 fa86 	bl	8003138 <onControlInput>
 8002c2c:	e00b      	b.n	8002c46 <embeddedCliProcess+0xc4>
        } else if (isDisplayableChar(c)) {
 8002c2e:	7afb      	ldrb	r3, [r7, #11]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f000 febd 	bl	80039b0 <isDisplayableChar>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d004      	beq.n	8002c46 <embeddedCliProcess+0xc4>
            onCharInput(cli, c);
 8002c3c:	7afb      	ldrb	r3, [r7, #11]
 8002c3e:	4619      	mov	r1, r3
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 fa27 	bl	8003094 <onCharInput>
        }

        printLiveAutocompletion(cli);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 fd12 	bl	8003670 <printLiveAutocompletion>

        impl->lastChar = c;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	7afa      	ldrb	r2, [r7, #11]
 8002c50:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    while (fifoBufAvailable(&impl->rxBuffer)) {
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	3310      	adds	r3, #16
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 fec0 	bl	80039de <fifoBufAvailable>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1b1      	bne.n	8002bc8 <embeddedCliProcess+0x46>
    }

    // discard unfinished command if overflow happened
    if (IS_FLAG_SET(impl->flags, CLI_FLAG_OVERFLOW)) {
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d014      	beq.n	8002c9c <embeddedCliProcess+0x11a>
        impl->cmdSize = 0;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	8c12      	ldrh	r2, [r2, #32]
 8002c80:	4413      	add	r3, r2
 8002c82:	2200      	movs	r2, #0
 8002c84:	701a      	strb	r2, [r3, #0]
        UNSET_U8FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002c8c:	f023 0301 	bic.w	r3, r3, #1
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8002c98:	e000      	b.n	8002c9c <embeddedCliProcess+0x11a>
        return;
 8002c9a:	bf00      	nop
    }
}
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <embeddedCliPrint>:

void embeddedCliPrint(EmbeddedCli *cli, const char *string) {
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
    if (cli->writeChar == NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d03e      	beq.n	8002d34 <embeddedCliPrint+0x90>
        return;

    PREPARE_IMPL(cli);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	60fb      	str	r3, [r7, #12]

    // Save cursor position
    uint16_t cursorPosSave = impl->cursorPos;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002cc0:	817b      	strh	r3, [r7, #10]

    // remove chars for autocompletion and live command
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002cc8:	f003 0310 	and.w	r3, r3, #16
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d102      	bne.n	8002cd6 <embeddedCliPrint+0x32>
        clearCurrentLine(cli);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 fdc1 	bl	8003858 <clearCurrentLine>

    // Restore cursor position
    impl->cursorPos = cursorPosSave;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	897a      	ldrh	r2, [r7, #10]
 8002cda:	869a      	strh	r2, [r3, #52]	@ 0x34

    // print provided string
    writeToOutput(cli, string);
 8002cdc:	6839      	ldr	r1, [r7, #0]
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 fdef 	bl	80038c2 <writeToOutput>
    writeToOutput(cli, lineBreak);
 8002ce4:	4b15      	ldr	r3, [pc, #84]	@ (8002d3c <embeddedCliPrint+0x98>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4619      	mov	r1, r3
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 fde9 	bl	80038c2 <writeToOutput>

    // print current command back to screen
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT)) {
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002cf6:	f003 0310 	and.w	r3, r3, #16
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d11b      	bne.n	8002d36 <embeddedCliPrint+0x92>
        writeToOutput(cli, impl->invitation);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4619      	mov	r1, r3
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 fddc 	bl	80038c2 <writeToOutput>
        writeToOutput(cli, impl->cmdBuffer);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	4619      	mov	r1, r3
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 fdd6 	bl	80038c2 <writeToOutput>
        impl->inputLineLength = impl->cmdSize;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8c1a      	ldrh	r2, [r3, #32]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	861a      	strh	r2, [r3, #48]	@ 0x30
        moveCursor(cli, impl->cursorPos, CURSOR_DIRECTION_BACKWARD);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002d22:	2200      	movs	r2, #0
 8002d24:	4619      	mov	r1, r3
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 fdec 	bl	8003904 <moveCursor>

        printLiveAutocompletion(cli);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 fc9f 	bl	8003670 <printLiveAutocompletion>
 8002d32:	e000      	b.n	8002d36 <embeddedCliPrint+0x92>
        return;
 8002d34:	bf00      	nop
    }
}
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	2400006c 	.word	0x2400006c

08002d40 <embeddedCliTokenizeArgs>:

void embeddedCliTokenizeArgs(char *args) {
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b088      	sub	sp, #32
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
    if (args == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d066      	beq.n	8002e1c <embeddedCliTokenizeArgs+0xdc>
        return;

    // for now only space, but can add more later
    const char *separators = " ";
 8002d4e:	4b35      	ldr	r3, [pc, #212]	@ (8002e24 <embeddedCliTokenizeArgs+0xe4>)
 8002d50:	60fb      	str	r3, [r7, #12]

    // indicates that arg is quoted so separators are copied as is
    bool quotesEnabled = false;
 8002d52:	2300      	movs	r3, #0
 8002d54:	77fb      	strb	r3, [r7, #31]
    // indicates that previous char was a slash, so next char is copied as is
    bool escapeActivated = false;
 8002d56:	2300      	movs	r3, #0
 8002d58:	77bb      	strb	r3, [r7, #30]
    int insertPos = 0;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61bb      	str	r3, [r7, #24]

    int i = 0;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	617b      	str	r3, [r7, #20]
    char currentChar;
    while ((currentChar = args[i]) != '\0') {
 8002d62:	e047      	b.n	8002df4 <embeddedCliTokenizeArgs+0xb4>
        ++i;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	3301      	adds	r3, #1
 8002d68:	617b      	str	r3, [r7, #20]

        if (escapeActivated) {
 8002d6a:	7fbb      	ldrb	r3, [r7, #30]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d002      	beq.n	8002d76 <embeddedCliTokenizeArgs+0x36>
            escapeActivated = false;
 8002d70:	2300      	movs	r3, #0
 8002d72:	77bb      	strb	r3, [r7, #30]
 8002d74:	e029      	b.n	8002dca <embeddedCliTokenizeArgs+0x8a>
        } else if (currentChar == '\\') {
 8002d76:	7cfb      	ldrb	r3, [r7, #19]
 8002d78:	2b5c      	cmp	r3, #92	@ 0x5c
 8002d7a:	d102      	bne.n	8002d82 <embeddedCliTokenizeArgs+0x42>
            escapeActivated = true;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	77bb      	strb	r3, [r7, #30]
            continue;
 8002d80:	e038      	b.n	8002df4 <embeddedCliTokenizeArgs+0xb4>
        } else if (currentChar == '"') {
 8002d82:	7cfb      	ldrb	r3, [r7, #19]
 8002d84:	2b22      	cmp	r3, #34	@ 0x22
 8002d86:	d110      	bne.n	8002daa <embeddedCliTokenizeArgs+0x6a>
            quotesEnabled = !quotesEnabled;
 8002d88:	7ffb      	ldrb	r3, [r7, #31]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	bf14      	ite	ne
 8002d8e:	2301      	movne	r3, #1
 8002d90:	2300      	moveq	r3, #0
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	f083 0301 	eor.w	r3, r3, #1
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	77fb      	strb	r3, [r7, #31]
 8002d9c:	7ffb      	ldrb	r3, [r7, #31]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	77fb      	strb	r3, [r7, #31]
            currentChar = '\0';
 8002da4:	2300      	movs	r3, #0
 8002da6:	74fb      	strb	r3, [r7, #19]
 8002da8:	e00f      	b.n	8002dca <embeddedCliTokenizeArgs+0x8a>
        } else if (!quotesEnabled && strchr(separators, currentChar) != NULL) {
 8002daa:	7ffb      	ldrb	r3, [r7, #31]
 8002dac:	f083 0301 	eor.w	r3, r3, #1
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d009      	beq.n	8002dca <embeddedCliTokenizeArgs+0x8a>
 8002db6:	7cfb      	ldrb	r3, [r7, #19]
 8002db8:	4619      	mov	r1, r3
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f00d f8f8 	bl	800ffb0 <strchr>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <embeddedCliTokenizeArgs+0x8a>
            currentChar = '\0';
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	74fb      	strb	r3, [r7, #19]
        }

        // null chars are only copied once and not copied to the beginning
        if (currentChar != '\0' || (insertPos > 0 && args[insertPos - 1] != '\0')) {
 8002dca:	7cfb      	ldrb	r3, [r7, #19]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d109      	bne.n	8002de4 <embeddedCliTokenizeArgs+0xa4>
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	dd0e      	ble.n	8002df4 <embeddedCliTokenizeArgs+0xb4>
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	4413      	add	r3, r2
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d007      	beq.n	8002df4 <embeddedCliTokenizeArgs+0xb4>
            args[insertPos] = currentChar;
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	4413      	add	r3, r2
 8002dea:	7cfa      	ldrb	r2, [r7, #19]
 8002dec:	701a      	strb	r2, [r3, #0]
            ++insertPos;
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	3301      	adds	r3, #1
 8002df2:	61bb      	str	r3, [r7, #24]
    while ((currentChar = args[i]) != '\0') {
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	4413      	add	r3, r2
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	74fb      	strb	r3, [r7, #19]
 8002dfe:	7cfb      	ldrb	r3, [r7, #19]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1af      	bne.n	8002d64 <embeddedCliTokenizeArgs+0x24>
        }
    }

    // make args double null-terminated source buffer must be big enough to contain extra spaces
    args[insertPos] = '\0';
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	4413      	add	r3, r2
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	701a      	strb	r2, [r3, #0]
    args[insertPos + 1] = '\0';
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	3301      	adds	r3, #1
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	4413      	add	r3, r2
 8002e16:	2200      	movs	r2, #0
 8002e18:	701a      	strb	r2, [r3, #0]
 8002e1a:	e000      	b.n	8002e1e <embeddedCliTokenizeArgs+0xde>
        return;
 8002e1c:	bf00      	nop
}
 8002e1e:	3720      	adds	r7, #32
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	080113c8 	.word	0x080113c8

08002e28 <embeddedCliGetToken>:

const char *embeddedCliGetToken(const char *tokenizedStr, uint16_t pos) {
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 8002e34:	887b      	ldrh	r3, [r7, #2]
 8002e36:	4619      	mov	r1, r3
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 ff20 	bl	8003c7e <getTokenPosition>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 8002e42:	89fb      	ldrh	r3, [r7, #14]
 8002e44:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d003      	beq.n	8002e54 <embeddedCliGetToken+0x2c>
        return &tokenizedStr[i];
 8002e4c:	89fb      	ldrh	r3, [r7, #14]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	4413      	add	r3, r2
 8002e52:	e000      	b.n	8002e56 <embeddedCliGetToken+0x2e>
    else
        return NULL;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <embeddedCliGetTokenVariable>:

char *embeddedCliGetTokenVariable(char *tokenizedStr, uint16_t pos) {
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b084      	sub	sp, #16
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	460b      	mov	r3, r1
 8002e68:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 8002e6a:	887b      	ldrh	r3, [r7, #2]
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 ff05 	bl	8003c7e <getTokenPosition>
 8002e74:	4603      	mov	r3, r0
 8002e76:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 8002e78:	89fb      	ldrh	r3, [r7, #14]
 8002e7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d003      	beq.n	8002e8a <embeddedCliGetTokenVariable+0x2c>
        return &tokenizedStr[i];
 8002e82:	89fb      	ldrh	r3, [r7, #14]
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	4413      	add	r3, r2
 8002e88:	e000      	b.n	8002e8c <embeddedCliGetTokenVariable+0x2e>
    else
        return NULL;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <embeddedCliGetTokenCount>:
    }

    return 0;
}

uint16_t embeddedCliGetTokenCount(const char *tokenizedStr) {
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
    if (tokenizedStr == NULL || tokenizedStr[0] == '\0')
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <embeddedCliGetTokenCount+0x16>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <embeddedCliGetTokenCount+0x1a>
        return 0;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	e019      	b.n	8002ee2 <embeddedCliGetTokenCount+0x4e>

    int i = 0;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60fb      	str	r3, [r7, #12]
    uint16_t tokenCount = 1;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	817b      	strh	r3, [r7, #10]
    while (true) {
        if (tokenizedStr[i] == '\0') {
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	4413      	add	r3, r2
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d109      	bne.n	8002ed6 <embeddedCliGetTokenCount+0x42>
            if (tokenizedStr[i + 1] == '\0')
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	4413      	add	r3, r2
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d006      	beq.n	8002ede <embeddedCliGetTokenCount+0x4a>
                break;
            ++tokenCount;
 8002ed0:	897b      	ldrh	r3, [r7, #10]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	817b      	strh	r3, [r7, #10]
        }
        ++i;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	60fb      	str	r3, [r7, #12]
        if (tokenizedStr[i] == '\0') {
 8002edc:	e7eb      	b.n	8002eb6 <embeddedCliGetTokenCount+0x22>
                break;
 8002ede:	bf00      	nop
    }

    return tokenCount;
 8002ee0:	897b      	ldrh	r3, [r7, #10]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
	...

08002ef0 <navigateHistory>:

static void navigateHistory(EmbeddedCli *cli, bool navigateUp) {
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	613b      	str	r3, [r7, #16]
    if (impl->history.itemsCount == 0 ||
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	899b      	ldrh	r3, [r3, #12]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d05f      	beq.n	8002fca <navigateHistory+0xda>
 8002f0a:	78fb      	ldrb	r3, [r7, #3]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d005      	beq.n	8002f1c <navigateHistory+0x2c>
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	895a      	ldrh	r2, [r3, #10]
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	899b      	ldrh	r3, [r3, #12]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d056      	beq.n	8002fca <navigateHistory+0xda>
        (!navigateUp && impl->history.current == 0))
 8002f1c:	78fb      	ldrb	r3, [r7, #3]
 8002f1e:	f083 0301 	eor.w	r3, r3, #1
 8002f22:	b2db      	uxtb	r3, r3
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d003      	beq.n	8002f30 <navigateHistory+0x40>
        (!navigateUp && impl->history.current == 0))
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	895b      	ldrh	r3, [r3, #10]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d04c      	beq.n	8002fca <navigateHistory+0xda>
        return;

    clearCurrentLine(cli);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 fc91 	bl	8003858 <clearCurrentLine>

    writeToOutput(cli, impl->invitation);
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 fcc0 	bl	80038c2 <writeToOutput>

    if (navigateUp)
 8002f42:	78fb      	ldrb	r3, [r7, #3]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d006      	beq.n	8002f56 <navigateHistory+0x66>
        ++impl->history.current;
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	895b      	ldrh	r3, [r3, #10]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	815a      	strh	r2, [r3, #10]
 8002f54:	e005      	b.n	8002f62 <navigateHistory+0x72>
    else
        --impl->history.current;
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	895b      	ldrh	r3, [r3, #10]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	815a      	strh	r2, [r3, #10]

    const char *item = historyGet(&impl->history, impl->history.current);
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1d1a      	adds	r2, r3, #4
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	895b      	ldrh	r3, [r3, #10]
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	f000 fe0d 	bl	8003b8c <historyGet>
 8002f72:	6178      	str	r0, [r7, #20]
    // simple way to handle empty command the same way as others
    if (item == NULL)
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <navigateHistory+0x8e>
        item = "";
 8002f7a:	4b16      	ldr	r3, [pc, #88]	@ (8002fd4 <navigateHistory+0xe4>)
 8002f7c:	617b      	str	r3, [r7, #20]
    uint16_t len = (uint16_t) strlen(item);
 8002f7e:	6978      	ldr	r0, [r7, #20]
 8002f80:	f7fd f9b8 	bl	80002f4 <strlen>
 8002f84:	4603      	mov	r3, r0
 8002f86:	81fb      	strh	r3, [r7, #14]
    memcpy(impl->cmdBuffer, item, len);
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	89fa      	ldrh	r2, [r7, #14]
 8002f8e:	6979      	ldr	r1, [r7, #20]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f00d f8c2 	bl	801011a <memcpy>
    impl->cmdBuffer[len] = '\0';
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	69da      	ldr	r2, [r3, #28]
 8002f9a:	89fb      	ldrh	r3, [r7, #14]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	701a      	strb	r2, [r3, #0]
    impl->cmdSize = len;
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	89fa      	ldrh	r2, [r7, #14]
 8002fa6:	841a      	strh	r2, [r3, #32]

    writeToOutput(cli, impl->cmdBuffer);
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	4619      	mov	r1, r3
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 fc87 	bl	80038c2 <writeToOutput>
    impl->inputLineLength = impl->cmdSize;
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	8c1a      	ldrh	r2, [r3, #32]
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	861a      	strh	r2, [r3, #48]	@ 0x30
    impl->cursorPos = 0;
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	869a      	strh	r2, [r3, #52]	@ 0x34

    printLiveAutocompletion(cli);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 fb54 	bl	8003670 <printLiveAutocompletion>
 8002fc8:	e000      	b.n	8002fcc <navigateHistory+0xdc>
        return;
 8002fca:	bf00      	nop
}
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	080113cc 	.word	0x080113cc

08002fd8 <onEscapedInput>:

static void onEscapedInput(EmbeddedCli *cli, char c) {
 8002fd8:	b590      	push	{r4, r7, lr}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	60fb      	str	r3, [r7, #12]

    if (c >= 64 && c <= 126) {
 8002fea:	78fb      	ldrb	r3, [r7, #3]
 8002fec:	2b3f      	cmp	r3, #63	@ 0x3f
 8002fee:	d948      	bls.n	8003082 <onEscapedInput+0xaa>
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	2b7e      	cmp	r3, #126	@ 0x7e
 8002ff4:	d845      	bhi.n	8003082 <onEscapedInput+0xaa>
        // handle escape sequence
        UNSET_U8FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002ffc:	f023 0308 	bic.w	r3, r3, #8
 8003000:	b2da      	uxtb	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

        if (c == 'A' || c == 'B') {
 8003008:	78fb      	ldrb	r3, [r7, #3]
 800300a:	2b41      	cmp	r3, #65	@ 0x41
 800300c:	d002      	beq.n	8003014 <onEscapedInput+0x3c>
 800300e:	78fb      	ldrb	r3, [r7, #3]
 8003010:	2b42      	cmp	r3, #66	@ 0x42
 8003012:	d109      	bne.n	8003028 <onEscapedInput+0x50>
            // treat \e[..A as cursor up and \e[..B as cursor down
            // there might be extra chars between [ and A/B, just ignore them
            navigateHistory(cli, c == 'A');
 8003014:	78fb      	ldrb	r3, [r7, #3]
 8003016:	2b41      	cmp	r3, #65	@ 0x41
 8003018:	bf0c      	ite	eq
 800301a:	2301      	moveq	r3, #1
 800301c:	2300      	movne	r3, #0
 800301e:	b2db      	uxtb	r3, r3
 8003020:	4619      	mov	r1, r3
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7ff ff64 	bl	8002ef0 <navigateHistory>
        }

        if (c == 'C' && impl->cursorPos > 0) {
 8003028:	78fb      	ldrb	r3, [r7, #3]
 800302a:	2b43      	cmp	r3, #67	@ 0x43
 800302c:	d10f      	bne.n	800304e <onEscapedInput+0x76>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00b      	beq.n	800304e <onEscapedInput+0x76>
            impl->cursorPos--;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800303a:	3b01      	subs	r3, #1
 800303c:	b29a      	uxth	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	869a      	strh	r2, [r3, #52]	@ 0x34
            writeToOutput(cli, escSeqCursorRight);
 8003042:	4b12      	ldr	r3, [pc, #72]	@ (800308c <onEscapedInput+0xb4>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4619      	mov	r1, r3
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 fc3a 	bl	80038c2 <writeToOutput>
        }

        if (c == 'D' && impl->cursorPos < strlen(impl->cmdBuffer)) {
 800304e:	78fb      	ldrb	r3, [r7, #3]
 8003050:	2b44      	cmp	r3, #68	@ 0x44
 8003052:	d116      	bne.n	8003082 <onEscapedInput+0xaa>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8003058:	461c      	mov	r4, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	4618      	mov	r0, r3
 8003060:	f7fd f948 	bl	80002f4 <strlen>
 8003064:	4603      	mov	r3, r0
 8003066:	429c      	cmp	r4, r3
 8003068:	d20b      	bcs.n	8003082 <onEscapedInput+0xaa>
            impl->cursorPos++;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800306e:	3301      	adds	r3, #1
 8003070:	b29a      	uxth	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	869a      	strh	r2, [r3, #52]	@ 0x34
            writeToOutput(cli, escSeqCursorLeft);
 8003076:	4b06      	ldr	r3, [pc, #24]	@ (8003090 <onEscapedInput+0xb8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4619      	mov	r1, r3
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 fc20 	bl	80038c2 <writeToOutput>
        }
    }
}
 8003082:	bf00      	nop
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	bd90      	pop	{r4, r7, pc}
 800308a:	bf00      	nop
 800308c:	24000070 	.word	0x24000070
 8003090:	24000074 	.word	0x24000074

08003094 <onCharInput>:

static void onCharInput(EmbeddedCli *cli, char c) {
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	460b      	mov	r3, r1
 800309e:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	60fb      	str	r3, [r7, #12]

    // have to reserve two extra chars for command ending (used in tokenization)
    if (impl->cmdSize + 2 >= impl->cmdMaxSize)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8c1b      	ldrh	r3, [r3, #32]
 80030aa:	3302      	adds	r3, #2
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 80030b0:	4293      	cmp	r3, r2
 80030b2:	da3b      	bge.n	800312c <onCharInput+0x98>
        return;

    size_t insertPos = strlen(impl->cmdBuffer) - impl->cursorPos;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	69db      	ldr	r3, [r3, #28]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7fd f91b 	bl	80002f4 <strlen>
 80030be:	4602      	mov	r2, r0
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	60bb      	str	r3, [r7, #8]

    memmove(&impl->cmdBuffer[insertPos + 1], &impl->cmdBuffer[insertPos], impl->cursorPos + 1);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	69da      	ldr	r2, [r3, #28]
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	3301      	adds	r3, #1
 80030d0:	18d0      	adds	r0, r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	69da      	ldr	r2, [r3, #28]
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	18d1      	adds	r1, r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80030de:	3301      	adds	r3, #1
 80030e0:	461a      	mov	r2, r3
 80030e2:	f00c ff43 	bl	800ff6c <memmove>

    ++impl->cmdSize;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8c1b      	ldrh	r3, [r3, #32]
 80030ea:	3301      	adds	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	841a      	strh	r2, [r3, #32]
    ++impl->inputLineLength;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80030f6:	3301      	adds	r3, #1
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	861a      	strh	r2, [r3, #48]	@ 0x30
    impl->cmdBuffer[insertPos] = c;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	69da      	ldr	r2, [r3, #28]
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	4413      	add	r3, r2
 8003106:	78fa      	ldrb	r2, [r7, #3]
 8003108:	701a      	strb	r2, [r3, #0]

    if (impl->cursorPos > 0)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800310e:	2b00      	cmp	r3, #0
 8003110:	d005      	beq.n	800311e <onCharInput+0x8a>
        writeToOutput(cli, escSeqInsertChar); // Insert Character
 8003112:	4b08      	ldr	r3, [pc, #32]	@ (8003134 <onCharInput+0xa0>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4619      	mov	r1, r3
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 fbd2 	bl	80038c2 <writeToOutput>

    cli->writeChar(cli, c);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	4611      	mov	r1, r2
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	4798      	blx	r3
 800312a:	e000      	b.n	800312e <onCharInput+0x9a>
        return;
 800312c:	bf00      	nop
}
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	24000080 	.word	0x24000080

08003138 <onControlInput>:

static void onControlInput(EmbeddedCli *cli, char c) {
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	460b      	mov	r3, r1
 8003142:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	60fb      	str	r3, [r7, #12]

    // process \r\n and \n\r as single \r\n command
    if ((impl->lastChar == '\r' && c == '\n') ||
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003150:	2b0d      	cmp	r3, #13
 8003152:	d102      	bne.n	800315a <onControlInput+0x22>
 8003154:	78fb      	ldrb	r3, [r7, #3]
 8003156:	2b0a      	cmp	r3, #10
 8003158:	d078      	beq.n	800324c <onControlInput+0x114>
        (impl->lastChar == '\n' && c == '\r'))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
    if ((impl->lastChar == '\r' && c == '\n') ||
 8003160:	2b0a      	cmp	r3, #10
 8003162:	d102      	bne.n	800316a <onControlInput+0x32>
        (impl->lastChar == '\n' && c == '\r'))
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	2b0d      	cmp	r3, #13
 8003168:	d070      	beq.n	800324c <onControlInput+0x114>
        return;

    if (c == '\r' || c == '\n') {
 800316a:	78fb      	ldrb	r3, [r7, #3]
 800316c:	2b0d      	cmp	r3, #13
 800316e:	d002      	beq.n	8003176 <onControlInput+0x3e>
 8003170:	78fb      	ldrb	r3, [r7, #3]
 8003172:	2b0a      	cmp	r3, #10
 8003174:	d129      	bne.n	80031ca <onControlInput+0x92>
        // try to autocomplete command and then process it
        onAutocompleteRequest(cli);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 fadc 	bl	8003734 <onAutocompleteRequest>

        writeToOutput(cli, lineBreak);
 800317c:	4b35      	ldr	r3, [pc, #212]	@ (8003254 <onControlInput+0x11c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4619      	mov	r1, r3
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 fb9d 	bl	80038c2 <writeToOutput>

        if (impl->cmdSize > 0)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8c1b      	ldrh	r3, [r3, #32]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d002      	beq.n	8003196 <onControlInput+0x5e>
            parseCommand(cli);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 f865 	bl	8003260 <parseCommand>
        impl->cmdSize = 0;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	69db      	ldr	r3, [r3, #28]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	8c12      	ldrh	r2, [r2, #32]
 80031a4:	4413      	add	r3, r2
 80031a6:	2200      	movs	r2, #0
 80031a8:	701a      	strb	r2, [r3, #0]
        impl->inputLineLength = 0;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	861a      	strh	r2, [r3, #48]	@ 0x30
        impl->history.current = 0;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	815a      	strh	r2, [r3, #10]
        impl->cursorPos = 0;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	869a      	strh	r2, [r3, #52]	@ 0x34

        writeToOutput(cli, impl->invitation);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4619      	mov	r1, r3
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 fb7d 	bl	80038c2 <writeToOutput>
 80031c8:	e041      	b.n	800324e <onControlInput+0x116>
    } else if ((c == '\b' || c == 0x7F) && ((impl->cmdSize - impl->cursorPos) > 0)) {
 80031ca:	78fb      	ldrb	r3, [r7, #3]
 80031cc:	2b08      	cmp	r3, #8
 80031ce:	d002      	beq.n	80031d6 <onControlInput+0x9e>
 80031d0:	78fb      	ldrb	r3, [r7, #3]
 80031d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80031d4:	d133      	bne.n	800323e <onControlInput+0x106>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8c1b      	ldrh	r3, [r3, #32]
 80031da:	461a      	mov	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	dd2b      	ble.n	800323e <onControlInput+0x106>
        // remove char from screen
        writeToOutput(cli, escSeqCursorLeft); // Move cursor to left
 80031e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003258 <onControlInput+0x120>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4619      	mov	r1, r3
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 fb68 	bl	80038c2 <writeToOutput>
        writeToOutput(cli, escSeqDeleteChar); // And remove character
 80031f2:	4b1a      	ldr	r3, [pc, #104]	@ (800325c <onControlInput+0x124>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4619      	mov	r1, r3
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 fb62 	bl	80038c2 <writeToOutput>
        // and from buffer
        size_t insertPos = strlen(impl->cmdBuffer) - impl->cursorPos;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	4618      	mov	r0, r3
 8003204:	f7fd f876 	bl	80002f4 <strlen>
 8003208:	4602      	mov	r2, r0
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	60bb      	str	r3, [r7, #8]
        memmove(&impl->cmdBuffer[insertPos - 1], &impl->cmdBuffer[insertPos], impl->cursorPos + 1);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	69da      	ldr	r2, [r3, #28]
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	3b01      	subs	r3, #1
 800321a:	18d0      	adds	r0, r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	69da      	ldr	r2, [r3, #28]
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	18d1      	adds	r1, r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8003228:	3301      	adds	r3, #1
 800322a:	461a      	mov	r2, r3
 800322c:	f00c fe9e 	bl	800ff6c <memmove>
        --impl->cmdSize;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8c1b      	ldrh	r3, [r3, #32]
 8003234:	3b01      	subs	r3, #1
 8003236:	b29a      	uxth	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	841a      	strh	r2, [r3, #32]
    } else if ((c == '\b' || c == 0x7F) && ((impl->cmdSize - impl->cursorPos) > 0)) {
 800323c:	e007      	b.n	800324e <onControlInput+0x116>
    } else if (c == '\t') {
 800323e:	78fb      	ldrb	r3, [r7, #3]
 8003240:	2b09      	cmp	r3, #9
 8003242:	d104      	bne.n	800324e <onControlInput+0x116>
        onAutocompleteRequest(cli);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 fa75 	bl	8003734 <onAutocompleteRequest>
 800324a:	e000      	b.n	800324e <onControlInput+0x116>
        return;
 800324c:	bf00      	nop
    }

}
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	2400006c 	.word	0x2400006c
 8003258:	24000074 	.word	0x24000074
 800325c:	24000084 	.word	0x24000084

08003260 <parseCommand>:

static void parseCommand(EmbeddedCli *cli) {
 8003260:	b590      	push	{r4, r7, lr}
 8003262:	b08f      	sub	sp, #60	@ 0x3c
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	61bb      	str	r3, [r7, #24]

    bool isEmpty = true;
 800326e:	2301      	movs	r3, #1
 8003270:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    for (int i = 0; i < impl->cmdSize; ++i) {
 8003274:	2300      	movs	r3, #0
 8003276:	633b      	str	r3, [r7, #48]	@ 0x30
 8003278:	e00d      	b.n	8003296 <parseCommand+0x36>
        if (impl->cmdBuffer[i] != ' ') {
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	69da      	ldr	r2, [r3, #28]
 800327e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003280:	4413      	add	r3, r2
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	2b20      	cmp	r3, #32
 8003286:	d003      	beq.n	8003290 <parseCommand+0x30>
            isEmpty = false;
 8003288:	2300      	movs	r3, #0
 800328a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            break;
 800328e:	e008      	b.n	80032a2 <parseCommand+0x42>
    for (int i = 0; i < impl->cmdSize; ++i) {
 8003290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003292:	3301      	adds	r3, #1
 8003294:	633b      	str	r3, [r7, #48]	@ 0x30
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	8c1b      	ldrh	r3, [r3, #32]
 800329a:	461a      	mov	r2, r3
 800329c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800329e:	4293      	cmp	r3, r2
 80032a0:	dbeb      	blt.n	800327a <parseCommand+0x1a>
        }
    }
    // do not process empty commands
    if (isEmpty)
 80032a2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f040 80fa 	bne.w	80034a0 <parseCommand+0x240>
        return;
    // push command to history before buffer is modified
    historyPut(&impl->history, impl->cmdBuffer);
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	1d1a      	adds	r2, r3, #4
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	4619      	mov	r1, r3
 80032b6:	4610      	mov	r0, r2
 80032b8:	f000 fc04 	bl	8003ac4 <historyPut>

    char *cmdName = NULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    char *cmdArgs = NULL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    bool nameFinished = false;
 80032c4:	2300      	movs	r3, #0
 80032c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // find command name and command args inside command buffer
    for (int i = 0; i < impl->cmdSize; ++i) {
 80032ca:	2300      	movs	r3, #0
 80032cc:	623b      	str	r3, [r7, #32]
 80032ce:	e030      	b.n	8003332 <parseCommand+0xd2>
        char c = impl->cmdBuffer[i];
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	69da      	ldr	r2, [r3, #28]
 80032d4:	6a3b      	ldr	r3, [r7, #32]
 80032d6:	4413      	add	r3, r2
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	75fb      	strb	r3, [r7, #23]

        if (c == ' ') {
 80032dc:	7dfb      	ldrb	r3, [r7, #23]
 80032de:	2b20      	cmp	r3, #32
 80032e0:	d10f      	bne.n	8003302 <parseCommand+0xa2>
            // all spaces between name and args are filled with zeros
            // so name is a correct null-terminated string
            if (cmdArgs == NULL)
 80032e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d105      	bne.n	80032f4 <parseCommand+0x94>
                impl->cmdBuffer[i] = '\0';
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	69da      	ldr	r2, [r3, #28]
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	4413      	add	r3, r2
 80032f0:	2200      	movs	r2, #0
 80032f2:	701a      	strb	r2, [r3, #0]
            if (cmdName != NULL)
 80032f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d018      	beq.n	800332c <parseCommand+0xcc>
                nameFinished = true;
 80032fa:	2301      	movs	r3, #1
 80032fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003300:	e014      	b.n	800332c <parseCommand+0xcc>

        } else if (cmdName == NULL) {
 8003302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003304:	2b00      	cmp	r3, #0
 8003306:	d105      	bne.n	8003314 <parseCommand+0xb4>
            cmdName = &impl->cmdBuffer[i];
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	69da      	ldr	r2, [r3, #28]
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	4413      	add	r3, r2
 8003310:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003312:	e00b      	b.n	800332c <parseCommand+0xcc>
        } else if (cmdArgs == NULL && nameFinished) {
 8003314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003316:	2b00      	cmp	r3, #0
 8003318:	d108      	bne.n	800332c <parseCommand+0xcc>
 800331a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800331e:	2b00      	cmp	r3, #0
 8003320:	d004      	beq.n	800332c <parseCommand+0xcc>
            cmdArgs = &impl->cmdBuffer[i];
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	69da      	ldr	r2, [r3, #28]
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	4413      	add	r3, r2
 800332a:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (int i = 0; i < impl->cmdSize; ++i) {
 800332c:	6a3b      	ldr	r3, [r7, #32]
 800332e:	3301      	adds	r3, #1
 8003330:	623b      	str	r3, [r7, #32]
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	8c1b      	ldrh	r3, [r3, #32]
 8003336:	461a      	mov	r2, r3
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	4293      	cmp	r3, r2
 800333c:	dbc8      	blt.n	80032d0 <parseCommand+0x70>
        }
    }

    // we keep two last bytes in cmd buffer reserved so cmdSize is always by 2
    // less than cmdMaxSize
    impl->cmdBuffer[impl->cmdSize + 1] = '\0';
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	69da      	ldr	r2, [r3, #28]
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	8c1b      	ldrh	r3, [r3, #32]
 8003346:	3301      	adds	r3, #1
 8003348:	4413      	add	r3, r2
 800334a:	2200      	movs	r2, #0
 800334c:	701a      	strb	r2, [r3, #0]

    if (cmdName == NULL)
 800334e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 80a7 	beq.w	80034a4 <parseCommand+0x244>
        return;

    // try to find command in bindings
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8003356:	2300      	movs	r3, #0
 8003358:	61fb      	str	r3, [r7, #28]
 800335a:	e072      	b.n	8003442 <parseCommand+0x1e2>
        if (strcmp(cmdName, impl->bindings[i].name) == 0) {
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003360:	69fa      	ldr	r2, [r7, #28]
 8003362:	4613      	mov	r3, r2
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	4413      	add	r3, r2
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	440b      	add	r3, r1
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	4619      	mov	r1, r3
 8003370:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003372:	f7fc ffb5 	bl	80002e0 <strcmp>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d15f      	bne.n	800343c <parseCommand+0x1dc>
            if (impl->bindings[i].binding == NULL)
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003380:	69fa      	ldr	r2, [r7, #28]
 8003382:	4613      	mov	r3, r2
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	4413      	add	r3, r2
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	440b      	add	r3, r1
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d05e      	beq.n	8003450 <parseCommand+0x1f0>
                break;

            if (impl->bindings[i].tokenizeArgs)
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003396:	69fa      	ldr	r2, [r7, #28]
 8003398:	4613      	mov	r3, r2
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	4413      	add	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	440b      	add	r3, r1
 80033a2:	7b1b      	ldrb	r3, [r3, #12]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d002      	beq.n	80033ae <parseCommand+0x14e>
                embeddedCliTokenizeArgs(cmdArgs);
 80033a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033aa:	f7ff fcc9 	bl	8002d40 <embeddedCliTokenizeArgs>
            // currently, output is blank line, so we can just print directly
            SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80033b4:	f043 0310 	orr.w	r3, r3, #16
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            // check if help was requested (help is printed when no other options are set)
            if (cmdArgs != NULL && (strcmp(cmdArgs, "-h") == 0 || strcmp(cmdArgs, "--help") == 0)) {
 80033c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d01a      	beq.n	80033fc <parseCommand+0x19c>
 80033c6:	4939      	ldr	r1, [pc, #228]	@ (80034ac <parseCommand+0x24c>)
 80033c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033ca:	f7fc ff89 	bl	80002e0 <strcmp>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d006      	beq.n	80033e2 <parseCommand+0x182>
 80033d4:	4936      	ldr	r1, [pc, #216]	@ (80034b0 <parseCommand+0x250>)
 80033d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033d8:	f7fc ff82 	bl	80002e0 <strcmp>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10c      	bne.n	80033fc <parseCommand+0x19c>
                printBindingHelp(cli, &impl->bindings[i]);
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80033e6:	69fa      	ldr	r2, [r7, #28]
 80033e8:	4613      	mov	r3, r2
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	4413      	add	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	440b      	add	r3, r1
 80033f2:	4619      	mov	r1, r3
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 f85d 	bl	80034b4 <printBindingHelp>
 80033fa:	e015      	b.n	8003428 <parseCommand+0x1c8>
            } else {
                impl->bindings[i].binding(cli, cmdArgs, impl->bindings[i].context);
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003400:	69fa      	ldr	r2, [r7, #28]
 8003402:	4613      	mov	r3, r2
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	4413      	add	r3, r2
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	440b      	add	r3, r1
 800340c:	695c      	ldr	r4, [r3, #20]
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003412:	69fa      	ldr	r2, [r7, #28]
 8003414:	4613      	mov	r3, r2
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	4413      	add	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	440b      	add	r3, r1
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	461a      	mov	r2, r3
 8003422:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	47a0      	blx	r4
            }
            UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800342e:	f023 0310 	bic.w	r3, r3, #16
 8003432:	b2da      	uxtb	r2, r3
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            return;
 800343a:	e034      	b.n	80034a6 <parseCommand+0x246>
    for (int i = 0; i < impl->bindingsCount; ++i) {
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	3301      	adds	r3, #1
 8003440:	61fb      	str	r3, [r7, #28]
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003446:	461a      	mov	r2, r3
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	4293      	cmp	r3, r2
 800344c:	db86      	blt.n	800335c <parseCommand+0xfc>
 800344e:	e000      	b.n	8003452 <parseCommand+0x1f2>
                break;
 8003450:	bf00      	nop
        }
    }

    // command not found in bindings or binding was null
    // try to call default callback
    if (cli->onCommand != NULL) {
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d01d      	beq.n	8003496 <parseCommand+0x236>
        CliCommand command;
        command.name = cmdName;
 800345a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800345c:	60fb      	str	r3, [r7, #12]
        command.args = cmdArgs;
 800345e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003460:	613b      	str	r3, [r7, #16]

        // currently, output is blank line, so we can just print directly
        SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8003468:	f043 0310 	orr.w	r3, r3, #16
 800346c:	b2da      	uxtb	r2, r3
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        cli->onCommand(cli, &command);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f107 020c 	add.w	r2, r7, #12
 800347c:	4611      	mov	r1, r2
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	4798      	blx	r3
        UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8003488:	f023 0310 	bic.w	r3, r3, #16
 800348c:	b2da      	uxtb	r2, r3
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8003494:	e007      	b.n	80034a6 <parseCommand+0x246>
    } else {
        onUnknownCommand(cli, cmdName);
 8003496:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 fe5f 	bl	800415c <onUnknownCommand>
 800349e:	e002      	b.n	80034a6 <parseCommand+0x246>
        return;
 80034a0:	bf00      	nop
 80034a2:	e000      	b.n	80034a6 <parseCommand+0x246>
        return;
 80034a4:	bf00      	nop
    }
}
 80034a6:	373c      	adds	r7, #60	@ 0x3c
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd90      	pop	{r4, r7, pc}
 80034ac:	080113d0 	.word	0x080113d0
 80034b0:	080113d4 	.word	0x080113d4

080034b4 <printBindingHelp>:

static void printBindingHelp(EmbeddedCli *cli, CliCommandBinding *binding) {
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
    if (binding->help != NULL) {
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d010      	beq.n	80034e8 <printBindingHelp+0x34>
        cli->writeChar(cli, '\t');
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2109      	movs	r1, #9
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	4798      	blx	r3
        writeToOutput(cli, binding->help);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	4619      	mov	r1, r3
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f9f3 	bl	80038c2 <writeToOutput>
        writeToOutput(cli, lineBreak);
 80034dc:	4b04      	ldr	r3, [pc, #16]	@ (80034f0 <printBindingHelp+0x3c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4619      	mov	r1, r3
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f9ed 	bl	80038c2 <writeToOutput>
    }
}
 80034e8:	bf00      	nop
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	2400006c 	.word	0x2400006c

080034f4 <getAutocompletedCommand>:

static AutocompletedCommand getAutocompletedCommand(EmbeddedCli *cli, const char *prefix) {
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b08e      	sub	sp, #56	@ 0x38
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
    AutocompletedCommand cmd = {NULL, 0, 0};
 8003500:	2300      	movs	r3, #0
 8003502:	613b      	str	r3, [r7, #16]
 8003504:	2300      	movs	r3, #0
 8003506:	82bb      	strh	r3, [r7, #20]
 8003508:	2300      	movs	r3, #0
 800350a:	82fb      	strh	r3, [r7, #22]

    size_t prefixLen = strlen(prefix);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f7fc fef1 	bl	80002f4 <strlen>
 8003512:	6278      	str	r0, [r7, #36]	@ 0x24

    PREPARE_IMPL(cli);
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	623b      	str	r3, [r7, #32]
    if (impl->bindingsCount == 0 || prefixLen == 0)
 800351a:	6a3b      	ldr	r3, [r7, #32]
 800351c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <getAutocompletedCommand+0x34>
 8003522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003524:	2b00      	cmp	r3, #0
 8003526:	d108      	bne.n	800353a <getAutocompletedCommand+0x46>
        return cmd;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	461a      	mov	r2, r3
 800352c:	f107 0310 	add.w	r3, r7, #16
 8003530:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003534:	e882 0003 	stmia.w	r2, {r0, r1}
 8003538:	e095      	b.n	8003666 <getAutocompletedCommand+0x172>


    for (int i = 0; i < impl->bindingsCount; ++i) {
 800353a:	2300      	movs	r3, #0
 800353c:	637b      	str	r3, [r7, #52]	@ 0x34
 800353e:	e083      	b.n	8003648 <getAutocompletedCommand+0x154>
        const char *name = impl->bindings[i].name;
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003544:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003546:	4613      	mov	r3, r2
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	4413      	add	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	440b      	add	r3, r1
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	61fb      	str	r3, [r7, #28]
        size_t len = strlen(name);
 8003554:	69f8      	ldr	r0, [r7, #28]
 8003556:	f7fc fecd 	bl	80002f4 <strlen>
 800355a:	61b8      	str	r0, [r7, #24]

        // unset autocomplete flag
        UNSET_U8FLAG(impl->bindingsFlags[i], BINDING_FLAG_AUTOCOMPLETE);
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003562:	4413      	add	r3, r2
 8003564:	781a      	ldrb	r2, [r3, #0]
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800356a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800356c:	440b      	add	r3, r1
 800356e:	f022 0201 	bic.w	r2, r2, #1
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	701a      	strb	r2, [r3, #0]

        if (len < prefixLen)
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357a:	429a      	cmp	r2, r3
 800357c:	d35e      	bcc.n	800363c <getAutocompletedCommand+0x148>
            continue;

        // check if this command is candidate for autocomplete
        bool isCandidate = true;
 800357e:	2301      	movs	r3, #1
 8003580:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        for (size_t j = 0; j < prefixLen; ++j) {
 8003584:	2300      	movs	r3, #0
 8003586:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003588:	e010      	b.n	80035ac <getAutocompletedCommand+0xb8>
            if (prefix[j] != name[j]) {
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800358e:	4413      	add	r3, r2
 8003590:	781a      	ldrb	r2, [r3, #0]
 8003592:	69f9      	ldr	r1, [r7, #28]
 8003594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003596:	440b      	add	r3, r1
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d003      	beq.n	80035a6 <getAutocompletedCommand+0xb2>
                isCandidate = false;
 800359e:	2300      	movs	r3, #0
 80035a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                break;
 80035a4:	e006      	b.n	80035b4 <getAutocompletedCommand+0xc0>
        for (size_t j = 0; j < prefixLen; ++j) {
 80035a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035a8:	3301      	adds	r3, #1
 80035aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d3ea      	bcc.n	800358a <getAutocompletedCommand+0x96>
            }
        }
        if (!isCandidate)
 80035b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80035b8:	f083 0301 	eor.w	r3, r3, #1
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d13e      	bne.n	8003640 <getAutocompletedCommand+0x14c>
            continue;

        impl->bindingsFlags[i] |= BINDING_FLAG_AUTOCOMPLETE;
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035c8:	4413      	add	r3, r2
 80035ca:	781a      	ldrb	r2, [r3, #0]
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80035d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035d2:	440b      	add	r3, r1
 80035d4:	f042 0201 	orr.w	r2, r2, #1
 80035d8:	b2d2      	uxtb	r2, r2
 80035da:	701a      	strb	r2, [r3, #0]

        if (cmd.candidateCount == 0 || len < cmd.autocompletedLen)
 80035dc:	8afb      	ldrh	r3, [r7, #22]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d004      	beq.n	80035ec <getAutocompletedCommand+0xf8>
 80035e2:	8abb      	ldrh	r3, [r7, #20]
 80035e4:	461a      	mov	r2, r3
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d202      	bcs.n	80035f2 <getAutocompletedCommand+0xfe>
            cmd.autocompletedLen = (uint16_t) len;
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	82bb      	strh	r3, [r7, #20]

        ++cmd.candidateCount;
 80035f2:	8afb      	ldrh	r3, [r7, #22]
 80035f4:	3301      	adds	r3, #1
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	82fb      	strh	r3, [r7, #22]

        if (cmd.candidateCount == 1) {
 80035fa:	8afb      	ldrh	r3, [r7, #22]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d102      	bne.n	8003606 <getAutocompletedCommand+0x112>
            cmd.firstCandidate = name;
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	613b      	str	r3, [r7, #16]
            continue;
 8003604:	e01d      	b.n	8003642 <getAutocompletedCommand+0x14e>
        }

        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 8003606:	6a3b      	ldr	r3, [r7, #32]
 8003608:	8c1b      	ldrh	r3, [r3, #32]
 800360a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800360c:	e010      	b.n	8003630 <getAutocompletedCommand+0x13c>
            if (cmd.firstCandidate[j] != name[j]) {
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003612:	4413      	add	r3, r2
 8003614:	781a      	ldrb	r2, [r3, #0]
 8003616:	69f9      	ldr	r1, [r7, #28]
 8003618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800361a:	440b      	add	r3, r1
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	429a      	cmp	r2, r3
 8003620:	d003      	beq.n	800362a <getAutocompletedCommand+0x136>
                cmd.autocompletedLen = (uint16_t) j;
 8003622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003624:	b29b      	uxth	r3, r3
 8003626:	82bb      	strh	r3, [r7, #20]
                break;
 8003628:	e00b      	b.n	8003642 <getAutocompletedCommand+0x14e>
        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 800362a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800362c:	3301      	adds	r3, #1
 800362e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003630:	8abb      	ldrh	r3, [r7, #20]
 8003632:	461a      	mov	r2, r3
 8003634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003636:	4293      	cmp	r3, r2
 8003638:	d3e9      	bcc.n	800360e <getAutocompletedCommand+0x11a>
 800363a:	e002      	b.n	8003642 <getAutocompletedCommand+0x14e>
            continue;
 800363c:	bf00      	nop
 800363e:	e000      	b.n	8003642 <getAutocompletedCommand+0x14e>
            continue;
 8003640:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8003642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003644:	3301      	adds	r3, #1
 8003646:	637b      	str	r3, [r7, #52]	@ 0x34
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800364c:	461a      	mov	r2, r3
 800364e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003650:	4293      	cmp	r3, r2
 8003652:	f6ff af75 	blt.w	8003540 <getAutocompletedCommand+0x4c>
            }
        }
    }

    return cmd;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	461a      	mov	r2, r3
 800365a:	f107 0310 	add.w	r3, r7, #16
 800365e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003662:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	3738      	adds	r7, #56	@ 0x38
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <printLiveAutocompletion>:

static void printLiveAutocompletion(EmbeddedCli *cli) {
 8003670:	b580      	push	{r7, lr}
 8003672:	b088      	sub	sp, #32
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	617b      	str	r3, [r7, #20]

    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED))
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8003684:	f003 0320 	and.w	r3, r3, #32
 8003688:	2b00      	cmp	r3, #0
 800368a:	d04a      	beq.n	8003722 <printLiveAutocompletion+0xb2>
        return;

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	69da      	ldr	r2, [r3, #28]
 8003690:	f107 030c 	add.w	r3, r7, #12
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff ff2c 	bl	80034f4 <getAutocompletedCommand>

    if (cmd.candidateCount == 0) {
 800369c:	8a7b      	ldrh	r3, [r7, #18]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d102      	bne.n	80036a8 <printLiveAutocompletion+0x38>
        cmd.autocompletedLen = impl->cmdSize;
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	8c1b      	ldrh	r3, [r3, #32]
 80036a6:	823b      	strh	r3, [r7, #16]
    }

    // save cursor location
    writeToOutput(cli, escSeqCursorSave);
 80036a8:	4b20      	ldr	r3, [pc, #128]	@ (800372c <printLiveAutocompletion+0xbc>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4619      	mov	r1, r3
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f907 	bl	80038c2 <writeToOutput>

    moveCursor(cli, impl->cursorPos, CURSOR_DIRECTION_FORWARD);
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80036b8:	2201      	movs	r2, #1
 80036ba:	4619      	mov	r1, r3
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f921 	bl	8003904 <moveCursor>

    // print live autocompletion (or nothing, if it doesn't exist)
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	8c1b      	ldrh	r3, [r3, #32]
 80036c6:	61fb      	str	r3, [r7, #28]
 80036c8:	e00b      	b.n	80036e2 <printLiveAutocompletion+0x72>
        cli->writeChar(cli, cmd.firstCandidate[i]);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68f9      	ldr	r1, [r7, #12]
 80036d0:	69fa      	ldr	r2, [r7, #28]
 80036d2:	440a      	add	r2, r1
 80036d4:	7812      	ldrb	r2, [r2, #0]
 80036d6:	4611      	mov	r1, r2
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	4798      	blx	r3
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	3301      	adds	r3, #1
 80036e0:	61fb      	str	r3, [r7, #28]
 80036e2:	8a3b      	ldrh	r3, [r7, #16]
 80036e4:	461a      	mov	r2, r3
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d3ee      	bcc.n	80036ca <printLiveAutocompletion+0x5a>
    }
    // replace with spaces previous autocompletion
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 80036ec:	8a3b      	ldrh	r3, [r7, #16]
 80036ee:	61bb      	str	r3, [r7, #24]
 80036f0:	e007      	b.n	8003702 <printLiveAutocompletion+0x92>
        cli->writeChar(cli, ' ');
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2120      	movs	r1, #32
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	4798      	blx	r3
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	3301      	adds	r3, #1
 8003700:	61bb      	str	r3, [r7, #24]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8003706:	461a      	mov	r2, r3
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	4293      	cmp	r3, r2
 800370c:	d3f1      	bcc.n	80036f2 <printLiveAutocompletion+0x82>
    }
    impl->inputLineLength = cmd.autocompletedLen;
 800370e:	8a3a      	ldrh	r2, [r7, #16]
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	861a      	strh	r2, [r3, #48]	@ 0x30

    // restore cursor
    writeToOutput(cli, escSeqCursorRestore);
 8003714:	4b06      	ldr	r3, [pc, #24]	@ (8003730 <printLiveAutocompletion+0xc0>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4619      	mov	r1, r3
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f8d1 	bl	80038c2 <writeToOutput>
 8003720:	e000      	b.n	8003724 <printLiveAutocompletion+0xb4>
        return;
 8003722:	bf00      	nop
}
 8003724:	3720      	adds	r7, #32
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	24000078 	.word	0x24000078
 8003730:	2400007c 	.word	0x2400007c

08003734 <onAutocompleteRequest>:

static void onAutocompleteRequest(EmbeddedCli *cli) {
 8003734:	b580      	push	{r7, lr}
 8003736:	b088      	sub	sp, #32
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	61bb      	str	r3, [r7, #24]

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	69da      	ldr	r2, [r3, #28]
 8003746:	f107 030c 	add.w	r3, r7, #12
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff fed1 	bl	80034f4 <getAutocompletedCommand>

    if (cmd.candidateCount == 0)
 8003752:	8a7b      	ldrh	r3, [r7, #18]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d078      	beq.n	800384a <onAutocompleteRequest+0x116>
        return;

    if (cmd.candidateCount == 1 || cmd.autocompletedLen > impl->cmdSize) {
 8003758:	8a7b      	ldrh	r3, [r7, #18]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d004      	beq.n	8003768 <onAutocompleteRequest+0x34>
 800375e:	8a3a      	ldrh	r2, [r7, #16]
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	8c1b      	ldrh	r3, [r3, #32]
 8003764:	429a      	cmp	r2, r3
 8003766:	d931      	bls.n	80037cc <onAutocompleteRequest+0x98>
        // can copy from index cmdSize, but prefix is the same, so copy everything
        memcpy(impl->cmdBuffer, cmd.firstCandidate, cmd.autocompletedLen);
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	68f9      	ldr	r1, [r7, #12]
 800376e:	8a3a      	ldrh	r2, [r7, #16]
 8003770:	4618      	mov	r0, r3
 8003772:	f00c fcd2 	bl	801011a <memcpy>
        if (cmd.candidateCount == 1) {
 8003776:	8a7b      	ldrh	r3, [r7, #18]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d109      	bne.n	8003790 <onAutocompleteRequest+0x5c>
            impl->cmdBuffer[cmd.autocompletedLen] = ' ';
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	8a3a      	ldrh	r2, [r7, #16]
 8003782:	4413      	add	r3, r2
 8003784:	2220      	movs	r2, #32
 8003786:	701a      	strb	r2, [r3, #0]
            ++cmd.autocompletedLen;
 8003788:	8a3b      	ldrh	r3, [r7, #16]
 800378a:	3301      	adds	r3, #1
 800378c:	b29b      	uxth	r3, r3
 800378e:	823b      	strh	r3, [r7, #16]
        }
        impl->cmdBuffer[cmd.autocompletedLen] = '\0';
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	69db      	ldr	r3, [r3, #28]
 8003794:	8a3a      	ldrh	r2, [r7, #16]
 8003796:	4413      	add	r3, r2
 8003798:	2200      	movs	r2, #0
 800379a:	701a      	strb	r2, [r3, #0]

        writeToOutput(cli, &impl->cmdBuffer[impl->cmdSize - impl->cursorPos]);
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	8c12      	ldrh	r2, [r2, #32]
 80037a4:	4611      	mov	r1, r2
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	8e92      	ldrh	r2, [r2, #52]	@ 0x34
 80037aa:	1a8a      	subs	r2, r1, r2
 80037ac:	4413      	add	r3, r2
 80037ae:	4619      	mov	r1, r3
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f886 	bl	80038c2 <writeToOutput>
        impl->cmdSize = cmd.autocompletedLen;
 80037b6:	8a3a      	ldrh	r2, [r7, #16]
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	841a      	strh	r2, [r3, #32]
        impl->inputLineLength = impl->cmdSize;
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	8c1a      	ldrh	r2, [r3, #32]
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	861a      	strh	r2, [r3, #48]	@ 0x30
        impl->cursorPos = 0; // Cursor has been moved to the end
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	2200      	movs	r2, #0
 80037c8:	869a      	strh	r2, [r3, #52]	@ 0x34
        return;
 80037ca:	e03f      	b.n	800384c <onAutocompleteRequest+0x118>
    }

    // with multiple candidates when we already completed to common prefix
    // we show all candidates and print input again
    // we need to completely clear current line since it begins with invitation
    clearCurrentLine(cli);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f843 	bl	8003858 <clearCurrentLine>

    for (int i = 0; i < impl->bindingsCount; ++i) {
 80037d2:	2300      	movs	r3, #0
 80037d4:	61fb      	str	r3, [r7, #28]
 80037d6:	e021      	b.n	800381c <onAutocompleteRequest+0xe8>
        // autocomplete flag is set for all candidates by last call to
        // getAutocompletedCommand
        if (!(impl->bindingsFlags[i] & BINDING_FLAG_AUTOCOMPLETE))
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	4413      	add	r3, r2
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d014      	beq.n	8003814 <onAutocompleteRequest+0xe0>
            continue;

        const char *name = impl->bindings[i].name;
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80037ee:	69fa      	ldr	r2, [r7, #28]
 80037f0:	4613      	mov	r3, r2
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	4413      	add	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	440b      	add	r3, r1
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	617b      	str	r3, [r7, #20]

        writeToOutput(cli, name);
 80037fe:	6979      	ldr	r1, [r7, #20]
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f85e 	bl	80038c2 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8003806:	4b13      	ldr	r3, [pc, #76]	@ (8003854 <onAutocompleteRequest+0x120>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4619      	mov	r1, r3
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f858 	bl	80038c2 <writeToOutput>
 8003812:	e000      	b.n	8003816 <onAutocompleteRequest+0xe2>
            continue;
 8003814:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	3301      	adds	r3, #1
 800381a:	61fb      	str	r3, [r7, #28]
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003820:	461a      	mov	r2, r3
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	4293      	cmp	r3, r2
 8003826:	dbd7      	blt.n	80037d8 <onAutocompleteRequest+0xa4>
    }

    writeToOutput(cli, impl->invitation);
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4619      	mov	r1, r3
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f847 	bl	80038c2 <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	69db      	ldr	r3, [r3, #28]
 8003838:	4619      	mov	r1, r3
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 f841 	bl	80038c2 <writeToOutput>

    impl->inputLineLength = impl->cmdSize;
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	8c1a      	ldrh	r2, [r3, #32]
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	861a      	strh	r2, [r3, #48]	@ 0x30
 8003848:	e000      	b.n	800384c <onAutocompleteRequest+0x118>
        return;
 800384a:	bf00      	nop
}
 800384c:	3720      	adds	r7, #32
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	2400006c 	.word	0x2400006c

08003858 <clearCurrentLine>:

static void clearCurrentLine(EmbeddedCli *cli) {
 8003858:	b590      	push	{r4, r7, lr}
 800385a:	b087      	sub	sp, #28
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	613b      	str	r3, [r7, #16]
    size_t len = impl->inputLineLength + strlen(impl->invitation);
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800386a:	461c      	mov	r4, r3
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	f7fc fd3f 	bl	80002f4 <strlen>
 8003876:	4603      	mov	r3, r0
 8003878:	4423      	add	r3, r4
 800387a:	60fb      	str	r3, [r7, #12]

    cli->writeChar(cli, '\r');
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	210d      	movs	r1, #13
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8003886:	2300      	movs	r3, #0
 8003888:	617b      	str	r3, [r7, #20]
 800388a:	e007      	b.n	800389c <clearCurrentLine+0x44>
        cli->writeChar(cli, ' ');
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2120      	movs	r1, #32
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	3301      	adds	r3, #1
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d3f3      	bcc.n	800388c <clearCurrentLine+0x34>
    }
    cli->writeChar(cli, '\r');
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	210d      	movs	r1, #13
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	4798      	blx	r3
    impl->inputLineLength = 0;
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	2200      	movs	r2, #0
 80038b2:	861a      	strh	r2, [r3, #48]	@ 0x30

    impl->cursorPos = 0;
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	2200      	movs	r2, #0
 80038b8:	869a      	strh	r2, [r3, #52]	@ 0x34
}
 80038ba:	bf00      	nop
 80038bc:	371c      	adds	r7, #28
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd90      	pop	{r4, r7, pc}

080038c2 <writeToOutput>:

static void writeToOutput(EmbeddedCli *cli, const char *str) {
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b084      	sub	sp, #16
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
 80038ca:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 80038cc:	6838      	ldr	r0, [r7, #0]
 80038ce:	f7fc fd11 	bl	80002f4 <strlen>
 80038d2:	60b8      	str	r0, [r7, #8]

    for (size_t i = 0; i < len; ++i) {
 80038d4:	2300      	movs	r3, #0
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	e00b      	b.n	80038f2 <writeToOutput+0x30>
        cli->writeChar(cli, str[i]);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6839      	ldr	r1, [r7, #0]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	440a      	add	r2, r1
 80038e4:	7812      	ldrb	r2, [r2, #0]
 80038e6:	4611      	mov	r1, r2
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	3301      	adds	r3, #1
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d3ef      	bcc.n	80038da <writeToOutput+0x18>
    }
}
 80038fa:	bf00      	nop
 80038fc:	bf00      	nop
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <moveCursor>:

static void moveCursor(EmbeddedCli* cli, uint16_t count, bool direction) {
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	460b      	mov	r3, r1
 800390e:	807b      	strh	r3, [r7, #2]
 8003910:	4613      	mov	r3, r2
 8003912:	707b      	strb	r3, [r7, #1]
    // Check if we need to send any command
    if (count == 0)
 8003914:	887b      	ldrh	r3, [r7, #2]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d020      	beq.n	800395c <moveCursor+0x58>
        return;

    // 5 = uint16_t max, 3 = escape sequence, 1 = string termination
    char escBuffer[5 + 3 + 1] = { 0 };
 800391a:	f107 030c 	add.w	r3, r7, #12
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	605a      	str	r2, [r3, #4]
 8003924:	721a      	strb	r2, [r3, #8]
    char dirChar = direction ? escSeqCursorRight[2] : escSeqCursorLeft[2];
 8003926:	787b      	ldrb	r3, [r7, #1]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d004      	beq.n	8003936 <moveCursor+0x32>
 800392c:	4b0d      	ldr	r3, [pc, #52]	@ (8003964 <moveCursor+0x60>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	3302      	adds	r3, #2
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	e003      	b.n	800393e <moveCursor+0x3a>
 8003936:	4b0c      	ldr	r3, [pc, #48]	@ (8003968 <moveCursor+0x64>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	3302      	adds	r3, #2
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	75fb      	strb	r3, [r7, #23]
    sprintf(escBuffer, "\x1B[%u%c", count, dirChar);
 8003940:	887a      	ldrh	r2, [r7, #2]
 8003942:	7dfb      	ldrb	r3, [r7, #23]
 8003944:	f107 000c 	add.w	r0, r7, #12
 8003948:	4908      	ldr	r1, [pc, #32]	@ (800396c <moveCursor+0x68>)
 800394a:	f00c fa0b 	bl	800fd64 <siprintf>
    writeToOutput(cli, escBuffer);
 800394e:	f107 030c 	add.w	r3, r7, #12
 8003952:	4619      	mov	r1, r3
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7ff ffb4 	bl	80038c2 <writeToOutput>
 800395a:	e000      	b.n	800395e <moveCursor+0x5a>
        return;
 800395c:	bf00      	nop
}
 800395e:	3718      	adds	r7, #24
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	24000070 	.word	0x24000070
 8003968:	24000074 	.word	0x24000074
 800396c:	080113dc 	.word	0x080113dc

08003970 <isControlChar>:

static bool isControlChar(char c) {
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	4603      	mov	r3, r0
 8003978:	71fb      	strb	r3, [r7, #7]
    return c == '\r' || c == '\n' || c == '\b' || c == '\t' || c == 0x7F;
 800397a:	79fb      	ldrb	r3, [r7, #7]
 800397c:	2b0d      	cmp	r3, #13
 800397e:	d00b      	beq.n	8003998 <isControlChar+0x28>
 8003980:	79fb      	ldrb	r3, [r7, #7]
 8003982:	2b0a      	cmp	r3, #10
 8003984:	d008      	beq.n	8003998 <isControlChar+0x28>
 8003986:	79fb      	ldrb	r3, [r7, #7]
 8003988:	2b08      	cmp	r3, #8
 800398a:	d005      	beq.n	8003998 <isControlChar+0x28>
 800398c:	79fb      	ldrb	r3, [r7, #7]
 800398e:	2b09      	cmp	r3, #9
 8003990:	d002      	beq.n	8003998 <isControlChar+0x28>
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	2b7f      	cmp	r3, #127	@ 0x7f
 8003996:	d101      	bne.n	800399c <isControlChar+0x2c>
 8003998:	2301      	movs	r3, #1
 800399a:	e000      	b.n	800399e <isControlChar+0x2e>
 800399c:	2300      	movs	r3, #0
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	b2db      	uxtb	r3, r3
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <isDisplayableChar>:

static bool isDisplayableChar(char c) {
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	71fb      	strb	r3, [r7, #7]
    return (c >= 32 && c <= 126);
 80039ba:	79fb      	ldrb	r3, [r7, #7]
 80039bc:	2b1f      	cmp	r3, #31
 80039be:	d904      	bls.n	80039ca <isDisplayableChar+0x1a>
 80039c0:	79fb      	ldrb	r3, [r7, #7]
 80039c2:	2b7e      	cmp	r3, #126	@ 0x7e
 80039c4:	d801      	bhi.n	80039ca <isDisplayableChar+0x1a>
 80039c6:	2301      	movs	r3, #1
 80039c8:	e000      	b.n	80039cc <isDisplayableChar+0x1c>
 80039ca:	2300      	movs	r3, #0
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	b2db      	uxtb	r3, r3
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <fifoBufAvailable>:

static uint16_t fifoBufAvailable(FifoBuf *buffer) {
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
    if (buffer->back >= buffer->front)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	88da      	ldrh	r2, [r3, #6]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	889b      	ldrh	r3, [r3, #4]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d306      	bcc.n	8003a00 <fifoBufAvailable+0x22>
        return (uint16_t) (buffer->back - buffer->front);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	88da      	ldrh	r2, [r3, #6]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	889b      	ldrh	r3, [r3, #4]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	e009      	b.n	8003a14 <fifoBufAvailable+0x36>
    else
        return (uint16_t) (buffer->size - buffer->front + buffer->back);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	891a      	ldrh	r2, [r3, #8]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	889b      	ldrh	r3, [r3, #4]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	88db      	ldrh	r3, [r3, #6]
 8003a10:	4413      	add	r3, r2
 8003a12:	b29b      	uxth	r3, r3
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <fifoBufPop>:

static char fifoBufPop(FifoBuf *buffer) {
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
    char a = '\0';
 8003a28:	2300      	movs	r3, #0
 8003a2a:	73fb      	strb	r3, [r7, #15]
    if (buffer->front != buffer->back) {
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	889a      	ldrh	r2, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	88db      	ldrh	r3, [r3, #6]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d014      	beq.n	8003a62 <fifoBufPop+0x42>
        a = buffer->buf[buffer->front];
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	8892      	ldrh	r2, [r2, #4]
 8003a40:	4413      	add	r3, r2
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	73fb      	strb	r3, [r7, #15]
        buffer->front = (uint16_t) (buffer->front + 1) % buffer->size;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	889b      	ldrh	r3, [r3, #4]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	8912      	ldrh	r2, [r2, #8]
 8003a52:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a56:	fb01 f202 	mul.w	r2, r1, r2
 8003a5a:	1a9b      	subs	r3, r3, r2
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	809a      	strh	r2, [r3, #4]
    }
    return a;
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <fifoBufPush>:

static bool fifoBufPush(FifoBuf *buffer, char a) {
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	70fb      	strb	r3, [r7, #3]
    uint16_t newBack = (uint16_t) (buffer->back + 1) % buffer->size;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	88db      	ldrh	r3, [r3, #6]
 8003a80:	3301      	adds	r3, #1
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	8912      	ldrh	r2, [r2, #8]
 8003a88:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a8c:	fb01 f202 	mul.w	r2, r1, r2
 8003a90:	1a9b      	subs	r3, r3, r2
 8003a92:	81fb      	strh	r3, [r7, #14]
    if (newBack != buffer->front) {
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	889b      	ldrh	r3, [r3, #4]
 8003a98:	89fa      	ldrh	r2, [r7, #14]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d00b      	beq.n	8003ab6 <fifoBufPush+0x46>
        buffer->buf[buffer->back] = a;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	88d2      	ldrh	r2, [r2, #6]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	78fa      	ldrb	r2, [r7, #3]
 8003aaa:	701a      	strb	r2, [r3, #0]
        buffer->back = newBack;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	89fa      	ldrh	r2, [r7, #14]
 8003ab0:	80da      	strh	r2, [r3, #6]
        return true;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e000      	b.n	8003ab8 <fifoBufPush+0x48>
    }
    return false;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <historyPut>:

static bool historyPut(CliHistory *history, const char *str) {
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b088      	sub	sp, #32
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 8003ace:	6838      	ldr	r0, [r7, #0]
 8003ad0:	f7fc fc10 	bl	80002f4 <strlen>
 8003ad4:	61b8      	str	r0, [r7, #24]
    // each item is ended with \0 so, need to have that much space at least
    if (history->bufferSize < len + 1)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	889b      	ldrh	r3, [r3, #4]
 8003ada:	461a      	mov	r2, r3
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d201      	bcs.n	8003ae8 <historyPut+0x24>
        return false;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	e04d      	b.n	8003b84 <historyPut+0xc0>

    // remove str from history (if it's present) so we don't get duplicates
    historyRemove(history, str);
 8003ae8:	6839      	ldr	r1, [r7, #0]
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f86a 	bl	8003bc4 <historyRemove>

    size_t usedSize;
    // remove old items if new one can't fit into buffer
    while (history->itemsCount > 0) {
 8003af0:	e024      	b.n	8003b3c <historyPut+0x78>
        const char *item = historyGet(history, history->itemsCount);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	891b      	ldrh	r3, [r3, #8]
 8003af6:	4619      	mov	r1, r3
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f847 	bl	8003b8c <historyGet>
 8003afe:	6178      	str	r0, [r7, #20]
        size_t itemLen = strlen(item);
 8003b00:	6978      	ldr	r0, [r7, #20]
 8003b02:	f7fc fbf7 	bl	80002f4 <strlen>
 8003b06:	6138      	str	r0, [r7, #16]
        usedSize = ((size_t) (item - history->buf)) + itemLen + 1;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	461a      	mov	r2, r3
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	4413      	add	r3, r2
 8003b16:	3301      	adds	r3, #1
 8003b18:	61fb      	str	r3, [r7, #28]

        size_t freeSpace = history->bufferSize - usedSize;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	889b      	ldrh	r3, [r3, #4]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	60fb      	str	r3, [r7, #12]

        if (freeSpace >= len + 1)
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d20a      	bcs.n	8003b46 <historyPut+0x82>
            break;

        // space not enough, remove last element
        --history->itemsCount;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	891b      	ldrh	r3, [r3, #8]
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	811a      	strh	r2, [r3, #8]
    while (history->itemsCount > 0) {
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	891b      	ldrh	r3, [r3, #8]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1d6      	bne.n	8003af2 <historyPut+0x2e>
 8003b44:	e000      	b.n	8003b48 <historyPut+0x84>
            break;
 8003b46:	bf00      	nop
    }
    if (history->itemsCount > 0) {
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	891b      	ldrh	r3, [r3, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <historyPut+0xa2>
        // when history not empty, shift elements so new item is first
        memmove(&history->buf[len + 1], history->buf, usedSize);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	3301      	adds	r3, #1
 8003b58:	18d0      	adds	r0, r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	69fa      	ldr	r2, [r7, #28]
 8003b60:	4619      	mov	r1, r3
 8003b62:	f00c fa03 	bl	800ff6c <memmove>
    }
    memcpy(history->buf, str, len + 1);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6818      	ldr	r0, [r3, #0]
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	461a      	mov	r2, r3
 8003b70:	6839      	ldr	r1, [r7, #0]
 8003b72:	f00c fad2 	bl	801011a <memcpy>
    ++history->itemsCount;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	891b      	ldrh	r3, [r3, #8]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	811a      	strh	r2, [r3, #8]

    return true;
 8003b82:	2301      	movs	r3, #1
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3720      	adds	r7, #32
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <historyGet>:

static const char *historyGet(CliHistory *history, uint16_t item) {
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	460b      	mov	r3, r1
 8003b96:	807b      	strh	r3, [r7, #2]
    if (item == 0 || item > history->itemsCount)
 8003b98:	887b      	ldrh	r3, [r7, #2]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d004      	beq.n	8003ba8 <historyGet+0x1c>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	891b      	ldrh	r3, [r3, #8]
 8003ba2:	887a      	ldrh	r2, [r7, #2]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d901      	bls.n	8003bac <historyGet+0x20>
        return NULL;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	e007      	b.n	8003bbc <historyGet+0x30>

    // items are stored in the same way (separated by \0 and counted from 1),
    // so can use this call
    return embeddedCliGetToken(history->buf, item);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	887a      	ldrh	r2, [r7, #2]
 8003bb2:	4611      	mov	r1, r2
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff f937 	bl	8002e28 <embeddedCliGetToken>
 8003bba:	4603      	mov	r3, r0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <historyRemove>:

static void historyRemove(CliHistory *history, const char *str) {
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
    if (str == NULL || history->itemsCount == 0)
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d04c      	beq.n	8003c6e <historyRemove+0xaa>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	891b      	ldrh	r3, [r3, #8]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d048      	beq.n	8003c6e <historyRemove+0xaa>
        return;
    char *item = NULL;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	617b      	str	r3, [r7, #20]
    uint16_t itemPosition;
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 8003be0:	2301      	movs	r3, #1
 8003be2:	827b      	strh	r3, [r7, #18]
 8003be4:	e013      	b.n	8003c0e <historyRemove+0x4a>
        // items are stored in the same way (separated by \0 and counted from 1),
        // so can use this call
        item = embeddedCliGetTokenVariable(history->buf, itemPosition);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	8a7a      	ldrh	r2, [r7, #18]
 8003bec:	4611      	mov	r1, r2
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7ff f935 	bl	8002e5e <embeddedCliGetTokenVariable>
 8003bf4:	6178      	str	r0, [r7, #20]
        if (strcmp(item, str) == 0) {
 8003bf6:	6839      	ldr	r1, [r7, #0]
 8003bf8:	6978      	ldr	r0, [r7, #20]
 8003bfa:	f7fc fb71 	bl	80002e0 <strcmp>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00a      	beq.n	8003c1a <historyRemove+0x56>
            break;
        }
        item = NULL;
 8003c04:	2300      	movs	r3, #0
 8003c06:	617b      	str	r3, [r7, #20]
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 8003c08:	8a7b      	ldrh	r3, [r7, #18]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	827b      	strh	r3, [r7, #18]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	891b      	ldrh	r3, [r3, #8]
 8003c12:	8a7a      	ldrh	r2, [r7, #18]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d9e6      	bls.n	8003be6 <historyRemove+0x22>
 8003c18:	e000      	b.n	8003c1c <historyRemove+0x58>
            break;
 8003c1a:	bf00      	nop
    }
    if (item == NULL)
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d027      	beq.n	8003c72 <historyRemove+0xae>
        return;

    --history->itemsCount;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	891b      	ldrh	r3, [r3, #8]
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	811a      	strh	r2, [r3, #8]
    if (itemPosition == (history->itemsCount + 1)) {
 8003c2e:	8a7a      	ldrh	r2, [r7, #18]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	891b      	ldrh	r3, [r3, #8]
 8003c34:	3301      	adds	r3, #1
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d01d      	beq.n	8003c76 <historyRemove+0xb2>
        // if this is a last element, nothing is remaining to move
        return;
    }

    size_t len = strlen(item);
 8003c3a:	6978      	ldr	r0, [r7, #20]
 8003c3c:	f7fc fb5a 	bl	80002f4 <strlen>
 8003c40:	60f8      	str	r0, [r7, #12]
    size_t remaining = (size_t) (history->bufferSize - (item + len + 1 - history->buf));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	889b      	ldrh	r3, [r3, #4]
 8003c46:	4619      	mov	r1, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	441a      	add	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	1acb      	subs	r3, r1, r3
 8003c58:	60bb      	str	r3, [r7, #8]
    // move everything to the right of found item
    memmove(item, &item[len + 1], remaining);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	4413      	add	r3, r2
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	4619      	mov	r1, r3
 8003c66:	6978      	ldr	r0, [r7, #20]
 8003c68:	f00c f980 	bl	800ff6c <memmove>
 8003c6c:	e004      	b.n	8003c78 <historyRemove+0xb4>
        return;
 8003c6e:	bf00      	nop
 8003c70:	e002      	b.n	8003c78 <historyRemove+0xb4>
        return;
 8003c72:	bf00      	nop
 8003c74:	e000      	b.n	8003c78 <historyRemove+0xb4>
        return;
 8003c76:	bf00      	nop
}
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <getTokenPosition>:

static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos) {
 8003c7e:	b480      	push	{r7}
 8003c80:	b085      	sub	sp, #20
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	460b      	mov	r3, r1
 8003c88:	807b      	strh	r3, [r7, #2]
    if (tokenizedStr == NULL || pos == 0)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d002      	beq.n	8003c96 <getTokenPosition+0x18>
 8003c90:	887b      	ldrh	r3, [r7, #2]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d102      	bne.n	8003c9c <getTokenPosition+0x1e>
        return CLI_TOKEN_NPOS;
 8003c96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c9a:	e028      	b.n	8003cee <getTokenPosition+0x70>
    uint16_t i = 0;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	81fb      	strh	r3, [r7, #14]
    uint16_t tokenCount = 1;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	81bb      	strh	r3, [r7, #12]
    while (true) {
        if (tokenCount == pos)
 8003ca4:	89ba      	ldrh	r2, [r7, #12]
 8003ca6:	887b      	ldrh	r3, [r7, #2]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d013      	beq.n	8003cd4 <getTokenPosition+0x56>
            break;

        if (tokenizedStr[i] == '\0') {
 8003cac:	89fb      	ldrh	r3, [r7, #14]
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d109      	bne.n	8003ccc <getTokenPosition+0x4e>
            ++tokenCount;
 8003cb8:	89bb      	ldrh	r3, [r7, #12]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	81bb      	strh	r3, [r7, #12]
            if (tokenizedStr[i + 1] == '\0')
 8003cbe:	89fb      	ldrh	r3, [r7, #14]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <getTokenPosition+0x5a>
                break;
        }

        ++i;
 8003ccc:	89fb      	ldrh	r3, [r7, #14]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	81fb      	strh	r3, [r7, #14]
        if (tokenCount == pos)
 8003cd2:	e7e7      	b.n	8003ca4 <getTokenPosition+0x26>
            break;
 8003cd4:	bf00      	nop
 8003cd6:	e000      	b.n	8003cda <getTokenPosition+0x5c>
                break;
 8003cd8:	bf00      	nop
    }

    if (tokenizedStr[i] != '\0')
 8003cda:	89fb      	ldrh	r3, [r7, #14]
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	4413      	add	r3, r2
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <getTokenPosition+0x6c>
        return i;
 8003ce6:	89fb      	ldrh	r3, [r7, #14]
 8003ce8:	e001      	b.n	8003cee <getTokenPosition+0x70>
    else
        return CLI_TOKEN_NPOS;
 8003cea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <findCategoryIndex>:

/*************************************************
 *                   Helper API                  *
 *************************************************/
static int findCategoryIndex(const char* cat, const char* categories[], int catCount) {
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b086      	sub	sp, #24
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	60f8      	str	r0, [r7, #12]
 8003d02:	60b9      	str	r1, [r7, #8]
 8003d04:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < catCount; i++) {
 8003d06:	2300      	movs	r3, #0
 8003d08:	617b      	str	r3, [r7, #20]
 8003d0a:	e010      	b.n	8003d2e <findCategoryIndex+0x34>
        if (strcmp(cat, categories[i]) == 0) {
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	4413      	add	r3, r2
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4619      	mov	r1, r3
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f7fc fae1 	bl	80002e0 <strcmp>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <findCategoryIndex+0x2e>
            return i;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	e008      	b.n	8003d3a <findCategoryIndex+0x40>
    for (int i = 0; i < catCount; i++) {
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	617b      	str	r3, [r7, #20]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	dbea      	blt.n	8003d0c <findCategoryIndex+0x12>
        }
    }
    return -1;
 8003d36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3718      	adds	r7, #24
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
	...

08003d44 <printAlignedColumn>:

static void printAlignedColumn(EmbeddedCli *cli, const char *str, int colWidth) {
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
    int len = strlen(str);
 8003d50:	68b8      	ldr	r0, [r7, #8]
 8003d52:	f7fc facf 	bl	80002f4 <strlen>
 8003d56:	4603      	mov	r3, r0
 8003d58:	613b      	str	r3, [r7, #16]
    writeToOutput(cli, str);
 8003d5a:	68b9      	ldr	r1, [r7, #8]
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f7ff fdb0 	bl	80038c2 <writeToOutput>
    for (int i = 0; i < colWidth - len; i++) {
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]
 8003d66:	e006      	b.n	8003d76 <printAlignedColumn+0x32>
        writeToOutput(cli, " ");
 8003d68:	4908      	ldr	r1, [pc, #32]	@ (8003d8c <printAlignedColumn+0x48>)
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f7ff fda9 	bl	80038c2 <writeToOutput>
    for (int i = 0; i < colWidth - len; i++) {
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	3301      	adds	r3, #1
 8003d74:	617b      	str	r3, [r7, #20]
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	dbf2      	blt.n	8003d68 <printAlignedColumn+0x24>
    }
}
 8003d82:	bf00      	nop
 8003d84:	bf00      	nop
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	080113c8 	.word	0x080113c8

08003d90 <CMD_Help>:
void CMD_Help(EmbeddedCli *cli, char *tokens, void *context) {
 8003d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d94:	b095      	sub	sp, #84	@ 0x54
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	60f8      	str	r0, [r7, #12]
 8003d9a:	60b9      	str	r1, [r7, #8]
 8003d9c:	607a      	str	r2, [r7, #4]
    UNUSED(context);
    PREPARE_IMPL(cli);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	637b      	str	r3, [r7, #52]	@ 0x34

    if (impl->bindingsCount == 0) {
 8003da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003da6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10a      	bne.n	8003dc2 <CMD_Help+0x32>
        writeToOutput(cli, "Help is not available");
 8003dac:	498c      	ldr	r1, [pc, #560]	@ (8003fe0 <CMD_Help+0x250>)
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f7ff fd87 	bl	80038c2 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8003db4:	4b8b      	ldr	r3, [pc, #556]	@ (8003fe4 <CMD_Help+0x254>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4619      	mov	r1, r3
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f7ff fd81 	bl	80038c2 <writeToOutput>
        return;
 8003dc0:	e1ba      	b.n	8004138 <CMD_Help+0x3a8>
    }

    uint16_t tokenCount = embeddedCliGetTokenCount(tokens);
 8003dc2:	68b8      	ldr	r0, [r7, #8]
 8003dc4:	f7ff f866 	bl	8002e94 <embeddedCliGetTokenCount>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	867b      	strh	r3, [r7, #50]	@ 0x32
    if (tokenCount == 0) {
 8003dcc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f040 80f6 	bne.w	8003fc0 <CMD_Help+0x230>
 8003dd4:	466b      	mov	r3, sp
 8003dd6:	461e      	mov	r6, r3
        const int MAX_CAT = 32;
 8003dd8:	2320      	movs	r3, #32
 8003dda:	62bb      	str	r3, [r7, #40]	@ 0x28
        const char* categories[MAX_CAT];
 8003ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dde:	3b01      	subs	r3, #1
 8003de0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de4:	2200      	movs	r2, #0
 8003de6:	4698      	mov	r8, r3
 8003de8:	4691      	mov	r9, r2
 8003dea:	f04f 0200 	mov.w	r2, #0
 8003dee:	f04f 0300 	mov.w	r3, #0
 8003df2:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8003df6:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8003dfa:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8003dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e00:	2200      	movs	r2, #0
 8003e02:	461c      	mov	r4, r3
 8003e04:	4615      	mov	r5, r2
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	f04f 0300 	mov.w	r3, #0
 8003e0e:	016b      	lsls	r3, r5, #5
 8003e10:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8003e14:	0162      	lsls	r2, r4, #5
 8003e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	3307      	adds	r3, #7
 8003e1c:	08db      	lsrs	r3, r3, #3
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	ebad 0d03 	sub.w	sp, sp, r3
 8003e24:	466b      	mov	r3, sp
 8003e26:	3303      	adds	r3, #3
 8003e28:	089b      	lsrs	r3, r3, #2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	623b      	str	r3, [r7, #32]
        int catCount = 0;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	64fb      	str	r3, [r7, #76]	@ 0x4c

        for (int i = 0; i < impl->bindingsCount; i++) {
 8003e32:	2300      	movs	r3, #0
 8003e34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e36:	e02d      	b.n	8003e94 <CMD_Help+0x104>
            const char* cat = impl->bindings[i].category ? impl->bindings[i].category : "Uncategorized";
 8003e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e3a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003e3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e3e:	4613      	mov	r3, r2
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	4413      	add	r3, r2
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	440b      	add	r3, r1
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d009      	beq.n	8003e62 <CMD_Help+0xd2>
 8003e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e50:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003e52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e54:	4613      	mov	r3, r2
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	4413      	add	r3, r2
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	440b      	add	r3, r1
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	e000      	b.n	8003e64 <CMD_Help+0xd4>
 8003e62:	4b61      	ldr	r3, [pc, #388]	@ (8003fe8 <CMD_Help+0x258>)
 8003e64:	61bb      	str	r3, [r7, #24]
            int idx = findCategoryIndex(cat, categories, catCount);
 8003e66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e68:	6a39      	ldr	r1, [r7, #32]
 8003e6a:	69b8      	ldr	r0, [r7, #24]
 8003e6c:	f7ff ff45 	bl	8003cfa <findCategoryIndex>
 8003e70:	6178      	str	r0, [r7, #20]
            if (idx < 0 && catCount < MAX_CAT) {
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	da0a      	bge.n	8003e8e <CMD_Help+0xfe>
 8003e78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	da06      	bge.n	8003e8e <CMD_Help+0xfe>
                categories[catCount++] = cat;
 8003e80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e82:	1c5a      	adds	r2, r3, #1
 8003e84:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003e86:	6a3a      	ldr	r2, [r7, #32]
 8003e88:	69b9      	ldr	r1, [r7, #24]
 8003e8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (int i = 0; i < impl->bindingsCount; i++) {
 8003e8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e90:	3301      	adds	r3, #1
 8003e92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e96:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e98:	461a      	mov	r2, r3
 8003e9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	dbcb      	blt.n	8003e38 <CMD_Help+0xa8>
            }
        }

        for (int c = 0; c < catCount; c++) {
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ea4:	e085      	b.n	8003fb2 <CMD_Help+0x222>
            writeToOutput(cli, "[");
 8003ea6:	4951      	ldr	r1, [pc, #324]	@ (8003fec <CMD_Help+0x25c>)
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f7ff fd0a 	bl	80038c2 <writeToOutput>
            writeToOutput(cli, categories[c]);
 8003eae:	6a3b      	ldr	r3, [r7, #32]
 8003eb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f7ff fd02 	bl	80038c2 <writeToOutput>
            writeToOutput(cli, "]");
 8003ebe:	494c      	ldr	r1, [pc, #304]	@ (8003ff0 <CMD_Help+0x260>)
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f7ff fcfe 	bl	80038c2 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8003ec6:	4b47      	ldr	r3, [pc, #284]	@ (8003fe4 <CMD_Help+0x254>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4619      	mov	r1, r3
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f7ff fcf8 	bl	80038c2 <writeToOutput>

            for (int i = 0; i < impl->bindingsCount; i++) {
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ed6:	e05d      	b.n	8003f94 <CMD_Help+0x204>
                const char* cmdCat = impl->bindings[i].category ? impl->bindings[i].category : "Uncategorized";
 8003ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eda:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003edc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ede:	4613      	mov	r3, r2
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	4413      	add	r3, r2
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	440b      	add	r3, r1
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d009      	beq.n	8003f02 <CMD_Help+0x172>
 8003eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ef0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003ef2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	4413      	add	r3, r2
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	440b      	add	r3, r1
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	e000      	b.n	8003f04 <CMD_Help+0x174>
 8003f02:	4b39      	ldr	r3, [pc, #228]	@ (8003fe8 <CMD_Help+0x258>)
 8003f04:	61fb      	str	r3, [r7, #28]
                if (strcmp(cmdCat, categories[c]) == 0) {
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f0e:	4619      	mov	r1, r3
 8003f10:	69f8      	ldr	r0, [r7, #28]
 8003f12:	f7fc f9e5 	bl	80002e0 <strcmp>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d138      	bne.n	8003f8e <CMD_Help+0x1fe>
                	writeToOutput(cli, "    ");
 8003f1c:	4935      	ldr	r1, [pc, #212]	@ (8003ff4 <CMD_Help+0x264>)
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f7ff fccf 	bl	80038c2 <writeToOutput>
                	printAlignedColumn(cli, impl->bindings[i].name, CMD_NAME_COL_WIDTH);
 8003f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f26:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003f28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	4413      	add	r3, r2
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	440b      	add	r3, r1
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2210      	movs	r2, #16
 8003f38:	4619      	mov	r1, r3
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f7ff ff02 	bl	8003d44 <printAlignedColumn>
                	writeToOutput(cli, "| ");
 8003f40:	492d      	ldr	r1, [pc, #180]	@ (8003ff8 <CMD_Help+0x268>)
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f7ff fcbd 	bl	80038c2 <writeToOutput>
                	if (impl->bindings[i].help) {
 8003f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f4a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003f4c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f4e:	4613      	mov	r3, r2
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	4413      	add	r3, r2
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	440b      	add	r3, r1
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00d      	beq.n	8003f7a <CMD_Help+0x1ea>
                	    writeToOutput(cli, impl->bindings[i].help);
 8003f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f60:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003f62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f64:	4613      	mov	r3, r2
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	4413      	add	r3, r2
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	440b      	add	r3, r1
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	4619      	mov	r1, r3
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f7ff fca5 	bl	80038c2 <writeToOutput>
 8003f78:	e003      	b.n	8003f82 <CMD_Help+0x1f2>
                	} else {
                	    writeToOutput(cli, "(no help)");
 8003f7a:	4920      	ldr	r1, [pc, #128]	@ (8003ffc <CMD_Help+0x26c>)
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f7ff fca0 	bl	80038c2 <writeToOutput>
                	}
                	writeToOutput(cli, lineBreak);
 8003f82:	4b18      	ldr	r3, [pc, #96]	@ (8003fe4 <CMD_Help+0x254>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4619      	mov	r1, r3
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f7ff fc9a 	bl	80038c2 <writeToOutput>
            for (int i = 0; i < impl->bindingsCount; i++) {
 8003f8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f90:	3301      	adds	r3, #1
 8003f92:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f96:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f98:	461a      	mov	r2, r3
 8003f9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	db9b      	blt.n	8003ed8 <CMD_Help+0x148>
                }
            }
            writeToOutput(cli, lineBreak);
 8003fa0:	4b10      	ldr	r3, [pc, #64]	@ (8003fe4 <CMD_Help+0x254>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f7ff fc8b 	bl	80038c2 <writeToOutput>
        for (int c = 0; c < catCount; c++) {
 8003fac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fae:	3301      	adds	r3, #1
 8003fb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	f6ff af75 	blt.w	8003ea6 <CMD_Help+0x116>
 8003fbc:	46b5      	mov	sp, r6
 8003fbe:	e0bb      	b.n	8004138 <CMD_Help+0x3a8>
        }
    } else if (tokenCount == 1) {
 8003fc0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	f040 80ae 	bne.w	8004124 <CMD_Help+0x394>
        const char *cmdName = embeddedCliGetToken(tokens, 1);
 8003fc8:	2101      	movs	r1, #1
 8003fca:	68b8      	ldr	r0, [r7, #8]
 8003fcc:	f7fe ff2c 	bl	8002e28 <embeddedCliGetToken>
 8003fd0:	62f8      	str	r0, [r7, #44]	@ 0x2c
        bool found = false;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8003fd8:	2300      	movs	r3, #0
 8003fda:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003fdc:	e08f      	b.n	80040fe <CMD_Help+0x36e>
 8003fde:	bf00      	nop
 8003fe0:	080113e4 	.word	0x080113e4
 8003fe4:	2400006c 	.word	0x2400006c
 8003fe8:	080113fc 	.word	0x080113fc
 8003fec:	0801140c 	.word	0x0801140c
 8003ff0:	08011410 	.word	0x08011410
 8003ff4:	08011414 	.word	0x08011414
 8003ff8:	0801141c 	.word	0x0801141c
 8003ffc:	08011420 	.word	0x08011420
            if (strcmp(impl->bindings[i].name, cmdName) == 0) {
 8004000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004002:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004004:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004006:	4613      	mov	r3, r2
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	4413      	add	r3, r2
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	440b      	add	r3, r1
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004014:	4618      	mov	r0, r3
 8004016:	f7fc f963 	bl	80002e0 <strcmp>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d16b      	bne.n	80040f8 <CMD_Help+0x368>
                found = true;
 8004020:	2301      	movs	r3, #1
 8004022:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                writeToOutput(cli, "Command: ");
 8004026:	4946      	ldr	r1, [pc, #280]	@ (8004140 <CMD_Help+0x3b0>)
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f7ff fc4a 	bl	80038c2 <writeToOutput>
                writeToOutput(cli, impl->bindings[i].name);
 800402e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004030:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004032:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004034:	4613      	mov	r3, r2
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	4413      	add	r3, r2
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	440b      	add	r3, r1
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	4619      	mov	r1, r3
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f7ff fc3d 	bl	80038c2 <writeToOutput>
                writeToOutput(cli, lineBreak);
 8004048:	4b3e      	ldr	r3, [pc, #248]	@ (8004144 <CMD_Help+0x3b4>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4619      	mov	r1, r3
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f7ff fc37 	bl	80038c2 <writeToOutput>

                writeToOutput(cli, "Category: ");
 8004054:	493c      	ldr	r1, [pc, #240]	@ (8004148 <CMD_Help+0x3b8>)
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f7ff fc33 	bl	80038c2 <writeToOutput>
                writeToOutput(cli, impl->bindings[i].category ? impl->bindings[i].category : "Uncategorized");
 800405c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800405e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004060:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004062:	4613      	mov	r3, r2
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	4413      	add	r3, r2
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	440b      	add	r3, r1
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d009      	beq.n	8004086 <CMD_Help+0x2f6>
 8004072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004074:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004076:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004078:	4613      	mov	r3, r2
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	4413      	add	r3, r2
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	440b      	add	r3, r1
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	e000      	b.n	8004088 <CMD_Help+0x2f8>
 8004086:	4b31      	ldr	r3, [pc, #196]	@ (800414c <CMD_Help+0x3bc>)
 8004088:	4619      	mov	r1, r3
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f7ff fc19 	bl	80038c2 <writeToOutput>
                writeToOutput(cli, lineBreak);
 8004090:	4b2c      	ldr	r3, [pc, #176]	@ (8004144 <CMD_Help+0x3b4>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4619      	mov	r1, r3
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f7ff fc13 	bl	80038c2 <writeToOutput>

                if (impl->bindings[i].help) {
 800409c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800409e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80040a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80040a2:	4613      	mov	r3, r2
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	4413      	add	r3, r2
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	440b      	add	r3, r1
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d017      	beq.n	80040e2 <CMD_Help+0x352>
                    writeToOutput(cli, "Help: ");
 80040b2:	4927      	ldr	r1, [pc, #156]	@ (8004150 <CMD_Help+0x3c0>)
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f7ff fc04 	bl	80038c2 <writeToOutput>
                    writeToOutput(cli, impl->bindings[i].help);
 80040ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040bc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80040be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80040c0:	4613      	mov	r3, r2
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	4413      	add	r3, r2
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	440b      	add	r3, r1
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	4619      	mov	r1, r3
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f7ff fbf7 	bl	80038c2 <writeToOutput>
                    writeToOutput(cli, lineBreak);
 80040d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004144 <CMD_Help+0x3b4>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4619      	mov	r1, r3
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f7ff fbf1 	bl	80038c2 <writeToOutput>
                } else {
                    writeToOutput(cli, "(no help)");
                    writeToOutput(cli, lineBreak);
                }
                break;
 80040e0:	e014      	b.n	800410c <CMD_Help+0x37c>
                    writeToOutput(cli, "(no help)");
 80040e2:	491c      	ldr	r1, [pc, #112]	@ (8004154 <CMD_Help+0x3c4>)
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f7ff fbec 	bl	80038c2 <writeToOutput>
                    writeToOutput(cli, lineBreak);
 80040ea:	4b16      	ldr	r3, [pc, #88]	@ (8004144 <CMD_Help+0x3b4>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4619      	mov	r1, r3
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f7ff fbe6 	bl	80038c2 <writeToOutput>
                break;
 80040f6:	e009      	b.n	800410c <CMD_Help+0x37c>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 80040f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040fa:	3301      	adds	r3, #1
 80040fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004100:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004102:	461a      	mov	r2, r3
 8004104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004106:	4293      	cmp	r3, r2
 8004108:	f6ff af7a 	blt.w	8004000 <CMD_Help+0x270>
            }
        }
        if (!found) {
 800410c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004110:	f083 0301 	eor.w	r3, r3, #1
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00e      	beq.n	8004138 <CMD_Help+0x3a8>
            onUnknownCommand(cli, cmdName);
 800411a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f000 f81d 	bl	800415c <onUnknownCommand>
 8004122:	e009      	b.n	8004138 <CMD_Help+0x3a8>
        }
    } else {
        writeToOutput(cli, "Command \"help\" receives one or zero arguments");
 8004124:	490c      	ldr	r1, [pc, #48]	@ (8004158 <CMD_Help+0x3c8>)
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f7ff fbcb 	bl	80038c2 <writeToOutput>
        writeToOutput(cli, lineBreak);
 800412c:	4b05      	ldr	r3, [pc, #20]	@ (8004144 <CMD_Help+0x3b4>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4619      	mov	r1, r3
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f7ff fbc5 	bl	80038c2 <writeToOutput>
    }
}
 8004138:	3754      	adds	r7, #84	@ 0x54
 800413a:	46bd      	mov	sp, r7
 800413c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004140:	0801142c 	.word	0x0801142c
 8004144:	2400006c 	.word	0x2400006c
 8004148:	08011438 	.word	0x08011438
 800414c:	080113fc 	.word	0x080113fc
 8004150:	08011444 	.word	0x08011444
 8004154:	08011420 	.word	0x08011420
 8004158:	0801144c 	.word	0x0801144c

0800415c <onUnknownCommand>:

static void onUnknownCommand(EmbeddedCli *cli, const char *name) {
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
    writeToOutput(cli, "Unknown command: \"");
 8004166:	490b      	ldr	r1, [pc, #44]	@ (8004194 <onUnknownCommand+0x38>)
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f7ff fbaa 	bl	80038c2 <writeToOutput>
    writeToOutput(cli, name);
 800416e:	6839      	ldr	r1, [r7, #0]
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7ff fba6 	bl	80038c2 <writeToOutput>
    writeToOutput(cli, "\". Write \"help\" for a list of available commands");
 8004176:	4908      	ldr	r1, [pc, #32]	@ (8004198 <onUnknownCommand+0x3c>)
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7ff fba2 	bl	80038c2 <writeToOutput>
    writeToOutput(cli, lineBreak);
 800417e:	4b07      	ldr	r3, [pc, #28]	@ (800419c <onUnknownCommand+0x40>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4619      	mov	r1, r3
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7ff fb9c 	bl	80038c2 <writeToOutput>
}
 800418a:	bf00      	nop
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	0801147c 	.word	0x0801147c
 8004198:	08011490 	.word	0x08011490
 800419c:	2400006c 	.word	0x2400006c

080041a0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f103 0208 	add.w	r2, r3, #8
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f04f 32ff 	mov.w	r2, #4294967295
 80041b8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f103 0208 	add.w	r2, r3, #8
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f103 0208 	add.w	r2, r3, #8
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80041fa:	b480      	push	{r7}
 80041fc:	b085      	sub	sp, #20
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
 8004202:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004210:	d103      	bne.n	800421a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	e00c      	b.n	8004234 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	3308      	adds	r3, #8
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	e002      	b.n	8004228 <vListInsert+0x2e>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	429a      	cmp	r2, r3
 8004232:	d2f6      	bcs.n	8004222 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8004260:	bf00      	nop
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6892      	ldr	r2, [r2, #8]
 8004282:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6852      	ldr	r2, [r2, #4]
 800428c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	429a      	cmp	r2, r3
 8004296:	d103      	bne.n	80042a0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	1e5a      	subs	r2, r3, #1
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80042ca:	2301      	movs	r3, #1
 80042cc:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10d      	bne.n	80042f4 <xQueueGenericReset+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80042d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042dc:	b672      	cpsid	i
 80042de:	f383 8811 	msr	BASEPRI, r3
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	f3bf 8f4f 	dsb	sy
 80042ea:	b662      	cpsie	i
 80042ec:	60fb      	str	r3, [r7, #12]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80042ee:	bf00      	nop
 80042f0:	bf00      	nop
 80042f2:	e7fd      	b.n	80042f0 <xQueueGenericReset+0x30>

    if( ( pxQueue != NULL ) &&
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d05d      	beq.n	80043b6 <xQueueGenericReset+0xf6>
        ( pxQueue->uxLength >= 1U ) &&
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d059      	beq.n	80043b6 <xQueueGenericReset+0xf6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800430a:	2100      	movs	r1, #0
 800430c:	fba3 2302 	umull	r2, r3, r3, r2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d000      	beq.n	8004316 <xQueueGenericReset+0x56>
 8004314:	2101      	movs	r1, #1
 8004316:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8004318:	2b00      	cmp	r3, #0
 800431a:	d14c      	bne.n	80043b6 <xQueueGenericReset+0xf6>
    {
        taskENTER_CRITICAL();
 800431c:	f002 ff1a 	bl	8007154 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004328:	6939      	ldr	r1, [r7, #16]
 800432a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800432c:	fb01 f303 	mul.w	r3, r1, r3
 8004330:	441a      	add	r2, r3
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	2200      	movs	r2, #0
 800433a:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800434c:	3b01      	subs	r3, #1
 800434e:	6939      	ldr	r1, [r7, #16]
 8004350:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004352:	fb01 f303 	mul.w	r3, r1, r3
 8004356:	441a      	add	r2, r3
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	22ff      	movs	r2, #255	@ 0xff
 8004360:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	22ff      	movs	r2, #255	@ 0xff
 8004368:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d114      	bne.n	800439c <xQueueGenericReset+0xdc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d01a      	beq.n	80043b0 <xQueueGenericReset+0xf0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	3310      	adds	r3, #16
 800437e:	4618      	mov	r0, r3
 8004380:	f001 fdd4 	bl	8005f2c <xTaskRemoveFromEventList>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d012      	beq.n	80043b0 <xQueueGenericReset+0xf0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800438a:	4b17      	ldr	r3, [pc, #92]	@ (80043e8 <xQueueGenericReset+0x128>)
 800438c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	f3bf 8f4f 	dsb	sy
 8004396:	f3bf 8f6f 	isb	sy
 800439a:	e009      	b.n	80043b0 <xQueueGenericReset+0xf0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	3310      	adds	r3, #16
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff fefd 	bl	80041a0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	3324      	adds	r3, #36	@ 0x24
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7ff fef8 	bl	80041a0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80043b0:	f002 ff06 	bl	80071c0 <vPortExitCritical>
 80043b4:	e001      	b.n	80043ba <xQueueGenericReset+0xfa>
    }
    else
    {
        xReturn = pdFAIL;
 80043b6:	2300      	movs	r3, #0
 80043b8:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10d      	bne.n	80043dc <xQueueGenericReset+0x11c>
    __asm volatile
 80043c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c4:	b672      	cpsid	i
 80043c6:	f383 8811 	msr	BASEPRI, r3
 80043ca:	f3bf 8f6f 	isb	sy
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	b662      	cpsie	i
 80043d4:	60bb      	str	r3, [r7, #8]
}
 80043d6:	bf00      	nop
 80043d8:	bf00      	nop
 80043da:	e7fd      	b.n	80043d8 <xQueueGenericReset+0x118>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 80043dc:	697b      	ldr	r3, [r7, #20]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	e000ed04 	.word	0xe000ed04

080043ec <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08c      	sub	sp, #48	@ 0x30
 80043f0:	af02      	add	r7, sp, #8
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
 80043f8:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 80043fa:	2300      	movs	r3, #0
 80043fc:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xQueueGenericCreateStatic( uxQueueLength, uxItemSize, pucQueueStorage, pxStaticQueue, ucQueueType );

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10d      	bne.n	8004420 <xQueueGenericCreateStatic+0x34>
    __asm volatile
 8004404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004408:	b672      	cpsid	i
 800440a:	f383 8811 	msr	BASEPRI, r3
 800440e:	f3bf 8f6f 	isb	sy
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	b662      	cpsie	i
 8004418:	623b      	str	r3, [r7, #32]
}
 800441a:	bf00      	nop
 800441c:	bf00      	nop
 800441e:	e7fd      	b.n	800441c <xQueueGenericCreateStatic+0x30>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d033      	beq.n	800448e <xQueueGenericCreateStatic+0xa2>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d030      	beq.n	800448e <xQueueGenericCreateStatic+0xa2>
            ( pxStaticQueue != NULL ) &&
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d002      	beq.n	8004438 <xQueueGenericCreateStatic+0x4c>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0U ) ) ) &&
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d02a      	beq.n	800448e <xQueueGenericCreateStatic+0xa2>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d102      	bne.n	8004444 <xQueueGenericCreateStatic+0x58>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0U ) ) ) )
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d124      	bne.n	800448e <xQueueGenericCreateStatic+0xa2>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 8004444:	2350      	movs	r3, #80	@ 0x50
 8004446:	617b      	str	r3, [r7, #20]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	2b50      	cmp	r3, #80	@ 0x50
 800444c:	d00d      	beq.n	800446a <xQueueGenericCreateStatic+0x7e>
    __asm volatile
 800444e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004452:	b672      	cpsid	i
 8004454:	f383 8811 	msr	BASEPRI, r3
 8004458:	f3bf 8f6f 	isb	sy
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	b662      	cpsie	i
 8004462:	61fb      	str	r3, [r7, #28]
}
 8004464:	bf00      	nop
 8004466:	bf00      	nop
 8004468:	e7fd      	b.n	8004466 <xQueueGenericCreateStatic+0x7a>
                ( void ) xSize;                             /* Prevent unused variable warning when configASSERT() is not defined. */
 800446a:	697b      	ldr	r3, [r7, #20]
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewQueue = ( Queue_t * ) pxStaticQueue;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	627b      	str	r3, [r7, #36]	@ 0x24
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004478:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800447c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447e:	9300      	str	r3, [sp, #0]
 8004480:	4613      	mov	r3, r2
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	68b9      	ldr	r1, [r7, #8]
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f000 f86c 	bl	8004564 <prvInitialiseNewQueue>
 800448c:	e010      	b.n	80044b0 <xQueueGenericCreateStatic+0xc4>
        }
        else
        {
            configASSERT( pxNewQueue );
 800448e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10d      	bne.n	80044b0 <xQueueGenericCreateStatic+0xc4>
    __asm volatile
 8004494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004498:	b672      	cpsid	i
 800449a:	f383 8811 	msr	BASEPRI, r3
 800449e:	f3bf 8f6f 	isb	sy
 80044a2:	f3bf 8f4f 	dsb	sy
 80044a6:	b662      	cpsie	i
 80044a8:	61bb      	str	r3, [r7, #24]
}
 80044aa:	bf00      	nop
 80044ac:	bf00      	nop
 80044ae:	e7fd      	b.n	80044ac <xQueueGenericCreateStatic+0xc0>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreateStatic( pxNewQueue );

        return pxNewQueue;
 80044b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80044b2:	4618      	mov	r0, r3
 80044b4:	3728      	adds	r7, #40	@ 0x28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b08a      	sub	sp, #40	@ 0x28
 80044be:	af02      	add	r7, sp, #8
 80044c0:	60f8      	str	r0, [r7, #12]
 80044c2:	60b9      	str	r1, [r7, #8]
 80044c4:	4613      	mov	r3, r2
 80044c6:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80044c8:	2300      	movs	r3, #0
 80044ca:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d032      	beq.n	8004538 <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80044d2:	2100      	movs	r1, #0
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	fba3 2302 	umull	r2, r3, r3, r2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d000      	beq.n	80044e2 <xQueueGenericCreate+0x28>
 80044e0:	2101      	movs	r1, #1
 80044e2:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d127      	bne.n	8004538 <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80044f0:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80044f4:	d820      	bhi.n	8004538 <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	fb02 f303 	mul.w	r3, r2, r3
 80044fe:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	3350      	adds	r3, #80	@ 0x50
 8004504:	4618      	mov	r0, r3
 8004506:	f002 ff59 	bl	80073bc <pvPortMalloc>
 800450a:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d023      	beq.n	800455a <xQueueGenericCreate+0xa0>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	3350      	adds	r3, #80	@ 0x50
 800451a:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004524:	79fa      	ldrb	r2, [r7, #7]
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	4613      	mov	r3, r2
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	68b9      	ldr	r1, [r7, #8]
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 f817 	bl	8004564 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8004536:	e010      	b.n	800455a <xQueueGenericCreate+0xa0>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10d      	bne.n	800455a <xQueueGenericCreate+0xa0>
    __asm volatile
 800453e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004542:	b672      	cpsid	i
 8004544:	f383 8811 	msr	BASEPRI, r3
 8004548:	f3bf 8f6f 	isb	sy
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	b662      	cpsie	i
 8004552:	613b      	str	r3, [r7, #16]
}
 8004554:	bf00      	nop
 8004556:	bf00      	nop
 8004558:	e7fd      	b.n	8004556 <xQueueGenericCreate+0x9c>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 800455a:	69fb      	ldr	r3, [r7, #28]
    }
 800455c:	4618      	mov	r0, r3
 800455e:	3720      	adds	r7, #32
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
 8004570:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d103      	bne.n	8004580 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	e002      	b.n	8004586 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004592:	2101      	movs	r1, #1
 8004594:	69b8      	ldr	r0, [r7, #24]
 8004596:	f7ff fe93 	bl	80042c0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	78fa      	ldrb	r2, [r7, #3]
 800459e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80045a2:	bf00      	nop
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
	...

080045ac <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b08e      	sub	sp, #56	@ 0x38
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
 80045b8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80045ba:	2300      	movs	r3, #0
 80045bc:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 80045c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10d      	bne.n	80045e4 <xQueueGenericSend+0x38>
    __asm volatile
 80045c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045cc:	b672      	cpsid	i
 80045ce:	f383 8811 	msr	BASEPRI, r3
 80045d2:	f3bf 8f6f 	isb	sy
 80045d6:	f3bf 8f4f 	dsb	sy
 80045da:	b662      	cpsie	i
 80045dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80045de:	bf00      	nop
 80045e0:	bf00      	nop
 80045e2:	e7fd      	b.n	80045e0 <xQueueGenericSend+0x34>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d103      	bne.n	80045f2 <xQueueGenericSend+0x46>
 80045ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <xQueueGenericSend+0x4a>
 80045f2:	2301      	movs	r3, #1
 80045f4:	e000      	b.n	80045f8 <xQueueGenericSend+0x4c>
 80045f6:	2300      	movs	r3, #0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10d      	bne.n	8004618 <xQueueGenericSend+0x6c>
    __asm volatile
 80045fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004600:	b672      	cpsid	i
 8004602:	f383 8811 	msr	BASEPRI, r3
 8004606:	f3bf 8f6f 	isb	sy
 800460a:	f3bf 8f4f 	dsb	sy
 800460e:	b662      	cpsie	i
 8004610:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004612:	bf00      	nop
 8004614:	bf00      	nop
 8004616:	e7fd      	b.n	8004614 <xQueueGenericSend+0x68>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	2b02      	cmp	r3, #2
 800461c:	d103      	bne.n	8004626 <xQueueGenericSend+0x7a>
 800461e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004620:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004622:	2b01      	cmp	r3, #1
 8004624:	d101      	bne.n	800462a <xQueueGenericSend+0x7e>
 8004626:	2301      	movs	r3, #1
 8004628:	e000      	b.n	800462c <xQueueGenericSend+0x80>
 800462a:	2300      	movs	r3, #0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10d      	bne.n	800464c <xQueueGenericSend+0xa0>
    __asm volatile
 8004630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004634:	b672      	cpsid	i
 8004636:	f383 8811 	msr	BASEPRI, r3
 800463a:	f3bf 8f6f 	isb	sy
 800463e:	f3bf 8f4f 	dsb	sy
 8004642:	b662      	cpsie	i
 8004644:	623b      	str	r3, [r7, #32]
}
 8004646:	bf00      	nop
 8004648:	bf00      	nop
 800464a:	e7fd      	b.n	8004648 <xQueueGenericSend+0x9c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800464c:	f001 fe9e 	bl	800638c <xTaskGetSchedulerState>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d102      	bne.n	800465c <xQueueGenericSend+0xb0>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <xQueueGenericSend+0xb4>
 800465c:	2301      	movs	r3, #1
 800465e:	e000      	b.n	8004662 <xQueueGenericSend+0xb6>
 8004660:	2300      	movs	r3, #0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10d      	bne.n	8004682 <xQueueGenericSend+0xd6>
    __asm volatile
 8004666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800466a:	b672      	cpsid	i
 800466c:	f383 8811 	msr	BASEPRI, r3
 8004670:	f3bf 8f6f 	isb	sy
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	b662      	cpsie	i
 800467a:	61fb      	str	r3, [r7, #28]
}
 800467c:	bf00      	nop
 800467e:	bf00      	nop
 8004680:	e7fd      	b.n	800467e <xQueueGenericSend+0xd2>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004682:	f002 fd67 	bl	8007154 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004688:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800468a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800468c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800468e:	429a      	cmp	r2, r3
 8004690:	d302      	bcc.n	8004698 <xQueueGenericSend+0xec>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b02      	cmp	r3, #2
 8004696:	d129      	bne.n	80046ec <xQueueGenericSend+0x140>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	68b9      	ldr	r1, [r7, #8]
 800469c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800469e:	f000 fc3e 	bl	8004f1e <prvCopyDataToQueue>
 80046a2:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d010      	beq.n	80046ce <xQueueGenericSend+0x122>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ae:	3324      	adds	r3, #36	@ 0x24
 80046b0:	4618      	mov	r0, r3
 80046b2:	f001 fc3b 	bl	8005f2c <xTaskRemoveFromEventList>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d013      	beq.n	80046e4 <xQueueGenericSend+0x138>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80046bc:	4b3f      	ldr	r3, [pc, #252]	@ (80047bc <xQueueGenericSend+0x210>)
 80046be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	f3bf 8f6f 	isb	sy
 80046cc:	e00a      	b.n	80046e4 <xQueueGenericSend+0x138>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80046ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d007      	beq.n	80046e4 <xQueueGenericSend+0x138>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80046d4:	4b39      	ldr	r3, [pc, #228]	@ (80047bc <xQueueGenericSend+0x210>)
 80046d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046da:	601a      	str	r2, [r3, #0]
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80046e4:	f002 fd6c 	bl	80071c0 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e063      	b.n	80047b4 <xQueueGenericSend+0x208>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d103      	bne.n	80046fa <xQueueGenericSend+0x14e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80046f2:	f002 fd65 	bl	80071c0 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 80046f6:	2300      	movs	r3, #0
 80046f8:	e05c      	b.n	80047b4 <xQueueGenericSend+0x208>
                }
                else if( xEntryTimeSet == pdFALSE )
 80046fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d106      	bne.n	800470e <xQueueGenericSend+0x162>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004700:	f107 0314 	add.w	r3, r7, #20
 8004704:	4618      	mov	r0, r3
 8004706:	f001 fced 	bl	80060e4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800470a:	2301      	movs	r3, #1
 800470c:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800470e:	f002 fd57 	bl	80071c0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004712:	f001 f8d9 	bl	80058c8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004716:	f002 fd1d 	bl	8007154 <vPortEnterCritical>
 800471a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800471c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004720:	b25b      	sxtb	r3, r3
 8004722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004726:	d103      	bne.n	8004730 <xQueueGenericSend+0x184>
 8004728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800472a:	2200      	movs	r2, #0
 800472c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004732:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004736:	b25b      	sxtb	r3, r3
 8004738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800473c:	d103      	bne.n	8004746 <xQueueGenericSend+0x19a>
 800473e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004740:	2200      	movs	r2, #0
 8004742:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004746:	f002 fd3b 	bl	80071c0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800474a:	1d3a      	adds	r2, r7, #4
 800474c:	f107 0314 	add.w	r3, r7, #20
 8004750:	4611      	mov	r1, r2
 8004752:	4618      	mov	r0, r3
 8004754:	f001 fcdc 	bl	8006110 <xTaskCheckForTimeOut>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d124      	bne.n	80047a8 <xQueueGenericSend+0x1fc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800475e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004760:	f000 fcd5 	bl	800510e <prvIsQueueFull>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d018      	beq.n	800479c <xQueueGenericSend+0x1f0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800476a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476c:	3310      	adds	r3, #16
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	4611      	mov	r1, r2
 8004772:	4618      	mov	r0, r3
 8004774:	f001 fb6a 	bl	8005e4c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004778:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800477a:	f000 fc60 	bl	800503e <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800477e:	f001 f8b1 	bl	80058e4 <xTaskResumeAll>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	f47f af7c 	bne.w	8004682 <xQueueGenericSend+0xd6>
                {
                    taskYIELD_WITHIN_API();
 800478a:	4b0c      	ldr	r3, [pc, #48]	@ (80047bc <xQueueGenericSend+0x210>)
 800478c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004790:	601a      	str	r2, [r3, #0]
 8004792:	f3bf 8f4f 	dsb	sy
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	e772      	b.n	8004682 <xQueueGenericSend+0xd6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800479c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800479e:	f000 fc4e 	bl	800503e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80047a2:	f001 f89f 	bl	80058e4 <xTaskResumeAll>
 80047a6:	e76c      	b.n	8004682 <xQueueGenericSend+0xd6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80047a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047aa:	f000 fc48 	bl	800503e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80047ae:	f001 f899 	bl	80058e4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 80047b2:	2300      	movs	r3, #0
        }
    }
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3738      	adds	r7, #56	@ 0x38
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	e000ed04 	.word	0xe000ed04

080047c0 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b092      	sub	sp, #72	@ 0x48
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
 80047cc:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	643b      	str	r3, [r7, #64]	@ 0x40

    traceENTER_xQueueGenericSendFromISR( xQueue, pvItemToQueue, pxHigherPriorityTaskWoken, xCopyPosition );

    configASSERT( pxQueue );
 80047d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10d      	bne.n	80047f4 <xQueueGenericSendFromISR+0x34>
    __asm volatile
 80047d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047dc:	b672      	cpsid	i
 80047de:	f383 8811 	msr	BASEPRI, r3
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	b662      	cpsie	i
 80047ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
 80047ee:	bf00      	nop
 80047f0:	bf00      	nop
 80047f2:	e7fd      	b.n	80047f0 <xQueueGenericSendFromISR+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d103      	bne.n	8004802 <xQueueGenericSendFromISR+0x42>
 80047fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <xQueueGenericSendFromISR+0x46>
 8004802:	2301      	movs	r3, #1
 8004804:	e000      	b.n	8004808 <xQueueGenericSendFromISR+0x48>
 8004806:	2300      	movs	r3, #0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d10d      	bne.n	8004828 <xQueueGenericSendFromISR+0x68>
    __asm volatile
 800480c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004810:	b672      	cpsid	i
 8004812:	f383 8811 	msr	BASEPRI, r3
 8004816:	f3bf 8f6f 	isb	sy
 800481a:	f3bf 8f4f 	dsb	sy
 800481e:	b662      	cpsie	i
 8004820:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004822:	bf00      	nop
 8004824:	bf00      	nop
 8004826:	e7fd      	b.n	8004824 <xQueueGenericSendFromISR+0x64>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	2b02      	cmp	r3, #2
 800482c:	d103      	bne.n	8004836 <xQueueGenericSendFromISR+0x76>
 800482e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004832:	2b01      	cmp	r3, #1
 8004834:	d101      	bne.n	800483a <xQueueGenericSendFromISR+0x7a>
 8004836:	2301      	movs	r3, #1
 8004838:	e000      	b.n	800483c <xQueueGenericSendFromISR+0x7c>
 800483a:	2300      	movs	r3, #0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10d      	bne.n	800485c <xQueueGenericSendFromISR+0x9c>
    __asm volatile
 8004840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004844:	b672      	cpsid	i
 8004846:	f383 8811 	msr	BASEPRI, r3
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	b662      	cpsie	i
 8004854:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004856:	bf00      	nop
 8004858:	bf00      	nop
 800485a:	e7fd      	b.n	8004858 <xQueueGenericSendFromISR+0x98>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800485c:	f002 fd68 	bl	8007330 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8004860:	f3ef 8211 	mrs	r2, BASEPRI
 8004864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004868:	b672      	cpsid	i
 800486a:	f383 8811 	msr	BASEPRI, r3
 800486e:	f3bf 8f6f 	isb	sy
 8004872:	f3bf 8f4f 	dsb	sy
 8004876:	b662      	cpsie	i
 8004878:	623a      	str	r2, [r7, #32]
 800487a:	61fb      	str	r3, [r7, #28]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 800487c:	6a3b      	ldr	r3, [r7, #32]
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 800487e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004880:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004882:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004884:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004888:	429a      	cmp	r2, r3
 800488a:	d302      	bcc.n	8004892 <xQueueGenericSendFromISR+0xd2>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	2b02      	cmp	r3, #2
 8004890:	d149      	bne.n	8004926 <xQueueGenericSendFromISR+0x166>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004892:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004894:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004898:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800489c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800489e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a0:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	68b9      	ldr	r1, [r7, #8]
 80048a6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80048a8:	f000 fb39 	bl	8004f1e <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80048ac:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 80048b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b4:	d112      	bne.n	80048dc <xQueueGenericSendFromISR+0x11c>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d030      	beq.n	8004920 <xQueueGenericSendFromISR+0x160>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048c0:	3324      	adds	r3, #36	@ 0x24
 80048c2:	4618      	mov	r0, r3
 80048c4:	f001 fb32 	bl	8005f2c <xTaskRemoveFromEventList>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d028      	beq.n	8004920 <xQueueGenericSendFromISR+0x160>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d025      	beq.n	8004920 <xQueueGenericSendFromISR+0x160>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	e021      	b.n	8004920 <xQueueGenericSendFromISR+0x160>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 80048dc:	f001 f92e 	bl	8005b3c <uxTaskGetNumberOfTasks>
 80048e0:	6338      	str	r0, [r7, #48]	@ 0x30
 80048e2:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 80048e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d919      	bls.n	8004920 <xQueueGenericSendFromISR+0x160>
 80048ec:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 80048f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80048f2:	d10d      	bne.n	8004910 <xQueueGenericSendFromISR+0x150>
    __asm volatile
 80048f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f8:	b672      	cpsid	i
 80048fa:	f383 8811 	msr	BASEPRI, r3
 80048fe:	f3bf 8f6f 	isb	sy
 8004902:	f3bf 8f4f 	dsb	sy
 8004906:	b662      	cpsie	i
 8004908:	61bb      	str	r3, [r7, #24]
}
 800490a:	bf00      	nop
 800490c:	bf00      	nop
 800490e:	e7fd      	b.n	800490c <xQueueGenericSendFromISR+0x14c>
 8004910:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8004914:	3301      	adds	r3, #1
 8004916:	b2db      	uxtb	r3, r3
 8004918:	b25a      	sxtb	r2, r3
 800491a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800491c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8004920:	2301      	movs	r3, #1
 8004922:	647b      	str	r3, [r7, #68]	@ 0x44
        {
 8004924:	e001      	b.n	800492a <xQueueGenericSendFromISR+0x16a>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8004926:	2300      	movs	r3, #0
 8004928:	647b      	str	r3, [r7, #68]	@ 0x44
 800492a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800492c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8004934:	bf00      	nop
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGenericSendFromISR( xReturn );

    return xReturn;
 8004936:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8004938:	4618      	mov	r0, r3
 800493a:	3748      	adds	r7, #72	@ 0x48
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b08c      	sub	sp, #48	@ 0x30
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800494c:	2300      	movs	r3, #0
 800494e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10d      	bne.n	8004976 <xQueueReceive+0x36>
    __asm volatile
 800495a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800495e:	b672      	cpsid	i
 8004960:	f383 8811 	msr	BASEPRI, r3
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	b662      	cpsie	i
 800496e:	623b      	str	r3, [r7, #32]
}
 8004970:	bf00      	nop
 8004972:	bf00      	nop
 8004974:	e7fd      	b.n	8004972 <xQueueReceive+0x32>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d103      	bne.n	8004984 <xQueueReceive+0x44>
 800497c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004980:	2b00      	cmp	r3, #0
 8004982:	d101      	bne.n	8004988 <xQueueReceive+0x48>
 8004984:	2301      	movs	r3, #1
 8004986:	e000      	b.n	800498a <xQueueReceive+0x4a>
 8004988:	2300      	movs	r3, #0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10d      	bne.n	80049aa <xQueueReceive+0x6a>
    __asm volatile
 800498e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004992:	b672      	cpsid	i
 8004994:	f383 8811 	msr	BASEPRI, r3
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	b662      	cpsie	i
 80049a2:	61fb      	str	r3, [r7, #28]
}
 80049a4:	bf00      	nop
 80049a6:	bf00      	nop
 80049a8:	e7fd      	b.n	80049a6 <xQueueReceive+0x66>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049aa:	f001 fcef 	bl	800638c <xTaskGetSchedulerState>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d102      	bne.n	80049ba <xQueueReceive+0x7a>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <xQueueReceive+0x7e>
 80049ba:	2301      	movs	r3, #1
 80049bc:	e000      	b.n	80049c0 <xQueueReceive+0x80>
 80049be:	2300      	movs	r3, #0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10d      	bne.n	80049e0 <xQueueReceive+0xa0>
    __asm volatile
 80049c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049c8:	b672      	cpsid	i
 80049ca:	f383 8811 	msr	BASEPRI, r3
 80049ce:	f3bf 8f6f 	isb	sy
 80049d2:	f3bf 8f4f 	dsb	sy
 80049d6:	b662      	cpsie	i
 80049d8:	61bb      	str	r3, [r7, #24]
}
 80049da:	bf00      	nop
 80049dc:	bf00      	nop
 80049de:	e7fd      	b.n	80049dc <xQueueReceive+0x9c>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80049e0:	f002 fbb8 	bl	8007154 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e8:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d01f      	beq.n	8004a30 <xQueueReceive+0xf0>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80049f0:	68b9      	ldr	r1, [r7, #8]
 80049f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049f4:	f000 fafd 	bl	8004ff2 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 80049f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fa:	1e5a      	subs	r2, r3, #1
 80049fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049fe:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00f      	beq.n	8004a28 <xQueueReceive+0xe8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a0a:	3310      	adds	r3, #16
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f001 fa8d 	bl	8005f2c <xTaskRemoveFromEventList>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d007      	beq.n	8004a28 <xQueueReceive+0xe8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004a18:	4b3c      	ldr	r3, [pc, #240]	@ (8004b0c <xQueueReceive+0x1cc>)
 8004a1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004a28:	f002 fbca 	bl	80071c0 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e069      	b.n	8004b04 <xQueueReceive+0x1c4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d103      	bne.n	8004a3e <xQueueReceive+0xfe>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004a36:	f002 fbc3 	bl	80071c0 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	e062      	b.n	8004b04 <xQueueReceive+0x1c4>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d106      	bne.n	8004a52 <xQueueReceive+0x112>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004a44:	f107 0310 	add.w	r3, r7, #16
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f001 fb4b 	bl	80060e4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004a52:	f002 fbb5 	bl	80071c0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004a56:	f000 ff37 	bl	80058c8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004a5a:	f002 fb7b 	bl	8007154 <vPortEnterCritical>
 8004a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a64:	b25b      	sxtb	r3, r3
 8004a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6a:	d103      	bne.n	8004a74 <xQueueReceive+0x134>
 8004a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a76:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a7a:	b25b      	sxtb	r3, r3
 8004a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a80:	d103      	bne.n	8004a8a <xQueueReceive+0x14a>
 8004a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a8a:	f002 fb99 	bl	80071c0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a8e:	1d3a      	adds	r2, r7, #4
 8004a90:	f107 0310 	add.w	r3, r7, #16
 8004a94:	4611      	mov	r1, r2
 8004a96:	4618      	mov	r0, r3
 8004a98:	f001 fb3a 	bl	8006110 <xTaskCheckForTimeOut>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d123      	bne.n	8004aea <xQueueReceive+0x1aa>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004aa2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004aa4:	f000 fb1d 	bl	80050e2 <prvIsQueueEmpty>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d017      	beq.n	8004ade <xQueueReceive+0x19e>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab0:	3324      	adds	r3, #36	@ 0x24
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	4611      	mov	r1, r2
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f001 f9c8 	bl	8005e4c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004abc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004abe:	f000 fabe 	bl	800503e <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004ac2:	f000 ff0f 	bl	80058e4 <xTaskResumeAll>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d189      	bne.n	80049e0 <xQueueReceive+0xa0>
                {
                    taskYIELD_WITHIN_API();
 8004acc:	4b0f      	ldr	r3, [pc, #60]	@ (8004b0c <xQueueReceive+0x1cc>)
 8004ace:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	f3bf 8f4f 	dsb	sy
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	e780      	b.n	80049e0 <xQueueReceive+0xa0>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004ade:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ae0:	f000 faad 	bl	800503e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004ae4:	f000 fefe 	bl	80058e4 <xTaskResumeAll>
 8004ae8:	e77a      	b.n	80049e0 <xQueueReceive+0xa0>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004aea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004aec:	f000 faa7 	bl	800503e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004af0:	f000 fef8 	bl	80058e4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004af4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004af6:	f000 faf4 	bl	80050e2 <prvIsQueueEmpty>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f43f af6f 	beq.w	80049e0 <xQueueReceive+0xa0>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8004b02:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3730      	adds	r7, #48	@ 0x30
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	e000ed04 	.word	0xe000ed04

08004b10 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b08c      	sub	sp, #48	@ 0x30
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8004b22:	2300      	movs	r3, #0
 8004b24:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10d      	bne.n	8004b48 <xQueueSemaphoreTake+0x38>
    __asm volatile
 8004b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b30:	b672      	cpsid	i
 8004b32:	f383 8811 	msr	BASEPRI, r3
 8004b36:	f3bf 8f6f 	isb	sy
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	b662      	cpsie	i
 8004b40:	61bb      	str	r3, [r7, #24]
}
 8004b42:	bf00      	nop
 8004b44:	bf00      	nop
 8004b46:	e7fd      	b.n	8004b44 <xQueueSemaphoreTake+0x34>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8004b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00d      	beq.n	8004b6c <xQueueSemaphoreTake+0x5c>
    __asm volatile
 8004b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b54:	b672      	cpsid	i
 8004b56:	f383 8811 	msr	BASEPRI, r3
 8004b5a:	f3bf 8f6f 	isb	sy
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	b662      	cpsie	i
 8004b64:	617b      	str	r3, [r7, #20]
}
 8004b66:	bf00      	nop
 8004b68:	bf00      	nop
 8004b6a:	e7fd      	b.n	8004b68 <xQueueSemaphoreTake+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b6c:	f001 fc0e 	bl	800638c <xTaskGetSchedulerState>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d102      	bne.n	8004b7c <xQueueSemaphoreTake+0x6c>
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d101      	bne.n	8004b80 <xQueueSemaphoreTake+0x70>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e000      	b.n	8004b82 <xQueueSemaphoreTake+0x72>
 8004b80:	2300      	movs	r3, #0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10d      	bne.n	8004ba2 <xQueueSemaphoreTake+0x92>
    __asm volatile
 8004b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b8a:	b672      	cpsid	i
 8004b8c:	f383 8811 	msr	BASEPRI, r3
 8004b90:	f3bf 8f6f 	isb	sy
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	b662      	cpsie	i
 8004b9a:	613b      	str	r3, [r7, #16]
}
 8004b9c:	bf00      	nop
 8004b9e:	bf00      	nop
 8004ba0:	e7fd      	b.n	8004b9e <xQueueSemaphoreTake+0x8e>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004ba2:	f002 fad7 	bl	8007154 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004baa:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d024      	beq.n	8004bfc <xQueueSemaphoreTake+0xec>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
 8004bb4:	1e5a      	subs	r2, r3, #1
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb8:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d104      	bne.n	8004bcc <xQueueSemaphoreTake+0xbc>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004bc2:	f001 fe0f 	bl	80067e4 <pvTaskIncrementMutexHeldCount>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bca:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00f      	beq.n	8004bf4 <xQueueSemaphoreTake+0xe4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd6:	3310      	adds	r3, #16
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f001 f9a7 	bl	8005f2c <xTaskRemoveFromEventList>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d007      	beq.n	8004bf4 <xQueueSemaphoreTake+0xe4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004be4:	4b4c      	ldr	r3, [pc, #304]	@ (8004d18 <xQueueSemaphoreTake+0x208>)
 8004be6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bea:	601a      	str	r2, [r3, #0]
 8004bec:	f3bf 8f4f 	dsb	sy
 8004bf0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004bf4:	f002 fae4 	bl	80071c0 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e089      	b.n	8004d10 <xQueueSemaphoreTake+0x200>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d103      	bne.n	8004c0a <xQueueSemaphoreTake+0xfa>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8004c02:	f002 fadd 	bl	80071c0 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8004c06:	2300      	movs	r3, #0
 8004c08:	e082      	b.n	8004d10 <xQueueSemaphoreTake+0x200>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d106      	bne.n	8004c1e <xQueueSemaphoreTake+0x10e>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004c10:	f107 0308 	add.w	r3, r7, #8
 8004c14:	4618      	mov	r0, r3
 8004c16:	f001 fa65 	bl	80060e4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004c1e:	f002 facf 	bl	80071c0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004c22:	f000 fe51 	bl	80058c8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004c26:	f002 fa95 	bl	8007154 <vPortEnterCritical>
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c30:	b25b      	sxtb	r3, r3
 8004c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c36:	d103      	bne.n	8004c40 <xQueueSemaphoreTake+0x130>
 8004c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c46:	b25b      	sxtb	r3, r3
 8004c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4c:	d103      	bne.n	8004c56 <xQueueSemaphoreTake+0x146>
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c56:	f002 fab3 	bl	80071c0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c5a:	463a      	mov	r2, r7
 8004c5c:	f107 0308 	add.w	r3, r7, #8
 8004c60:	4611      	mov	r1, r2
 8004c62:	4618      	mov	r0, r3
 8004c64:	f001 fa54 	bl	8006110 <xTaskCheckForTimeOut>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d132      	bne.n	8004cd4 <xQueueSemaphoreTake+0x1c4>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c6e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c70:	f000 fa37 	bl	80050e2 <prvIsQueueEmpty>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d026      	beq.n	8004cc8 <xQueueSemaphoreTake+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d109      	bne.n	8004c96 <xQueueSemaphoreTake+0x186>
                    {
                        taskENTER_CRITICAL();
 8004c82:	f002 fa67 	bl	8007154 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f001 fb9c 	bl	80063c8 <xTaskPriorityInherit>
 8004c90:	62b8      	str	r0, [r7, #40]	@ 0x28
                        }
                        taskEXIT_CRITICAL();
 8004c92:	f002 fa95 	bl	80071c0 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c98:	3324      	adds	r3, #36	@ 0x24
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	4611      	mov	r1, r2
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f001 f8d4 	bl	8005e4c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004ca4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ca6:	f000 f9ca 	bl	800503e <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004caa:	f000 fe1b 	bl	80058e4 <xTaskResumeAll>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f47f af76 	bne.w	8004ba2 <xQueueSemaphoreTake+0x92>
                {
                    taskYIELD_WITHIN_API();
 8004cb6:	4b18      	ldr	r3, [pc, #96]	@ (8004d18 <xQueueSemaphoreTake+0x208>)
 8004cb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	f3bf 8f4f 	dsb	sy
 8004cc2:	f3bf 8f6f 	isb	sy
 8004cc6:	e76c      	b.n	8004ba2 <xQueueSemaphoreTake+0x92>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8004cc8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004cca:	f000 f9b8 	bl	800503e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004cce:	f000 fe09 	bl	80058e4 <xTaskResumeAll>
 8004cd2:	e766      	b.n	8004ba2 <xQueueSemaphoreTake+0x92>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8004cd4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004cd6:	f000 f9b2 	bl	800503e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004cda:	f000 fe03 	bl	80058e4 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cde:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ce0:	f000 f9ff 	bl	80050e2 <prvIsQueueEmpty>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f43f af5b 	beq.w	8004ba2 <xQueueSemaphoreTake+0x92>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8004cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00d      	beq.n	8004d0e <xQueueSemaphoreTake+0x1fe>
                    {
                        taskENTER_CRITICAL();
 8004cf2:	f002 fa2f 	bl	8007154 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004cf6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004cf8:	f000 f8f9 	bl	8004eee <prvGetDisinheritPriorityAfterTimeout>
 8004cfc:	61f8      	str	r0, [r7, #28]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	69f9      	ldr	r1, [r7, #28]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f001 fcab 	bl	8006660 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8004d0a:	f002 fa59 	bl	80071c0 <vPortExitCritical>
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8004d0e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3730      	adds	r7, #48	@ 0x30
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	e000ed04 	.word	0xe000ed04

08004d1c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b090      	sub	sp, #64	@ 0x40
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	63bb      	str	r3, [r7, #56]	@ 0x38

    traceENTER_xQueueReceiveFromISR( xQueue, pvBuffer, pxHigherPriorityTaskWoken );

    configASSERT( pxQueue );
 8004d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10d      	bne.n	8004d4e <xQueueReceiveFromISR+0x32>
    __asm volatile
 8004d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d36:	b672      	cpsid	i
 8004d38:	f383 8811 	msr	BASEPRI, r3
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	b662      	cpsie	i
 8004d46:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004d48:	bf00      	nop
 8004d4a:	bf00      	nop
 8004d4c:	e7fd      	b.n	8004d4a <xQueueReceiveFromISR+0x2e>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d103      	bne.n	8004d5c <xQueueReceiveFromISR+0x40>
 8004d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d101      	bne.n	8004d60 <xQueueReceiveFromISR+0x44>
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e000      	b.n	8004d62 <xQueueReceiveFromISR+0x46>
 8004d60:	2300      	movs	r3, #0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10d      	bne.n	8004d82 <xQueueReceiveFromISR+0x66>
    __asm volatile
 8004d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d6a:	b672      	cpsid	i
 8004d6c:	f383 8811 	msr	BASEPRI, r3
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	b662      	cpsie	i
 8004d7a:	623b      	str	r3, [r7, #32]
}
 8004d7c:	bf00      	nop
 8004d7e:	bf00      	nop
 8004d80:	e7fd      	b.n	8004d7e <xQueueReceiveFromISR+0x62>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d82:	f002 fad5 	bl	8007330 <vPortValidateInterruptPriority>
    __asm volatile
 8004d86:	f3ef 8211 	mrs	r2, BASEPRI
 8004d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d8e:	b672      	cpsid	i
 8004d90:	f383 8811 	msr	BASEPRI, r3
 8004d94:	f3bf 8f6f 	isb	sy
 8004d98:	f3bf 8f4f 	dsb	sy
 8004d9c:	b662      	cpsie	i
 8004d9e:	61fa      	str	r2, [r7, #28]
 8004da0:	61bb      	str	r3, [r7, #24]
    return ulOriginalBASEPRI;
 8004da2:	69fb      	ldr	r3, [r7, #28]

    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8004da4:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004daa:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d049      	beq.n	8004e46 <xQueueReceiveFromISR+0x12a>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8004db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004db4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004db8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004dbc:	68b9      	ldr	r1, [r7, #8]
 8004dbe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004dc0:	f000 f917 	bl	8004ff2 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8004dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc6:	1e5a      	subs	r2, r3, #1
 8004dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dca:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8004dcc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd4:	d112      	bne.n	8004dfc <xQueueReceiveFromISR+0xe0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d030      	beq.n	8004e40 <xQueueReceiveFromISR+0x124>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004de0:	3310      	adds	r3, #16
 8004de2:	4618      	mov	r0, r3
 8004de4:	f001 f8a2 	bl	8005f2c <xTaskRemoveFromEventList>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d028      	beq.n	8004e40 <xQueueReceiveFromISR+0x124>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d025      	beq.n	8004e40 <xQueueReceiveFromISR+0x124>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	601a      	str	r2, [r3, #0]
 8004dfa:	e021      	b.n	8004e40 <xQueueReceiveFromISR+0x124>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 8004dfc:	f000 fe9e 	bl	8005b3c <uxTaskGetNumberOfTasks>
 8004e00:	62b8      	str	r0, [r7, #40]	@ 0x28
 8004e02:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004e06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d919      	bls.n	8004e40 <xQueueReceiveFromISR+0x124>
 8004e0c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004e10:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e12:	d10d      	bne.n	8004e30 <xQueueReceiveFromISR+0x114>
    __asm volatile
 8004e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e18:	b672      	cpsid	i
 8004e1a:	f383 8811 	msr	BASEPRI, r3
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	b662      	cpsie	i
 8004e28:	617b      	str	r3, [r7, #20]
}
 8004e2a:	bf00      	nop
 8004e2c:	bf00      	nop
 8004e2e:	e7fd      	b.n	8004e2c <xQueueReceiveFromISR+0x110>
 8004e30:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004e34:	3301      	adds	r3, #1
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	b25a      	sxtb	r2, r3
 8004e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 8004e40:	2301      	movs	r3, #1
 8004e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e44:	e001      	b.n	8004e4a <xQueueReceiveFromISR+0x12e>
        }
        else
        {
            xReturn = pdFAIL;
 8004e46:	2300      	movs	r3, #0
 8004e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e4c:	613b      	str	r3, [r7, #16]
    __asm volatile
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f383 8811 	msr	BASEPRI, r3
}
 8004e54:	bf00      	nop
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueReceiveFromISR( xReturn );

    return xReturn;
 8004e56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3740      	adds	r7, #64	@ 0x40
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    traceENTER_uxQueueMessagesWaiting( xQueue );

    configASSERT( xQueue );
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10d      	bne.n	8004e8a <uxQueueMessagesWaiting+0x2a>
    __asm volatile
 8004e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e72:	b672      	cpsid	i
 8004e74:	f383 8811 	msr	BASEPRI, r3
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	b662      	cpsie	i
 8004e82:	60bb      	str	r3, [r7, #8]
}
 8004e84:	bf00      	nop
 8004e86:	bf00      	nop
 8004e88:	e7fd      	b.n	8004e86 <uxQueueMessagesWaiting+0x26>

    taskENTER_CRITICAL();
 8004e8a:	f002 f963 	bl	8007154 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e92:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8004e94:	f002 f994 	bl	80071c0 <vPortExitCritical>

    traceRETURN_uxQueueMessagesWaiting( uxReturn );

    return uxReturn;
 8004e98:	68fb      	ldr	r3, [r7, #12]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <vQueueDelete>:
    return uxReturn;
}
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b084      	sub	sp, #16
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	60fb      	str	r3, [r7, #12]

    traceENTER_vQueueDelete( xQueue );

    configASSERT( pxQueue );
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d10d      	bne.n	8004ed0 <vQueueDelete+0x2e>
    __asm volatile
 8004eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb8:	b672      	cpsid	i
 8004eba:	f383 8811 	msr	BASEPRI, r3
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	b662      	cpsie	i
 8004ec8:	60bb      	str	r3, [r7, #8]
}
 8004eca:	bf00      	nop
 8004ecc:	bf00      	nop
 8004ece:	e7fd      	b.n	8004ecc <vQueueDelete+0x2a>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f000 f987 	bl	80051e4 <vQueueUnregisterQueue>
    }
    #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
    {
        /* The queue could have been allocated statically or dynamically, so
         * check before attempting to free the memory. */
        if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d102      	bne.n	8004ee6 <vQueueDelete+0x44>
        {
            vPortFree( pxQueue );
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f002 fba9 	bl	8007638 <vPortFree>
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

    traceRETURN_vQueueDelete();
}
 8004ee6:	bf00      	nop
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8004eee:	b480      	push	{r7}
 8004ef0:	b085      	sub	sp, #20
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d006      	beq.n	8004f0c <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f1c3 0307 	rsb	r3, r3, #7
 8004f08:	60fb      	str	r3, [r7, #12]
 8004f0a:	e001      	b.n	8004f10 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8004f10:	68fb      	ldr	r3, [r7, #12]
    }
 8004f12:	4618      	mov	r0, r3
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b086      	sub	sp, #24
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	60f8      	str	r0, [r7, #12]
 8004f26:	60b9      	str	r1, [r7, #8]
 8004f28:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f32:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10d      	bne.n	8004f58 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d14d      	bne.n	8004fe0 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f001 fadd 	bl	8006508 <xTaskPriorityDisinherit>
 8004f4e:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	609a      	str	r2, [r3, #8]
 8004f56:	e043      	b.n	8004fe0 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d119      	bne.n	8004f92 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6858      	ldr	r0, [r3, #4]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f66:	461a      	mov	r2, r3
 8004f68:	68b9      	ldr	r1, [r7, #8]
 8004f6a:	f00b f8d6 	bl	801011a <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f76:	441a      	add	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d32b      	bcc.n	8004fe0 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	605a      	str	r2, [r3, #4]
 8004f90:	e026      	b.n	8004fe0 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	68d8      	ldr	r0, [r3, #12]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	68b9      	ldr	r1, [r7, #8]
 8004f9e:	f00b f8bc 	bl	801011a <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	68da      	ldr	r2, [r3, #12]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004faa:	425b      	negs	r3, r3
 8004fac:	441a      	add	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	68da      	ldr	r2, [r3, #12]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d207      	bcs.n	8004fce <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	689a      	ldr	r2, [r3, #8]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc6:	425b      	negs	r3, r3
 8004fc8:	441a      	add	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d105      	bne.n	8004fe0 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d002      	beq.n	8004fe0 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	1c5a      	adds	r2, r3, #1
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8004fe8:	697b      	ldr	r3, [r7, #20]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3718      	adds	r7, #24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b082      	sub	sp, #8
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
 8004ffa:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005000:	2b00      	cmp	r3, #0
 8005002:	d018      	beq.n	8005036 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68da      	ldr	r2, [r3, #12]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500c:	441a      	add	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68da      	ldr	r2, [r3, #12]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	429a      	cmp	r2, r3
 800501c:	d303      	bcc.n	8005026 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68d9      	ldr	r1, [r3, #12]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502e:	461a      	mov	r2, r3
 8005030:	6838      	ldr	r0, [r7, #0]
 8005032:	f00b f872 	bl	801011a <memcpy>
    }
}
 8005036:	bf00      	nop
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b084      	sub	sp, #16
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8005046:	f002 f885 	bl	8007154 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005050:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005052:	e011      	b.n	8005078 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005058:	2b00      	cmp	r3, #0
 800505a:	d012      	beq.n	8005082 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	3324      	adds	r3, #36	@ 0x24
 8005060:	4618      	mov	r0, r3
 8005062:	f000 ff63 	bl	8005f2c <xTaskRemoveFromEventList>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800506c:	f001 f8b4 	bl	80061d8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8005070:	7bfb      	ldrb	r3, [r7, #15]
 8005072:	3b01      	subs	r3, #1
 8005074:	b2db      	uxtb	r3, r3
 8005076:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800507c:	2b00      	cmp	r3, #0
 800507e:	dce9      	bgt.n	8005054 <prvUnlockQueue+0x16>
 8005080:	e000      	b.n	8005084 <prvUnlockQueue+0x46>
                    break;
 8005082:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	22ff      	movs	r2, #255	@ 0xff
 8005088:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800508c:	f002 f898 	bl	80071c0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8005090:	f002 f860 	bl	8007154 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800509a:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800509c:	e011      	b.n	80050c2 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d012      	beq.n	80050cc <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	3310      	adds	r3, #16
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 ff3e 	bl	8005f2c <xTaskRemoveFromEventList>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80050b6:	f001 f88f 	bl	80061d8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80050ba:	7bbb      	ldrb	r3, [r7, #14]
 80050bc:	3b01      	subs	r3, #1
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80050c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	dce9      	bgt.n	800509e <prvUnlockQueue+0x60>
 80050ca:	e000      	b.n	80050ce <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80050cc:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	22ff      	movs	r2, #255	@ 0xff
 80050d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80050d6:	f002 f873 	bl	80071c0 <vPortExitCritical>
}
 80050da:	bf00      	nop
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b084      	sub	sp, #16
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80050ea:	f002 f833 	bl	8007154 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d102      	bne.n	80050fc <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80050f6:	2301      	movs	r3, #1
 80050f8:	60fb      	str	r3, [r7, #12]
 80050fa:	e001      	b.n	8005100 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80050fc:	2300      	movs	r3, #0
 80050fe:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005100:	f002 f85e 	bl	80071c0 <vPortExitCritical>

    return xReturn;
 8005104:	68fb      	ldr	r3, [r7, #12]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b084      	sub	sp, #16
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005116:	f002 f81d 	bl	8007154 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005122:	429a      	cmp	r2, r3
 8005124:	d102      	bne.n	800512c <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005126:	2301      	movs	r3, #1
 8005128:	60fb      	str	r3, [r7, #12]
 800512a:	e001      	b.n	8005130 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800512c:	2300      	movs	r3, #0
 800512e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005130:	f002 f846 	bl	80071c0 <vPortExitCritical>

    return xReturn;
 8005134:	68fb      	ldr	r3, [r7, #12]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
	...

08005140 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8005140:	b480      	push	{r7}
 8005142:	b087      	sub	sp, #28
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800514a:	2300      	movs	r3, #0
 800514c:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10d      	bne.n	8005170 <vQueueAddToRegistry+0x30>
    __asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005158:	b672      	cpsid	i
 800515a:	f383 8811 	msr	BASEPRI, r3
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	f3bf 8f4f 	dsb	sy
 8005166:	b662      	cpsie	i
 8005168:	60fb      	str	r3, [r7, #12]
}
 800516a:	bf00      	nop
 800516c:	bf00      	nop
 800516e:	e7fd      	b.n	800516c <vQueueAddToRegistry+0x2c>

        if( pcQueueName != NULL )
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d024      	beq.n	80051c0 <vQueueAddToRegistry+0x80>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005176:	2300      	movs	r3, #0
 8005178:	617b      	str	r3, [r7, #20]
 800517a:	e01e      	b.n	80051ba <vQueueAddToRegistry+0x7a>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800517c:	4a18      	ldr	r2, [pc, #96]	@ (80051e0 <vQueueAddToRegistry+0xa0>)
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	00db      	lsls	r3, r3, #3
 8005182:	4413      	add	r3, r2
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	429a      	cmp	r2, r3
 800518a:	d105      	bne.n	8005198 <vQueueAddToRegistry+0x58>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	4a13      	ldr	r2, [pc, #76]	@ (80051e0 <vQueueAddToRegistry+0xa0>)
 8005192:	4413      	add	r3, r2
 8005194:	613b      	str	r3, [r7, #16]
                    break;
 8005196:	e013      	b.n	80051c0 <vQueueAddToRegistry+0x80>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10a      	bne.n	80051b4 <vQueueAddToRegistry+0x74>
 800519e:	4a10      	ldr	r2, [pc, #64]	@ (80051e0 <vQueueAddToRegistry+0xa0>)
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d104      	bne.n	80051b4 <vQueueAddToRegistry+0x74>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	4a0c      	ldr	r2, [pc, #48]	@ (80051e0 <vQueueAddToRegistry+0xa0>)
 80051b0:	4413      	add	r3, r2
 80051b2:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	3301      	adds	r3, #1
 80051b8:	617b      	str	r3, [r7, #20]
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2b07      	cmp	r3, #7
 80051be:	d9dd      	bls.n	800517c <vQueueAddToRegistry+0x3c>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d005      	beq.n	80051d2 <vQueueAddToRegistry+0x92>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 80051d2:	bf00      	nop
 80051d4:	371c      	adds	r7, #28
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	2400228c 	.word	0x2400228c

080051e4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        traceENTER_vQueueUnregisterQueue( xQueue );

        configASSERT( xQueue );
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10d      	bne.n	800520e <vQueueUnregisterQueue+0x2a>
    __asm volatile
 80051f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f6:	b672      	cpsid	i
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	b662      	cpsie	i
 8005206:	60bb      	str	r3, [r7, #8]
}
 8005208:	bf00      	nop
 800520a:	bf00      	nop
 800520c:	e7fd      	b.n	800520a <vQueueUnregisterQueue+0x26>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800520e:	2300      	movs	r3, #0
 8005210:	60fb      	str	r3, [r7, #12]
 8005212:	e016      	b.n	8005242 <vQueueUnregisterQueue+0x5e>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005214:	4a10      	ldr	r2, [pc, #64]	@ (8005258 <vQueueUnregisterQueue+0x74>)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	00db      	lsls	r3, r3, #3
 800521a:	4413      	add	r3, r2
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	429a      	cmp	r2, r3
 8005222:	d10b      	bne.n	800523c <vQueueUnregisterQueue+0x58>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 8005224:	4a0c      	ldr	r2, [pc, #48]	@ (8005258 <vQueueUnregisterQueue+0x74>)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2100      	movs	r1, #0
 800522a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800522e:	4a0a      	ldr	r2, [pc, #40]	@ (8005258 <vQueueUnregisterQueue+0x74>)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	4413      	add	r3, r2
 8005236:	2200      	movs	r2, #0
 8005238:	605a      	str	r2, [r3, #4]
                break;
 800523a:	e006      	b.n	800524a <vQueueUnregisterQueue+0x66>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	3301      	adds	r3, #1
 8005240:	60fb      	str	r3, [r7, #12]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2b07      	cmp	r3, #7
 8005246:	d9e5      	bls.n	8005214 <vQueueUnregisterQueue+0x30>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        traceRETURN_vQueueUnregisterQueue();
    }
 8005248:	bf00      	nop
 800524a:	bf00      	nop
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	2400228c 	.word	0x2400228c

0800525c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800526c:	f001 ff72 	bl	8007154 <vPortEnterCritical>
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005276:	b25b      	sxtb	r3, r3
 8005278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800527c:	d103      	bne.n	8005286 <vQueueWaitForMessageRestricted+0x2a>
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800528c:	b25b      	sxtb	r3, r3
 800528e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005292:	d103      	bne.n	800529c <vQueueWaitForMessageRestricted+0x40>
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800529c:	f001 ff90 	bl	80071c0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d106      	bne.n	80052b6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	3324      	adds	r3, #36	@ 0x24
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	68b9      	ldr	r1, [r7, #8]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f000 fdf3 	bl	8005e9c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80052b6:	6978      	ldr	r0, [r7, #20]
 80052b8:	f7ff fec1 	bl	800503e <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 80052bc:	bf00      	nop
 80052be:	3718      	adds	r7, #24
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <prvCreateStaticTask>:
                                        void * const pvParameters,
                                        UBaseType_t uxPriority,
                                        StackType_t * const puxStackBuffer,
                                        StaticTask_t * const pxTaskBuffer,
                                        TaskHandle_t * const pxCreatedTask )
    {
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b08e      	sub	sp, #56	@ 0x38
 80052c8:	af04      	add	r7, sp, #16
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
 80052d0:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;

        configASSERT( puxStackBuffer != NULL );
 80052d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10d      	bne.n	80052f4 <prvCreateStaticTask+0x30>
    __asm volatile
 80052d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052dc:	b672      	cpsid	i
 80052de:	f383 8811 	msr	BASEPRI, r3
 80052e2:	f3bf 8f6f 	isb	sy
 80052e6:	f3bf 8f4f 	dsb	sy
 80052ea:	b662      	cpsie	i
 80052ec:	623b      	str	r3, [r7, #32]
}
 80052ee:	bf00      	nop
 80052f0:	bf00      	nop
 80052f2:	e7fd      	b.n	80052f0 <prvCreateStaticTask+0x2c>
        configASSERT( pxTaskBuffer != NULL );
 80052f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10d      	bne.n	8005316 <prvCreateStaticTask+0x52>
    __asm volatile
 80052fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052fe:	b672      	cpsid	i
 8005300:	f383 8811 	msr	BASEPRI, r3
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	b662      	cpsie	i
 800530e:	61fb      	str	r3, [r7, #28]
}
 8005310:	bf00      	nop
 8005312:	bf00      	nop
 8005314:	e7fd      	b.n	8005312 <prvCreateStaticTask+0x4e>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 8005316:	235c      	movs	r3, #92	@ 0x5c
 8005318:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2b5c      	cmp	r3, #92	@ 0x5c
 800531e:	d00d      	beq.n	800533c <prvCreateStaticTask+0x78>
    __asm volatile
 8005320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005324:	b672      	cpsid	i
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	b662      	cpsie	i
 8005334:	61bb      	str	r3, [r7, #24]
}
 8005336:	bf00      	nop
 8005338:	bf00      	nop
 800533a:	e7fd      	b.n	8005338 <prvCreateStaticTask+0x74>
            ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 800533c:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800533e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005340:	2b00      	cmp	r3, #0
 8005342:	d01f      	beq.n	8005384 <prvCreateStaticTask+0xc0>
 8005344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005346:	2b00      	cmp	r3, #0
 8005348:	d01c      	beq.n	8005384 <prvCreateStaticTask+0xc0>
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer;
 800534a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800534c:	627b      	str	r3, [r7, #36]	@ 0x24
            ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800534e:	225c      	movs	r2, #92	@ 0x5c
 8005350:	2100      	movs	r1, #0
 8005352:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005354:	f00a fe24 	bl	800ffa0 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800535c:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800535e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005360:	2202      	movs	r2, #2
 8005362:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005366:	2300      	movs	r3, #0
 8005368:	9303      	str	r3, [sp, #12]
 800536a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536c:	9302      	str	r3, [sp, #8]
 800536e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005370:	9301      	str	r3, [sp, #4]
 8005372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	68b9      	ldr	r1, [r7, #8]
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f000 f88f 	bl	80054a0 <prvInitialiseNewTask>
 8005382:	e001      	b.n	8005388 <prvCreateStaticTask+0xc4>
        }
        else
        {
            pxNewTCB = NULL;
 8005384:	2300      	movs	r3, #0
 8005386:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return pxNewTCB;
 8005388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800538a:	4618      	mov	r0, r3
 800538c:	3728      	adds	r7, #40	@ 0x28
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <xTaskCreateStatic>:
                                    const configSTACK_DEPTH_TYPE uxStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8005392:	b580      	push	{r7, lr}
 8005394:	b08a      	sub	sp, #40	@ 0x28
 8005396:	af04      	add	r7, sp, #16
 8005398:	60f8      	str	r0, [r7, #12]
 800539a:	60b9      	str	r1, [r7, #8]
 800539c:	607a      	str	r2, [r7, #4]
 800539e:	603b      	str	r3, [r7, #0]
        TaskHandle_t xReturn = NULL;
 80053a0:	2300      	movs	r3, #0
 80053a2:	613b      	str	r3, [r7, #16]
        TCB_t * pxNewTCB;

        traceENTER_xTaskCreateStatic( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );

        pxNewTCB = prvCreateStaticTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer, &xReturn );
 80053a4:	f107 0310 	add.w	r3, r7, #16
 80053a8:	9303      	str	r3, [sp, #12]
 80053aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ac:	9302      	str	r3, [sp, #8]
 80053ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b0:	9301      	str	r3, [sp, #4]
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	68b9      	ldr	r1, [r7, #8]
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f7ff ff81 	bl	80052c4 <prvCreateStaticTask>
 80053c2:	6178      	str	r0, [r7, #20]

        if( pxNewTCB != NULL )
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d002      	beq.n	80053d0 <xTaskCreateStatic+0x3e>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80053ca:	6978      	ldr	r0, [r7, #20]
 80053cc:	f000 f8fc 	bl	80055c8 <prvAddNewTaskToReadyList>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskCreateStatic( xReturn );

        return xReturn;
 80053d0:	693b      	ldr	r3, [r7, #16]
    }
 80053d2:	4618      	mov	r0, r3
 80053d4:	3718      	adds	r7, #24
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80053da:	b580      	push	{r7, lr}
 80053dc:	b08a      	sub	sp, #40	@ 0x28
 80053de:	af04      	add	r7, sp, #16
 80053e0:	60f8      	str	r0, [r7, #12]
 80053e2:	60b9      	str	r1, [r7, #8]
 80053e4:	607a      	str	r2, [r7, #4]
 80053e6:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	4618      	mov	r0, r3
 80053ee:	f001 ffe5 	bl	80073bc <pvPortMalloc>
 80053f2:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d013      	beq.n	8005422 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80053fa:	205c      	movs	r0, #92	@ 0x5c
 80053fc:	f001 ffde 	bl	80073bc <pvPortMalloc>
 8005400:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d008      	beq.n	800541a <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8005408:	225c      	movs	r2, #92	@ 0x5c
 800540a:	2100      	movs	r1, #0
 800540c:	6978      	ldr	r0, [r7, #20]
 800540e:	f00a fdc7 	bl	800ffa0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	631a      	str	r2, [r3, #48]	@ 0x30
 8005418:	e005      	b.n	8005426 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800541a:	6938      	ldr	r0, [r7, #16]
 800541c:	f002 f90c 	bl	8007638 <vPortFree>
 8005420:	e001      	b.n	8005426 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8005422:	2300      	movs	r3, #0
 8005424:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d011      	beq.n	8005450 <prvCreateTask+0x76>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005434:	2300      	movs	r3, #0
 8005436:	9303      	str	r3, [sp, #12]
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	9302      	str	r3, [sp, #8]
 800543c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543e:	9301      	str	r3, [sp, #4]
 8005440:	6a3b      	ldr	r3, [r7, #32]
 8005442:	9300      	str	r3, [sp, #0]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	68b9      	ldr	r1, [r7, #8]
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f000 f828 	bl	80054a0 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8005450:	697b      	ldr	r3, [r7, #20]
    }
 8005452:	4618      	mov	r0, r3
 8005454:	3718      	adds	r7, #24
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800545a:	b580      	push	{r7, lr}
 800545c:	b088      	sub	sp, #32
 800545e:	af02      	add	r7, sp, #8
 8005460:	60f8      	str	r0, [r7, #12]
 8005462:	60b9      	str	r1, [r7, #8]
 8005464:	607a      	str	r2, [r7, #4]
 8005466:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8005468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546a:	9301      	str	r3, [sp, #4]
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	9300      	str	r3, [sp, #0]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	68b9      	ldr	r1, [r7, #8]
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f7ff ffaf 	bl	80053da <prvCreateTask>
 800547c:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d005      	beq.n	8005490 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8005484:	6938      	ldr	r0, [r7, #16]
 8005486:	f000 f89f 	bl	80055c8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800548a:	2301      	movs	r3, #1
 800548c:	617b      	str	r3, [r7, #20]
 800548e:	e002      	b.n	8005496 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005490:	f04f 33ff 	mov.w	r3, #4294967295
 8005494:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8005496:	697b      	ldr	r3, [r7, #20]
    }
 8005498:	4618      	mov	r0, r3
 800549a:	3718      	adds	r7, #24
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b088      	sub	sp, #32
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
 80054ac:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 80054ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	461a      	mov	r2, r3
 80054b8:	21a5      	movs	r1, #165	@ 0xa5
 80054ba:	f00a fd71 	bl	800ffa0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 80054be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054c2:	6879      	ldr	r1, [r7, #4]
 80054c4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80054c8:	440b      	add	r3, r1
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4413      	add	r3, r2
 80054ce:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	f023 0307 	bic.w	r3, r3, #7
 80054d6:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	f003 0307 	and.w	r3, r3, #7
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00d      	beq.n	80054fe <prvInitialiseNewTask+0x5e>
    __asm volatile
 80054e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e6:	b672      	cpsid	i
 80054e8:	f383 8811 	msr	BASEPRI, r3
 80054ec:	f3bf 8f6f 	isb	sy
 80054f0:	f3bf 8f4f 	dsb	sy
 80054f4:	b662      	cpsie	i
 80054f6:	617b      	str	r3, [r7, #20]
}
 80054f8:	bf00      	nop
 80054fa:	bf00      	nop
 80054fc:	e7fd      	b.n	80054fa <prvInitialiseNewTask+0x5a>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d01e      	beq.n	8005542 <prvInitialiseNewTask+0xa2>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005504:	2300      	movs	r3, #0
 8005506:	61fb      	str	r3, [r7, #28]
 8005508:	e012      	b.n	8005530 <prvInitialiseNewTask+0x90>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	4413      	add	r3, r2
 8005510:	7819      	ldrb	r1, [r3, #0]
 8005512:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	4413      	add	r3, r2
 8005518:	3334      	adds	r3, #52	@ 0x34
 800551a:	460a      	mov	r2, r1
 800551c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	4413      	add	r3, r2
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d006      	beq.n	8005538 <prvInitialiseNewTask+0x98>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	3301      	adds	r3, #1
 800552e:	61fb      	str	r3, [r7, #28]
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	2b0f      	cmp	r3, #15
 8005534:	d9e9      	bls.n	800550a <prvInitialiseNewTask+0x6a>
 8005536:	e000      	b.n	800553a <prvInitialiseNewTask+0x9a>
            {
                break;
 8005538:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 800553a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8005542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005544:	2b06      	cmp	r3, #6
 8005546:	d90d      	bls.n	8005564 <prvInitialiseNewTask+0xc4>
    __asm volatile
 8005548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800554c:	b672      	cpsid	i
 800554e:	f383 8811 	msr	BASEPRI, r3
 8005552:	f3bf 8f6f 	isb	sy
 8005556:	f3bf 8f4f 	dsb	sy
 800555a:	b662      	cpsie	i
 800555c:	613b      	str	r3, [r7, #16]
}
 800555e:	bf00      	nop
 8005560:	bf00      	nop
 8005562:	e7fd      	b.n	8005560 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005566:	2b06      	cmp	r3, #6
 8005568:	d901      	bls.n	800556e <prvInitialiseNewTask+0xce>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800556a:	2306      	movs	r3, #6
 800556c:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800556e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005570:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005572:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8005574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005576:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005578:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800557a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557c:	3304      	adds	r3, #4
 800557e:	4618      	mov	r0, r3
 8005580:	f7fe fe2e 	bl	80041e0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005586:	3318      	adds	r3, #24
 8005588:	4618      	mov	r0, r3
 800558a:	f7fe fe29 	bl	80041e0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800558e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005590:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005592:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8005594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005596:	f1c3 0207 	rsb	r2, r3, #7
 800559a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800559e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055a2:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	68f9      	ldr	r1, [r7, #12]
 80055a8:	69b8      	ldr	r0, [r7, #24]
 80055aa:	f001 fc73 	bl	8006e94 <pxPortInitialiseStack>
 80055ae:	4602      	mov	r2, r0
 80055b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b2:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 80055b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d002      	beq.n	80055c0 <prvInitialiseNewTask+0x120>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055be:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80055c0:	bf00      	nop
 80055c2:	3720      	adds	r7, #32
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 80055d0:	f001 fdc0 	bl	8007154 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80055d4:	4b41      	ldr	r3, [pc, #260]	@ (80056dc <prvAddNewTaskToReadyList+0x114>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3301      	adds	r3, #1
 80055da:	4a40      	ldr	r2, [pc, #256]	@ (80056dc <prvAddNewTaskToReadyList+0x114>)
 80055dc:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80055de:	4b40      	ldr	r3, [pc, #256]	@ (80056e0 <prvAddNewTaskToReadyList+0x118>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d109      	bne.n	80055fa <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80055e6:	4a3e      	ldr	r2, [pc, #248]	@ (80056e0 <prvAddNewTaskToReadyList+0x118>)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80055ec:	4b3b      	ldr	r3, [pc, #236]	@ (80056dc <prvAddNewTaskToReadyList+0x114>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d110      	bne.n	8005616 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80055f4:	f000 fe14 	bl	8006220 <prvInitialiseTaskLists>
 80055f8:	e00d      	b.n	8005616 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80055fa:	4b3a      	ldr	r3, [pc, #232]	@ (80056e4 <prvAddNewTaskToReadyList+0x11c>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d109      	bne.n	8005616 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005602:	4b37      	ldr	r3, [pc, #220]	@ (80056e0 <prvAddNewTaskToReadyList+0x118>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800560c:	429a      	cmp	r2, r3
 800560e:	d802      	bhi.n	8005616 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8005610:	4a33      	ldr	r2, [pc, #204]	@ (80056e0 <prvAddNewTaskToReadyList+0x118>)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8005616:	4b34      	ldr	r3, [pc, #208]	@ (80056e8 <prvAddNewTaskToReadyList+0x120>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	3301      	adds	r3, #1
 800561c:	4a32      	ldr	r2, [pc, #200]	@ (80056e8 <prvAddNewTaskToReadyList+0x120>)
 800561e:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005620:	4b31      	ldr	r3, [pc, #196]	@ (80056e8 <prvAddNewTaskToReadyList+0x120>)
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800562c:	2201      	movs	r2, #1
 800562e:	409a      	lsls	r2, r3
 8005630:	4b2e      	ldr	r3, [pc, #184]	@ (80056ec <prvAddNewTaskToReadyList+0x124>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4313      	orrs	r3, r2
 8005636:	4a2d      	ldr	r2, [pc, #180]	@ (80056ec <prvAddNewTaskToReadyList+0x124>)
 8005638:	6013      	str	r3, [r2, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800563e:	492c      	ldr	r1, [pc, #176]	@ (80056f0 <prvAddNewTaskToReadyList+0x128>)
 8005640:	4613      	mov	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4413      	add	r3, r2
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	440b      	add	r3, r1
 800564a:	3304      	adds	r3, #4
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	60fb      	str	r3, [r7, #12]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	609a      	str	r2, [r3, #8]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	689a      	ldr	r2, [r3, #8]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	60da      	str	r2, [r3, #12]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	3204      	adds	r2, #4
 8005666:	605a      	str	r2, [r3, #4]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	1d1a      	adds	r2, r3, #4
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	609a      	str	r2, [r3, #8]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005674:	4613      	mov	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4a1c      	ldr	r2, [pc, #112]	@ (80056f0 <prvAddNewTaskToReadyList+0x128>)
 800567e:	441a      	add	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	615a      	str	r2, [r3, #20]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005688:	4919      	ldr	r1, [pc, #100]	@ (80056f0 <prvAddNewTaskToReadyList+0x128>)
 800568a:	4613      	mov	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	440b      	add	r3, r1
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800569a:	1c59      	adds	r1, r3, #1
 800569c:	4814      	ldr	r0, [pc, #80]	@ (80056f0 <prvAddNewTaskToReadyList+0x128>)
 800569e:	4613      	mov	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4403      	add	r3, r0
 80056a8:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 80056aa:	f001 fd89 	bl	80071c0 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80056ae:	4b0d      	ldr	r3, [pc, #52]	@ (80056e4 <prvAddNewTaskToReadyList+0x11c>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00e      	beq.n	80056d4 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 80056b6:	4b0a      	ldr	r3, [pc, #40]	@ (80056e0 <prvAddNewTaskToReadyList+0x118>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d207      	bcs.n	80056d4 <prvAddNewTaskToReadyList+0x10c>
 80056c4:	4b0b      	ldr	r3, [pc, #44]	@ (80056f4 <prvAddNewTaskToReadyList+0x12c>)
 80056c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	f3bf 8f4f 	dsb	sy
 80056d0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80056d4:	bf00      	nop
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	240023b8 	.word	0x240023b8
 80056e0:	240022cc 	.word	0x240022cc
 80056e4:	240023c4 	.word	0x240023c4
 80056e8:	240023d4 	.word	0x240023d4
 80056ec:	240023c0 	.word	0x240023c0
 80056f0:	240022d0 	.word	0x240022d0
 80056f4:	e000ed04 	.word	0xe000ed04

080056f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8005700:	2300      	movs	r3, #0
 8005702:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d01a      	beq.n	8005740 <vTaskDelay+0x48>
        {
            vTaskSuspendAll();
 800570a:	f000 f8dd 	bl	80058c8 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 800570e:	4b14      	ldr	r3, [pc, #80]	@ (8005760 <vTaskDelay+0x68>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d00d      	beq.n	8005732 <vTaskDelay+0x3a>
    __asm volatile
 8005716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800571a:	b672      	cpsid	i
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	b662      	cpsie	i
 800572a:	60bb      	str	r3, [r7, #8]
}
 800572c:	bf00      	nop
 800572e:	bf00      	nop
 8005730:	e7fd      	b.n	800572e <vTaskDelay+0x36>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005732:	2100      	movs	r1, #0
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f001 f86d 	bl	8006814 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800573a:	f000 f8d3 	bl	80058e4 <xTaskResumeAll>
 800573e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d107      	bne.n	8005756 <vTaskDelay+0x5e>
        {
            taskYIELD_WITHIN_API();
 8005746:	4b07      	ldr	r3, [pc, #28]	@ (8005764 <vTaskDelay+0x6c>)
 8005748:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800574c:	601a      	str	r2, [r3, #0]
 800574e:	f3bf 8f4f 	dsb	sy
 8005752:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 8005756:	bf00      	nop
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	240023e0 	.word	0x240023e0
 8005764:	e000ed04 	.word	0xe000ed04

08005768 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b090      	sub	sp, #64	@ 0x40
 800576c:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdPASS;
 800576e:	2301      	movs	r3, #1
 8005770:	62fb      	str	r3, [r7, #44]	@ 0x2c
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8005772:	2300      	movs	r3, #0
 8005774:	623b      	str	r3, [r7, #32]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8005776:	2300      	movs	r3, #0
 8005778:	627b      	str	r3, [r7, #36]	@ 0x24
 800577a:	e013      	b.n	80057a4 <prvCreateIdleTasks+0x3c>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 800577c:	4a2b      	ldr	r2, [pc, #172]	@ (800582c <prvCreateIdleTasks+0xc4>)
 800577e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005780:	4413      	add	r3, r2
 8005782:	7819      	ldrb	r1, [r3, #0]
 8005784:	f107 0210 	add.w	r2, r7, #16
 8005788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578a:	4413      	add	r3, r2
 800578c:	460a      	mov	r2, r1
 800578e:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8005790:	f107 0210 	add.w	r2, r7, #16
 8005794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005796:	4413      	add	r3, r2
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d006      	beq.n	80057ac <prvCreateIdleTasks+0x44>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800579e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a0:	3301      	adds	r3, #1
 80057a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80057a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a6:	2b0f      	cmp	r3, #15
 80057a8:	dde8      	ble.n	800577c <prvCreateIdleTasks+0x14>
 80057aa:	e000      	b.n	80057ae <prvCreateIdleTasks+0x46>
        {
            break;
 80057ac:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80057ae:	2300      	movs	r3, #0
 80057b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057b2:	e031      	b.n	8005818 <prvCreateIdleTasks+0xb0>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 80057b4:	4b1e      	ldr	r3, [pc, #120]	@ (8005830 <prvCreateIdleTasks+0xc8>)
 80057b6:	623b      	str	r3, [r7, #32]
        }
        #endif /* if ( configNUMBER_OF_CORES > 1 ) */

        #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 80057b8:	2300      	movs	r3, #0
 80057ba:	60fb      	str	r3, [r7, #12]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 80057bc:	2300      	movs	r3, #0
 80057be:	60bb      	str	r3, [r7, #8]

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            #if ( configNUMBER_OF_CORES == 1 )
            {
                vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize );
 80057c0:	1d3a      	adds	r2, r7, #4
 80057c2:	f107 0108 	add.w	r1, r7, #8
 80057c6:	f107 030c 	add.w	r3, r7, #12
 80057ca:	4618      	mov	r0, r3
 80057cc:	f001 f878 	bl	80068c0 <vApplicationGetIdleTaskMemory>
                {
                    vApplicationGetPassiveIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize, ( BaseType_t ) ( xCoreID - 1 ) );
                }
            }
            #endif /* if ( configNUMBER_OF_CORES == 1 ) */
            xIdleTaskHandles[ xCoreID ] = xTaskCreateStatic( pxIdleTaskFunction,
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	f107 0110 	add.w	r1, r7, #16
 80057da:	9202      	str	r2, [sp, #8]
 80057dc:	9301      	str	r3, [sp, #4]
 80057de:	2300      	movs	r3, #0
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	2300      	movs	r3, #0
 80057e4:	4602      	mov	r2, r0
 80057e6:	6a38      	ldr	r0, [r7, #32]
 80057e8:	f7ff fdd3 	bl	8005392 <xTaskCreateStatic>
 80057ec:	4602      	mov	r2, r0
 80057ee:	4911      	ldr	r1, [pc, #68]	@ (8005834 <prvCreateIdleTasks+0xcc>)
 80057f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                                             ( void * ) NULL,
                                                             portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                             pxIdleTaskStackBuffer,
                                                             pxIdleTaskTCBBuffer );

            if( xIdleTaskHandles[ xCoreID ] != NULL )
 80057f6:	4a0f      	ldr	r2, [pc, #60]	@ (8005834 <prvCreateIdleTasks+0xcc>)
 80057f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d002      	beq.n	8005808 <prvCreateIdleTasks+0xa0>
            {
                xReturn = pdPASS;
 8005802:	2301      	movs	r3, #1
 8005804:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005806:	e001      	b.n	800580c <prvCreateIdleTasks+0xa4>
            }
            else
            {
                xReturn = pdFAIL;
 8005808:	2300      	movs	r3, #0
 800580a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 800580c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800580e:	2b00      	cmp	r3, #0
 8005810:	d006      	beq.n	8005820 <prvCreateIdleTasks+0xb8>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8005812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005814:	3301      	adds	r3, #1
 8005816:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800581a:	2b00      	cmp	r3, #0
 800581c:	ddca      	ble.n	80057b4 <prvCreateIdleTasks+0x4c>
 800581e:	e000      	b.n	8005822 <prvCreateIdleTasks+0xba>
        {
            break;
 8005820:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8005822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005824:	4618      	mov	r0, r3
 8005826:	3730      	adds	r7, #48	@ 0x30
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	080114c4 	.word	0x080114c4
 8005830:	080061f1 	.word	0x080061f1
 8005834:	240023dc 	.word	0x240023dc

08005838 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 800583e:	f7ff ff93 	bl	8005768 <prvCreateIdleTasks>
 8005842:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d102      	bne.n	8005850 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 800584a:	f001 f86d 	bl	8006928 <xTimerCreateTimerTask>
 800584e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d118      	bne.n	8005888 <vTaskStartScheduler+0x50>
    __asm volatile
 8005856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800585a:	b672      	cpsid	i
 800585c:	f383 8811 	msr	BASEPRI, r3
 8005860:	f3bf 8f6f 	isb	sy
 8005864:	f3bf 8f4f 	dsb	sy
 8005868:	b662      	cpsie	i
 800586a:	60bb      	str	r3, [r7, #8]
}
 800586c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800586e:	4b12      	ldr	r3, [pc, #72]	@ (80058b8 <vTaskStartScheduler+0x80>)
 8005870:	f04f 32ff 	mov.w	r2, #4294967295
 8005874:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005876:	4b11      	ldr	r3, [pc, #68]	@ (80058bc <vTaskStartScheduler+0x84>)
 8005878:	2201      	movs	r2, #1
 800587a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800587c:	4b10      	ldr	r3, [pc, #64]	@ (80058c0 <vTaskStartScheduler+0x88>)
 800587e:	2200      	movs	r2, #0
 8005880:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8005882:	f001 fb97 	bl	8006fb4 <xPortStartScheduler>
 8005886:	e011      	b.n	80058ac <vTaskStartScheduler+0x74>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800588e:	d10d      	bne.n	80058ac <vTaskStartScheduler+0x74>
    __asm volatile
 8005890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005894:	b672      	cpsid	i
 8005896:	f383 8811 	msr	BASEPRI, r3
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	b662      	cpsie	i
 80058a4:	607b      	str	r3, [r7, #4]
}
 80058a6:	bf00      	nop
 80058a8:	bf00      	nop
 80058aa:	e7fd      	b.n	80058a8 <vTaskStartScheduler+0x70>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80058ac:	4b05      	ldr	r3, [pc, #20]	@ (80058c4 <vTaskStartScheduler+0x8c>)
 80058ae:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 80058b0:	bf00      	nop
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	240023d8 	.word	0x240023d8
 80058bc:	240023c4 	.word	0x240023c4
 80058c0:	240023bc 	.word	0x240023bc
 80058c4:	08012374 	.word	0x08012374

080058c8 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80058c8:	b480      	push	{r7}
 80058ca:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 80058cc:	4b04      	ldr	r3, [pc, #16]	@ (80058e0 <vTaskSuspendAll+0x18>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3301      	adds	r3, #1
 80058d2:	4a03      	ldr	r2, [pc, #12]	@ (80058e0 <vTaskSuspendAll+0x18>)
 80058d4:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 80058d6:	bf00      	nop
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	240023e0 	.word	0x240023e0

080058e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b088      	sub	sp, #32
 80058e8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80058ea:	2300      	movs	r3, #0
 80058ec:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80058ee:	2300      	movs	r3, #0
 80058f0:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 80058f2:	f001 fc2f 	bl	8007154 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80058f6:	2300      	movs	r3, #0
 80058f8:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80058fa:	4b76      	ldr	r3, [pc, #472]	@ (8005ad4 <xTaskResumeAll+0x1f0>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10d      	bne.n	800591e <xTaskResumeAll+0x3a>
    __asm volatile
 8005902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005906:	b672      	cpsid	i
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	b662      	cpsie	i
 8005916:	603b      	str	r3, [r7, #0]
}
 8005918:	bf00      	nop
 800591a:	bf00      	nop
 800591c:	e7fd      	b.n	800591a <xTaskResumeAll+0x36>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800591e:	4b6d      	ldr	r3, [pc, #436]	@ (8005ad4 <xTaskResumeAll+0x1f0>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	3b01      	subs	r3, #1
 8005924:	4a6b      	ldr	r2, [pc, #428]	@ (8005ad4 <xTaskResumeAll+0x1f0>)
 8005926:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005928:	4b6a      	ldr	r3, [pc, #424]	@ (8005ad4 <xTaskResumeAll+0x1f0>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	f040 80ca 	bne.w	8005ac6 <xTaskResumeAll+0x1e2>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005932:	4b69      	ldr	r3, [pc, #420]	@ (8005ad8 <xTaskResumeAll+0x1f4>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	f000 80c5 	beq.w	8005ac6 <xTaskResumeAll+0x1e2>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800593c:	e08e      	b.n	8005a5c <xTaskResumeAll+0x178>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800593e:	4b67      	ldr	r3, [pc, #412]	@ (8005adc <xTaskResumeAll+0x1f8>)
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800594a:	60fb      	str	r3, [r7, #12]
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	69db      	ldr	r3, [r3, #28]
 8005950:	69fa      	ldr	r2, [r7, #28]
 8005952:	6a12      	ldr	r2, [r2, #32]
 8005954:	609a      	str	r2, [r3, #8]
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	69fa      	ldr	r2, [r7, #28]
 800595c:	69d2      	ldr	r2, [r2, #28]
 800595e:	605a      	str	r2, [r3, #4]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	3318      	adds	r3, #24
 8005968:	429a      	cmp	r2, r3
 800596a:	d103      	bne.n	8005974 <xTaskResumeAll+0x90>
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	6a1a      	ldr	r2, [r3, #32]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	605a      	str	r2, [r3, #4]
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	2200      	movs	r2, #0
 8005978:	629a      	str	r2, [r3, #40]	@ 0x28
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	1e5a      	subs	r2, r3, #1
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	695b      	ldr	r3, [r3, #20]
 8005988:	60bb      	str	r3, [r7, #8]
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	69fa      	ldr	r2, [r7, #28]
 8005990:	68d2      	ldr	r2, [r2, #12]
 8005992:	609a      	str	r2, [r3, #8]
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	69fa      	ldr	r2, [r7, #28]
 800599a:	6892      	ldr	r2, [r2, #8]
 800599c:	605a      	str	r2, [r3, #4]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	685a      	ldr	r2, [r3, #4]
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	3304      	adds	r3, #4
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d103      	bne.n	80059b2 <xTaskResumeAll+0xce>
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	68da      	ldr	r2, [r3, #12]
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	605a      	str	r2, [r3, #4]
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	2200      	movs	r2, #0
 80059b6:	615a      	str	r2, [r3, #20]
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	1e5a      	subs	r2, r3, #1
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c6:	2201      	movs	r2, #1
 80059c8:	409a      	lsls	r2, r3
 80059ca:	4b45      	ldr	r3, [pc, #276]	@ (8005ae0 <xTaskResumeAll+0x1fc>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	4a43      	ldr	r2, [pc, #268]	@ (8005ae0 <xTaskResumeAll+0x1fc>)
 80059d2:	6013      	str	r3, [r2, #0]
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059d8:	4942      	ldr	r1, [pc, #264]	@ (8005ae4 <xTaskResumeAll+0x200>)
 80059da:	4613      	mov	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4413      	add	r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	440b      	add	r3, r1
 80059e4:	3304      	adds	r3, #4
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	607b      	str	r3, [r7, #4]
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	609a      	str	r2, [r3, #8]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	60da      	str	r2, [r3, #12]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	69fa      	ldr	r2, [r7, #28]
 80059fe:	3204      	adds	r2, #4
 8005a00:	605a      	str	r2, [r3, #4]
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	1d1a      	adds	r2, r3, #4
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	609a      	str	r2, [r3, #8]
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a0e:	4613      	mov	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4413      	add	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4a33      	ldr	r2, [pc, #204]	@ (8005ae4 <xTaskResumeAll+0x200>)
 8005a18:	441a      	add	r2, r3
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	615a      	str	r2, [r3, #20]
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a22:	4930      	ldr	r1, [pc, #192]	@ (8005ae4 <xTaskResumeAll+0x200>)
 8005a24:	4613      	mov	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4413      	add	r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	440b      	add	r3, r1
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	69fa      	ldr	r2, [r7, #28]
 8005a32:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005a34:	1c59      	adds	r1, r3, #1
 8005a36:	482b      	ldr	r0, [pc, #172]	@ (8005ae4 <xTaskResumeAll+0x200>)
 8005a38:	4613      	mov	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4413      	add	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4403      	add	r3, r0
 8005a42:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a48:	4b27      	ldr	r3, [pc, #156]	@ (8005ae8 <xTaskResumeAll+0x204>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d904      	bls.n	8005a5c <xTaskResumeAll+0x178>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8005a52:	4a26      	ldr	r2, [pc, #152]	@ (8005aec <xTaskResumeAll+0x208>)
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	2101      	movs	r1, #1
 8005a58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a5c:	4b1f      	ldr	r3, [pc, #124]	@ (8005adc <xTaskResumeAll+0x1f8>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f47f af6c 	bne.w	800593e <xTaskResumeAll+0x5a>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d001      	beq.n	8005a70 <xTaskResumeAll+0x18c>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8005a6c:	f000 fc72 	bl	8006354 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005a70:	4b1f      	ldr	r3, [pc, #124]	@ (8005af0 <xTaskResumeAll+0x20c>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d012      	beq.n	8005aa2 <xTaskResumeAll+0x1be>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8005a7c:	f000 f86a 	bl	8005b54 <xTaskIncrementTick>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d004      	beq.n	8005a90 <xTaskResumeAll+0x1ac>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8005a86:	4a19      	ldr	r2, [pc, #100]	@ (8005aec <xTaskResumeAll+0x208>)
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	2101      	movs	r1, #1
 8005a8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	3b01      	subs	r3, #1
 8005a94:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1ef      	bne.n	8005a7c <xTaskResumeAll+0x198>

                            xPendedTicks = 0;
 8005a9c:	4b14      	ldr	r3, [pc, #80]	@ (8005af0 <xTaskResumeAll+0x20c>)
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8005aa2:	4a12      	ldr	r2, [pc, #72]	@ (8005aec <xTaskResumeAll+0x208>)
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00b      	beq.n	8005ac6 <xTaskResumeAll+0x1e2>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8005ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ae8 <xTaskResumeAll+0x204>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8005af4 <xTaskResumeAll+0x210>)
 8005ab8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005abc:	601a      	str	r2, [r3, #0]
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005ac6:	f001 fb7b 	bl	80071c0 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8005aca:	69bb      	ldr	r3, [r7, #24]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3720      	adds	r7, #32
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	240023e0 	.word	0x240023e0
 8005ad8:	240023b8 	.word	0x240023b8
 8005adc:	2400238c 	.word	0x2400238c
 8005ae0:	240023c0 	.word	0x240023c0
 8005ae4:	240022d0 	.word	0x240022d0
 8005ae8:	240022cc 	.word	0x240022cc
 8005aec:	240023cc 	.word	0x240023cc
 8005af0:	240023c8 	.word	0x240023c8
 8005af4:	e000ed04 	.word	0xe000ed04

08005af8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005afe:	4b05      	ldr	r3, [pc, #20]	@ (8005b14 <xTaskGetTickCount+0x1c>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8005b04:	687b      	ldr	r3, [r7, #4]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	240023bc 	.word	0x240023bc

08005b18 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b1e:	f001 fc07 	bl	8007330 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005b22:	2300      	movs	r3, #0
 8005b24:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8005b26:	4b04      	ldr	r3, [pc, #16]	@ (8005b38 <xTaskGetTickCountFromISR+0x20>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );

    return xReturn;
 8005b2c:	683b      	ldr	r3, [r7, #0]
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3708      	adds	r7, #8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	240023bc 	.word	0x240023bc

08005b3c <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	af00      	add	r7, sp, #0

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );

    return uxCurrentNumberOfTasks;
 8005b40:	4b03      	ldr	r3, [pc, #12]	@ (8005b50 <uxTaskGetNumberOfTasks+0x14>)
 8005b42:	681b      	ldr	r3, [r3, #0]
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	240023b8 	.word	0x240023b8

08005b54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b08a      	sub	sp, #40	@ 0x28
 8005b58:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005b5e:	4b80      	ldr	r3, [pc, #512]	@ (8005d60 <xTaskIncrementTick+0x20c>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f040 80f1 	bne.w	8005d4a <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b68:	4b7e      	ldr	r3, [pc, #504]	@ (8005d64 <xTaskIncrementTick+0x210>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005b70:	4a7c      	ldr	r2, [pc, #496]	@ (8005d64 <xTaskIncrementTick+0x210>)
 8005b72:	6a3b      	ldr	r3, [r7, #32]
 8005b74:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8005b76:	6a3b      	ldr	r3, [r7, #32]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d123      	bne.n	8005bc4 <xTaskIncrementTick+0x70>
        {
            taskSWITCH_DELAYED_LISTS();
 8005b7c:	4b7a      	ldr	r3, [pc, #488]	@ (8005d68 <xTaskIncrementTick+0x214>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00d      	beq.n	8005ba2 <xTaskIncrementTick+0x4e>
    __asm volatile
 8005b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b8a:	b672      	cpsid	i
 8005b8c:	f383 8811 	msr	BASEPRI, r3
 8005b90:	f3bf 8f6f 	isb	sy
 8005b94:	f3bf 8f4f 	dsb	sy
 8005b98:	b662      	cpsie	i
 8005b9a:	607b      	str	r3, [r7, #4]
}
 8005b9c:	bf00      	nop
 8005b9e:	bf00      	nop
 8005ba0:	e7fd      	b.n	8005b9e <xTaskIncrementTick+0x4a>
 8005ba2:	4b71      	ldr	r3, [pc, #452]	@ (8005d68 <xTaskIncrementTick+0x214>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	61fb      	str	r3, [r7, #28]
 8005ba8:	4b70      	ldr	r3, [pc, #448]	@ (8005d6c <xTaskIncrementTick+0x218>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a6e      	ldr	r2, [pc, #440]	@ (8005d68 <xTaskIncrementTick+0x214>)
 8005bae:	6013      	str	r3, [r2, #0]
 8005bb0:	4a6e      	ldr	r2, [pc, #440]	@ (8005d6c <xTaskIncrementTick+0x218>)
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	6013      	str	r3, [r2, #0]
 8005bb6:	4b6e      	ldr	r3, [pc, #440]	@ (8005d70 <xTaskIncrementTick+0x21c>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	4a6c      	ldr	r2, [pc, #432]	@ (8005d70 <xTaskIncrementTick+0x21c>)
 8005bbe:	6013      	str	r3, [r2, #0]
 8005bc0:	f000 fbc8 	bl	8006354 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005bc4:	4b6b      	ldr	r3, [pc, #428]	@ (8005d74 <xTaskIncrementTick+0x220>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6a3a      	ldr	r2, [r7, #32]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	f0c0 80a8 	bcc.w	8005d20 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bd0:	4b65      	ldr	r3, [pc, #404]	@ (8005d68 <xTaskIncrementTick+0x214>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d104      	bne.n	8005be4 <xTaskIncrementTick+0x90>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8005bda:	4b66      	ldr	r3, [pc, #408]	@ (8005d74 <xTaskIncrementTick+0x220>)
 8005bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8005be0:	601a      	str	r2, [r3, #0]
                    break;
 8005be2:	e09d      	b.n	8005d20 <xTaskIncrementTick+0x1cc>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005be4:	4b60      	ldr	r3, [pc, #384]	@ (8005d68 <xTaskIncrementTick+0x214>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8005bf4:	6a3a      	ldr	r2, [r7, #32]
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d203      	bcs.n	8005c04 <xTaskIncrementTick+0xb0>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005bfc:	4a5d      	ldr	r2, [pc, #372]	@ (8005d74 <xTaskIncrementTick+0x220>)
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	6013      	str	r3, [r2, #0]
                        break;
 8005c02:	e08d      	b.n	8005d20 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	613b      	str	r3, [r7, #16]
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	69ba      	ldr	r2, [r7, #24]
 8005c10:	68d2      	ldr	r2, [r2, #12]
 8005c12:	609a      	str	r2, [r3, #8]
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	6892      	ldr	r2, [r2, #8]
 8005c1c:	605a      	str	r2, [r3, #4]
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	685a      	ldr	r2, [r3, #4]
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	3304      	adds	r3, #4
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d103      	bne.n	8005c32 <xTaskIncrementTick+0xde>
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	68da      	ldr	r2, [r3, #12]
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	605a      	str	r2, [r3, #4]
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	2200      	movs	r2, #0
 8005c36:	615a      	str	r2, [r3, #20]
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	1e5a      	subs	r2, r3, #1
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d01e      	beq.n	8005c88 <xTaskIncrementTick+0x134>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c4e:	60fb      	str	r3, [r7, #12]
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	69db      	ldr	r3, [r3, #28]
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	6a12      	ldr	r2, [r2, #32]
 8005c58:	609a      	str	r2, [r3, #8]
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	69ba      	ldr	r2, [r7, #24]
 8005c60:	69d2      	ldr	r2, [r2, #28]
 8005c62:	605a      	str	r2, [r3, #4]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	3318      	adds	r3, #24
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d103      	bne.n	8005c78 <xTaskIncrementTick+0x124>
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	6a1a      	ldr	r2, [r3, #32]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	605a      	str	r2, [r3, #4]
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	1e5a      	subs	r2, r3, #1
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	409a      	lsls	r2, r3
 8005c90:	4b39      	ldr	r3, [pc, #228]	@ (8005d78 <xTaskIncrementTick+0x224>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	4a38      	ldr	r2, [pc, #224]	@ (8005d78 <xTaskIncrementTick+0x224>)
 8005c98:	6013      	str	r3, [r2, #0]
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c9e:	4937      	ldr	r1, [pc, #220]	@ (8005d7c <xTaskIncrementTick+0x228>)
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	440b      	add	r3, r1
 8005caa:	3304      	adds	r3, #4
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	60bb      	str	r3, [r7, #8]
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	609a      	str	r2, [r3, #8]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	689a      	ldr	r2, [r3, #8]
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	60da      	str	r2, [r3, #12]
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	69ba      	ldr	r2, [r7, #24]
 8005cc4:	3204      	adds	r2, #4
 8005cc6:	605a      	str	r2, [r3, #4]
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	1d1a      	adds	r2, r3, #4
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	609a      	str	r2, [r3, #8]
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	4413      	add	r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4a27      	ldr	r2, [pc, #156]	@ (8005d7c <xTaskIncrementTick+0x228>)
 8005cde:	441a      	add	r2, r3
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	615a      	str	r2, [r3, #20]
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ce8:	4924      	ldr	r1, [pc, #144]	@ (8005d7c <xTaskIncrementTick+0x228>)
 8005cea:	4613      	mov	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	440b      	add	r3, r1
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	69ba      	ldr	r2, [r7, #24]
 8005cf8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005cfa:	1c59      	adds	r1, r3, #1
 8005cfc:	481f      	ldr	r0, [pc, #124]	@ (8005d7c <xTaskIncrementTick+0x228>)
 8005cfe:	4613      	mov	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4403      	add	r3, r0
 8005d08:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8005d80 <xTaskIncrementTick+0x22c>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d14:	429a      	cmp	r2, r3
 8005d16:	f67f af5b 	bls.w	8005bd0 <xTaskIncrementTick+0x7c>
                            {
                                xSwitchRequired = pdTRUE;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d1e:	e757      	b.n	8005bd0 <xTaskIncrementTick+0x7c>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8005d20:	4b17      	ldr	r3, [pc, #92]	@ (8005d80 <xTaskIncrementTick+0x22c>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d26:	4915      	ldr	r1, [pc, #84]	@ (8005d7c <xTaskIncrementTick+0x228>)
 8005d28:	4613      	mov	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4413      	add	r3, r2
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	440b      	add	r3, r1
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d901      	bls.n	8005d3c <xTaskIncrementTick+0x1e8>
                {
                    xSwitchRequired = pdTRUE;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8005d3c:	4b11      	ldr	r3, [pc, #68]	@ (8005d84 <xTaskIncrementTick+0x230>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d007      	beq.n	8005d54 <xTaskIncrementTick+0x200>
                {
                    xSwitchRequired = pdTRUE;
 8005d44:	2301      	movs	r3, #1
 8005d46:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d48:	e004      	b.n	8005d54 <xTaskIncrementTick+0x200>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8005d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8005d88 <xTaskIncrementTick+0x234>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	4a0d      	ldr	r2, [pc, #52]	@ (8005d88 <xTaskIncrementTick+0x234>)
 8005d52:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8005d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3728      	adds	r7, #40	@ 0x28
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	240023e0 	.word	0x240023e0
 8005d64:	240023bc 	.word	0x240023bc
 8005d68:	24002384 	.word	0x24002384
 8005d6c:	24002388 	.word	0x24002388
 8005d70:	240023d0 	.word	0x240023d0
 8005d74:	240023d8 	.word	0x240023d8
 8005d78:	240023c0 	.word	0x240023c0
 8005d7c:	240022d0 	.word	0x240022d0
 8005d80:	240022cc 	.word	0x240022cc
 8005d84:	240023cc 	.word	0x240023cc
 8005d88:	240023c8 	.word	0x240023c8

08005d8c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8005d92:	4b29      	ldr	r3, [pc, #164]	@ (8005e38 <vTaskSwitchContext+0xac>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8005d9a:	4b28      	ldr	r3, [pc, #160]	@ (8005e3c <vTaskSwitchContext+0xb0>)
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8005da0:	e043      	b.n	8005e2a <vTaskSwitchContext+0x9e>
            xYieldPendings[ 0 ] = pdFALSE;
 8005da2:	4b26      	ldr	r3, [pc, #152]	@ (8005e3c <vTaskSwitchContext+0xb0>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8005da8:	4b25      	ldr	r3, [pc, #148]	@ (8005e40 <vTaskSwitchContext+0xb4>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	fab3 f383 	clz	r3, r3
 8005db4:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8005db6:	7afb      	ldrb	r3, [r7, #11]
 8005db8:	f1c3 031f 	rsb	r3, r3, #31
 8005dbc:	617b      	str	r3, [r7, #20]
 8005dbe:	4921      	ldr	r1, [pc, #132]	@ (8005e44 <vTaskSwitchContext+0xb8>)
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4413      	add	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	440b      	add	r3, r1
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d10d      	bne.n	8005dee <vTaskSwitchContext+0x62>
    __asm volatile
 8005dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd6:	b672      	cpsid	i
 8005dd8:	f383 8811 	msr	BASEPRI, r3
 8005ddc:	f3bf 8f6f 	isb	sy
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	b662      	cpsie	i
 8005de6:	607b      	str	r3, [r7, #4]
}
 8005de8:	bf00      	nop
 8005dea:	bf00      	nop
 8005dec:	e7fd      	b.n	8005dea <vTaskSwitchContext+0x5e>
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	4613      	mov	r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4413      	add	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4a12      	ldr	r2, [pc, #72]	@ (8005e44 <vTaskSwitchContext+0xb8>)
 8005dfa:	4413      	add	r3, r2
 8005dfc:	613b      	str	r3, [r7, #16]
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	685a      	ldr	r2, [r3, #4]
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	605a      	str	r2, [r3, #4]
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	3308      	adds	r3, #8
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d103      	bne.n	8005e1c <vTaskSwitchContext+0x90>
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	68da      	ldr	r2, [r3, #12]
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	605a      	str	r2, [r3, #4]
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	4a09      	ldr	r2, [pc, #36]	@ (8005e48 <vTaskSwitchContext+0xbc>)
 8005e24:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8005e26:	4b08      	ldr	r3, [pc, #32]	@ (8005e48 <vTaskSwitchContext+0xbc>)
 8005e28:	681b      	ldr	r3, [r3, #0]
    }
 8005e2a:	bf00      	nop
 8005e2c:	371c      	adds	r7, #28
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	240023e0 	.word	0x240023e0
 8005e3c:	240023cc 	.word	0x240023cc
 8005e40:	240023c0 	.word	0x240023c0
 8005e44:	240022d0 	.word	0x240022d0
 8005e48:	240022cc 	.word	0x240022cc

08005e4c <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10d      	bne.n	8005e78 <vTaskPlaceOnEventList+0x2c>
    __asm volatile
 8005e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e60:	b672      	cpsid	i
 8005e62:	f383 8811 	msr	BASEPRI, r3
 8005e66:	f3bf 8f6f 	isb	sy
 8005e6a:	f3bf 8f4f 	dsb	sy
 8005e6e:	b662      	cpsie	i
 8005e70:	60fb      	str	r3, [r7, #12]
}
 8005e72:	bf00      	nop
 8005e74:	bf00      	nop
 8005e76:	e7fd      	b.n	8005e74 <vTaskPlaceOnEventList+0x28>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e78:	4b07      	ldr	r3, [pc, #28]	@ (8005e98 <vTaskPlaceOnEventList+0x4c>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	3318      	adds	r3, #24
 8005e7e:	4619      	mov	r1, r3
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f7fe f9ba 	bl	80041fa <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e86:	2101      	movs	r1, #1
 8005e88:	6838      	ldr	r0, [r7, #0]
 8005e8a:	f000 fcc3 	bl	8006814 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8005e8e:	bf00      	nop
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	240022cc 	.word	0x240022cc

08005e9c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b086      	sub	sp, #24
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10d      	bne.n	8005eca <vTaskPlaceOnEventListRestricted+0x2e>
    __asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb2:	b672      	cpsid	i
 8005eb4:	f383 8811 	msr	BASEPRI, r3
 8005eb8:	f3bf 8f6f 	isb	sy
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	b662      	cpsie	i
 8005ec2:	613b      	str	r3, [r7, #16]
}
 8005ec4:	bf00      	nop
 8005ec6:	bf00      	nop
 8005ec8:	e7fd      	b.n	8005ec6 <vTaskPlaceOnEventListRestricted+0x2a>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	617b      	str	r3, [r7, #20]
 8005ed0:	4b15      	ldr	r3, [pc, #84]	@ (8005f28 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	61da      	str	r2, [r3, #28]
 8005ed8:	4b13      	ldr	r3, [pc, #76]	@ (8005f28 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	6892      	ldr	r2, [r2, #8]
 8005ee0:	621a      	str	r2, [r3, #32]
 8005ee2:	4b11      	ldr	r3, [pc, #68]	@ (8005f28 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	3218      	adds	r2, #24
 8005eec:	605a      	str	r2, [r3, #4]
 8005eee:	4b0e      	ldr	r3, [pc, #56]	@ (8005f28 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f103 0218 	add.w	r2, r3, #24
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	609a      	str	r2, [r3, #8]
 8005efa:	4b0b      	ldr	r3, [pc, #44]	@ (8005f28 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	1c5a      	adds	r2, r3, #1
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d002      	beq.n	8005f18 <vTaskPlaceOnEventListRestricted+0x7c>
        {
            xTicksToWait = portMAX_DELAY;
 8005f12:	f04f 33ff 	mov.w	r3, #4294967295
 8005f16:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005f18:	6879      	ldr	r1, [r7, #4]
 8005f1a:	68b8      	ldr	r0, [r7, #8]
 8005f1c:	f000 fc7a 	bl	8006814 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 8005f20:	bf00      	nop
 8005f22:	3718      	adds	r7, #24
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	240022cc 	.word	0x240022cc

08005f2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b08b      	sub	sp, #44	@ 0x2c
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10d      	bne.n	8005f5e <xTaskRemoveFromEventList+0x32>
    __asm volatile
 8005f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f46:	b672      	cpsid	i
 8005f48:	f383 8811 	msr	BASEPRI, r3
 8005f4c:	f3bf 8f6f 	isb	sy
 8005f50:	f3bf 8f4f 	dsb	sy
 8005f54:	b662      	cpsie	i
 8005f56:	60fb      	str	r3, [r7, #12]
}
 8005f58:	bf00      	nop
 8005f5a:	bf00      	nop
 8005f5c:	e7fd      	b.n	8005f5a <xTaskRemoveFromEventList+0x2e>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f62:	61fb      	str	r3, [r7, #28]
 8005f64:	6a3b      	ldr	r3, [r7, #32]
 8005f66:	69db      	ldr	r3, [r3, #28]
 8005f68:	6a3a      	ldr	r2, [r7, #32]
 8005f6a:	6a12      	ldr	r2, [r2, #32]
 8005f6c:	609a      	str	r2, [r3, #8]
 8005f6e:	6a3b      	ldr	r3, [r7, #32]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	6a3a      	ldr	r2, [r7, #32]
 8005f74:	69d2      	ldr	r2, [r2, #28]
 8005f76:	605a      	str	r2, [r3, #4]
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	6a3b      	ldr	r3, [r7, #32]
 8005f7e:	3318      	adds	r3, #24
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d103      	bne.n	8005f8c <xTaskRemoveFromEventList+0x60>
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	6a1a      	ldr	r2, [r3, #32]
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	605a      	str	r2, [r3, #4]
 8005f8c:	6a3b      	ldr	r3, [r7, #32]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	1e5a      	subs	r2, r3, #1
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005f9c:	4b4b      	ldr	r3, [pc, #300]	@ (80060cc <xTaskRemoveFromEventList+0x1a0>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d160      	bne.n	8006066 <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8005fa4:	6a3b      	ldr	r3, [r7, #32]
 8005fa6:	695b      	ldr	r3, [r3, #20]
 8005fa8:	617b      	str	r3, [r7, #20]
 8005faa:	6a3b      	ldr	r3, [r7, #32]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	6a3a      	ldr	r2, [r7, #32]
 8005fb0:	68d2      	ldr	r2, [r2, #12]
 8005fb2:	609a      	str	r2, [r3, #8]
 8005fb4:	6a3b      	ldr	r3, [r7, #32]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	6a3a      	ldr	r2, [r7, #32]
 8005fba:	6892      	ldr	r2, [r2, #8]
 8005fbc:	605a      	str	r2, [r3, #4]
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	685a      	ldr	r2, [r3, #4]
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	3304      	adds	r3, #4
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d103      	bne.n	8005fd2 <xTaskRemoveFromEventList+0xa6>
 8005fca:	6a3b      	ldr	r3, [r7, #32]
 8005fcc:	68da      	ldr	r2, [r3, #12]
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	605a      	str	r2, [r3, #4]
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	615a      	str	r2, [r3, #20]
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	1e5a      	subs	r2, r3, #1
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	409a      	lsls	r2, r3
 8005fea:	4b39      	ldr	r3, [pc, #228]	@ (80060d0 <xTaskRemoveFromEventList+0x1a4>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	4a37      	ldr	r2, [pc, #220]	@ (80060d0 <xTaskRemoveFromEventList+0x1a4>)
 8005ff2:	6013      	str	r3, [r2, #0]
 8005ff4:	6a3b      	ldr	r3, [r7, #32]
 8005ff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ff8:	4936      	ldr	r1, [pc, #216]	@ (80060d4 <xTaskRemoveFromEventList+0x1a8>)
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	440b      	add	r3, r1
 8006004:	3304      	adds	r3, #4
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	613b      	str	r3, [r7, #16]
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	609a      	str	r2, [r3, #8]
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	689a      	ldr	r2, [r3, #8]
 8006014:	6a3b      	ldr	r3, [r7, #32]
 8006016:	60da      	str	r2, [r3, #12]
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	6a3a      	ldr	r2, [r7, #32]
 800601e:	3204      	adds	r2, #4
 8006020:	605a      	str	r2, [r3, #4]
 8006022:	6a3b      	ldr	r3, [r7, #32]
 8006024:	1d1a      	adds	r2, r3, #4
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	609a      	str	r2, [r3, #8]
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800602e:	4613      	mov	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4413      	add	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4a27      	ldr	r2, [pc, #156]	@ (80060d4 <xTaskRemoveFromEventList+0x1a8>)
 8006038:	441a      	add	r2, r3
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	615a      	str	r2, [r3, #20]
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006042:	4924      	ldr	r1, [pc, #144]	@ (80060d4 <xTaskRemoveFromEventList+0x1a8>)
 8006044:	4613      	mov	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	440b      	add	r3, r1
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6a3a      	ldr	r2, [r7, #32]
 8006052:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006054:	1c59      	adds	r1, r3, #1
 8006056:	481f      	ldr	r0, [pc, #124]	@ (80060d4 <xTaskRemoveFromEventList+0x1a8>)
 8006058:	4613      	mov	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4413      	add	r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4403      	add	r3, r0
 8006062:	6019      	str	r1, [r3, #0]
 8006064:	e01b      	b.n	800609e <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006066:	4b1c      	ldr	r3, [pc, #112]	@ (80060d8 <xTaskRemoveFromEventList+0x1ac>)
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	61bb      	str	r3, [r7, #24]
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	69ba      	ldr	r2, [r7, #24]
 8006070:	61da      	str	r2, [r3, #28]
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	689a      	ldr	r2, [r3, #8]
 8006076:	6a3b      	ldr	r3, [r7, #32]
 8006078:	621a      	str	r2, [r3, #32]
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	6a3a      	ldr	r2, [r7, #32]
 8006080:	3218      	adds	r2, #24
 8006082:	605a      	str	r2, [r3, #4]
 8006084:	6a3b      	ldr	r3, [r7, #32]
 8006086:	f103 0218 	add.w	r2, r3, #24
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	609a      	str	r2, [r3, #8]
 800608e:	6a3b      	ldr	r3, [r7, #32]
 8006090:	4a11      	ldr	r2, [pc, #68]	@ (80060d8 <xTaskRemoveFromEventList+0x1ac>)
 8006092:	629a      	str	r2, [r3, #40]	@ 0x28
 8006094:	4b10      	ldr	r3, [pc, #64]	@ (80060d8 <xTaskRemoveFromEventList+0x1ac>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	3301      	adds	r3, #1
 800609a:	4a0f      	ldr	r2, [pc, #60]	@ (80060d8 <xTaskRemoveFromEventList+0x1ac>)
 800609c:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060a2:	4b0e      	ldr	r3, [pc, #56]	@ (80060dc <xTaskRemoveFromEventList+0x1b0>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d905      	bls.n	80060b8 <xTaskRemoveFromEventList+0x18c>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 80060ac:	2301      	movs	r3, #1
 80060ae:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 80060b0:	4b0b      	ldr	r3, [pc, #44]	@ (80060e0 <xTaskRemoveFromEventList+0x1b4>)
 80060b2:	2201      	movs	r2, #1
 80060b4:	601a      	str	r2, [r3, #0]
 80060b6:	e001      	b.n	80060bc <xTaskRemoveFromEventList+0x190>
        }
        else
        {
            xReturn = pdFALSE;
 80060b8:	2300      	movs	r3, #0
 80060ba:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 80060bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80060be:	4618      	mov	r0, r3
 80060c0:	372c      	adds	r7, #44	@ 0x2c
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	240023e0 	.word	0x240023e0
 80060d0:	240023c0 	.word	0x240023c0
 80060d4:	240022d0 	.word	0x240022d0
 80060d8:	2400238c 	.word	0x2400238c
 80060dc:	240022cc 	.word	0x240022cc
 80060e0:	240023cc 	.word	0x240023cc

080060e4 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80060ec:	4b06      	ldr	r3, [pc, #24]	@ (8006108 <vTaskInternalSetTimeOutState+0x24>)
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80060f4:	4b05      	ldr	r3, [pc, #20]	@ (800610c <vTaskInternalSetTimeOutState+0x28>)
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr
 8006108:	240023d0 	.word	0x240023d0
 800610c:	240023bc 	.word	0x240023bc

08006110 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b088      	sub	sp, #32
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d10d      	bne.n	800613c <xTaskCheckForTimeOut+0x2c>
    __asm volatile
 8006120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006124:	b672      	cpsid	i
 8006126:	f383 8811 	msr	BASEPRI, r3
 800612a:	f3bf 8f6f 	isb	sy
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	b662      	cpsie	i
 8006134:	613b      	str	r3, [r7, #16]
}
 8006136:	bf00      	nop
 8006138:	bf00      	nop
 800613a:	e7fd      	b.n	8006138 <xTaskCheckForTimeOut+0x28>
    configASSERT( pxTicksToWait );
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10d      	bne.n	800615e <xTaskCheckForTimeOut+0x4e>
    __asm volatile
 8006142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006146:	b672      	cpsid	i
 8006148:	f383 8811 	msr	BASEPRI, r3
 800614c:	f3bf 8f6f 	isb	sy
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	b662      	cpsie	i
 8006156:	60fb      	str	r3, [r7, #12]
}
 8006158:	bf00      	nop
 800615a:	bf00      	nop
 800615c:	e7fd      	b.n	800615a <xTaskCheckForTimeOut+0x4a>

    taskENTER_CRITICAL();
 800615e:	f000 fff9 	bl	8007154 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8006162:	4b1b      	ldr	r3, [pc, #108]	@ (80061d0 <xTaskCheckForTimeOut+0xc0>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	69ba      	ldr	r2, [r7, #24]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	617b      	str	r3, [r7, #20]
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	4b17      	ldr	r3, [pc, #92]	@ (80061d4 <xTaskCheckForTimeOut+0xc4>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	429a      	cmp	r2, r3
 800617c:	d00a      	beq.n	8006194 <xTaskCheckForTimeOut+0x84>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	69ba      	ldr	r2, [r7, #24]
 8006184:	429a      	cmp	r2, r3
 8006186:	d305      	bcc.n	8006194 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006188:	2301      	movs	r3, #1
 800618a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	2200      	movs	r2, #0
 8006190:	601a      	str	r2, [r3, #0]
 8006192:	e015      	b.n	80061c0 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	429a      	cmp	r2, r3
 800619c:	d20b      	bcs.n	80061b6 <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	1ad2      	subs	r2, r2, r3
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7ff ff9a 	bl	80060e4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80061b0:	2300      	movs	r3, #0
 80061b2:	61fb      	str	r3, [r7, #28]
 80061b4:	e004      	b.n	80061c0 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	2200      	movs	r2, #0
 80061ba:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80061bc:	2301      	movs	r3, #1
 80061be:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80061c0:	f000 fffe 	bl	80071c0 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 80061c4:	69fb      	ldr	r3, [r7, #28]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3720      	adds	r7, #32
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	240023bc 	.word	0x240023bc
 80061d4:	240023d0 	.word	0x240023d0

080061d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80061d8:	b480      	push	{r7}
 80061da:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 80061dc:	4b03      	ldr	r3, [pc, #12]	@ (80061ec <vTaskMissedYield+0x14>)
 80061de:	2201      	movs	r2, #1
 80061e0:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 80061e2:	bf00      	nop
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr
 80061ec:	240023cc 	.word	0x240023cc

080061f0 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80061f8:	f000 f84c 	bl	8006294 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 80061fc:	4b06      	ldr	r3, [pc, #24]	@ (8006218 <prvIdleTask+0x28>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d9f9      	bls.n	80061f8 <prvIdleTask+0x8>
            {
                taskYIELD();
 8006204:	4b05      	ldr	r3, [pc, #20]	@ (800621c <prvIdleTask+0x2c>)
 8006206:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800620a:	601a      	str	r2, [r3, #0]
 800620c:	f3bf 8f4f 	dsb	sy
 8006210:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8006214:	e7f0      	b.n	80061f8 <prvIdleTask+0x8>
 8006216:	bf00      	nop
 8006218:	240022d0 	.word	0x240022d0
 800621c:	e000ed04 	.word	0xe000ed04

08006220 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006226:	2300      	movs	r3, #0
 8006228:	607b      	str	r3, [r7, #4]
 800622a:	e00c      	b.n	8006246 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	4613      	mov	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4413      	add	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4a10      	ldr	r2, [pc, #64]	@ (8006278 <prvInitialiseTaskLists+0x58>)
 8006238:	4413      	add	r3, r2
 800623a:	4618      	mov	r0, r3
 800623c:	f7fd ffb0 	bl	80041a0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	3301      	adds	r3, #1
 8006244:	607b      	str	r3, [r7, #4]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2b06      	cmp	r3, #6
 800624a:	d9ef      	bls.n	800622c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800624c:	480b      	ldr	r0, [pc, #44]	@ (800627c <prvInitialiseTaskLists+0x5c>)
 800624e:	f7fd ffa7 	bl	80041a0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8006252:	480b      	ldr	r0, [pc, #44]	@ (8006280 <prvInitialiseTaskLists+0x60>)
 8006254:	f7fd ffa4 	bl	80041a0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006258:	480a      	ldr	r0, [pc, #40]	@ (8006284 <prvInitialiseTaskLists+0x64>)
 800625a:	f7fd ffa1 	bl	80041a0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800625e:	480a      	ldr	r0, [pc, #40]	@ (8006288 <prvInitialiseTaskLists+0x68>)
 8006260:	f7fd ff9e 	bl	80041a0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006264:	4b09      	ldr	r3, [pc, #36]	@ (800628c <prvInitialiseTaskLists+0x6c>)
 8006266:	4a05      	ldr	r2, [pc, #20]	@ (800627c <prvInitialiseTaskLists+0x5c>)
 8006268:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800626a:	4b09      	ldr	r3, [pc, #36]	@ (8006290 <prvInitialiseTaskLists+0x70>)
 800626c:	4a04      	ldr	r2, [pc, #16]	@ (8006280 <prvInitialiseTaskLists+0x60>)
 800626e:	601a      	str	r2, [r3, #0]
}
 8006270:	bf00      	nop
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	240022d0 	.word	0x240022d0
 800627c:	2400235c 	.word	0x2400235c
 8006280:	24002370 	.word	0x24002370
 8006284:	2400238c 	.word	0x2400238c
 8006288:	240023a0 	.word	0x240023a0
 800628c:	24002384 	.word	0x24002384
 8006290:	24002388 	.word	0x24002388

08006294 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800629a:	e019      	b.n	80062d0 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 800629c:	f000 ff5a 	bl	8007154 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80062a0:	4b10      	ldr	r3, [pc, #64]	@ (80062e4 <prvCheckTasksWaitingTermination+0x50>)
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	3304      	adds	r3, #4
 80062ac:	4618      	mov	r0, r3
 80062ae:	f7fd ffdd 	bl	800426c <uxListRemove>
                        --uxCurrentNumberOfTasks;
 80062b2:	4b0d      	ldr	r3, [pc, #52]	@ (80062e8 <prvCheckTasksWaitingTermination+0x54>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	3b01      	subs	r3, #1
 80062b8:	4a0b      	ldr	r2, [pc, #44]	@ (80062e8 <prvCheckTasksWaitingTermination+0x54>)
 80062ba:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 80062bc:	4b0b      	ldr	r3, [pc, #44]	@ (80062ec <prvCheckTasksWaitingTermination+0x58>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	3b01      	subs	r3, #1
 80062c2:	4a0a      	ldr	r2, [pc, #40]	@ (80062ec <prvCheckTasksWaitingTermination+0x58>)
 80062c4:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 80062c6:	f000 ff7b 	bl	80071c0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f810 	bl	80062f0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062d0:	4b06      	ldr	r3, [pc, #24]	@ (80062ec <prvCheckTasksWaitingTermination+0x58>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1e1      	bne.n	800629c <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80062d8:	bf00      	nop
 80062da:	bf00      	nop
 80062dc:	3708      	adds	r7, #8
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	240023a0 	.word	0x240023a0
 80062e8:	240023b8 	.word	0x240023b8
 80062ec:	240023b4 	.word	0x240023b4

080062f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d108      	bne.n	8006314 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006306:	4618      	mov	r0, r3
 8006308:	f001 f996 	bl	8007638 <vPortFree>
                vPortFree( pxTCB );
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f001 f993 	bl	8007638 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006312:	e01b      	b.n	800634c <prvDeleteTCB+0x5c>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800631a:	2b01      	cmp	r3, #1
 800631c:	d103      	bne.n	8006326 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f001 f98a 	bl	8007638 <vPortFree>
    }
 8006324:	e012      	b.n	800634c <prvDeleteTCB+0x5c>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800632c:	2b02      	cmp	r3, #2
 800632e:	d00d      	beq.n	800634c <prvDeleteTCB+0x5c>
    __asm volatile
 8006330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006334:	b672      	cpsid	i
 8006336:	f383 8811 	msr	BASEPRI, r3
 800633a:	f3bf 8f6f 	isb	sy
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	b662      	cpsie	i
 8006344:	60fb      	str	r3, [r7, #12]
}
 8006346:	bf00      	nop
 8006348:	bf00      	nop
 800634a:	e7fd      	b.n	8006348 <prvDeleteTCB+0x58>
    }
 800634c:	bf00      	nop
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006354:	b480      	push	{r7}
 8006356:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006358:	4b0a      	ldr	r3, [pc, #40]	@ (8006384 <prvResetNextTaskUnblockTime+0x30>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d104      	bne.n	800636c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8006362:	4b09      	ldr	r3, [pc, #36]	@ (8006388 <prvResetNextTaskUnblockTime+0x34>)
 8006364:	f04f 32ff 	mov.w	r2, #4294967295
 8006368:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800636a:	e005      	b.n	8006378 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800636c:	4b05      	ldr	r3, [pc, #20]	@ (8006384 <prvResetNextTaskUnblockTime+0x30>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a04      	ldr	r2, [pc, #16]	@ (8006388 <prvResetNextTaskUnblockTime+0x34>)
 8006376:	6013      	str	r3, [r2, #0]
}
 8006378:	bf00      	nop
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	24002384 	.word	0x24002384
 8006388:	240023d8 	.word	0x240023d8

0800638c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8006392:	4b0b      	ldr	r3, [pc, #44]	@ (80063c0 <xTaskGetSchedulerState+0x34>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d102      	bne.n	80063a0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800639a:	2301      	movs	r3, #1
 800639c:	607b      	str	r3, [r7, #4]
 800639e:	e008      	b.n	80063b2 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80063a0:	4b08      	ldr	r3, [pc, #32]	@ (80063c4 <xTaskGetSchedulerState+0x38>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d102      	bne.n	80063ae <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 80063a8:	2302      	movs	r3, #2
 80063aa:	607b      	str	r3, [r7, #4]
 80063ac:	e001      	b.n	80063b2 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 80063ae:	2300      	movs	r3, #0
 80063b0:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 80063b2:	687b      	ldr	r3, [r7, #4]
    }
 80063b4:	4618      	mov	r0, r3
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr
 80063c0:	240023c4 	.word	0x240023c4
 80063c4:	240023e0 	.word	0x240023e0

080063c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b086      	sub	sp, #24
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80063d4:	2300      	movs	r3, #0
 80063d6:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f000 8089 	beq.w	80064f2 <xTaskPriorityInherit+0x12a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063e4:	4b45      	ldr	r3, [pc, #276]	@ (80064fc <xTaskPriorityInherit+0x134>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d278      	bcs.n	80064e0 <xTaskPriorityInherit+0x118>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	db06      	blt.n	8006404 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 80063f6:	4b41      	ldr	r3, [pc, #260]	@ (80064fc <xTaskPriorityInherit+0x134>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063fc:	f1c3 0207 	rsb	r2, r3, #7
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	6959      	ldr	r1, [r3, #20]
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800640c:	4613      	mov	r3, r2
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	4413      	add	r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4a3a      	ldr	r2, [pc, #232]	@ (8006500 <xTaskPriorityInherit+0x138>)
 8006416:	4413      	add	r3, r2
 8006418:	4299      	cmp	r1, r3
 800641a:	d159      	bne.n	80064d0 <xTaskPriorityInherit+0x108>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	3304      	adds	r3, #4
 8006420:	4618      	mov	r0, r3
 8006422:	f7fd ff23 	bl	800426c <uxListRemove>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10a      	bne.n	8006442 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006430:	2201      	movs	r2, #1
 8006432:	fa02 f303 	lsl.w	r3, r2, r3
 8006436:	43da      	mvns	r2, r3
 8006438:	4b32      	ldr	r3, [pc, #200]	@ (8006504 <xTaskPriorityInherit+0x13c>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4013      	ands	r3, r2
 800643e:	4a31      	ldr	r2, [pc, #196]	@ (8006504 <xTaskPriorityInherit+0x13c>)
 8006440:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006442:	4b2e      	ldr	r3, [pc, #184]	@ (80064fc <xTaskPriorityInherit+0x134>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006450:	2201      	movs	r2, #1
 8006452:	409a      	lsls	r2, r3
 8006454:	4b2b      	ldr	r3, [pc, #172]	@ (8006504 <xTaskPriorityInherit+0x13c>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4313      	orrs	r3, r2
 800645a:	4a2a      	ldr	r2, [pc, #168]	@ (8006504 <xTaskPriorityInherit+0x13c>)
 800645c:	6013      	str	r3, [r2, #0]
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006462:	4927      	ldr	r1, [pc, #156]	@ (8006500 <xTaskPriorityInherit+0x138>)
 8006464:	4613      	mov	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	4413      	add	r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	440b      	add	r3, r1
 800646e:	3304      	adds	r3, #4
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	60fb      	str	r3, [r7, #12]
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	609a      	str	r2, [r3, #8]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	689a      	ldr	r2, [r3, #8]
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	60da      	str	r2, [r3, #12]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	3204      	adds	r2, #4
 800648a:	605a      	str	r2, [r3, #4]
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	1d1a      	adds	r2, r3, #4
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	609a      	str	r2, [r3, #8]
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006498:	4613      	mov	r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4413      	add	r3, r2
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4a17      	ldr	r2, [pc, #92]	@ (8006500 <xTaskPriorityInherit+0x138>)
 80064a2:	441a      	add	r2, r3
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	615a      	str	r2, [r3, #20]
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064ac:	4914      	ldr	r1, [pc, #80]	@ (8006500 <xTaskPriorityInherit+0x138>)
 80064ae:	4613      	mov	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	4413      	add	r3, r2
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	440b      	add	r3, r1
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	693a      	ldr	r2, [r7, #16]
 80064bc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80064be:	1c59      	adds	r1, r3, #1
 80064c0:	480f      	ldr	r0, [pc, #60]	@ (8006500 <xTaskPriorityInherit+0x138>)
 80064c2:	4613      	mov	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4403      	add	r3, r0
 80064cc:	6019      	str	r1, [r3, #0]
 80064ce:	e004      	b.n	80064da <xTaskPriorityInherit+0x112>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80064d0:	4b0a      	ldr	r3, [pc, #40]	@ (80064fc <xTaskPriorityInherit+0x134>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80064da:	2301      	movs	r3, #1
 80064dc:	617b      	str	r3, [r7, #20]
 80064de:	e008      	b.n	80064f2 <xTaskPriorityInherit+0x12a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80064e4:	4b05      	ldr	r3, [pc, #20]	@ (80064fc <xTaskPriorityInherit+0x134>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d201      	bcs.n	80064f2 <xTaskPriorityInherit+0x12a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80064ee:	2301      	movs	r3, #1
 80064f0:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );

        return xReturn;
 80064f2:	697b      	ldr	r3, [r7, #20]
    }
 80064f4:	4618      	mov	r0, r3
 80064f6:	3718      	adds	r7, #24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	240022cc 	.word	0x240022cc
 8006500:	240022d0 	.word	0x240022d0
 8006504:	240023c0 	.word	0x240023c0

08006508 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8006508:	b580      	push	{r7, lr}
 800650a:	b088      	sub	sp, #32
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8006514:	2300      	movs	r3, #0
 8006516:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 8094 	beq.w	8006648 <xTaskPriorityDisinherit+0x140>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8006520:	4b4c      	ldr	r3, [pc, #304]	@ (8006654 <xTaskPriorityDisinherit+0x14c>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	69ba      	ldr	r2, [r7, #24]
 8006526:	429a      	cmp	r2, r3
 8006528:	d00d      	beq.n	8006546 <xTaskPriorityDisinherit+0x3e>
    __asm volatile
 800652a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800652e:	b672      	cpsid	i
 8006530:	f383 8811 	msr	BASEPRI, r3
 8006534:	f3bf 8f6f 	isb	sy
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	b662      	cpsie	i
 800653e:	613b      	str	r3, [r7, #16]
}
 8006540:	bf00      	nop
 8006542:	bf00      	nop
 8006544:	e7fd      	b.n	8006542 <xTaskPriorityDisinherit+0x3a>
            configASSERT( pxTCB->uxMutexesHeld );
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10d      	bne.n	800656a <xTaskPriorityDisinherit+0x62>
    __asm volatile
 800654e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006552:	b672      	cpsid	i
 8006554:	f383 8811 	msr	BASEPRI, r3
 8006558:	f3bf 8f6f 	isb	sy
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	b662      	cpsie	i
 8006562:	60fb      	str	r3, [r7, #12]
}
 8006564:	bf00      	nop
 8006566:	bf00      	nop
 8006568:	e7fd      	b.n	8006566 <xTaskPriorityDisinherit+0x5e>
            ( pxTCB->uxMutexesHeld )--;
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800656e:	1e5a      	subs	r2, r3, #1
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800657c:	429a      	cmp	r2, r3
 800657e:	d063      	beq.n	8006648 <xTaskPriorityDisinherit+0x140>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006584:	2b00      	cmp	r3, #0
 8006586:	d15f      	bne.n	8006648 <xTaskPriorityDisinherit+0x140>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	3304      	adds	r3, #4
 800658c:	4618      	mov	r0, r3
 800658e:	f7fd fe6d 	bl	800426c <uxListRemove>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10a      	bne.n	80065ae <xTaskPriorityDisinherit+0xa6>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800659c:	2201      	movs	r2, #1
 800659e:	fa02 f303 	lsl.w	r3, r2, r3
 80065a2:	43da      	mvns	r2, r3
 80065a4:	4b2c      	ldr	r3, [pc, #176]	@ (8006658 <xTaskPriorityDisinherit+0x150>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4013      	ands	r3, r2
 80065aa:	4a2b      	ldr	r2, [pc, #172]	@ (8006658 <xTaskPriorityDisinherit+0x150>)
 80065ac:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ba:	f1c3 0207 	rsb	r2, r3, #7
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c6:	2201      	movs	r2, #1
 80065c8:	409a      	lsls	r2, r3
 80065ca:	4b23      	ldr	r3, [pc, #140]	@ (8006658 <xTaskPriorityDisinherit+0x150>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	4a21      	ldr	r2, [pc, #132]	@ (8006658 <xTaskPriorityDisinherit+0x150>)
 80065d2:	6013      	str	r3, [r2, #0]
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065d8:	4920      	ldr	r1, [pc, #128]	@ (800665c <xTaskPriorityDisinherit+0x154>)
 80065da:	4613      	mov	r3, r2
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	4413      	add	r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	440b      	add	r3, r1
 80065e4:	3304      	adds	r3, #4
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	617b      	str	r3, [r7, #20]
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	609a      	str	r2, [r3, #8]
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	689a      	ldr	r2, [r3, #8]
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	60da      	str	r2, [r3, #12]
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	69ba      	ldr	r2, [r7, #24]
 80065fe:	3204      	adds	r2, #4
 8006600:	605a      	str	r2, [r3, #4]
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	1d1a      	adds	r2, r3, #4
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	609a      	str	r2, [r3, #8]
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800660e:	4613      	mov	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4413      	add	r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	4a11      	ldr	r2, [pc, #68]	@ (800665c <xTaskPriorityDisinherit+0x154>)
 8006618:	441a      	add	r2, r3
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	615a      	str	r2, [r3, #20]
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006622:	490e      	ldr	r1, [pc, #56]	@ (800665c <xTaskPriorityDisinherit+0x154>)
 8006624:	4613      	mov	r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4413      	add	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	440b      	add	r3, r1
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	69ba      	ldr	r2, [r7, #24]
 8006632:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006634:	1c59      	adds	r1, r3, #1
 8006636:	4809      	ldr	r0, [pc, #36]	@ (800665c <xTaskPriorityDisinherit+0x154>)
 8006638:	4613      	mov	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	4403      	add	r3, r0
 8006642:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8006644:	2301      	movs	r3, #1
 8006646:	61fb      	str	r3, [r7, #28]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8006648:	69fb      	ldr	r3, [r7, #28]
    }
 800664a:	4618      	mov	r0, r3
 800664c:	3720      	adds	r7, #32
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	240022cc 	.word	0x240022cc
 8006658:	240023c0 	.word	0x240023c0
 800665c:	240022d0 	.word	0x240022d0

08006660 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8006660:	b580      	push	{r7, lr}
 8006662:	b08a      	sub	sp, #40	@ 0x28
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800666e:	2301      	movs	r3, #1
 8006670:	61fb      	str	r3, [r7, #28]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2b00      	cmp	r3, #0
 8006676:	f000 80aa 	beq.w	80067ce <vTaskPriorityDisinheritAfterTimeout+0x16e>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800667a:	6a3b      	ldr	r3, [r7, #32]
 800667c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10d      	bne.n	800669e <vTaskPriorityDisinheritAfterTimeout+0x3e>
    __asm volatile
 8006682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006686:	b672      	cpsid	i
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	b662      	cpsie	i
 8006696:	613b      	str	r3, [r7, #16]
}
 8006698:	bf00      	nop
 800669a:	bf00      	nop
 800669c:	e7fd      	b.n	800669a <vTaskPriorityDisinheritAfterTimeout+0x3a>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800669e:	6a3b      	ldr	r3, [r7, #32]
 80066a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066a2:	683a      	ldr	r2, [r7, #0]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d902      	bls.n	80066ae <vTaskPriorityDisinheritAfterTimeout+0x4e>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80066ac:	e002      	b.n	80066b4 <vTaskPriorityDisinheritAfterTimeout+0x54>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80066ae:	6a3b      	ldr	r3, [r7, #32]
 80066b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066b2:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80066b4:	6a3b      	ldr	r3, [r7, #32]
 80066b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066ba:	429a      	cmp	r2, r3
 80066bc:	f000 8087 	beq.w	80067ce <vTaskPriorityDisinheritAfterTimeout+0x16e>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066c4:	69fa      	ldr	r2, [r7, #28]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	f040 8081 	bne.w	80067ce <vTaskPriorityDisinheritAfterTimeout+0x16e>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80066cc:	4b42      	ldr	r3, [pc, #264]	@ (80067d8 <vTaskPriorityDisinheritAfterTimeout+0x178>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6a3a      	ldr	r2, [r7, #32]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d10d      	bne.n	80066f2 <vTaskPriorityDisinheritAfterTimeout+0x92>
    __asm volatile
 80066d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066da:	b672      	cpsid	i
 80066dc:	f383 8811 	msr	BASEPRI, r3
 80066e0:	f3bf 8f6f 	isb	sy
 80066e4:	f3bf 8f4f 	dsb	sy
 80066e8:	b662      	cpsie	i
 80066ea:	60fb      	str	r3, [r7, #12]
}
 80066ec:	bf00      	nop
 80066ee:	bf00      	nop
 80066f0:	e7fd      	b.n	80066ee <vTaskPriorityDisinheritAfterTimeout+0x8e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80066f2:	6a3b      	ldr	r3, [r7, #32]
 80066f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f6:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 80066f8:	6a3b      	ldr	r3, [r7, #32]
 80066fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066fc:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	2b00      	cmp	r3, #0
 8006704:	db04      	blt.n	8006710 <vTaskPriorityDisinheritAfterTimeout+0xb0>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 8006706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006708:	f1c3 0207 	rsb	r2, r3, #7
 800670c:	6a3b      	ldr	r3, [r7, #32]
 800670e:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006710:	6a3b      	ldr	r3, [r7, #32]
 8006712:	6959      	ldr	r1, [r3, #20]
 8006714:	69ba      	ldr	r2, [r7, #24]
 8006716:	4613      	mov	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	4a2f      	ldr	r2, [pc, #188]	@ (80067dc <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8006720:	4413      	add	r3, r2
 8006722:	4299      	cmp	r1, r3
 8006724:	d153      	bne.n	80067ce <vTaskPriorityDisinheritAfterTimeout+0x16e>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006726:	6a3b      	ldr	r3, [r7, #32]
 8006728:	3304      	adds	r3, #4
 800672a:	4618      	mov	r0, r3
 800672c:	f7fd fd9e 	bl	800426c <uxListRemove>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10a      	bne.n	800674c <vTaskPriorityDisinheritAfterTimeout+0xec>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006736:	6a3b      	ldr	r3, [r7, #32]
 8006738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800673a:	2201      	movs	r2, #1
 800673c:	fa02 f303 	lsl.w	r3, r2, r3
 8006740:	43da      	mvns	r2, r3
 8006742:	4b27      	ldr	r3, [pc, #156]	@ (80067e0 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4013      	ands	r3, r2
 8006748:	4a25      	ldr	r2, [pc, #148]	@ (80067e0 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 800674a:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800674c:	6a3b      	ldr	r3, [r7, #32]
 800674e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006750:	2201      	movs	r2, #1
 8006752:	409a      	lsls	r2, r3
 8006754:	4b22      	ldr	r3, [pc, #136]	@ (80067e0 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4313      	orrs	r3, r2
 800675a:	4a21      	ldr	r2, [pc, #132]	@ (80067e0 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 800675c:	6013      	str	r3, [r2, #0]
 800675e:	6a3b      	ldr	r3, [r7, #32]
 8006760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006762:	491e      	ldr	r1, [pc, #120]	@ (80067dc <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8006764:	4613      	mov	r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4413      	add	r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	440b      	add	r3, r1
 800676e:	3304      	adds	r3, #4
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	617b      	str	r3, [r7, #20]
 8006774:	6a3b      	ldr	r3, [r7, #32]
 8006776:	697a      	ldr	r2, [r7, #20]
 8006778:	609a      	str	r2, [r3, #8]
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	689a      	ldr	r2, [r3, #8]
 800677e:	6a3b      	ldr	r3, [r7, #32]
 8006780:	60da      	str	r2, [r3, #12]
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	6a3a      	ldr	r2, [r7, #32]
 8006788:	3204      	adds	r2, #4
 800678a:	605a      	str	r2, [r3, #4]
 800678c:	6a3b      	ldr	r3, [r7, #32]
 800678e:	1d1a      	adds	r2, r3, #4
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	609a      	str	r2, [r3, #8]
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006798:	4613      	mov	r3, r2
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4413      	add	r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4a0e      	ldr	r2, [pc, #56]	@ (80067dc <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 80067a2:	441a      	add	r2, r3
 80067a4:	6a3b      	ldr	r3, [r7, #32]
 80067a6:	615a      	str	r2, [r3, #20]
 80067a8:	6a3b      	ldr	r3, [r7, #32]
 80067aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067ac:	490b      	ldr	r1, [pc, #44]	@ (80067dc <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 80067ae:	4613      	mov	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	4413      	add	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	440b      	add	r3, r1
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	6a3a      	ldr	r2, [r7, #32]
 80067bc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80067be:	1c59      	adds	r1, r3, #1
 80067c0:	4806      	ldr	r0, [pc, #24]	@ (80067dc <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 80067c2:	4613      	mov	r3, r2
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	4413      	add	r3, r2
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	4403      	add	r3, r0
 80067cc:	6019      	str	r1, [r3, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
    }
 80067ce:	bf00      	nop
 80067d0:	3728      	adds	r7, #40	@ 0x28
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	240022cc 	.word	0x240022cc
 80067dc:	240022d0 	.word	0x240022d0
 80067e0:	240023c0 	.word	0x240023c0

080067e4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 80067ea:	4b09      	ldr	r3, [pc, #36]	@ (8006810 <pvTaskIncrementMutexHeldCount+0x2c>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d004      	beq.n	8006800 <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067fa:	1c5a      	adds	r2, r3, #1
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );

        return pxTCB;
 8006800:	687b      	ldr	r3, [r7, #4]
    }
 8006802:	4618      	mov	r0, r3
 8006804:	370c      	adds	r7, #12
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	240022cc 	.word	0x240022cc

08006814 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800681e:	4b22      	ldr	r3, [pc, #136]	@ (80068a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	617b      	str	r3, [r7, #20]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8006824:	4b21      	ldr	r3, [pc, #132]	@ (80068ac <prvAddCurrentTaskToDelayedList+0x98>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	613b      	str	r3, [r7, #16]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800682a:	4b21      	ldr	r3, [pc, #132]	@ (80068b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	60fb      	str	r3, [r7, #12]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006830:	4b20      	ldr	r3, [pc, #128]	@ (80068b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3304      	adds	r3, #4
 8006836:	4618      	mov	r0, r3
 8006838:	f7fd fd18 	bl	800426c <uxListRemove>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d10b      	bne.n	800685a <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006842:	4b1c      	ldr	r3, [pc, #112]	@ (80068b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006848:	2201      	movs	r2, #1
 800684a:	fa02 f303 	lsl.w	r3, r2, r3
 800684e:	43da      	mvns	r2, r3
 8006850:	4b19      	ldr	r3, [pc, #100]	@ (80068b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4013      	ands	r3, r2
 8006856:	4a18      	ldr	r2, [pc, #96]	@ (80068b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006858:	6013      	str	r3, [r2, #0]
    #else /* INCLUDE_vTaskSuspend */
    {
        /* Calculate the time at which the task should be woken if the event
         * does not occur.  This may overflow but this doesn't matter, the kernel
         * will manage it correctly. */
        xTimeToWake = xConstTickCount + xTicksToWait;
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4413      	add	r3, r2
 8006860:	60bb      	str	r3, [r7, #8]

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006862:	4b14      	ldr	r3, [pc, #80]	@ (80068b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	605a      	str	r2, [r3, #4]

        if( xTimeToWake < xConstTickCount )
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	429a      	cmp	r2, r3
 8006870:	d207      	bcs.n	8006882 <prvAddCurrentTaskToDelayedList+0x6e>
        {
            traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8006872:	4b10      	ldr	r3, [pc, #64]	@ (80068b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3304      	adds	r3, #4
 8006878:	4619      	mov	r1, r3
 800687a:	68f8      	ldr	r0, [r7, #12]
 800687c:	f7fd fcbd 	bl	80041fa <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006880:	e00e      	b.n	80068a0 <prvAddCurrentTaskToDelayedList+0x8c>
            vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8006882:	4b0c      	ldr	r3, [pc, #48]	@ (80068b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	3304      	adds	r3, #4
 8006888:	4619      	mov	r1, r3
 800688a:	6938      	ldr	r0, [r7, #16]
 800688c:	f7fd fcb5 	bl	80041fa <vListInsert>
            if( xTimeToWake < xNextTaskUnblockTime )
 8006890:	4b0a      	ldr	r3, [pc, #40]	@ (80068bc <prvAddCurrentTaskToDelayedList+0xa8>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	429a      	cmp	r2, r3
 8006898:	d202      	bcs.n	80068a0 <prvAddCurrentTaskToDelayedList+0x8c>
                xNextTaskUnblockTime = xTimeToWake;
 800689a:	4a08      	ldr	r2, [pc, #32]	@ (80068bc <prvAddCurrentTaskToDelayedList+0xa8>)
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	6013      	str	r3, [r2, #0]
}
 80068a0:	bf00      	nop
 80068a2:	3718      	adds	r7, #24
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	240023bc 	.word	0x240023bc
 80068ac:	24002384 	.word	0x24002384
 80068b0:	24002388 	.word	0x24002388
 80068b4:	240022cc 	.word	0x240022cc
 80068b8:	240023c0 	.word	0x240023c0
 80068bc:	240023d8 	.word	0x240023d8

080068c0 <vApplicationGetIdleTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer,
                                        StackType_t ** ppxIdleTaskStackBuffer,
                                        configSTACK_DEPTH_TYPE * puxIdleTaskStackSize )
    {
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
        static StaticTask_t xIdleTaskTCB;
        static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

        *ppxIdleTaskTCBBuffer = &( xIdleTaskTCB );
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	4a07      	ldr	r2, [pc, #28]	@ (80068ec <vApplicationGetIdleTaskMemory+0x2c>)
 80068d0:	601a      	str	r2, [r3, #0]
        *ppxIdleTaskStackBuffer = &( uxIdleTaskStack[ 0 ] );
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	4a06      	ldr	r2, [pc, #24]	@ (80068f0 <vApplicationGetIdleTaskMemory+0x30>)
 80068d6:	601a      	str	r2, [r3, #0]
        *puxIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2280      	movs	r2, #128	@ 0x80
 80068dc:	601a      	str	r2, [r3, #0]
    }
 80068de:	bf00      	nop
 80068e0:	3714      	adds	r7, #20
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	240023e4 	.word	0x240023e4
 80068f0:	24002440 	.word	0x24002440

080068f4 <vApplicationGetTimerTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetTimerTaskMemory( StaticTask_t ** ppxTimerTaskTCBBuffer,
                                         StackType_t ** ppxTimerTaskStackBuffer,
                                         configSTACK_DEPTH_TYPE * puxTimerTaskStackSize )
    {
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
        static StaticTask_t xTimerTaskTCB;
        static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

        *ppxTimerTaskTCBBuffer = &( xTimerTaskTCB );
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4a07      	ldr	r2, [pc, #28]	@ (8006920 <vApplicationGetTimerTaskMemory+0x2c>)
 8006904:	601a      	str	r2, [r3, #0]
        *ppxTimerTaskStackBuffer = &( uxTimerTaskStack[ 0 ] );
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	4a06      	ldr	r2, [pc, #24]	@ (8006924 <vApplicationGetTimerTaskMemory+0x30>)
 800690a:	601a      	str	r2, [r3, #0]
        *puxTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006912:	601a      	str	r2, [r3, #0]
    }
 8006914:	bf00      	nop
 8006916:	3714      	adds	r7, #20
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	24002640 	.word	0x24002640
 8006924:	2400269c 	.word	0x2400269c

08006928 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006928:	b580      	push	{r7, lr}
 800692a:	b08a      	sub	sp, #40	@ 0x28
 800692c:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800692e:	2300      	movs	r3, #0
 8006930:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006932:	f000 fa6f 	bl	8006e14 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006936:	4b1e      	ldr	r3, [pc, #120]	@ (80069b0 <xTimerCreateTimerTask+0x88>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d021      	beq.n	8006982 <xTimerCreateTimerTask+0x5a>
            }
            #else /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
            {
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800693e:	2300      	movs	r3, #0
 8006940:	60fb      	str	r3, [r7, #12]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 8006942:	2300      	movs	r3, #0
 8006944:	60bb      	str	r3, [r7, #8]
                    configSTACK_DEPTH_TYPE uxTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &uxTimerTaskStackSize );
 8006946:	1d3a      	adds	r2, r7, #4
 8006948:	f107 0108 	add.w	r1, r7, #8
 800694c:	f107 030c 	add.w	r3, r7, #12
 8006950:	4618      	mov	r0, r3
 8006952:	f7ff ffcf 	bl	80068f4 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8006956:	6879      	ldr	r1, [r7, #4]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	9202      	str	r2, [sp, #8]
 800695e:	9301      	str	r3, [sp, #4]
 8006960:	2302      	movs	r3, #2
 8006962:	9300      	str	r3, [sp, #0]
 8006964:	2300      	movs	r3, #0
 8006966:	460a      	mov	r2, r1
 8006968:	4912      	ldr	r1, [pc, #72]	@ (80069b4 <xTimerCreateTimerTask+0x8c>)
 800696a:	4813      	ldr	r0, [pc, #76]	@ (80069b8 <xTimerCreateTimerTask+0x90>)
 800696c:	f7fe fd11 	bl	8005392 <xTaskCreateStatic>
 8006970:	4603      	mov	r3, r0
 8006972:	4a12      	ldr	r2, [pc, #72]	@ (80069bc <xTimerCreateTimerTask+0x94>)
 8006974:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 8006976:	4b11      	ldr	r3, [pc, #68]	@ (80069bc <xTimerCreateTimerTask+0x94>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d001      	beq.n	8006982 <xTimerCreateTimerTask+0x5a>
                    {
                        xReturn = pdPASS;
 800697e:	2301      	movs	r3, #1
 8006980:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d10d      	bne.n	80069a4 <xTimerCreateTimerTask+0x7c>
    __asm volatile
 8006988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800698c:	b672      	cpsid	i
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	b662      	cpsie	i
 800699c:	613b      	str	r3, [r7, #16]
}
 800699e:	bf00      	nop
 80069a0:	bf00      	nop
 80069a2:	e7fd      	b.n	80069a0 <xTimerCreateTimerTask+0x78>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 80069a4:	697b      	ldr	r3, [r7, #20]
    }
 80069a6:	4618      	mov	r0, r3
 80069a8:	3718      	adds	r7, #24
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	24002acc 	.word	0x24002acc
 80069b4:	080114cc 	.word	0x080114cc
 80069b8:	08006a65 	.word	0x08006a65
 80069bc:	24002ad0 	.word	0x24002ad0

080069c0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80069cc:	e008      	b.n	80069e0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	4413      	add	r3, r2
 80069d6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6a1b      	ldr	r3, [r3, #32]
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	699a      	ldr	r2, [r3, #24]
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	18d1      	adds	r1, r2, r3
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f000 f8df 	bl	8006bb0 <prvInsertTimerInActiveList>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1ea      	bne.n	80069ce <prvReloadTimer+0xe>
        }
    }
 80069f8:	bf00      	nop
 80069fa:	bf00      	nop
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
	...

08006a04 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a0e:	4b14      	ldr	r3, [pc, #80]	@ (8006a60 <prvProcessExpiredTimer+0x5c>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	3304      	adds	r3, #4
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7fd fc25 	bl	800426c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a28:	f003 0304 	and.w	r3, r3, #4
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d005      	beq.n	8006a3c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8006a30:	683a      	ldr	r2, [r7, #0]
 8006a32:	6879      	ldr	r1, [r7, #4]
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f7ff ffc3 	bl	80069c0 <prvReloadTimer>
 8006a3a:	e008      	b.n	8006a4e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a42:	f023 0301 	bic.w	r3, r3, #1
 8006a46:	b2da      	uxtb	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6a1b      	ldr	r3, [r3, #32]
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	4798      	blx	r3
    }
 8006a56:	bf00      	nop
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	24002ac4 	.word	0x24002ac4

08006a64 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a6c:	f107 0308 	add.w	r3, r7, #8
 8006a70:	4618      	mov	r0, r3
 8006a72:	f000 f859 	bl	8006b28 <prvGetNextExpireTime>
 8006a76:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f000 f805 	bl	8006a8c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006a82:	f000 f8d7 	bl	8006c34 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a86:	bf00      	nop
 8006a88:	e7f0      	b.n	8006a6c <prvTimerTask+0x8>
	...

08006a8c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006a96:	f7fe ff17 	bl	80058c8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a9a:	f107 0308 	add.w	r3, r7, #8
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 f866 	bl	8006b70 <prvSampleTimeNow>
 8006aa4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d130      	bne.n	8006b0e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d10a      	bne.n	8006ac8 <prvProcessTimerOrBlockTask+0x3c>
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d806      	bhi.n	8006ac8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006aba:	f7fe ff13 	bl	80058e4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006abe:	68f9      	ldr	r1, [r7, #12]
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f7ff ff9f 	bl	8006a04 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006ac6:	e024      	b.n	8006b12 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d008      	beq.n	8006ae0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006ace:	4b13      	ldr	r3, [pc, #76]	@ (8006b1c <prvProcessTimerOrBlockTask+0x90>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d101      	bne.n	8006adc <prvProcessTimerOrBlockTask+0x50>
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e000      	b.n	8006ade <prvProcessTimerOrBlockTask+0x52>
 8006adc:	2300      	movs	r3, #0
 8006ade:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8006b20 <prvProcessTimerOrBlockTask+0x94>)
 8006ae2:	6818      	ldr	r0, [r3, #0]
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	683a      	ldr	r2, [r7, #0]
 8006aec:	4619      	mov	r1, r3
 8006aee:	f7fe fbb5 	bl	800525c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006af2:	f7fe fef7 	bl	80058e4 <xTaskResumeAll>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10a      	bne.n	8006b12 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8006afc:	4b09      	ldr	r3, [pc, #36]	@ (8006b24 <prvProcessTimerOrBlockTask+0x98>)
 8006afe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b02:	601a      	str	r2, [r3, #0]
 8006b04:	f3bf 8f4f 	dsb	sy
 8006b08:	f3bf 8f6f 	isb	sy
    }
 8006b0c:	e001      	b.n	8006b12 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006b0e:	f7fe fee9 	bl	80058e4 <xTaskResumeAll>
    }
 8006b12:	bf00      	nop
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	24002ac8 	.word	0x24002ac8
 8006b20:	24002acc 	.word	0x24002acc
 8006b24:	e000ed04 	.word	0xe000ed04

08006b28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b30:	4b0e      	ldr	r3, [pc, #56]	@ (8006b6c <prvGetNextExpireTime+0x44>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d101      	bne.n	8006b3e <prvGetNextExpireTime+0x16>
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	e000      	b.n	8006b40 <prvGetNextExpireTime+0x18>
 8006b3e:	2200      	movs	r2, #0
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d105      	bne.n	8006b58 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b4c:	4b07      	ldr	r3, [pc, #28]	@ (8006b6c <prvGetNextExpireTime+0x44>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	60fb      	str	r3, [r7, #12]
 8006b56:	e001      	b.n	8006b5c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
    }
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3714      	adds	r7, #20
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	24002ac4 	.word	0x24002ac4

08006b70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8006b78:	f7fe ffbe 	bl	8005af8 <xTaskGetTickCount>
 8006b7c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8006b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8006bac <prvSampleTimeNow+0x3c>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d205      	bcs.n	8006b94 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006b88:	f000 f91e 	bl	8006dc8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	601a      	str	r2, [r3, #0]
 8006b92:	e002      	b.n	8006b9a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006b9a:	4a04      	ldr	r2, [pc, #16]	@ (8006bac <prvSampleTimeNow+0x3c>)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
    }
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	24002ad4 	.word	0x24002ad4

08006bb0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
 8006bbc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	68ba      	ldr	r2, [r7, #8]
 8006bc6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d812      	bhi.n	8006bfc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	1ad2      	subs	r2, r2, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	699b      	ldr	r3, [r3, #24]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d302      	bcc.n	8006bea <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006be4:	2301      	movs	r3, #1
 8006be6:	617b      	str	r3, [r7, #20]
 8006be8:	e01b      	b.n	8006c22 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006bea:	4b10      	ldr	r3, [pc, #64]	@ (8006c2c <prvInsertTimerInActiveList+0x7c>)
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	3304      	adds	r3, #4
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	4610      	mov	r0, r2
 8006bf6:	f7fd fb00 	bl	80041fa <vListInsert>
 8006bfa:	e012      	b.n	8006c22 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d206      	bcs.n	8006c12 <prvInsertTimerInActiveList+0x62>
 8006c04:	68ba      	ldr	r2, [r7, #8]
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d302      	bcc.n	8006c12 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	617b      	str	r3, [r7, #20]
 8006c10:	e007      	b.n	8006c22 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c12:	4b07      	ldr	r3, [pc, #28]	@ (8006c30 <prvInsertTimerInActiveList+0x80>)
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	3304      	adds	r3, #4
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	4610      	mov	r0, r2
 8006c1e:	f7fd faec 	bl	80041fa <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006c22:	697b      	ldr	r3, [r7, #20]
    }
 8006c24:	4618      	mov	r0, r3
 8006c26:	3718      	adds	r7, #24
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	24002ac8 	.word	0x24002ac8
 8006c30:	24002ac4 	.word	0x24002ac4

08006c34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b088      	sub	sp, #32
 8006c38:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8006c3a:	f107 0308 	add.w	r3, r7, #8
 8006c3e:	2200      	movs	r2, #0
 8006c40:	601a      	str	r2, [r3, #0]
 8006c42:	605a      	str	r2, [r3, #4]
 8006c44:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8006c46:	e0ab      	b.n	8006da0 <prvProcessReceivedCommands+0x16c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	f2c0 80a8 	blt.w	8006da0 <prvProcessReceivedCommands+0x16c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	695b      	ldr	r3, [r3, #20]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d004      	beq.n	8006c66 <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	3304      	adds	r3, #4
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7fd fb03 	bl	800426c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c66:	1d3b      	adds	r3, r7, #4
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f7ff ff81 	bl	8006b70 <prvSampleTimeNow>
 8006c6e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	3b01      	subs	r3, #1
 8006c74:	2b08      	cmp	r3, #8
 8006c76:	f200 8090 	bhi.w	8006d9a <prvProcessReceivedCommands+0x166>
 8006c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c80 <prvProcessReceivedCommands+0x4c>)
 8006c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c80:	08006ca5 	.word	0x08006ca5
 8006c84:	08006ca5 	.word	0x08006ca5
 8006c88:	08006d0d 	.word	0x08006d0d
 8006c8c:	08006d21 	.word	0x08006d21
 8006c90:	08006d71 	.word	0x08006d71
 8006c94:	08006ca5 	.word	0x08006ca5
 8006c98:	08006ca5 	.word	0x08006ca5
 8006c9c:	08006d0d 	.word	0x08006d0d
 8006ca0:	08006d21 	.word	0x08006d21
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006caa:	f043 0301 	orr.w	r3, r3, #1
 8006cae:	b2da      	uxtb	r2, r3
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	18d1      	adds	r1, r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	69ba      	ldr	r2, [r7, #24]
 8006cc2:	69f8      	ldr	r0, [r7, #28]
 8006cc4:	f7ff ff74 	bl	8006bb0 <prvInsertTimerInActiveList>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d067      	beq.n	8006d9e <prvProcessReceivedCommands+0x16a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cd4:	f003 0304 	and.w	r3, r3, #4
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d009      	beq.n	8006cf0 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	69ba      	ldr	r2, [r7, #24]
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	69f8      	ldr	r0, [r7, #28]
 8006cea:	f7ff fe69 	bl	80069c0 <prvReloadTimer>
 8006cee:	e008      	b.n	8006d02 <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cf6:	f023 0301 	bic.w	r3, r3, #1
 8006cfa:	b2da      	uxtb	r2, r3
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	69f8      	ldr	r0, [r7, #28]
 8006d08:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8006d0a:	e048      	b.n	8006d9e <prvProcessReceivedCommands+0x16a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d12:	f023 0301 	bic.w	r3, r3, #1
 8006d16:	b2da      	uxtb	r2, r3
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8006d1e:	e03f      	b.n	8006da0 <prvProcessReceivedCommands+0x16c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d26:	f043 0301 	orr.w	r3, r3, #1
 8006d2a:	b2da      	uxtb	r2, r3
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d10d      	bne.n	8006d5c <prvProcessReceivedCommands+0x128>
    __asm volatile
 8006d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d44:	b672      	cpsid	i
 8006d46:	f383 8811 	msr	BASEPRI, r3
 8006d4a:	f3bf 8f6f 	isb	sy
 8006d4e:	f3bf 8f4f 	dsb	sy
 8006d52:	b662      	cpsie	i
 8006d54:	617b      	str	r3, [r7, #20]
}
 8006d56:	bf00      	nop
 8006d58:	bf00      	nop
 8006d5a:	e7fd      	b.n	8006d58 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	699a      	ldr	r2, [r3, #24]
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	18d1      	adds	r1, r2, r3
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	69ba      	ldr	r2, [r7, #24]
 8006d68:	69f8      	ldr	r0, [r7, #28]
 8006d6a:	f7ff ff21 	bl	8006bb0 <prvInsertTimerInActiveList>
                        break;
 8006d6e:	e017      	b.n	8006da0 <prvProcessReceivedCommands+0x16c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d76:	f003 0302 	and.w	r3, r3, #2
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d103      	bne.n	8006d86 <prvProcessReceivedCommands+0x152>
                            {
                                vPortFree( pxTimer );
 8006d7e:	69f8      	ldr	r0, [r7, #28]
 8006d80:	f000 fc5a 	bl	8007638 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006d84:	e00c      	b.n	8006da0 <prvProcessReceivedCommands+0x16c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d8c:	f023 0301 	bic.w	r3, r3, #1
 8006d90:	b2da      	uxtb	r2, r3
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8006d98:	e002      	b.n	8006da0 <prvProcessReceivedCommands+0x16c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8006d9a:	bf00      	nop
 8006d9c:	e000      	b.n	8006da0 <prvProcessReceivedCommands+0x16c>
                        break;
 8006d9e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8006da0:	4b08      	ldr	r3, [pc, #32]	@ (8006dc4 <prvProcessReceivedCommands+0x190>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f107 0108 	add.w	r1, r7, #8
 8006da8:	2200      	movs	r2, #0
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7fd fdc8 	bl	8004940 <xQueueReceive>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	f47f af48 	bne.w	8006c48 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8006db8:	bf00      	nop
 8006dba:	bf00      	nop
 8006dbc:	3720      	adds	r7, #32
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	24002acc 	.word	0x24002acc

08006dc8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006dce:	e009      	b.n	8006de4 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8006e0c <prvSwitchTimerLists+0x44>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8006dda:	f04f 31ff 	mov.w	r1, #4294967295
 8006dde:	6838      	ldr	r0, [r7, #0]
 8006de0:	f7ff fe10 	bl	8006a04 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006de4:	4b09      	ldr	r3, [pc, #36]	@ (8006e0c <prvSwitchTimerLists+0x44>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1f0      	bne.n	8006dd0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8006dee:	4b07      	ldr	r3, [pc, #28]	@ (8006e0c <prvSwitchTimerLists+0x44>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8006df4:	4b06      	ldr	r3, [pc, #24]	@ (8006e10 <prvSwitchTimerLists+0x48>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a04      	ldr	r2, [pc, #16]	@ (8006e0c <prvSwitchTimerLists+0x44>)
 8006dfa:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006dfc:	4a04      	ldr	r2, [pc, #16]	@ (8006e10 <prvSwitchTimerLists+0x48>)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6013      	str	r3, [r2, #0]
    }
 8006e02:	bf00      	nop
 8006e04:	3708      	adds	r7, #8
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	24002ac4 	.word	0x24002ac4
 8006e10:	24002ac8 	.word	0x24002ac8

08006e14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006e1a:	f000 f99b 	bl	8007154 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006e1e:	4b15      	ldr	r3, [pc, #84]	@ (8006e74 <prvCheckForValidListAndQueue+0x60>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d120      	bne.n	8006e68 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 8006e26:	4814      	ldr	r0, [pc, #80]	@ (8006e78 <prvCheckForValidListAndQueue+0x64>)
 8006e28:	f7fd f9ba 	bl	80041a0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006e2c:	4813      	ldr	r0, [pc, #76]	@ (8006e7c <prvCheckForValidListAndQueue+0x68>)
 8006e2e:	f7fd f9b7 	bl	80041a0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006e32:	4b13      	ldr	r3, [pc, #76]	@ (8006e80 <prvCheckForValidListAndQueue+0x6c>)
 8006e34:	4a10      	ldr	r2, [pc, #64]	@ (8006e78 <prvCheckForValidListAndQueue+0x64>)
 8006e36:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006e38:	4b12      	ldr	r3, [pc, #72]	@ (8006e84 <prvCheckForValidListAndQueue+0x70>)
 8006e3a:	4a10      	ldr	r2, [pc, #64]	@ (8006e7c <prvCheckForValidListAndQueue+0x68>)
 8006e3c:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ];

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e3e:	2300      	movs	r3, #0
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	4b11      	ldr	r3, [pc, #68]	@ (8006e88 <prvCheckForValidListAndQueue+0x74>)
 8006e44:	4a11      	ldr	r2, [pc, #68]	@ (8006e8c <prvCheckForValidListAndQueue+0x78>)
 8006e46:	210c      	movs	r1, #12
 8006e48:	200a      	movs	r0, #10
 8006e4a:	f7fd facf 	bl	80043ec <xQueueGenericCreateStatic>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	4a08      	ldr	r2, [pc, #32]	@ (8006e74 <prvCheckForValidListAndQueue+0x60>)
 8006e52:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8006e54:	4b07      	ldr	r3, [pc, #28]	@ (8006e74 <prvCheckForValidListAndQueue+0x60>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d005      	beq.n	8006e68 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006e5c:	4b05      	ldr	r3, [pc, #20]	@ (8006e74 <prvCheckForValidListAndQueue+0x60>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	490b      	ldr	r1, [pc, #44]	@ (8006e90 <prvCheckForValidListAndQueue+0x7c>)
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7fe f96c 	bl	8005140 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006e68:	f000 f9aa 	bl	80071c0 <vPortExitCritical>
    }
 8006e6c:	bf00      	nop
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	24002acc 	.word	0x24002acc
 8006e78:	24002a9c 	.word	0x24002a9c
 8006e7c:	24002ab0 	.word	0x24002ab0
 8006e80:	24002ac4 	.word	0x24002ac4
 8006e84:	24002ac8 	.word	0x24002ac8
 8006e88:	24002b50 	.word	0x24002b50
 8006e8c:	24002ad8 	.word	0x24002ad8
 8006e90:	080114d4 	.word	0x080114d4

08006e94 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	3b04      	subs	r3, #4
 8006ea4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006eac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	3b04      	subs	r3, #4
 8006eb2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	f023 0201 	bic.w	r2, r3, #1
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	3b04      	subs	r3, #4
 8006ec2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006ec4:	4a0c      	ldr	r2, [pc, #48]	@ (8006ef8 <pxPortInitialiseStack+0x64>)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	3b14      	subs	r3, #20
 8006ece:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	3b04      	subs	r3, #4
 8006eda:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f06f 0202 	mvn.w	r2, #2
 8006ee2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	3b20      	subs	r3, #32
 8006ee8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006eea:	68fb      	ldr	r3, [r7, #12]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3714      	adds	r7, #20
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr
 8006ef8:	08006efd 	.word	0x08006efd

08006efc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006f02:	2300      	movs	r3, #0
 8006f04:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006f06:	4b15      	ldr	r3, [pc, #84]	@ (8006f5c <prvTaskExitError+0x60>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f0e:	d00d      	beq.n	8006f2c <prvTaskExitError+0x30>
    __asm volatile
 8006f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f14:	b672      	cpsid	i
 8006f16:	f383 8811 	msr	BASEPRI, r3
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	f3bf 8f4f 	dsb	sy
 8006f22:	b662      	cpsie	i
 8006f24:	60fb      	str	r3, [r7, #12]
}
 8006f26:	bf00      	nop
 8006f28:	bf00      	nop
 8006f2a:	e7fd      	b.n	8006f28 <prvTaskExitError+0x2c>
    __asm volatile
 8006f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f30:	b672      	cpsid	i
 8006f32:	f383 8811 	msr	BASEPRI, r3
 8006f36:	f3bf 8f6f 	isb	sy
 8006f3a:	f3bf 8f4f 	dsb	sy
 8006f3e:	b662      	cpsie	i
 8006f40:	60bb      	str	r3, [r7, #8]
}
 8006f42:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006f44:	bf00      	nop
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d0fc      	beq.n	8006f46 <prvTaskExitError+0x4a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006f4c:	bf00      	nop
 8006f4e:	bf00      	nop
 8006f50:	3714      	adds	r7, #20
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	24000088 	.word	0x24000088

08006f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006f60:	4b07      	ldr	r3, [pc, #28]	@ (8006f80 <pxCurrentTCBConst2>)
 8006f62:	6819      	ldr	r1, [r3, #0]
 8006f64:	6808      	ldr	r0, [r1, #0]
 8006f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f6a:	f380 8809 	msr	PSP, r0
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	f04f 0000 	mov.w	r0, #0
 8006f76:	f380 8811 	msr	BASEPRI, r0
 8006f7a:	4770      	bx	lr
 8006f7c:	f3af 8000 	nop.w

08006f80 <pxCurrentTCBConst2>:
 8006f80:	240022cc 	.word	0x240022cc
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8006f84:	bf00      	nop
 8006f86:	bf00      	nop

08006f88 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006f88:	4808      	ldr	r0, [pc, #32]	@ (8006fac <prvPortStartFirstTask+0x24>)
 8006f8a:	6800      	ldr	r0, [r0, #0]
 8006f8c:	6800      	ldr	r0, [r0, #0]
 8006f8e:	f380 8808 	msr	MSP, r0
 8006f92:	f04f 0000 	mov.w	r0, #0
 8006f96:	f380 8814 	msr	CONTROL, r0
 8006f9a:	b662      	cpsie	i
 8006f9c:	b661      	cpsie	f
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	df00      	svc	0
 8006fa8:	bf00      	nop
 8006faa:	0000      	.short	0x0000
 8006fac:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8006fb0:	bf00      	nop
 8006fb2:	bf00      	nop

08006fb4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b08a      	sub	sp, #40	@ 0x28
 8006fb8:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8006fba:	4b5c      	ldr	r3, [pc, #368]	@ (800712c <xPortStartScheduler+0x178>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	627b      	str	r3, [r7, #36]	@ 0x24
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8006fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc2:	332c      	adds	r3, #44	@ 0x2c
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a5a      	ldr	r2, [pc, #360]	@ (8007130 <xPortStartScheduler+0x17c>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d00d      	beq.n	8006fe8 <xPortStartScheduler+0x34>
    __asm volatile
 8006fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd0:	b672      	cpsid	i
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	b662      	cpsie	i
 8006fe0:	61bb      	str	r3, [r7, #24]
}
 8006fe2:	bf00      	nop
 8006fe4:	bf00      	nop
 8006fe6:	e7fd      	b.n	8006fe4 <xPortStartScheduler+0x30>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8006fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fea:	3338      	adds	r3, #56	@ 0x38
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a51      	ldr	r2, [pc, #324]	@ (8007134 <xPortStartScheduler+0x180>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d00d      	beq.n	8007010 <xPortStartScheduler+0x5c>
    __asm volatile
 8006ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff8:	b672      	cpsid	i
 8006ffa:	f383 8811 	msr	BASEPRI, r3
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	f3bf 8f4f 	dsb	sy
 8007006:	b662      	cpsie	i
 8007008:	61fb      	str	r3, [r7, #28]
}
 800700a:	bf00      	nop
 800700c:	bf00      	nop
 800700e:	e7fd      	b.n	800700c <xPortStartScheduler+0x58>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8007010:	2300      	movs	r3, #0
 8007012:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007014:	4b48      	ldr	r3, [pc, #288]	@ (8007138 <xPortStartScheduler+0x184>)
 8007016:	623b      	str	r3, [r7, #32]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8007018:	6a3b      	ldr	r3, [r7, #32]
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	b2db      	uxtb	r3, r3
 800701e:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007020:	6a3b      	ldr	r3, [r7, #32]
 8007022:	22ff      	movs	r2, #255	@ 0xff
 8007024:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007026:	6a3b      	ldr	r3, [r7, #32]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	b2db      	uxtb	r3, r3
 800702c:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800702e:	79fb      	ldrb	r3, [r7, #7]
 8007030:	b2db      	uxtb	r3, r3
 8007032:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007036:	b2da      	uxtb	r2, r3
 8007038:	4b40      	ldr	r3, [pc, #256]	@ (800713c <xPortStartScheduler+0x188>)
 800703a:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 800703c:	4b3f      	ldr	r3, [pc, #252]	@ (800713c <xPortStartScheduler+0x188>)
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d10d      	bne.n	8007060 <xPortStartScheduler+0xac>
    __asm volatile
 8007044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007048:	b672      	cpsid	i
 800704a:	f383 8811 	msr	BASEPRI, r3
 800704e:	f3bf 8f6f 	isb	sy
 8007052:	f3bf 8f4f 	dsb	sy
 8007056:	b662      	cpsie	i
 8007058:	617b      	str	r3, [r7, #20]
}
 800705a:	bf00      	nop
 800705c:	bf00      	nop
 800705e:	e7fd      	b.n	800705c <xPortStartScheduler+0xa8>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8007060:	79fb      	ldrb	r3, [r7, #7]
 8007062:	b2db      	uxtb	r3, r3
 8007064:	43db      	mvns	r3, r3
 8007066:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800706a:	2b00      	cmp	r3, #0
 800706c:	d015      	beq.n	800709a <xPortStartScheduler+0xe6>
    __asm volatile
 800706e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007072:	b672      	cpsid	i
 8007074:	f383 8811 	msr	BASEPRI, r3
 8007078:	f3bf 8f6f 	isb	sy
 800707c:	f3bf 8f4f 	dsb	sy
 8007080:	b662      	cpsie	i
 8007082:	613b      	str	r3, [r7, #16]
}
 8007084:	bf00      	nop
 8007086:	bf00      	nop
 8007088:	e7fd      	b.n	8007086 <xPortStartScheduler+0xd2>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	3301      	adds	r3, #1
 800708e:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007090:	79fb      	ldrb	r3, [r7, #7]
 8007092:	b2db      	uxtb	r3, r3
 8007094:	005b      	lsls	r3, r3, #1
 8007096:	b2db      	uxtb	r3, r3
 8007098:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800709a:	79fb      	ldrb	r3, [r7, #7]
 800709c:	b2db      	uxtb	r3, r3
 800709e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070a2:	2b80      	cmp	r3, #128	@ 0x80
 80070a4:	d0f1      	beq.n	800708a <xPortStartScheduler+0xd6>
        }

        if( ulImplementedPrioBits == 8 )
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	2b08      	cmp	r3, #8
 80070aa:	d103      	bne.n	80070b4 <xPortStartScheduler+0x100>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 80070ac:	4b24      	ldr	r3, [pc, #144]	@ (8007140 <xPortStartScheduler+0x18c>)
 80070ae:	2200      	movs	r2, #0
 80070b0:	601a      	str	r2, [r3, #0]
 80070b2:	e004      	b.n	80070be <xPortStartScheduler+0x10a>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	f1c3 0307 	rsb	r3, r3, #7
 80070ba:	4a21      	ldr	r2, [pc, #132]	@ (8007140 <xPortStartScheduler+0x18c>)
 80070bc:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80070be:	4b20      	ldr	r3, [pc, #128]	@ (8007140 <xPortStartScheduler+0x18c>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	021b      	lsls	r3, r3, #8
 80070c4:	4a1e      	ldr	r2, [pc, #120]	@ (8007140 <xPortStartScheduler+0x18c>)
 80070c6:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80070c8:	4b1d      	ldr	r3, [pc, #116]	@ (8007140 <xPortStartScheduler+0x18c>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80070d0:	4a1b      	ldr	r2, [pc, #108]	@ (8007140 <xPortStartScheduler+0x18c>)
 80070d2:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80070d4:	7bfb      	ldrb	r3, [r7, #15]
 80070d6:	b2da      	uxtb	r2, r3
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80070dc:	4b19      	ldr	r3, [pc, #100]	@ (8007144 <xPortStartScheduler+0x190>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a18      	ldr	r2, [pc, #96]	@ (8007144 <xPortStartScheduler+0x190>)
 80070e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070e6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80070e8:	4b16      	ldr	r3, [pc, #88]	@ (8007144 <xPortStartScheduler+0x190>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a15      	ldr	r2, [pc, #84]	@ (8007144 <xPortStartScheduler+0x190>)
 80070ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070f2:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80070f4:	4b14      	ldr	r3, [pc, #80]	@ (8007148 <xPortStartScheduler+0x194>)
 80070f6:	2200      	movs	r2, #0
 80070f8:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80070fa:	f000 f8e9 	bl	80072d0 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80070fe:	4b13      	ldr	r3, [pc, #76]	@ (800714c <xPortStartScheduler+0x198>)
 8007100:	2200      	movs	r2, #0
 8007102:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8007104:	f000 f908 	bl	8007318 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007108:	4b11      	ldr	r3, [pc, #68]	@ (8007150 <xPortStartScheduler+0x19c>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a10      	ldr	r2, [pc, #64]	@ (8007150 <xPortStartScheduler+0x19c>)
 800710e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007112:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8007114:	f7ff ff38 	bl	8006f88 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007118:	f7fe fe38 	bl	8005d8c <vTaskSwitchContext>
    prvTaskExitError();
 800711c:	f7ff feee 	bl	8006efc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3728      	adds	r7, #40	@ 0x28
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	e000ed08 	.word	0xe000ed08
 8007130:	08006f61 	.word	0x08006f61
 8007134:	08007221 	.word	0x08007221
 8007138:	e000e400 	.word	0xe000e400
 800713c:	24002ba0 	.word	0x24002ba0
 8007140:	24002ba4 	.word	0x24002ba4
 8007144:	e000ed20 	.word	0xe000ed20
 8007148:	e000ed1c 	.word	0xe000ed1c
 800714c:	24000088 	.word	0x24000088
 8007150:	e000ef34 	.word	0xe000ef34

08007154 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
    __asm volatile
 800715a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800715e:	b672      	cpsid	i
 8007160:	f383 8811 	msr	BASEPRI, r3
 8007164:	f3bf 8f6f 	isb	sy
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	b662      	cpsie	i
 800716e:	607b      	str	r3, [r7, #4]
}
 8007170:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007172:	4b11      	ldr	r3, [pc, #68]	@ (80071b8 <vPortEnterCritical+0x64>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	3301      	adds	r3, #1
 8007178:	4a0f      	ldr	r2, [pc, #60]	@ (80071b8 <vPortEnterCritical+0x64>)
 800717a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800717c:	4b0e      	ldr	r3, [pc, #56]	@ (80071b8 <vPortEnterCritical+0x64>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d112      	bne.n	80071aa <vPortEnterCritical+0x56>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007184:	4b0d      	ldr	r3, [pc, #52]	@ (80071bc <vPortEnterCritical+0x68>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	b2db      	uxtb	r3, r3
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00d      	beq.n	80071aa <vPortEnterCritical+0x56>
    __asm volatile
 800718e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007192:	b672      	cpsid	i
 8007194:	f383 8811 	msr	BASEPRI, r3
 8007198:	f3bf 8f6f 	isb	sy
 800719c:	f3bf 8f4f 	dsb	sy
 80071a0:	b662      	cpsie	i
 80071a2:	603b      	str	r3, [r7, #0]
}
 80071a4:	bf00      	nop
 80071a6:	bf00      	nop
 80071a8:	e7fd      	b.n	80071a6 <vPortEnterCritical+0x52>
    }
}
 80071aa:	bf00      	nop
 80071ac:	370c      	adds	r7, #12
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	24000088 	.word	0x24000088
 80071bc:	e000ed04 	.word	0xe000ed04

080071c0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80071c6:	4b13      	ldr	r3, [pc, #76]	@ (8007214 <vPortExitCritical+0x54>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10d      	bne.n	80071ea <vPortExitCritical+0x2a>
    __asm volatile
 80071ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d2:	b672      	cpsid	i
 80071d4:	f383 8811 	msr	BASEPRI, r3
 80071d8:	f3bf 8f6f 	isb	sy
 80071dc:	f3bf 8f4f 	dsb	sy
 80071e0:	b662      	cpsie	i
 80071e2:	607b      	str	r3, [r7, #4]
}
 80071e4:	bf00      	nop
 80071e6:	bf00      	nop
 80071e8:	e7fd      	b.n	80071e6 <vPortExitCritical+0x26>
    uxCriticalNesting--;
 80071ea:	4b0a      	ldr	r3, [pc, #40]	@ (8007214 <vPortExitCritical+0x54>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	3b01      	subs	r3, #1
 80071f0:	4a08      	ldr	r2, [pc, #32]	@ (8007214 <vPortExitCritical+0x54>)
 80071f2:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80071f4:	4b07      	ldr	r3, [pc, #28]	@ (8007214 <vPortExitCritical+0x54>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d105      	bne.n	8007208 <vPortExitCritical+0x48>
 80071fc:	2300      	movs	r3, #0
 80071fe:	603b      	str	r3, [r7, #0]
    __asm volatile
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	f383 8811 	msr	BASEPRI, r3
}
 8007206:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr
 8007214:	24000088 	.word	0x24000088
	...

08007220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007220:	f3ef 8009 	mrs	r0, PSP
 8007224:	f3bf 8f6f 	isb	sy
 8007228:	4b15      	ldr	r3, [pc, #84]	@ (8007280 <pxCurrentTCBConst>)
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	f01e 0f10 	tst.w	lr, #16
 8007230:	bf08      	it	eq
 8007232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800723a:	6010      	str	r0, [r2, #0]
 800723c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007240:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007244:	b672      	cpsid	i
 8007246:	f380 8811 	msr	BASEPRI, r0
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	f3bf 8f6f 	isb	sy
 8007252:	b662      	cpsie	i
 8007254:	f7fe fd9a 	bl	8005d8c <vTaskSwitchContext>
 8007258:	f04f 0000 	mov.w	r0, #0
 800725c:	f380 8811 	msr	BASEPRI, r0
 8007260:	bc09      	pop	{r0, r3}
 8007262:	6819      	ldr	r1, [r3, #0]
 8007264:	6808      	ldr	r0, [r1, #0]
 8007266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800726a:	f01e 0f10 	tst.w	lr, #16
 800726e:	bf08      	it	eq
 8007270:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007274:	f380 8809 	msr	PSP, r0
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop

08007280 <pxCurrentTCBConst>:
 8007280:	240022cc 	.word	0x240022cc
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007284:	bf00      	nop
 8007286:	bf00      	nop

08007288 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
    __asm volatile
 800728e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007292:	b672      	cpsid	i
 8007294:	f383 8811 	msr	BASEPRI, r3
 8007298:	f3bf 8f6f 	isb	sy
 800729c:	f3bf 8f4f 	dsb	sy
 80072a0:	b662      	cpsie	i
 80072a2:	607b      	str	r3, [r7, #4]
}
 80072a4:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80072a6:	f7fe fc55 	bl	8005b54 <xTaskIncrementTick>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d003      	beq.n	80072b8 <xPortSysTickHandler+0x30>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80072b0:	4b06      	ldr	r3, [pc, #24]	@ (80072cc <xPortSysTickHandler+0x44>)
 80072b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072b6:	601a      	str	r2, [r3, #0]
 80072b8:	2300      	movs	r3, #0
 80072ba:	603b      	str	r3, [r7, #0]
    __asm volatile
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	f383 8811 	msr	BASEPRI, r3
}
 80072c2:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 80072c4:	bf00      	nop
 80072c6:	3708      	adds	r7, #8
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	e000ed04 	.word	0xe000ed04

080072d0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80072d0:	b480      	push	{r7}
 80072d2:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80072d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007304 <vPortSetupTimerInterrupt+0x34>)
 80072d6:	2200      	movs	r2, #0
 80072d8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80072da:	4b0b      	ldr	r3, [pc, #44]	@ (8007308 <vPortSetupTimerInterrupt+0x38>)
 80072dc:	2200      	movs	r2, #0
 80072de:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80072e0:	4b0a      	ldr	r3, [pc, #40]	@ (800730c <vPortSetupTimerInterrupt+0x3c>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a0a      	ldr	r2, [pc, #40]	@ (8007310 <vPortSetupTimerInterrupt+0x40>)
 80072e6:	fba2 2303 	umull	r2, r3, r2, r3
 80072ea:	099b      	lsrs	r3, r3, #6
 80072ec:	4a09      	ldr	r2, [pc, #36]	@ (8007314 <vPortSetupTimerInterrupt+0x44>)
 80072ee:	3b01      	subs	r3, #1
 80072f0:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80072f2:	4b04      	ldr	r3, [pc, #16]	@ (8007304 <vPortSetupTimerInterrupt+0x34>)
 80072f4:	2207      	movs	r2, #7
 80072f6:	601a      	str	r2, [r3, #0]
}
 80072f8:	bf00      	nop
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	e000e010 	.word	0xe000e010
 8007308:	e000e018 	.word	0xe000e018
 800730c:	24000000 	.word	0x24000000
 8007310:	10624dd3 	.word	0x10624dd3
 8007314:	e000e014 	.word	0xe000e014

08007318 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007318:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007328 <vPortEnableVFP+0x10>
 800731c:	6801      	ldr	r1, [r0, #0]
 800731e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007322:	6001      	str	r1, [r0, #0]
 8007324:	4770      	bx	lr
 8007326:	0000      	.short	0x0000
 8007328:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 800732c:	bf00      	nop
 800732e:	bf00      	nop

08007330 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007336:	f3ef 8305 	mrs	r3, IPSR
 800733a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2b0f      	cmp	r3, #15
 8007340:	d917      	bls.n	8007372 <vPortValidateInterruptPriority+0x42>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007342:	4a1a      	ldr	r2, [pc, #104]	@ (80073ac <vPortValidateInterruptPriority+0x7c>)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	4413      	add	r3, r2
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800734c:	4b18      	ldr	r3, [pc, #96]	@ (80073b0 <vPortValidateInterruptPriority+0x80>)
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	7afa      	ldrb	r2, [r7, #11]
 8007352:	429a      	cmp	r2, r3
 8007354:	d20d      	bcs.n	8007372 <vPortValidateInterruptPriority+0x42>
    __asm volatile
 8007356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800735a:	b672      	cpsid	i
 800735c:	f383 8811 	msr	BASEPRI, r3
 8007360:	f3bf 8f6f 	isb	sy
 8007364:	f3bf 8f4f 	dsb	sy
 8007368:	b662      	cpsie	i
 800736a:	607b      	str	r3, [r7, #4]
}
 800736c:	bf00      	nop
 800736e:	bf00      	nop
 8007370:	e7fd      	b.n	800736e <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007372:	4b10      	ldr	r3, [pc, #64]	@ (80073b4 <vPortValidateInterruptPriority+0x84>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800737a:	4b0f      	ldr	r3, [pc, #60]	@ (80073b8 <vPortValidateInterruptPriority+0x88>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	429a      	cmp	r2, r3
 8007380:	d90d      	bls.n	800739e <vPortValidateInterruptPriority+0x6e>
    __asm volatile
 8007382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007386:	b672      	cpsid	i
 8007388:	f383 8811 	msr	BASEPRI, r3
 800738c:	f3bf 8f6f 	isb	sy
 8007390:	f3bf 8f4f 	dsb	sy
 8007394:	b662      	cpsie	i
 8007396:	603b      	str	r3, [r7, #0]
}
 8007398:	bf00      	nop
 800739a:	bf00      	nop
 800739c:	e7fd      	b.n	800739a <vPortValidateInterruptPriority+0x6a>
    }
 800739e:	bf00      	nop
 80073a0:	3714      	adds	r7, #20
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	e000e3f0 	.word	0xe000e3f0
 80073b0:	24002ba0 	.word	0x24002ba0
 80073b4:	e000ed0c 	.word	0xe000ed0c
 80073b8:	24002ba4 	.word	0x24002ba4

080073bc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b08e      	sub	sp, #56	@ 0x38
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80073c4:	2300      	movs	r3, #0
 80073c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d022      	beq.n	8007414 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 80073ce:	2308      	movs	r3, #8
 80073d0:	43db      	mvns	r3, r3
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d81b      	bhi.n	8007410 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 80073d8:	2208      	movs	r2, #8
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4413      	add	r3, r2
 80073de:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f003 0307 	and.w	r3, r3, #7
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d014      	beq.n	8007414 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f003 0307 	and.w	r3, r3, #7
 80073f0:	f1c3 0308 	rsb	r3, r3, #8
 80073f4:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80073f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f8:	43db      	mvns	r3, r3
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d804      	bhi.n	800740a <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007404:	4413      	add	r3, r2
 8007406:	607b      	str	r3, [r7, #4]
 8007408:	e004      	b.n	8007414 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800740a:	2300      	movs	r3, #0
 800740c:	607b      	str	r3, [r7, #4]
 800740e:	e001      	b.n	8007414 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8007410:	2300      	movs	r3, #0
 8007412:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8007414:	f7fe fa58 	bl	80058c8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8007418:	4b80      	ldr	r3, [pc, #512]	@ (800761c <pvPortMalloc+0x260>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d101      	bne.n	8007424 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8007420:	f000 f986 	bl	8007730 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	f2c0 80de 	blt.w	80075e8 <pvPortMalloc+0x22c>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	f000 80da 	beq.w	80075e8 <pvPortMalloc+0x22c>
 8007434:	4b7a      	ldr	r3, [pc, #488]	@ (8007620 <pvPortMalloc+0x264>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	429a      	cmp	r2, r3
 800743c:	f200 80d4 	bhi.w	80075e8 <pvPortMalloc+0x22c>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007440:	4b78      	ldr	r3, [pc, #480]	@ (8007624 <pvPortMalloc+0x268>)
 8007442:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8007444:	4b77      	ldr	r3, [pc, #476]	@ (8007624 <pvPortMalloc+0x268>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800744a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800744c:	4a76      	ldr	r2, [pc, #472]	@ (8007628 <pvPortMalloc+0x26c>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d305      	bcc.n	800745e <pvPortMalloc+0xa2>
 8007452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007454:	4a75      	ldr	r2, [pc, #468]	@ (800762c <pvPortMalloc+0x270>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d801      	bhi.n	800745e <pvPortMalloc+0xa2>
 800745a:	2301      	movs	r3, #1
 800745c:	e000      	b.n	8007460 <pvPortMalloc+0xa4>
 800745e:	2300      	movs	r3, #0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d12d      	bne.n	80074c0 <pvPortMalloc+0x104>
    __asm volatile
 8007464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007468:	b672      	cpsid	i
 800746a:	f383 8811 	msr	BASEPRI, r3
 800746e:	f3bf 8f6f 	isb	sy
 8007472:	f3bf 8f4f 	dsb	sy
 8007476:	b662      	cpsie	i
 8007478:	623b      	str	r3, [r7, #32]
}
 800747a:	bf00      	nop
 800747c:	bf00      	nop
 800747e:	e7fd      	b.n	800747c <pvPortMalloc+0xc0>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8007480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007482:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8007484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800748a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800748c:	4a66      	ldr	r2, [pc, #408]	@ (8007628 <pvPortMalloc+0x26c>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d305      	bcc.n	800749e <pvPortMalloc+0xe2>
 8007492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007494:	4a65      	ldr	r2, [pc, #404]	@ (800762c <pvPortMalloc+0x270>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d801      	bhi.n	800749e <pvPortMalloc+0xe2>
 800749a:	2301      	movs	r3, #1
 800749c:	e000      	b.n	80074a0 <pvPortMalloc+0xe4>
 800749e:	2300      	movs	r3, #0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d10d      	bne.n	80074c0 <pvPortMalloc+0x104>
    __asm volatile
 80074a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074a8:	b672      	cpsid	i
 80074aa:	f383 8811 	msr	BASEPRI, r3
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	f3bf 8f4f 	dsb	sy
 80074b6:	b662      	cpsie	i
 80074b8:	61fb      	str	r3, [r7, #28]
}
 80074ba:	bf00      	nop
 80074bc:	bf00      	nop
 80074be:	e7fd      	b.n	80074bc <pvPortMalloc+0x100>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80074c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d903      	bls.n	80074d2 <pvPortMalloc+0x116>
 80074ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1d6      	bne.n	8007480 <pvPortMalloc+0xc4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80074d2:	4b52      	ldr	r3, [pc, #328]	@ (800761c <pvPortMalloc+0x260>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80074d8:	429a      	cmp	r2, r3
 80074da:	f000 8085 	beq.w	80075e8 <pvPortMalloc+0x22c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 80074de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2208      	movs	r2, #8
 80074e4:	4413      	add	r3, r2
 80074e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 80074e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ea:	4a4f      	ldr	r2, [pc, #316]	@ (8007628 <pvPortMalloc+0x26c>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d305      	bcc.n	80074fc <pvPortMalloc+0x140>
 80074f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074f2:	4a4e      	ldr	r2, [pc, #312]	@ (800762c <pvPortMalloc+0x270>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d801      	bhi.n	80074fc <pvPortMalloc+0x140>
 80074f8:	2301      	movs	r3, #1
 80074fa:	e000      	b.n	80074fe <pvPortMalloc+0x142>
 80074fc:	2300      	movs	r3, #0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d10d      	bne.n	800751e <pvPortMalloc+0x162>
    __asm volatile
 8007502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007506:	b672      	cpsid	i
 8007508:	f383 8811 	msr	BASEPRI, r3
 800750c:	f3bf 8f6f 	isb	sy
 8007510:	f3bf 8f4f 	dsb	sy
 8007514:	b662      	cpsie	i
 8007516:	61bb      	str	r3, [r7, #24]
}
 8007518:	bf00      	nop
 800751a:	bf00      	nop
 800751c:	e7fd      	b.n	800751a <pvPortMalloc+0x15e>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800751e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007524:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8007526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	429a      	cmp	r2, r3
 800752e:	d90d      	bls.n	800754c <pvPortMalloc+0x190>
    __asm volatile
 8007530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007534:	b672      	cpsid	i
 8007536:	f383 8811 	msr	BASEPRI, r3
 800753a:	f3bf 8f6f 	isb	sy
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	b662      	cpsie	i
 8007544:	617b      	str	r3, [r7, #20]
}
 8007546:	bf00      	nop
 8007548:	bf00      	nop
 800754a:	e7fd      	b.n	8007548 <pvPortMalloc+0x18c>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800754c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800754e:	685a      	ldr	r2, [r3, #4]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	1ad2      	subs	r2, r2, r3
 8007554:	2308      	movs	r3, #8
 8007556:	005b      	lsls	r3, r3, #1
 8007558:	429a      	cmp	r2, r3
 800755a:	d926      	bls.n	80075aa <pvPortMalloc+0x1ee>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800755c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4413      	add	r3, r2
 8007562:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007566:	f003 0307 	and.w	r3, r3, #7
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00d      	beq.n	800758a <pvPortMalloc+0x1ce>
    __asm volatile
 800756e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007572:	b672      	cpsid	i
 8007574:	f383 8811 	msr	BASEPRI, r3
 8007578:	f3bf 8f6f 	isb	sy
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	b662      	cpsie	i
 8007582:	613b      	str	r3, [r7, #16]
}
 8007584:	bf00      	nop
 8007586:	bf00      	nop
 8007588:	e7fd      	b.n	8007586 <pvPortMalloc+0x1ca>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800758a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800758c:	685a      	ldr	r2, [r3, #4]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	1ad2      	subs	r2, r2, r3
 8007592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007594:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800759c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a2:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 80075a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075a8:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80075aa:	4b1d      	ldr	r3, [pc, #116]	@ (8007620 <pvPortMalloc+0x264>)
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	4a1a      	ldr	r2, [pc, #104]	@ (8007620 <pvPortMalloc+0x264>)
 80075b6:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80075b8:	4b19      	ldr	r3, [pc, #100]	@ (8007620 <pvPortMalloc+0x264>)
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	4b1c      	ldr	r3, [pc, #112]	@ (8007630 <pvPortMalloc+0x274>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d203      	bcs.n	80075cc <pvPortMalloc+0x210>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80075c4:	4b16      	ldr	r3, [pc, #88]	@ (8007620 <pvPortMalloc+0x264>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a19      	ldr	r2, [pc, #100]	@ (8007630 <pvPortMalloc+0x274>)
 80075ca:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80075cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80075d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075d6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80075d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075da:	2200      	movs	r2, #0
 80075dc:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80075de:	4b15      	ldr	r3, [pc, #84]	@ (8007634 <pvPortMalloc+0x278>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	3301      	adds	r3, #1
 80075e4:	4a13      	ldr	r2, [pc, #76]	@ (8007634 <pvPortMalloc+0x278>)
 80075e6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80075e8:	f7fe f97c 	bl	80058e4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80075ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ee:	f003 0307 	and.w	r3, r3, #7
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00d      	beq.n	8007612 <pvPortMalloc+0x256>
    __asm volatile
 80075f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075fa:	b672      	cpsid	i
 80075fc:	f383 8811 	msr	BASEPRI, r3
 8007600:	f3bf 8f6f 	isb	sy
 8007604:	f3bf 8f4f 	dsb	sy
 8007608:	b662      	cpsie	i
 800760a:	60fb      	str	r3, [r7, #12]
}
 800760c:	bf00      	nop
 800760e:	bf00      	nop
 8007610:	e7fd      	b.n	800760e <pvPortMalloc+0x252>
    return pvReturn;
 8007612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8007614:	4618      	mov	r0, r3
 8007616:	3738      	adds	r7, #56	@ 0x38
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}
 800761c:	24042bb0 	.word	0x24042bb0
 8007620:	24042bb4 	.word	0x24042bb4
 8007624:	24042ba8 	.word	0x24042ba8
 8007628:	24002ba8 	.word	0x24002ba8
 800762c:	24042ba7 	.word	0x24042ba7
 8007630:	24042bb8 	.word	0x24042bb8
 8007634:	24042bbc 	.word	0x24042bbc

08007638 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b088      	sub	sp, #32
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d066      	beq.n	8007718 <vPortFree+0xe0>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800764a:	2308      	movs	r3, #8
 800764c:	425b      	negs	r3, r3
 800764e:	69fa      	ldr	r2, [r7, #28]
 8007650:	4413      	add	r3, r2
 8007652:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	4a31      	ldr	r2, [pc, #196]	@ (8007720 <vPortFree+0xe8>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d305      	bcc.n	800766c <vPortFree+0x34>
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	4a30      	ldr	r2, [pc, #192]	@ (8007724 <vPortFree+0xec>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d801      	bhi.n	800766c <vPortFree+0x34>
 8007668:	2301      	movs	r3, #1
 800766a:	e000      	b.n	800766e <vPortFree+0x36>
 800766c:	2300      	movs	r3, #0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10d      	bne.n	800768e <vPortFree+0x56>
    __asm volatile
 8007672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007676:	b672      	cpsid	i
 8007678:	f383 8811 	msr	BASEPRI, r3
 800767c:	f3bf 8f6f 	isb	sy
 8007680:	f3bf 8f4f 	dsb	sy
 8007684:	b662      	cpsie	i
 8007686:	617b      	str	r3, [r7, #20]
}
 8007688:	bf00      	nop
 800768a:	bf00      	nop
 800768c:	e7fd      	b.n	800768a <vPortFree+0x52>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	2b00      	cmp	r3, #0
 8007694:	db0d      	blt.n	80076b2 <vPortFree+0x7a>
    __asm volatile
 8007696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800769a:	b672      	cpsid	i
 800769c:	f383 8811 	msr	BASEPRI, r3
 80076a0:	f3bf 8f6f 	isb	sy
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	b662      	cpsie	i
 80076aa:	613b      	str	r3, [r7, #16]
}
 80076ac:	bf00      	nop
 80076ae:	bf00      	nop
 80076b0:	e7fd      	b.n	80076ae <vPortFree+0x76>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00d      	beq.n	80076d6 <vPortFree+0x9e>
    __asm volatile
 80076ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076be:	b672      	cpsid	i
 80076c0:	f383 8811 	msr	BASEPRI, r3
 80076c4:	f3bf 8f6f 	isb	sy
 80076c8:	f3bf 8f4f 	dsb	sy
 80076cc:	b662      	cpsie	i
 80076ce:	60fb      	str	r3, [r7, #12]
}
 80076d0:	bf00      	nop
 80076d2:	bf00      	nop
 80076d4:	e7fd      	b.n	80076d2 <vPortFree+0x9a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	da1c      	bge.n	8007718 <vPortFree+0xe0>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d118      	bne.n	8007718 <vPortFree+0xe0>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 80076f2:	f7fe f8e9 	bl	80058c8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	685a      	ldr	r2, [r3, #4]
 80076fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007728 <vPortFree+0xf0>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4413      	add	r3, r2
 8007700:	4a09      	ldr	r2, [pc, #36]	@ (8007728 <vPortFree+0xf0>)
 8007702:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007704:	69b8      	ldr	r0, [r7, #24]
 8007706:	f000 f86d 	bl	80077e4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800770a:	4b08      	ldr	r3, [pc, #32]	@ (800772c <vPortFree+0xf4>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	3301      	adds	r3, #1
 8007710:	4a06      	ldr	r2, [pc, #24]	@ (800772c <vPortFree+0xf4>)
 8007712:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007714:	f7fe f8e6 	bl	80058e4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007718:	bf00      	nop
 800771a:	3720      	adds	r7, #32
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}
 8007720:	24002ba8 	.word	0x24002ba8
 8007724:	24042ba7 	.word	0x24042ba7
 8007728:	24042bb4 	.word	0x24042bb4
 800772c:	24042bc0 	.word	0x24042bc0

08007730 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007736:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800773a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800773c:	4b24      	ldr	r3, [pc, #144]	@ (80077d0 <prvHeapInit+0xa0>)
 800773e:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f003 0307 	and.w	r3, r3, #7
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00c      	beq.n	8007764 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	3307      	adds	r3, #7
 800774e:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f023 0307 	bic.w	r3, r3, #7
 8007756:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8007758:	68ba      	ldr	r2, [r7, #8]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	4a1c      	ldr	r2, [pc, #112]	@ (80077d0 <prvHeapInit+0xa0>)
 8007760:	4413      	add	r3, r2
 8007762:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	4a1b      	ldr	r2, [pc, #108]	@ (80077d4 <prvHeapInit+0xa4>)
 8007768:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800776a:	4b1a      	ldr	r3, [pc, #104]	@ (80077d4 <prvHeapInit+0xa4>)
 800776c:	2200      	movs	r2, #0
 800776e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	4413      	add	r3, r2
 8007776:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8007778:	2208      	movs	r2, #8
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	1a9b      	subs	r3, r3, r2
 800777e:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f023 0307 	bic.w	r3, r3, #7
 8007786:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a13      	ldr	r2, [pc, #76]	@ (80077d8 <prvHeapInit+0xa8>)
 800778c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800778e:	4b12      	ldr	r3, [pc, #72]	@ (80077d8 <prvHeapInit+0xa8>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2200      	movs	r2, #0
 8007794:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8007796:	4b10      	ldr	r3, [pc, #64]	@ (80077d8 <prvHeapInit+0xa8>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2200      	movs	r2, #0
 800779c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	1ad2      	subs	r2, r2, r3
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80077ac:	4b0a      	ldr	r3, [pc, #40]	@ (80077d8 <prvHeapInit+0xa8>)
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	4a08      	ldr	r2, [pc, #32]	@ (80077dc <prvHeapInit+0xac>)
 80077ba:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	4a07      	ldr	r2, [pc, #28]	@ (80077e0 <prvHeapInit+0xb0>)
 80077c2:	6013      	str	r3, [r2, #0]
}
 80077c4:	bf00      	nop
 80077c6:	3714      	adds	r7, #20
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr
 80077d0:	24002ba8 	.word	0x24002ba8
 80077d4:	24042ba8 	.word	0x24042ba8
 80077d8:	24042bb0 	.word	0x24042bb0
 80077dc:	24042bb8 	.word	0x24042bb8
 80077e0:	24042bb4 	.word	0x24042bb4

080077e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80077e4:	b480      	push	{r7}
 80077e6:	b087      	sub	sp, #28
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80077ec:	4b37      	ldr	r3, [pc, #220]	@ (80078cc <prvInsertBlockIntoFreeList+0xe8>)
 80077ee:	617b      	str	r3, [r7, #20]
 80077f0:	e002      	b.n	80077f8 <prvInsertBlockIntoFreeList+0x14>
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	617b      	str	r3, [r7, #20]
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d8f7      	bhi.n	80077f2 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	4a31      	ldr	r2, [pc, #196]	@ (80078cc <prvInsertBlockIntoFreeList+0xe8>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d01a      	beq.n	8007840 <prvInsertBlockIntoFreeList+0x5c>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	4a30      	ldr	r2, [pc, #192]	@ (80078d0 <prvInsertBlockIntoFreeList+0xec>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d305      	bcc.n	800781e <prvInsertBlockIntoFreeList+0x3a>
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	4a2f      	ldr	r2, [pc, #188]	@ (80078d4 <prvInsertBlockIntoFreeList+0xf0>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d801      	bhi.n	800781e <prvInsertBlockIntoFreeList+0x3a>
 800781a:	2301      	movs	r3, #1
 800781c:	e000      	b.n	8007820 <prvInsertBlockIntoFreeList+0x3c>
 800781e:	2300      	movs	r3, #0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10d      	bne.n	8007840 <prvInsertBlockIntoFreeList+0x5c>
    __asm volatile
 8007824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007828:	b672      	cpsid	i
 800782a:	f383 8811 	msr	BASEPRI, r3
 800782e:	f3bf 8f6f 	isb	sy
 8007832:	f3bf 8f4f 	dsb	sy
 8007836:	b662      	cpsie	i
 8007838:	60fb      	str	r3, [r7, #12]
}
 800783a:	bf00      	nop
 800783c:	bf00      	nop
 800783e:	e7fd      	b.n	800783c <prvInsertBlockIntoFreeList+0x58>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	693a      	ldr	r2, [r7, #16]
 800784a:	4413      	add	r3, r2
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	429a      	cmp	r2, r3
 8007850:	d108      	bne.n	8007864 <prvInsertBlockIntoFreeList+0x80>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	685a      	ldr	r2, [r3, #4]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	441a      	add	r2, r3
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	693a      	ldr	r2, [r7, #16]
 800786e:	441a      	add	r2, r3
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	429a      	cmp	r2, r3
 8007876:	d118      	bne.n	80078aa <prvInsertBlockIntoFreeList+0xc6>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	4b16      	ldr	r3, [pc, #88]	@ (80078d8 <prvInsertBlockIntoFreeList+0xf4>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	429a      	cmp	r2, r3
 8007882:	d00d      	beq.n	80078a0 <prvInsertBlockIntoFreeList+0xbc>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	685a      	ldr	r2, [r3, #4]
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	441a      	add	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	601a      	str	r2, [r3, #0]
 800789e:	e008      	b.n	80078b2 <prvInsertBlockIntoFreeList+0xce>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80078a0:	4b0d      	ldr	r3, [pc, #52]	@ (80078d8 <prvInsertBlockIntoFreeList+0xf4>)
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	601a      	str	r2, [r3, #0]
 80078a8:	e003      	b.n	80078b2 <prvInsertBlockIntoFreeList+0xce>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80078b2:	697a      	ldr	r2, [r7, #20]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d002      	beq.n	80078c0 <prvInsertBlockIntoFreeList+0xdc>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80078c0:	bf00      	nop
 80078c2:	371c      	adds	r7, #28
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr
 80078cc:	24042ba8 	.word	0x24042ba8
 80078d0:	24002ba8 	.word	0x24002ba8
 80078d4:	24042ba7 	.word	0x24042ba7
 80078d8:	24042bb0 	.word	0x24042bb0

080078dc <csp_get_uptime_s>:

#include <csp/arch/csp_time.h>

static uint32_t uptime_s_offset = 0;

uint32_t csp_get_uptime_s(void) {
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0

	uint32_t seconds = csp_get_s();
 80078e2:	f000 f9af 	bl	8007c44 <csp_get_s>
 80078e6:	6078      	str	r0, [r7, #4]
	if (uptime_s_offset == 0) {
 80078e8:	4b07      	ldr	r3, [pc, #28]	@ (8007908 <csp_get_uptime_s+0x2c>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d102      	bne.n	80078f6 <csp_get_uptime_s+0x1a>
		uptime_s_offset = seconds;
 80078f0:	4a05      	ldr	r2, [pc, #20]	@ (8007908 <csp_get_uptime_s+0x2c>)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6013      	str	r3, [r2, #0]
	}
	return (seconds - uptime_s_offset);
 80078f6:	4b04      	ldr	r3, [pc, #16]	@ (8007908 <csp_get_uptime_s+0x2c>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	1ad3      	subs	r3, r2, r3
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3708      	adds	r7, #8
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	24042bc4 	.word	0x24042bc4

0800790c <csp_malloc>:

#include <string.h>

#include <FreeRTOS.h>

void * csp_malloc(size_t size) {
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
	return pvPortMalloc(size);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f7ff fd51 	bl	80073bc <pvPortMalloc>
 800791a:	4603      	mov	r3, r0
}
 800791c:	4618      	mov	r0, r3
 800791e:	3708      	adds	r7, #8
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <csp_calloc>:

void * csp_calloc(size_t nmemb, size_t size) {
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
	size = (nmemb * size); 
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	fb02 f303 	mul.w	r3, r2, r3
 8007936:	603b      	str	r3, [r7, #0]
	void * ptr = csp_malloc(size);
 8007938:	6838      	ldr	r0, [r7, #0]
 800793a:	f7ff ffe7 	bl	800790c <csp_malloc>
 800793e:	60f8      	str	r0, [r7, #12]
	if (ptr) {
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d004      	beq.n	8007950 <csp_calloc+0x2c>
		memset(ptr, 0, size);
 8007946:	683a      	ldr	r2, [r7, #0]
 8007948:	2100      	movs	r1, #0
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	f008 fb28 	bl	800ffa0 <memset>
	}
	return ptr;
 8007950:	68fb      	ldr	r3, [r7, #12]
}
 8007952:	4618      	mov	r0, r3
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <csp_free>:

void csp_free(void *ptr) {
 800795a:	b580      	push	{r7, lr}
 800795c:	b082      	sub	sp, #8
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
	vPortFree(ptr);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7ff fe68 	bl	8007638 <vPortFree>
}
 8007968:	bf00      	nop
 800796a:	3708      	adds	r7, #8
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <csp_queue_create>:
#include <csp/arch/csp_queue.h>

#include <FreeRTOS.h>
#include <queue.h> // FreeRTOS

csp_queue_handle_t csp_queue_create(int length, size_t item_size) {
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
	return xQueueCreate(length, item_size);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	6839      	ldr	r1, [r7, #0]
 8007980:	4618      	mov	r0, r3
 8007982:	f7fc fd9a 	bl	80044ba <xQueueGenericCreate>
 8007986:	4603      	mov	r3, r0
}
 8007988:	4618      	mov	r0, r3
 800798a:	3708      	adds	r7, #8
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <csp_queue_remove>:

void csp_queue_remove(csp_queue_handle_t queue) {
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
	vQueueDelete(queue);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f7fd fa82 	bl	8004ea2 <vQueueDelete>
}
 800799e:	bf00      	nop
 80079a0:	3708      	adds	r7, #8
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <csp_queue_enqueue>:

int csp_queue_enqueue(csp_queue_handle_t handle, const void * value, uint32_t timeout) {
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b084      	sub	sp, #16
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	60f8      	str	r0, [r7, #12]
 80079ae:	60b9      	str	r1, [r7, #8]
 80079b0:	607a      	str	r2, [r7, #4]
	if (timeout != CSP_MAX_TIMEOUT)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f1b3 3fff 	cmp.w	r3, #4294967295
		timeout = timeout / portTICK_RATE_MS;
	return xQueueSendToBack(handle, value, timeout);
 80079b8:	2300      	movs	r3, #0
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	68b9      	ldr	r1, [r7, #8]
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	f7fc fdf4 	bl	80045ac <xQueueGenericSend>
 80079c4:	4603      	mov	r3, r0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <csp_queue_enqueue_isr>:

int csp_queue_enqueue_isr(csp_queue_handle_t handle, const void * value, CSP_BASE_TYPE * task_woken) {
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b084      	sub	sp, #16
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	60f8      	str	r0, [r7, #12]
 80079d6:	60b9      	str	r1, [r7, #8]
 80079d8:	607a      	str	r2, [r7, #4]
	return xQueueSendToBackFromISR(handle, value, task_woken);
 80079da:	2300      	movs	r3, #0
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	68b9      	ldr	r1, [r7, #8]
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	f7fc feed 	bl	80047c0 <xQueueGenericSendFromISR>
 80079e6:	4603      	mov	r3, r0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3710      	adds	r7, #16
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <csp_queue_dequeue>:

int csp_queue_dequeue(csp_queue_handle_t handle, void * buf, uint32_t timeout) {
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	607a      	str	r2, [r7, #4]
	if (timeout != CSP_MAX_TIMEOUT)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f1b3 3fff 	cmp.w	r3, #4294967295
		timeout = timeout / portTICK_RATE_MS;
	return xQueueReceive(handle, buf, timeout);
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	68b9      	ldr	r1, [r7, #8]
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f7fc ff9a 	bl	8004940 <xQueueReceive>
 8007a0c:	4603      	mov	r3, r0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <csp_queue_dequeue_isr>:

int csp_queue_dequeue_isr(csp_queue_handle_t handle, void * buf, CSP_BASE_TYPE * task_woken) {
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b084      	sub	sp, #16
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	60f8      	str	r0, [r7, #12]
 8007a1e:	60b9      	str	r1, [r7, #8]
 8007a20:	607a      	str	r2, [r7, #4]
	return xQueueReceiveFromISR(handle, buf, task_woken);
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	68b9      	ldr	r1, [r7, #8]
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f7fd f978 	bl	8004d1c <xQueueReceiveFromISR>
 8007a2c:	4603      	mov	r3, r0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <csp_queue_size>:

int csp_queue_size(csp_queue_handle_t handle) {
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b082      	sub	sp, #8
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
	return uxQueueMessagesWaiting(handle);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f7fd fa0e 	bl	8004e60 <uxQueueMessagesWaiting>
 8007a44:	4603      	mov	r3, r0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3708      	adds	r7, #8
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <csp_bin_sem_create>:

int csp_mutex_unlock(csp_mutex_t * mutex) {
	return csp_bin_sem_post(mutex);
}

int csp_bin_sem_create(csp_bin_sem_handle_t * sem) {
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b082      	sub	sp, #8
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
	vSemaphoreCreateBinary(*sem);
 8007a56:	2203      	movs	r2, #3
 8007a58:	2100      	movs	r1, #0
 8007a5a:	2001      	movs	r0, #1
 8007a5c:	f7fc fd2d 	bl	80044ba <xQueueGenericCreate>
 8007a60:	4602      	mov	r2, r0
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	601a      	str	r2, [r3, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d006      	beq.n	8007a7c <csp_bin_sem_create+0x2e>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6818      	ldr	r0, [r3, #0]
 8007a72:	2300      	movs	r3, #0
 8007a74:	2200      	movs	r2, #0
 8007a76:	2100      	movs	r1, #0
 8007a78:	f7fc fd98 	bl	80045ac <xQueueGenericSend>
	return CSP_SEMAPHORE_OK;
 8007a7c:	2301      	movs	r3, #1
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3708      	adds	r7, #8
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
	...

08007a88 <csp_bin_sem_wait>:
		vSemaphoreDelete(*sem);
	}
	return CSP_SEMAPHORE_OK;
}

int csp_bin_sem_wait(csp_bin_sem_handle_t * sem, uint32_t timeout) {
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
	csp_log_lock("Wait: %p", sem);
 8007a92:	4b0e      	ldr	r3, [pc, #56]	@ (8007acc <csp_bin_sem_wait+0x44>)
 8007a94:	799b      	ldrb	r3, [r3, #6]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d004      	beq.n	8007aa4 <csp_bin_sem_wait+0x1c>
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	490c      	ldr	r1, [pc, #48]	@ (8007ad0 <csp_bin_sem_wait+0x48>)
 8007a9e:	2006      	movs	r0, #6
 8007aa0:	f000 fe46 	bl	8008730 <do_csp_debug>
	if (timeout != CSP_MAX_TIMEOUT) {
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
		timeout = timeout / portTICK_RATE_MS;
	}
	if (xSemaphoreTake(*sem, timeout) == pdPASS) {
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	6839      	ldr	r1, [r7, #0]
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7fd f82d 	bl	8004b10 <xQueueSemaphoreTake>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d101      	bne.n	8007ac0 <csp_bin_sem_wait+0x38>
		return CSP_SEMAPHORE_OK;
 8007abc:	2301      	movs	r3, #1
 8007abe:	e000      	b.n	8007ac2 <csp_bin_sem_wait+0x3a>
	}
	return CSP_SEMAPHORE_ERROR;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3708      	adds	r7, #8
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	2400008c 	.word	0x2400008c
 8007ad0:	080114dc 	.word	0x080114dc

08007ad4 <csp_bin_sem_post>:

int csp_bin_sem_post(csp_bin_sem_handle_t * sem) {
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
	csp_log_lock("Post: %p", sem);
 8007adc:	4b0c      	ldr	r3, [pc, #48]	@ (8007b10 <csp_bin_sem_post+0x3c>)
 8007ade:	799b      	ldrb	r3, [r3, #6]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d004      	beq.n	8007aee <csp_bin_sem_post+0x1a>
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	490b      	ldr	r1, [pc, #44]	@ (8007b14 <csp_bin_sem_post+0x40>)
 8007ae8:	2006      	movs	r0, #6
 8007aea:	f000 fe21 	bl	8008730 <do_csp_debug>
	if (xSemaphoreGive(*sem) == pdPASS) {
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6818      	ldr	r0, [r3, #0]
 8007af2:	2300      	movs	r3, #0
 8007af4:	2200      	movs	r2, #0
 8007af6:	2100      	movs	r1, #0
 8007af8:	f7fc fd58 	bl	80045ac <xQueueGenericSend>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d101      	bne.n	8007b06 <csp_bin_sem_post+0x32>
		return CSP_SEMAPHORE_OK;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e000      	b.n	8007b08 <csp_bin_sem_post+0x34>
	}
	return CSP_SEMAPHORE_ERROR;
 8007b06:	2300      	movs	r3, #0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3708      	adds	r7, #8
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	2400008c 	.word	0x2400008c
 8007b14:	080114e8 	.word	0x080114e8

08007b18 <csp_sys_set_color>:

	return (uint32_t) xPortGetFreeHeapSize();

}

void csp_sys_set_color(csp_color_t color) {
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	4603      	mov	r3, r0
 8007b20:	71fb      	strb	r3, [r7, #7]

	unsigned int color_code, modifier_code;
	switch (color & COLOR_MASK_COLOR) {
 8007b22:	79fb      	ldrb	r3, [r7, #7]
 8007b24:	f003 030f 	and.w	r3, r3, #15
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	2b07      	cmp	r3, #7
 8007b2c:	d82a      	bhi.n	8007b84 <csp_sys_set_color+0x6c>
 8007b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b34 <csp_sys_set_color+0x1c>)
 8007b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b34:	08007b55 	.word	0x08007b55
 8007b38:	08007b5b 	.word	0x08007b5b
 8007b3c:	08007b61 	.word	0x08007b61
 8007b40:	08007b67 	.word	0x08007b67
 8007b44:	08007b6d 	.word	0x08007b6d
 8007b48:	08007b73 	.word	0x08007b73
 8007b4c:	08007b79 	.word	0x08007b79
 8007b50:	08007b7f 	.word	0x08007b7f
		case COLOR_BLACK:
			color_code = 30; break;
 8007b54:	231e      	movs	r3, #30
 8007b56:	60fb      	str	r3, [r7, #12]
 8007b58:	e017      	b.n	8007b8a <csp_sys_set_color+0x72>
		case COLOR_RED:
			color_code = 31; break;
 8007b5a:	231f      	movs	r3, #31
 8007b5c:	60fb      	str	r3, [r7, #12]
 8007b5e:	e014      	b.n	8007b8a <csp_sys_set_color+0x72>
		case COLOR_GREEN:
			color_code = 32; break;
 8007b60:	2320      	movs	r3, #32
 8007b62:	60fb      	str	r3, [r7, #12]
 8007b64:	e011      	b.n	8007b8a <csp_sys_set_color+0x72>
		case COLOR_YELLOW:
			color_code = 33; break;
 8007b66:	2321      	movs	r3, #33	@ 0x21
 8007b68:	60fb      	str	r3, [r7, #12]
 8007b6a:	e00e      	b.n	8007b8a <csp_sys_set_color+0x72>
		case COLOR_BLUE:
			color_code = 34; break;
 8007b6c:	2322      	movs	r3, #34	@ 0x22
 8007b6e:	60fb      	str	r3, [r7, #12]
 8007b70:	e00b      	b.n	8007b8a <csp_sys_set_color+0x72>
		case COLOR_MAGENTA:
			color_code = 35; break;
 8007b72:	2323      	movs	r3, #35	@ 0x23
 8007b74:	60fb      	str	r3, [r7, #12]
 8007b76:	e008      	b.n	8007b8a <csp_sys_set_color+0x72>
		case COLOR_CYAN:
			color_code = 36; break;
 8007b78:	2324      	movs	r3, #36	@ 0x24
 8007b7a:	60fb      	str	r3, [r7, #12]
 8007b7c:	e005      	b.n	8007b8a <csp_sys_set_color+0x72>
		case COLOR_WHITE:
			color_code = 37; break;
 8007b7e:	2325      	movs	r3, #37	@ 0x25
 8007b80:	60fb      	str	r3, [r7, #12]
 8007b82:	e002      	b.n	8007b8a <csp_sys_set_color+0x72>
		case COLOR_RESET:
		default:
			color_code = 0; break;
 8007b84:	2300      	movs	r3, #0
 8007b86:	60fb      	str	r3, [r7, #12]
 8007b88:	bf00      	nop
	}
	
	switch (color & COLOR_MASK_MODIFIER) {
 8007b8a:	79fb      	ldrb	r3, [r7, #7]
 8007b8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007b90:	2b40      	cmp	r3, #64	@ 0x40
 8007b92:	d013      	beq.n	8007bbc <csp_sys_set_color+0xa4>
 8007b94:	2b40      	cmp	r3, #64	@ 0x40
 8007b96:	dc14      	bgt.n	8007bc2 <csp_sys_set_color+0xaa>
 8007b98:	2b30      	cmp	r3, #48	@ 0x30
 8007b9a:	d00c      	beq.n	8007bb6 <csp_sys_set_color+0x9e>
 8007b9c:	2b30      	cmp	r3, #48	@ 0x30
 8007b9e:	dc10      	bgt.n	8007bc2 <csp_sys_set_color+0xaa>
 8007ba0:	2b10      	cmp	r3, #16
 8007ba2:	d002      	beq.n	8007baa <csp_sys_set_color+0x92>
 8007ba4:	2b20      	cmp	r3, #32
 8007ba6:	d003      	beq.n	8007bb0 <csp_sys_set_color+0x98>
 8007ba8:	e00b      	b.n	8007bc2 <csp_sys_set_color+0xaa>
		case COLOR_BOLD:
			modifier_code = 1; break;
 8007baa:	2301      	movs	r3, #1
 8007bac:	60bb      	str	r3, [r7, #8]
 8007bae:	e00b      	b.n	8007bc8 <csp_sys_set_color+0xb0>
		case COLOR_UNDERLINE:
			modifier_code = 2; break;
 8007bb0:	2302      	movs	r3, #2
 8007bb2:	60bb      	str	r3, [r7, #8]
 8007bb4:	e008      	b.n	8007bc8 <csp_sys_set_color+0xb0>
		case COLOR_BLINK:
			modifier_code = 3; break;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	60bb      	str	r3, [r7, #8]
 8007bba:	e005      	b.n	8007bc8 <csp_sys_set_color+0xb0>
		case COLOR_HIDE:
			modifier_code = 4; break;
 8007bbc:	2304      	movs	r3, #4
 8007bbe:	60bb      	str	r3, [r7, #8]
 8007bc0:	e002      	b.n	8007bc8 <csp_sys_set_color+0xb0>
		case COLOR_NORMAL:
		default:
			modifier_code = 0; break;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	60bb      	str	r3, [r7, #8]
 8007bc6:	bf00      	nop
	}

	printf("\033[%u;%um", modifier_code, color_code);
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	68b9      	ldr	r1, [r7, #8]
 8007bcc:	4803      	ldr	r0, [pc, #12]	@ (8007bdc <csp_sys_set_color+0xc4>)
 8007bce:	f008 f823 	bl	800fc18 <iprintf>
}
 8007bd2:	bf00      	nop
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	080114f4 	.word	0x080114f4

08007be0 <csp_thread_create>:
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <csp/arch/csp_thread.h>

int csp_thread_create(csp_thread_func_t routine, const char * const thread_name, unsigned int stack_size, void * parameters, unsigned int priority, csp_thread_handle_t * return_handle) {
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b088      	sub	sp, #32
 8007be4:	af02      	add	r7, sp, #8
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
 8007bec:	603b      	str	r3, [r7, #0]

	csp_thread_handle_t handle;
#if (tskKERNEL_VERSION_MAJOR >= 8)
	portBASE_TYPE ret = xTaskCreate(routine, thread_name, stack_size, parameters, priority, &handle);
 8007bee:	f107 0310 	add.w	r3, r7, #16
 8007bf2:	9301      	str	r3, [sp, #4]
 8007bf4:	6a3b      	ldr	r3, [r7, #32]
 8007bf6:	9300      	str	r3, [sp, #0]
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	68b9      	ldr	r1, [r7, #8]
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f7fd fc2b 	bl	800545a <xTaskCreate>
 8007c04:	6178      	str	r0, [r7, #20]
#else
	portBASE_TYPE ret = xTaskCreate(routine, (signed char *) thread_name, stack_size, parameters, priority, &handle);
#endif
	if (ret != pdTRUE) {
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d002      	beq.n	8007c12 <csp_thread_create+0x32>
		return CSP_ERR_NOMEM;
 8007c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c10:	e006      	b.n	8007c20 <csp_thread_create+0x40>
	}
	if (return_handle) {
 8007c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d002      	beq.n	8007c1e <csp_thread_create+0x3e>
		*return_handle = handle;
 8007c18:	693a      	ldr	r2, [r7, #16]
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1c:	601a      	str	r2, [r3, #0]
	}
	return CSP_ERR_NONE;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3718      	adds	r7, #24
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <csp_get_ms>:
#include <csp/arch/csp_time.h>

#include <FreeRTOS.h>
#include <task.h> // FreeRTOS

uint32_t csp_get_ms(void) {
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	af00      	add	r7, sp, #0
	return (uint32_t)(xTaskGetTickCount() * (1000/configTICK_RATE_HZ));
 8007c2c:	f7fd ff64 	bl	8005af8 <xTaskGetTickCount>
 8007c30:	4603      	mov	r3, r0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <csp_get_ms_isr>:

uint32_t csp_get_ms_isr(void) {
 8007c36:	b580      	push	{r7, lr}
 8007c38:	af00      	add	r7, sp, #0
	return (uint32_t)(xTaskGetTickCountFromISR() * (1000/configTICK_RATE_HZ));
 8007c3a:	f7fd ff6d 	bl	8005b18 <xTaskGetTickCountFromISR>
 8007c3e:	4603      	mov	r3, r0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <csp_get_s>:

uint32_t csp_get_s(void) {
 8007c44:	b580      	push	{r7, lr}
 8007c46:	af00      	add	r7, sp, #0
	return (uint32_t)(xTaskGetTickCount()/configTICK_RATE_HZ);
 8007c48:	f7fd ff56 	bl	8005af8 <xTaskGetTickCount>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	4a03      	ldr	r2, [pc, #12]	@ (8007c5c <csp_get_s+0x18>)
 8007c50:	fba2 2303 	umull	r2, r3, r2, r3
 8007c54:	099b      	lsrs	r3, r3, #6
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	10624dd3 	.word	0x10624dd3

08007c60 <csp_buffer_init>:
CSP_STATIC_ASSERT(sizeof(csp_packet_t) == 16, csp_packet);
CSP_STATIC_ASSERT(offsetof(csp_packet_t, length) == 10, length_field_misaligned);
CSP_STATIC_ASSERT(offsetof(csp_packet_t, id) == 12, csp_id_field_misaligned);
CSP_STATIC_ASSERT(offsetof(csp_packet_t, data) == 16, data_field_misaligned);

int csp_buffer_init(void) {
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0

	// calculate total size and ensure correct alignment (int *) for buffers
	const unsigned int skbfsize = CSP_BUFFER_ALIGN * ((sizeof(csp_skbf_t) + csp_buffer_size() + (CSP_BUFFER_ALIGN - 1)) / CSP_BUFFER_ALIGN);
 8007c66:	f000 f9b5 	bl	8007fd4 <csp_buffer_size>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	330b      	adds	r3, #11
 8007c6e:	f023 0303 	bic.w	r3, r3, #3
 8007c72:	60bb      	str	r3, [r7, #8]

	csp_buffer_pool = csp_malloc(csp_conf.buffers * skbfsize);
 8007c74:	4b23      	ldr	r3, [pc, #140]	@ (8007d04 <csp_buffer_init+0xa4>)
 8007c76:	8adb      	ldrh	r3, [r3, #22]
 8007c78:	461a      	mov	r2, r3
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	fb02 f303 	mul.w	r3, r2, r3
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7ff fe43 	bl	800790c <csp_malloc>
 8007c86:	4603      	mov	r3, r0
 8007c88:	4a1f      	ldr	r2, [pc, #124]	@ (8007d08 <csp_buffer_init+0xa8>)
 8007c8a:	6013      	str	r3, [r2, #0]
	if (csp_buffer_pool == NULL)
 8007c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8007d08 <csp_buffer_init+0xa8>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d030      	beq.n	8007cf6 <csp_buffer_init+0x96>
		goto fail_malloc;

	csp_buffers = csp_queue_create(csp_conf.buffers, sizeof(void *));
 8007c94:	4b1b      	ldr	r3, [pc, #108]	@ (8007d04 <csp_buffer_init+0xa4>)
 8007c96:	8adb      	ldrh	r3, [r3, #22]
 8007c98:	2104      	movs	r1, #4
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7ff fe68 	bl	8007970 <csp_queue_create>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	4a1a      	ldr	r2, [pc, #104]	@ (8007d0c <csp_buffer_init+0xac>)
 8007ca4:	6013      	str	r3, [r2, #0]
	if (!csp_buffers)
 8007ca6:	4b19      	ldr	r3, [pc, #100]	@ (8007d0c <csp_buffer_init+0xac>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d01f      	beq.n	8007cee <csp_buffer_init+0x8e>
		goto fail_queue;

	for (unsigned int i = 0; i < csp_conf.buffers; i++) {
 8007cae:	2300      	movs	r3, #0
 8007cb0:	60fb      	str	r3, [r7, #12]
 8007cb2:	e014      	b.n	8007cde <csp_buffer_init+0x7e>
		csp_skbf_t * buf = (void *) &csp_buffer_pool[i * skbfsize];
 8007cb4:	4b14      	ldr	r3, [pc, #80]	@ (8007d08 <csp_buffer_init+0xa8>)
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	68b9      	ldr	r1, [r7, #8]
 8007cbc:	fb01 f303 	mul.w	r3, r1, r3
 8007cc0:	4413      	add	r3, r2
 8007cc2:	607b      	str	r3, [r7, #4]
		buf->skbf_addr = buf;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	605a      	str	r2, [r3, #4]
		csp_queue_enqueue(csp_buffers, &buf, 0);
 8007cca:	4b10      	ldr	r3, [pc, #64]	@ (8007d0c <csp_buffer_init+0xac>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	1d39      	adds	r1, r7, #4
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7ff fe67 	bl	80079a6 <csp_queue_enqueue>
	for (unsigned int i = 0; i < csp_conf.buffers; i++) {
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	60fb      	str	r3, [r7, #12]
 8007cde:	4b09      	ldr	r3, [pc, #36]	@ (8007d04 <csp_buffer_init+0xa4>)
 8007ce0:	8adb      	ldrh	r3, [r3, #22]
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d3e4      	bcc.n	8007cb4 <csp_buffer_init+0x54>
	}

	return CSP_ERR_NONE;
 8007cea:	2300      	movs	r3, #0
 8007cec:	e006      	b.n	8007cfc <csp_buffer_init+0x9c>
		goto fail_queue;
 8007cee:	bf00      	nop

fail_queue:
	csp_buffer_free_resources();
 8007cf0:	f000 f80e 	bl	8007d10 <csp_buffer_free_resources>
 8007cf4:	e000      	b.n	8007cf8 <csp_buffer_init+0x98>
		goto fail_malloc;
 8007cf6:	bf00      	nop
fail_malloc:
	return CSP_ERR_NOMEM;
 8007cf8:	f04f 33ff 	mov.w	r3, #4294967295

}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	24042bec 	.word	0x24042bec
 8007d08:	24042bcc 	.word	0x24042bcc
 8007d0c:	24042bc8 	.word	0x24042bc8

08007d10 <csp_buffer_free_resources>:

void csp_buffer_free_resources(void) {
 8007d10:	b580      	push	{r7, lr}
 8007d12:	af00      	add	r7, sp, #0

	if (csp_buffers) {
 8007d14:	4b0a      	ldr	r3, [pc, #40]	@ (8007d40 <csp_buffer_free_resources+0x30>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d007      	beq.n	8007d2c <csp_buffer_free_resources+0x1c>
		csp_queue_remove(csp_buffers);
 8007d1c:	4b08      	ldr	r3, [pc, #32]	@ (8007d40 <csp_buffer_free_resources+0x30>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7ff fe35 	bl	8007990 <csp_queue_remove>
		csp_buffers = NULL;
 8007d26:	4b06      	ldr	r3, [pc, #24]	@ (8007d40 <csp_buffer_free_resources+0x30>)
 8007d28:	2200      	movs	r2, #0
 8007d2a:	601a      	str	r2, [r3, #0]
	}
	csp_free(csp_buffer_pool);
 8007d2c:	4b05      	ldr	r3, [pc, #20]	@ (8007d44 <csp_buffer_free_resources+0x34>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7ff fe12 	bl	800795a <csp_free>
	csp_buffer_pool = NULL;
 8007d36:	4b03      	ldr	r3, [pc, #12]	@ (8007d44 <csp_buffer_free_resources+0x34>)
 8007d38:	2200      	movs	r2, #0
 8007d3a:	601a      	str	r2, [r3, #0]

}
 8007d3c:	bf00      	nop
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	24042bc8 	.word	0x24042bc8
 8007d44:	24042bcc 	.word	0x24042bcc

08007d48 <csp_buffer_get_isr>:

void *csp_buffer_get_isr(size_t _data_size) {
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]

	if (_data_size > csp_conf.buffer_data_size)
 8007d50:	4b14      	ldr	r3, [pc, #80]	@ (8007da4 <csp_buffer_get_isr+0x5c>)
 8007d52:	8b1b      	ldrh	r3, [r3, #24]
 8007d54:	461a      	mov	r2, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d901      	bls.n	8007d60 <csp_buffer_get_isr+0x18>
		return NULL;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	e01d      	b.n	8007d9c <csp_buffer_get_isr+0x54>

	csp_skbf_t * buffer = NULL;
 8007d60:	2300      	movs	r3, #0
 8007d62:	60fb      	str	r3, [r7, #12]
	CSP_BASE_TYPE task_woken = 0;
 8007d64:	2300      	movs	r3, #0
 8007d66:	60bb      	str	r3, [r7, #8]
	csp_queue_dequeue_isr(csp_buffers, &buffer, &task_woken);
 8007d68:	4b0f      	ldr	r3, [pc, #60]	@ (8007da8 <csp_buffer_get_isr+0x60>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f107 0208 	add.w	r2, r7, #8
 8007d70:	f107 010c 	add.w	r1, r7, #12
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7ff fe4e 	bl	8007a16 <csp_queue_dequeue_isr>
	if (buffer == NULL)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d101      	bne.n	8007d84 <csp_buffer_get_isr+0x3c>
		return NULL;
 8007d80:	2300      	movs	r3, #0
 8007d82:	e00b      	b.n	8007d9c <csp_buffer_get_isr+0x54>

	if (buffer != buffer->skbf_addr)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	685a      	ldr	r2, [r3, #4]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d001      	beq.n	8007d92 <csp_buffer_get_isr+0x4a>
		return NULL;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	e004      	b.n	8007d9c <csp_buffer_get_isr+0x54>

	buffer->refcount = 1;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2201      	movs	r2, #1
 8007d96:	601a      	str	r2, [r3, #0]
	return buffer->skbf_data;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	3308      	adds	r3, #8

}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	24042bec 	.word	0x24042bec
 8007da8:	24042bc8 	.word	0x24042bc8

08007dac <csp_buffer_get>:

void *csp_buffer_get(size_t _data_size) {
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]

	if (_data_size > csp_conf.buffer_data_size) {
 8007db4:	4b27      	ldr	r3, [pc, #156]	@ (8007e54 <csp_buffer_get+0xa8>)
 8007db6:	8b1b      	ldrh	r3, [r3, #24]
 8007db8:	461a      	mov	r2, r3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d90c      	bls.n	8007dda <csp_buffer_get+0x2e>
		csp_log_error("GET: Attempt to allocate too large data size %u > max %u", (unsigned int) _data_size, (unsigned int) csp_conf.buffer_data_size);
 8007dc0:	4b25      	ldr	r3, [pc, #148]	@ (8007e58 <csp_buffer_get+0xac>)
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d006      	beq.n	8007dd6 <csp_buffer_get+0x2a>
 8007dc8:	4b22      	ldr	r3, [pc, #136]	@ (8007e54 <csp_buffer_get+0xa8>)
 8007dca:	8b1b      	ldrh	r3, [r3, #24]
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	4923      	ldr	r1, [pc, #140]	@ (8007e5c <csp_buffer_get+0xb0>)
 8007dd0:	2000      	movs	r0, #0
 8007dd2:	f000 fcad 	bl	8008730 <do_csp_debug>
		return NULL;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	e037      	b.n	8007e4a <csp_buffer_get+0x9e>
	}

	csp_skbf_t * buffer = NULL;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	60fb      	str	r3, [r7, #12]
	csp_queue_dequeue(csp_buffers, &buffer, 0);
 8007dde:	4b20      	ldr	r3, [pc, #128]	@ (8007e60 <csp_buffer_get+0xb4>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f107 010c 	add.w	r1, r7, #12
 8007de6:	2200      	movs	r2, #0
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7ff fe01 	bl	80079f0 <csp_queue_dequeue>
	if (buffer == NULL) {
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d109      	bne.n	8007e08 <csp_buffer_get+0x5c>
		csp_log_error("GET: Out of buffers");
 8007df4:	4b18      	ldr	r3, [pc, #96]	@ (8007e58 <csp_buffer_get+0xac>)
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d003      	beq.n	8007e04 <csp_buffer_get+0x58>
 8007dfc:	4919      	ldr	r1, [pc, #100]	@ (8007e64 <csp_buffer_get+0xb8>)
 8007dfe:	2000      	movs	r0, #0
 8007e00:	f000 fc96 	bl	8008730 <do_csp_debug>
		return NULL;
 8007e04:	2300      	movs	r3, #0
 8007e06:	e020      	b.n	8007e4a <csp_buffer_get+0x9e>
	}

	if (buffer != buffer->skbf_addr) {
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	685a      	ldr	r2, [r3, #4]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d00c      	beq.n	8007e2c <csp_buffer_get+0x80>
		csp_log_error("GET: Corrupt CSP buffer %p != %p", buffer, buffer->skbf_addr);
 8007e12:	4b11      	ldr	r3, [pc, #68]	@ (8007e58 <csp_buffer_get+0xac>)
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d006      	beq.n	8007e28 <csp_buffer_get+0x7c>
 8007e1a:	68fa      	ldr	r2, [r7, #12]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	4911      	ldr	r1, [pc, #68]	@ (8007e68 <csp_buffer_get+0xbc>)
 8007e22:	2000      	movs	r0, #0
 8007e24:	f000 fc84 	bl	8008730 <do_csp_debug>
		return NULL;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	e00e      	b.n	8007e4a <csp_buffer_get+0x9e>
	}

	csp_log_buffer("GET: %p", buffer);
 8007e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8007e58 <csp_buffer_get+0xac>)
 8007e2e:	78db      	ldrb	r3, [r3, #3]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d005      	beq.n	8007e40 <csp_buffer_get+0x94>
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	461a      	mov	r2, r3
 8007e38:	490c      	ldr	r1, [pc, #48]	@ (8007e6c <csp_buffer_get+0xc0>)
 8007e3a:	2003      	movs	r0, #3
 8007e3c:	f000 fc78 	bl	8008730 <do_csp_debug>

	buffer->refcount = 1;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2201      	movs	r2, #1
 8007e44:	601a      	str	r2, [r3, #0]
	return buffer->skbf_data;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	3308      	adds	r3, #8
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	24042bec 	.word	0x24042bec
 8007e58:	2400008c 	.word	0x2400008c
 8007e5c:	08011500 	.word	0x08011500
 8007e60:	24042bc8 	.word	0x24042bc8
 8007e64:	0801153c 	.word	0x0801153c
 8007e68:	08011550 	.word	0x08011550
 8007e6c:	08011574 	.word	0x08011574

08007e70 <csp_buffer_free_isr>:

void csp_buffer_free_isr(void *packet) {
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]

	if (packet == NULL) {
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d023      	beq.n	8007ec6 <csp_buffer_free_isr+0x56>
		// freeing a NULL pointer is OK, e.g. standard free()
		return;
	}

	csp_skbf_t * buf = (void*)(((uint8_t*)packet) - sizeof(csp_skbf_t));
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	3b08      	subs	r3, #8
 8007e82:	60fb      	str	r3, [r7, #12]

	if (((uintptr_t) buf % CSP_BUFFER_ALIGN) > 0) {
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f003 0303 	and.w	r3, r3, #3
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d11d      	bne.n	8007eca <csp_buffer_free_isr+0x5a>
		return;
	}

	if (buf->skbf_addr != buf) {
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	685a      	ldr	r2, [r3, #4]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d11a      	bne.n	8007ece <csp_buffer_free_isr+0x5e>
		return;
	}

	if (buf->refcount == 0) {
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d018      	beq.n	8007ed2 <csp_buffer_free_isr+0x62>
		return;
	}

	if (--(buf->refcount) > 0) {
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	3a01      	subs	r2, #1
 8007ea6:	601a      	str	r2, [r3, #0]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d113      	bne.n	8007ed6 <csp_buffer_free_isr+0x66>
		return;
	}

	CSP_BASE_TYPE task_woken = 0;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	60bb      	str	r3, [r7, #8]
	csp_queue_enqueue_isr(csp_buffers, &buf, &task_woken);
 8007eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8007ee0 <csp_buffer_free_isr+0x70>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f107 0208 	add.w	r2, r7, #8
 8007eba:	f107 010c 	add.w	r1, r7, #12
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7ff fd85 	bl	80079ce <csp_queue_enqueue_isr>
 8007ec4:	e008      	b.n	8007ed8 <csp_buffer_free_isr+0x68>
		return;
 8007ec6:	bf00      	nop
 8007ec8:	e006      	b.n	8007ed8 <csp_buffer_free_isr+0x68>
		return;
 8007eca:	bf00      	nop
 8007ecc:	e004      	b.n	8007ed8 <csp_buffer_free_isr+0x68>
		return;
 8007ece:	bf00      	nop
 8007ed0:	e002      	b.n	8007ed8 <csp_buffer_free_isr+0x68>
		return;
 8007ed2:	bf00      	nop
 8007ed4:	e000      	b.n	8007ed8 <csp_buffer_free_isr+0x68>
		return;
 8007ed6:	bf00      	nop

}
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	24042bc8 	.word	0x24042bc8

08007ee4 <csp_buffer_free>:

void csp_buffer_free(void *packet) {
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]

	if (packet == NULL) {
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d055      	beq.n	8007f9e <csp_buffer_free+0xba>
		/* freeing a NULL pointer is OK, e.g. standard free() */
		return;
	}

	csp_skbf_t * buf = (void*)(((uint8_t*)packet) - sizeof(csp_skbf_t));
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	3b08      	subs	r3, #8
 8007ef6:	60fb      	str	r3, [r7, #12]

	if (((uintptr_t) buf % CSP_BUFFER_ALIGN) > 0) {
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f003 0303 	and.w	r3, r3, #3
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d009      	beq.n	8007f16 <csp_buffer_free+0x32>
		csp_log_error("FREE: Unaligned CSP buffer pointer %p", packet);
 8007f02:	4b2d      	ldr	r3, [pc, #180]	@ (8007fb8 <csp_buffer_free+0xd4>)
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d04b      	beq.n	8007fa2 <csp_buffer_free+0xbe>
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	492b      	ldr	r1, [pc, #172]	@ (8007fbc <csp_buffer_free+0xd8>)
 8007f0e:	2000      	movs	r0, #0
 8007f10:	f000 fc0e 	bl	8008730 <do_csp_debug>
		return;
 8007f14:	e045      	b.n	8007fa2 <csp_buffer_free+0xbe>
	}

	if (buf->skbf_addr != buf) {
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	685a      	ldr	r2, [r3, #4]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d009      	beq.n	8007f34 <csp_buffer_free+0x50>
		csp_log_error("FREE: Invalid CSP buffer pointer %p", packet);
 8007f20:	4b25      	ldr	r3, [pc, #148]	@ (8007fb8 <csp_buffer_free+0xd4>)
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d03e      	beq.n	8007fa6 <csp_buffer_free+0xc2>
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	4925      	ldr	r1, [pc, #148]	@ (8007fc0 <csp_buffer_free+0xdc>)
 8007f2c:	2000      	movs	r0, #0
 8007f2e:	f000 fbff 	bl	8008730 <do_csp_debug>
		return;
 8007f32:	e038      	b.n	8007fa6 <csp_buffer_free+0xc2>
	}

	if (buf->refcount == 0) {
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d10a      	bne.n	8007f52 <csp_buffer_free+0x6e>
		csp_log_error("FREE: Buffer already free %p", buf);
 8007f3c:	4b1e      	ldr	r3, [pc, #120]	@ (8007fb8 <csp_buffer_free+0xd4>)
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d032      	beq.n	8007faa <csp_buffer_free+0xc6>
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	461a      	mov	r2, r3
 8007f48:	491e      	ldr	r1, [pc, #120]	@ (8007fc4 <csp_buffer_free+0xe0>)
 8007f4a:	2000      	movs	r0, #0
 8007f4c:	f000 fbf0 	bl	8008730 <do_csp_debug>
		return;
 8007f50:	e02b      	b.n	8007faa <csp_buffer_free+0xc6>
	}

	if (--(buf->refcount) > 0) {
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	3a01      	subs	r2, #1
 8007f58:	601a      	str	r2, [r3, #0]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00b      	beq.n	8007f78 <csp_buffer_free+0x94>
		csp_log_error("FREE: Buffer %p in use by %u users", buf, buf->refcount);
 8007f60:	4b15      	ldr	r3, [pc, #84]	@ (8007fb8 <csp_buffer_free+0xd4>)
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d022      	beq.n	8007fae <csp_buffer_free+0xca>
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4916      	ldr	r1, [pc, #88]	@ (8007fc8 <csp_buffer_free+0xe4>)
 8007f70:	2000      	movs	r0, #0
 8007f72:	f000 fbdd 	bl	8008730 <do_csp_debug>
		return;
 8007f76:	e01a      	b.n	8007fae <csp_buffer_free+0xca>
	}

	csp_log_buffer("FREE: %p", buf);
 8007f78:	4b0f      	ldr	r3, [pc, #60]	@ (8007fb8 <csp_buffer_free+0xd4>)
 8007f7a:	78db      	ldrb	r3, [r3, #3]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d005      	beq.n	8007f8c <csp_buffer_free+0xa8>
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	461a      	mov	r2, r3
 8007f84:	4911      	ldr	r1, [pc, #68]	@ (8007fcc <csp_buffer_free+0xe8>)
 8007f86:	2003      	movs	r0, #3
 8007f88:	f000 fbd2 	bl	8008730 <do_csp_debug>
	csp_queue_enqueue(csp_buffers, &buf, 0);
 8007f8c:	4b10      	ldr	r3, [pc, #64]	@ (8007fd0 <csp_buffer_free+0xec>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f107 010c 	add.w	r1, r7, #12
 8007f94:	2200      	movs	r2, #0
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7ff fd05 	bl	80079a6 <csp_queue_enqueue>
 8007f9c:	e008      	b.n	8007fb0 <csp_buffer_free+0xcc>
		return;
 8007f9e:	bf00      	nop
 8007fa0:	e006      	b.n	8007fb0 <csp_buffer_free+0xcc>
		return;
 8007fa2:	bf00      	nop
 8007fa4:	e004      	b.n	8007fb0 <csp_buffer_free+0xcc>
		return;
 8007fa6:	bf00      	nop
 8007fa8:	e002      	b.n	8007fb0 <csp_buffer_free+0xcc>
		return;
 8007faa:	bf00      	nop
 8007fac:	e000      	b.n	8007fb0 <csp_buffer_free+0xcc>
		return;
 8007fae:	bf00      	nop

}
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	2400008c 	.word	0x2400008c
 8007fbc:	0801157c 	.word	0x0801157c
 8007fc0:	080115a4 	.word	0x080115a4
 8007fc4:	080115c8 	.word	0x080115c8
 8007fc8:	080115e8 	.word	0x080115e8
 8007fcc:	0801160c 	.word	0x0801160c
 8007fd0:	24042bc8 	.word	0x24042bc8

08007fd4 <csp_buffer_size>:

int csp_buffer_remaining(void) {
	return csp_queue_size(csp_buffers);
}

size_t csp_buffer_size(void) {
 8007fd4:	b480      	push	{r7}
 8007fd6:	af00      	add	r7, sp, #0
	return (csp_conf.buffer_data_size + CSP_BUFFER_PACKET_OVERHEAD);
 8007fd8:	4b03      	ldr	r3, [pc, #12]	@ (8007fe8 <csp_buffer_size+0x14>)
 8007fda:	8b1b      	ldrh	r3, [r3, #24]
 8007fdc:	3310      	adds	r3, #16
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr
 8007fe8:	24042bec 	.word	0x24042bec

08007fec <csp_buffer_data_size>:

size_t csp_buffer_data_size(void) {
 8007fec:	b480      	push	{r7}
 8007fee:	af00      	add	r7, sp, #0
	return csp_conf.buffer_data_size;
 8007ff0:	4b03      	ldr	r3, [pc, #12]	@ (8008000 <csp_buffer_data_size+0x14>)
 8007ff2:	8b1b      	ldrh	r3, [r3, #24]
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	24042bec 	.word	0x24042bec

08008004 <csp_conn_get_rxq>:
		}
	}
#endif
}

int csp_conn_get_rxq(int prio) {
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]

#if (CSP_USE_QOS)
	return prio;
#else
	return 0;
 800800c:	2300      	movs	r3, #0
#endif

}
 800800e:	4618      	mov	r0, r3
 8008010:	370c      	adds	r7, #12
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr
	...

0800801c <csp_conn_enqueue_packet>:

int csp_conn_enqueue_packet(csp_conn_t * conn, csp_packet_t * packet) {
 800801c:	b590      	push	{r4, r7, lr}
 800801e:	b085      	sub	sp, #20
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]

	if (!conn)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d102      	bne.n	8008032 <csp_conn_enqueue_packet+0x16>
		return CSP_ERR_INVAL;
 800802c:	f06f 0301 	mvn.w	r3, #1
 8008030:	e039      	b.n	80080a6 <csp_conn_enqueue_packet+0x8a>

	int rxq;
	if (packet != NULL) {
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d009      	beq.n	800804c <csp_conn_enqueue_packet+0x30>
		rxq = csp_conn_get_rxq(packet->id.pri);
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	7bdb      	ldrb	r3, [r3, #15]
 800803c:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8008040:	b2db      	uxtb	r3, r3
 8008042:	4618      	mov	r0, r3
 8008044:	f7ff ffde 	bl	8008004 <csp_conn_get_rxq>
 8008048:	60f8      	str	r0, [r7, #12]
 800804a:	e001      	b.n	8008050 <csp_conn_enqueue_packet+0x34>
	} else {
		rxq = CSP_RX_QUEUES - 1;
 800804c:	2300      	movs	r3, #0
 800804e:	60fb      	str	r3, [r7, #12]
	}

	if (csp_queue_enqueue(conn->rx_queue[rxq], &packet, 0) != CSP_QUEUE_OK) {
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	3302      	adds	r3, #2
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	4413      	add	r3, r2
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	4639      	mov	r1, r7
 800805e:	2200      	movs	r2, #0
 8008060:	4618      	mov	r0, r3
 8008062:	f7ff fca0 	bl	80079a6 <csp_queue_enqueue>
 8008066:	4603      	mov	r3, r0
 8008068:	2b01      	cmp	r3, #1
 800806a:	d01b      	beq.n	80080a4 <csp_conn_enqueue_packet+0x88>
		csp_log_error("RX queue %p full with %u items", conn->rx_queue[rxq], csp_queue_size(conn->rx_queue[rxq]));
 800806c:	4b10      	ldr	r3, [pc, #64]	@ (80080b0 <csp_conn_enqueue_packet+0x94>)
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d014      	beq.n	800809e <csp_conn_enqueue_packet+0x82>
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	3302      	adds	r3, #2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	4413      	add	r3, r2
 800807e:	685c      	ldr	r4, [r3, #4]
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	3302      	adds	r3, #2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	4413      	add	r3, r2
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	4618      	mov	r0, r3
 800808e:	f7ff fcd2 	bl	8007a36 <csp_queue_size>
 8008092:	4603      	mov	r3, r0
 8008094:	4622      	mov	r2, r4
 8008096:	4907      	ldr	r1, [pc, #28]	@ (80080b4 <csp_conn_enqueue_packet+0x98>)
 8008098:	2000      	movs	r0, #0
 800809a:	f000 fb49 	bl	8008730 <do_csp_debug>
		return CSP_ERR_NOMEM;
 800809e:	f04f 33ff 	mov.w	r3, #4294967295
 80080a2:	e000      	b.n	80080a6 <csp_conn_enqueue_packet+0x8a>
		csp_log_error("QOS event queue full");
		return CSP_ERR_NOMEM;
	}
#endif

	return CSP_ERR_NONE;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3714      	adds	r7, #20
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd90      	pop	{r4, r7, pc}
 80080ae:	bf00      	nop
 80080b0:	2400008c 	.word	0x2400008c
 80080b4:	08011618 	.word	0x08011618

080080b8 <csp_conn_init>:

int csp_conn_init(void) {
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0

	arr_conn = csp_calloc(csp_conf.conn_max, sizeof(*arr_conn));
 80080be:	4b4d      	ldr	r3, [pc, #308]	@ (80081f4 <csp_conn_init+0x13c>)
 80080c0:	7c1b      	ldrb	r3, [r3, #16]
 80080c2:	211c      	movs	r1, #28
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7ff fc2d 	bl	8007924 <csp_calloc>
 80080ca:	4603      	mov	r3, r0
 80080cc:	4a4a      	ldr	r2, [pc, #296]	@ (80081f8 <csp_conn_init+0x140>)
 80080ce:	6013      	str	r3, [r2, #0]
	if (arr_conn == NULL) {
 80080d0:	4b49      	ldr	r3, [pc, #292]	@ (80081f8 <csp_conn_init+0x140>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d10d      	bne.n	80080f4 <csp_conn_init+0x3c>
		csp_log_error("Allocation for %u connections failed", csp_conf.conn_max);
 80080d8:	4b48      	ldr	r3, [pc, #288]	@ (80081fc <csp_conn_init+0x144>)
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d006      	beq.n	80080ee <csp_conn_init+0x36>
 80080e0:	4b44      	ldr	r3, [pc, #272]	@ (80081f4 <csp_conn_init+0x13c>)
 80080e2:	7c1b      	ldrb	r3, [r3, #16]
 80080e4:	461a      	mov	r2, r3
 80080e6:	4946      	ldr	r1, [pc, #280]	@ (8008200 <csp_conn_init+0x148>)
 80080e8:	2000      	movs	r0, #0
 80080ea:	f000 fb21 	bl	8008730 <do_csp_debug>
		return CSP_ERR_NOMEM;
 80080ee:	f04f 33ff 	mov.w	r3, #4294967295
 80080f2:	e07b      	b.n	80081ec <csp_conn_init+0x134>
	}

	if (csp_bin_sem_create(&conn_lock) != CSP_SEMAPHORE_OK) {
 80080f4:	4843      	ldr	r0, [pc, #268]	@ (8008204 <csp_conn_init+0x14c>)
 80080f6:	f7ff fcaa 	bl	8007a4e <csp_bin_sem_create>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d00a      	beq.n	8008116 <csp_conn_init+0x5e>
		csp_log_error("csp_bin_sem_create(&conn_lock) failed");
 8008100:	4b3e      	ldr	r3, [pc, #248]	@ (80081fc <csp_conn_init+0x144>)
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d003      	beq.n	8008110 <csp_conn_init+0x58>
 8008108:	493f      	ldr	r1, [pc, #252]	@ (8008208 <csp_conn_init+0x150>)
 800810a:	2000      	movs	r0, #0
 800810c:	f000 fb10 	bl	8008730 <do_csp_debug>
		return CSP_ERR_NOMEM;
 8008110:	f04f 33ff 	mov.w	r3, #4294967295
 8008114:	e06a      	b.n	80081ec <csp_conn_init+0x134>
	}

	/* Initialize source port */
	srand(csp_get_ms());
 8008116:	f7ff fd87 	bl	8007c28 <csp_get_ms>
 800811a:	4603      	mov	r3, r0
 800811c:	4618      	mov	r0, r3
 800811e:	f007 fbc9 	bl	800f8b4 <srand>
	sport = (rand() % (CSP_ID_PORT_MAX - csp_conf.port_max_bind)) + (csp_conf.port_max_bind + 1);
 8008122:	f007 fbf5 	bl	800f910 <rand>
 8008126:	4602      	mov	r2, r0
 8008128:	4b32      	ldr	r3, [pc, #200]	@ (80081f4 <csp_conn_init+0x13c>)
 800812a:	7cdb      	ldrb	r3, [r3, #19]
 800812c:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8008130:	fb92 f1f3 	sdiv	r1, r2, r3
 8008134:	fb01 f303 	mul.w	r3, r1, r3
 8008138:	1ad3      	subs	r3, r2, r3
 800813a:	b2da      	uxtb	r2, r3
 800813c:	4b2d      	ldr	r3, [pc, #180]	@ (80081f4 <csp_conn_init+0x13c>)
 800813e:	7cdb      	ldrb	r3, [r3, #19]
 8008140:	4413      	add	r3, r2
 8008142:	b2db      	uxtb	r3, r3
 8008144:	3301      	adds	r3, #1
 8008146:	b2da      	uxtb	r2, r3
 8008148:	4b30      	ldr	r3, [pc, #192]	@ (800820c <csp_conn_init+0x154>)
 800814a:	701a      	strb	r2, [r3, #0]

	if (csp_bin_sem_create(&sport_lock) != CSP_SEMAPHORE_OK) {
 800814c:	4830      	ldr	r0, [pc, #192]	@ (8008210 <csp_conn_init+0x158>)
 800814e:	f7ff fc7e 	bl	8007a4e <csp_bin_sem_create>
 8008152:	4603      	mov	r3, r0
 8008154:	2b01      	cmp	r3, #1
 8008156:	d00a      	beq.n	800816e <csp_conn_init+0xb6>
		csp_log_error("csp_bin_sem_create(&sport_lock) failed");
 8008158:	4b28      	ldr	r3, [pc, #160]	@ (80081fc <csp_conn_init+0x144>)
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d003      	beq.n	8008168 <csp_conn_init+0xb0>
 8008160:	492c      	ldr	r1, [pc, #176]	@ (8008214 <csp_conn_init+0x15c>)
 8008162:	2000      	movs	r0, #0
 8008164:	f000 fae4 	bl	8008730 <do_csp_debug>
		return CSP_ERR_NOMEM;
 8008168:	f04f 33ff 	mov.w	r3, #4294967295
 800816c:	e03e      	b.n	80081ec <csp_conn_init+0x134>
	}

	for (int i = 0; i < csp_conf.conn_max; i++) {
 800816e:	2300      	movs	r3, #0
 8008170:	60fb      	str	r3, [r7, #12]
 8008172:	e034      	b.n	80081de <csp_conn_init+0x126>
		csp_conn_t * conn = &arr_conn[i];
 8008174:	4b20      	ldr	r3, [pc, #128]	@ (80081f8 <csp_conn_init+0x140>)
 8008176:	6819      	ldr	r1, [r3, #0]
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	4613      	mov	r3, r2
 800817c:	00db      	lsls	r3, r3, #3
 800817e:	1a9b      	subs	r3, r3, r2
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	440b      	add	r3, r1
 8008184:	607b      	str	r3, [r7, #4]
		for (int prio = 0; prio < CSP_RX_QUEUES; prio++) {
 8008186:	2300      	movs	r3, #0
 8008188:	60bb      	str	r3, [r7, #8]
 800818a:	e022      	b.n	80081d2 <csp_conn_init+0x11a>
			conn->rx_queue[prio] = csp_queue_create(csp_conf.conn_queue_length, sizeof(csp_packet_t *));
 800818c:	4b19      	ldr	r3, [pc, #100]	@ (80081f4 <csp_conn_init+0x13c>)
 800818e:	7c5b      	ldrb	r3, [r3, #17]
 8008190:	2104      	movs	r1, #4
 8008192:	4618      	mov	r0, r3
 8008194:	f7ff fbec 	bl	8007970 <csp_queue_create>
 8008198:	4601      	mov	r1, r0
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	3302      	adds	r3, #2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	6059      	str	r1, [r3, #4]
			if (conn->rx_queue[prio] == NULL) {
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	3302      	adds	r3, #2
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	4413      	add	r3, r2
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d10a      	bne.n	80081cc <csp_conn_init+0x114>
				csp_log_error("rx_queue = csp_queue_create() failed");
 80081b6:	4b11      	ldr	r3, [pc, #68]	@ (80081fc <csp_conn_init+0x144>)
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d003      	beq.n	80081c6 <csp_conn_init+0x10e>
 80081be:	4916      	ldr	r1, [pc, #88]	@ (8008218 <csp_conn_init+0x160>)
 80081c0:	2000      	movs	r0, #0
 80081c2:	f000 fab5 	bl	8008730 <do_csp_debug>
				return CSP_ERR_NOMEM;
 80081c6:	f04f 33ff 	mov.w	r3, #4294967295
 80081ca:	e00f      	b.n	80081ec <csp_conn_init+0x134>
		for (int prio = 0; prio < CSP_RX_QUEUES; prio++) {
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	3301      	adds	r3, #1
 80081d0:	60bb      	str	r3, [r7, #8]
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	ddd9      	ble.n	800818c <csp_conn_init+0xd4>
	for (int i = 0; i < csp_conf.conn_max; i++) {
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	3301      	adds	r3, #1
 80081dc:	60fb      	str	r3, [r7, #12]
 80081de:	4b05      	ldr	r3, [pc, #20]	@ (80081f4 <csp_conn_init+0x13c>)
 80081e0:	7c1b      	ldrb	r3, [r3, #16]
 80081e2:	461a      	mov	r2, r3
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	4293      	cmp	r3, r2
 80081e8:	dbc4      	blt.n	8008174 <csp_conn_init+0xbc>
			return CSP_ERR_NOMEM;
		}
#endif
	}

	return CSP_ERR_NONE;
 80081ea:	2300      	movs	r3, #0

}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3710      	adds	r7, #16
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	24042bec 	.word	0x24042bec
 80081f8:	24042bd0 	.word	0x24042bd0
 80081fc:	2400008c 	.word	0x2400008c
 8008200:	08011638 	.word	0x08011638
 8008204:	24042bd4 	.word	0x24042bd4
 8008208:	08011660 	.word	0x08011660
 800820c:	24042bd8 	.word	0x24042bd8
 8008210:	24042bdc 	.word	0x24042bdc
 8008214:	08011688 	.word	0x08011688
 8008218:	080116b0 	.word	0x080116b0

0800821c <csp_conn_find>:

        sport = 0;
    }
}

csp_conn_t * csp_conn_find(uint32_t id, uint32_t mask) {
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]

	/* Search for matching connection */
	id = (id & mask);
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	4013      	ands	r3, r2
 800822c:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < csp_conf.conn_max; i++) {
 800822e:	2300      	movs	r3, #0
 8008230:	60fb      	str	r3, [r7, #12]
 8008232:	e01c      	b.n	800826e <csp_conn_find+0x52>
		csp_conn_t * conn = &arr_conn[i];
 8008234:	4b14      	ldr	r3, [pc, #80]	@ (8008288 <csp_conn_find+0x6c>)
 8008236:	6819      	ldr	r1, [r3, #0]
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	4613      	mov	r3, r2
 800823c:	00db      	lsls	r3, r3, #3
 800823e:	1a9b      	subs	r3, r3, r2
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	440b      	add	r3, r1
 8008244:	60bb      	str	r3, [r7, #8]
		if ((conn->state == CONN_OPEN) && (conn->type == CONN_CLIENT) && ((conn->idin.ext & mask) == id)) {
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	785b      	ldrb	r3, [r3, #1]
 800824a:	2b01      	cmp	r3, #1
 800824c:	d10c      	bne.n	8008268 <csp_conn_find+0x4c>
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d108      	bne.n	8008268 <csp_conn_find+0x4c>
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	685a      	ldr	r2, [r3, #4]
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	4013      	ands	r3, r2
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	429a      	cmp	r2, r3
 8008262:	d101      	bne.n	8008268 <csp_conn_find+0x4c>
			return conn;
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	e009      	b.n	800827c <csp_conn_find+0x60>
	for (int i = 0; i < csp_conf.conn_max; i++) {
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	3301      	adds	r3, #1
 800826c:	60fb      	str	r3, [r7, #12]
 800826e:	4b07      	ldr	r3, [pc, #28]	@ (800828c <csp_conn_find+0x70>)
 8008270:	7c1b      	ldrb	r3, [r3, #16]
 8008272:	461a      	mov	r2, r3
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	4293      	cmp	r3, r2
 8008278:	dbdc      	blt.n	8008234 <csp_conn_find+0x18>
		}
	}
	
	return NULL;
 800827a:	2300      	movs	r3, #0

}
 800827c:	4618      	mov	r0, r3
 800827e:	3714      	adds	r7, #20
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr
 8008288:	24042bd0 	.word	0x24042bd0
 800828c:	24042bec 	.word	0x24042bec

08008290 <csp_conn_flush_rx_queue>:

static int csp_conn_flush_rx_queue(csp_conn_t * conn) {
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
	csp_packet_t * packet;

	int prio;

	/* Flush packet queues */
	for (prio = 0; prio < CSP_RX_QUEUES; prio++) {
 8008298:	2300      	movs	r3, #0
 800829a:	60fb      	str	r3, [r7, #12]
 800829c:	e018      	b.n	80082d0 <csp_conn_flush_rx_queue+0x40>
		while (csp_queue_dequeue(conn->rx_queue[prio], &packet, 0) == CSP_QUEUE_OK)
			if (packet != NULL)
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d003      	beq.n	80082ac <csp_conn_flush_rx_queue+0x1c>
				csp_buffer_free(packet);
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	4618      	mov	r0, r3
 80082a8:	f7ff fe1c 	bl	8007ee4 <csp_buffer_free>
		while (csp_queue_dequeue(conn->rx_queue[prio], &packet, 0) == CSP_QUEUE_OK)
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	3302      	adds	r3, #2
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	4413      	add	r3, r2
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	f107 0108 	add.w	r1, r7, #8
 80082bc:	2200      	movs	r2, #0
 80082be:	4618      	mov	r0, r3
 80082c0:	f7ff fb96 	bl	80079f0 <csp_queue_dequeue>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d0e9      	beq.n	800829e <csp_conn_flush_rx_queue+0xe>
	for (prio = 0; prio < CSP_RX_QUEUES; prio++) {
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	3301      	adds	r3, #1
 80082ce:	60fb      	str	r3, [r7, #12]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	ddea      	ble.n	80082ac <csp_conn_flush_rx_queue+0x1c>
#if (CSP_USE_QOS)
	int event;
	while (csp_queue_dequeue(conn->rx_event, &event, 0) == CSP_QUEUE_OK);
#endif

	return CSP_ERR_NONE;
 80082d6:	2300      	movs	r3, #0

}
 80082d8:	4618      	mov	r0, r3
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <csp_conn_allocate>:

csp_conn_t * csp_conn_allocate(csp_conn_type_t type) {
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b086      	sub	sp, #24
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	4603      	mov	r3, r0
 80082e8:	71fb      	strb	r3, [r7, #7]

	static uint8_t csp_conn_last_given = 0;

	if (csp_bin_sem_wait(&conn_lock, CSP_MAX_TIMEOUT) != CSP_SEMAPHORE_OK) {
 80082ea:	f04f 31ff 	mov.w	r1, #4294967295
 80082ee:	4838      	ldr	r0, [pc, #224]	@ (80083d0 <csp_conn_allocate+0xf0>)
 80082f0:	f7ff fbca 	bl	8007a88 <csp_bin_sem_wait>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d009      	beq.n	800830e <csp_conn_allocate+0x2e>
		csp_log_error("Failed to lock conn array");
 80082fa:	4b36      	ldr	r3, [pc, #216]	@ (80083d4 <csp_conn_allocate+0xf4>)
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d003      	beq.n	800830a <csp_conn_allocate+0x2a>
 8008302:	4935      	ldr	r1, [pc, #212]	@ (80083d8 <csp_conn_allocate+0xf8>)
 8008304:	2000      	movs	r0, #0
 8008306:	f000 fa13 	bl	8008730 <do_csp_debug>
		return NULL;
 800830a:	2300      	movs	r3, #0
 800830c:	e05b      	b.n	80083c6 <csp_conn_allocate+0xe6>
	}

	/* Search for free connection */
	csp_conn_t * conn = NULL;
 800830e:	2300      	movs	r3, #0
 8008310:	617b      	str	r3, [r7, #20]
	int i = csp_conn_last_given;
 8008312:	4b32      	ldr	r3, [pc, #200]	@ (80083dc <csp_conn_allocate+0xfc>)
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	613b      	str	r3, [r7, #16]
	for (int j = 0; j < csp_conf.conn_max; j++) {
 8008318:	2300      	movs	r3, #0
 800831a:	60fb      	str	r3, [r7, #12]
 800831c:	e019      	b.n	8008352 <csp_conn_allocate+0x72>
		i = (i + 1) % csp_conf.conn_max;
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	3301      	adds	r3, #1
 8008322:	4a2f      	ldr	r2, [pc, #188]	@ (80083e0 <csp_conn_allocate+0x100>)
 8008324:	7c12      	ldrb	r2, [r2, #16]
 8008326:	fb93 f1f2 	sdiv	r1, r3, r2
 800832a:	fb01 f202 	mul.w	r2, r1, r2
 800832e:	1a9b      	subs	r3, r3, r2
 8008330:	613b      	str	r3, [r7, #16]
		conn = &arr_conn[i];
 8008332:	4b2c      	ldr	r3, [pc, #176]	@ (80083e4 <csp_conn_allocate+0x104>)
 8008334:	6819      	ldr	r1, [r3, #0]
 8008336:	693a      	ldr	r2, [r7, #16]
 8008338:	4613      	mov	r3, r2
 800833a:	00db      	lsls	r3, r3, #3
 800833c:	1a9b      	subs	r3, r3, r2
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	440b      	add	r3, r1
 8008342:	617b      	str	r3, [r7, #20]
		if (conn->state == CONN_CLOSED) {
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	785b      	ldrb	r3, [r3, #1]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d009      	beq.n	8008360 <csp_conn_allocate+0x80>
	for (int j = 0; j < csp_conf.conn_max; j++) {
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	3301      	adds	r3, #1
 8008350:	60fb      	str	r3, [r7, #12]
 8008352:	4b23      	ldr	r3, [pc, #140]	@ (80083e0 <csp_conn_allocate+0x100>)
 8008354:	7c1b      	ldrb	r3, [r3, #16]
 8008356:	461a      	mov	r2, r3
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	4293      	cmp	r3, r2
 800835c:	dbdf      	blt.n	800831e <csp_conn_allocate+0x3e>
 800835e:	e000      	b.n	8008362 <csp_conn_allocate+0x82>
			break;
 8008360:	bf00      	nop
		}
	}

	if (conn && (conn->state == CONN_CLOSED)) {
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d01a      	beq.n	800839e <csp_conn_allocate+0xbe>
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	785b      	ldrb	r3, [r3, #1]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d116      	bne.n	800839e <csp_conn_allocate+0xbe>
		conn->idin.ext = 0;
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	2200      	movs	r2, #0
 8008374:	605a      	str	r2, [r3, #4]
		conn->idout.ext = 0;
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	2200      	movs	r2, #0
 800837a:	609a      	str	r2, [r3, #8]
		conn->socket = NULL;
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	2200      	movs	r2, #0
 8008380:	611a      	str	r2, [r3, #16]
		conn->timestamp = 0;
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	2200      	movs	r2, #0
 8008386:	615a      	str	r2, [r3, #20]
		conn->type = type;
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	79fa      	ldrb	r2, [r7, #7]
 800838c:	701a      	strb	r2, [r3, #0]
		conn->state = CONN_OPEN;
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	2201      	movs	r2, #1
 8008392:	705a      	strb	r2, [r3, #1]
		csp_conn_last_given = i;
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	b2da      	uxtb	r2, r3
 8008398:	4b10      	ldr	r3, [pc, #64]	@ (80083dc <csp_conn_allocate+0xfc>)
 800839a:	701a      	strb	r2, [r3, #0]
 800839c:	e001      	b.n	80083a2 <csp_conn_allocate+0xc2>
	} else {
		// no free connections
		conn = NULL;
 800839e:	2300      	movs	r3, #0
 80083a0:	617b      	str	r3, [r7, #20]
	}

	csp_bin_sem_post(&conn_lock);
 80083a2:	480b      	ldr	r0, [pc, #44]	@ (80083d0 <csp_conn_allocate+0xf0>)
 80083a4:	f7ff fb96 	bl	8007ad4 <csp_bin_sem_post>

	if (conn == NULL) {
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d10a      	bne.n	80083c4 <csp_conn_allocate+0xe4>
		csp_log_error("No free connections, max %u", csp_conf.conn_max);
 80083ae:	4b09      	ldr	r3, [pc, #36]	@ (80083d4 <csp_conn_allocate+0xf4>)
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d006      	beq.n	80083c4 <csp_conn_allocate+0xe4>
 80083b6:	4b0a      	ldr	r3, [pc, #40]	@ (80083e0 <csp_conn_allocate+0x100>)
 80083b8:	7c1b      	ldrb	r3, [r3, #16]
 80083ba:	461a      	mov	r2, r3
 80083bc:	490a      	ldr	r1, [pc, #40]	@ (80083e8 <csp_conn_allocate+0x108>)
 80083be:	2000      	movs	r0, #0
 80083c0:	f000 f9b6 	bl	8008730 <do_csp_debug>
	}

	return conn;
 80083c4:	697b      	ldr	r3, [r7, #20]

}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3718      	adds	r7, #24
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	24042bd4 	.word	0x24042bd4
 80083d4:	2400008c 	.word	0x2400008c
 80083d8:	080116d8 	.word	0x080116d8
 80083dc:	24042be0 	.word	0x24042be0
 80083e0:	24042bec 	.word	0x24042bec
 80083e4:	24042bd0 	.word	0x24042bd0
 80083e8:	080116f4 	.word	0x080116f4

080083ec <csp_conn_new>:

csp_conn_t * csp_conn_new(csp_id_t idin, csp_id_t idout) {
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]

	/* Allocate connection structure */
	csp_conn_t * conn = csp_conn_allocate(CONN_CLIENT);
 80083f6:	2000      	movs	r0, #0
 80083f8:	f7ff ff72 	bl	80082e0 <csp_conn_allocate>
 80083fc:	60f8      	str	r0, [r7, #12]

	if (conn) {
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d00d      	beq.n	8008420 <csp_conn_new+0x34>
		/* No lock is needed here, because nobody else *
		 * has a reference to this connection yet.     */
		conn->idin.ext = idin.ext;
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	605a      	str	r2, [r3, #4]
		conn->idout.ext = idout.ext;
 800840a:	683a      	ldr	r2, [r7, #0]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	609a      	str	r2, [r3, #8]
		conn->timestamp = csp_get_ms();
 8008410:	f7ff fc0a 	bl	8007c28 <csp_get_ms>
 8008414:	4602      	mov	r2, r0
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	615a      	str	r2, [r3, #20]

		/* Ensure connection queue is empty */
		csp_conn_flush_rx_queue(conn);
 800841a:	68f8      	ldr	r0, [r7, #12]
 800841c:	f7ff ff38 	bl	8008290 <csp_conn_flush_rx_queue>
	}

	return conn;
 8008420:	68fb      	ldr	r3, [r7, #12]

}
 8008422:	4618      	mov	r0, r3
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <csp_close>:

int csp_close(csp_conn_t * conn) {
 800842a:	b580      	push	{r7, lr}
 800842c:	b082      	sub	sp, #8
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
    return csp_conn_close(conn, CSP_RDP_CLOSED_BY_USERSPACE);
 8008432:	2101      	movs	r1, #1
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 f805 	bl	8008444 <csp_conn_close>
 800843a:	4603      	mov	r3, r0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3708      	adds	r7, #8
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <csp_conn_close>:

int csp_conn_close(csp_conn_t * conn, uint8_t closed_by) {
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	460b      	mov	r3, r1
 800844e:	70fb      	strb	r3, [r7, #3]

	if (conn == NULL) {
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d101      	bne.n	800845a <csp_conn_close+0x16>
		return CSP_ERR_NONE;
 8008456:	2300      	movs	r3, #0
 8008458:	e040      	b.n	80084dc <csp_conn_close+0x98>
	}

	if (conn->state == CONN_CLOSED) {
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	785b      	ldrb	r3, [r3, #1]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d109      	bne.n	8008476 <csp_conn_close+0x32>
		csp_log_protocol("Conn already closed");
 8008462:	4b20      	ldr	r3, [pc, #128]	@ (80084e4 <csp_conn_close+0xa0>)
 8008464:	795b      	ldrb	r3, [r3, #5]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d003      	beq.n	8008472 <csp_conn_close+0x2e>
 800846a:	491f      	ldr	r1, [pc, #124]	@ (80084e8 <csp_conn_close+0xa4>)
 800846c:	2005      	movs	r0, #5
 800846e:	f000 f95f 	bl	8008730 <do_csp_debug>
		return CSP_ERR_NONE;
 8008472:	2300      	movs	r3, #0
 8008474:	e032      	b.n	80084dc <csp_conn_close+0x98>
		}
	}
#endif

	/* Lock connection array while closing connection */
	if (csp_bin_sem_wait(&conn_lock, CSP_MAX_TIMEOUT) != CSP_SEMAPHORE_OK) {
 8008476:	f04f 31ff 	mov.w	r1, #4294967295
 800847a:	481c      	ldr	r0, [pc, #112]	@ (80084ec <csp_conn_close+0xa8>)
 800847c:	f7ff fb04 	bl	8007a88 <csp_bin_sem_wait>
 8008480:	4603      	mov	r3, r0
 8008482:	2b01      	cmp	r3, #1
 8008484:	d00a      	beq.n	800849c <csp_conn_close+0x58>
		csp_log_error("Failed to lock conn array");
 8008486:	4b17      	ldr	r3, [pc, #92]	@ (80084e4 <csp_conn_close+0xa0>)
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d003      	beq.n	8008496 <csp_conn_close+0x52>
 800848e:	4918      	ldr	r1, [pc, #96]	@ (80084f0 <csp_conn_close+0xac>)
 8008490:	2000      	movs	r0, #0
 8008492:	f000 f94d 	bl	8008730 <do_csp_debug>
		return CSP_ERR_TIMEDOUT;
 8008496:	f06f 0302 	mvn.w	r3, #2
 800849a:	e01f      	b.n	80084dc <csp_conn_close+0x98>
	}

	/* Set to closed */
	conn->state = CONN_CLOSED;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	705a      	strb	r2, [r3, #1]

	/* Ensure connection queue is empty */
	csp_conn_flush_rx_queue(conn);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f7ff fef4 	bl	8008290 <csp_conn_flush_rx_queue>

        if (conn->socket && (conn->type == CONN_SERVER) && (conn->opts & (CSP_SO_CONN_LESS | CSP_SO_INTERNAL_LISTEN))) {
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	691b      	ldr	r3, [r3, #16]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d011      	beq.n	80084d4 <csp_conn_close+0x90>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d10d      	bne.n	80084d4 <csp_conn_close+0x90>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	f403 5388 	and.w	r3, r3, #4352	@ 0x1100
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d007      	beq.n	80084d4 <csp_conn_close+0x90>
		csp_queue_remove(conn->socket);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	4618      	mov	r0, r3
 80084ca:	f7ff fa61 	bl	8007990 <csp_queue_remove>
		conn->socket = NULL;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	611a      	str	r2, [r3, #16]
		csp_rdp_flush_all(conn);
	}
#endif

	/* Unlock connection array */
	csp_bin_sem_post(&conn_lock);
 80084d4:	4805      	ldr	r0, [pc, #20]	@ (80084ec <csp_conn_close+0xa8>)
 80084d6:	f7ff fafd 	bl	8007ad4 <csp_bin_sem_post>

	return CSP_ERR_NONE;
 80084da:	2300      	movs	r3, #0
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	2400008c 	.word	0x2400008c
 80084e8:	08011710 	.word	0x08011710
 80084ec:	24042bd4 	.word	0x24042bd4
 80084f0:	080116d8 	.word	0x080116d8

080084f4 <csp_connect>:

csp_conn_t * csp_connect(uint8_t prio, uint8_t dest, uint8_t dport, uint32_t timeout, uint32_t opts) {
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b086      	sub	sp, #24
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	603b      	str	r3, [r7, #0]
 80084fc:	4603      	mov	r3, r0
 80084fe:	71fb      	strb	r3, [r7, #7]
 8008500:	460b      	mov	r3, r1
 8008502:	71bb      	strb	r3, [r7, #6]
 8008504:	4613      	mov	r3, r2
 8008506:	717b      	strb	r3, [r7, #5]

	/* Force options on all connections */
	opts |= csp_conf.conn_dfl_so;
 8008508:	4b72      	ldr	r3, [pc, #456]	@ (80086d4 <csp_connect+0x1e0>)
 800850a:	69db      	ldr	r3, [r3, #28]
 800850c:	6a3a      	ldr	r2, [r7, #32]
 800850e:	4313      	orrs	r3, r2
 8008510:	623b      	str	r3, [r7, #32]

	/* Generate identifier */
	csp_id_t incoming_id, outgoing_id;
	incoming_id.pri = prio;
 8008512:	79fb      	ldrb	r3, [r7, #7]
 8008514:	f003 0303 	and.w	r3, r3, #3
 8008518:	b2da      	uxtb	r2, r3
 800851a:	7bfb      	ldrb	r3, [r7, #15]
 800851c:	f362 1387 	bfi	r3, r2, #6, #2
 8008520:	73fb      	strb	r3, [r7, #15]
	incoming_id.dst = csp_conf.address;
 8008522:	4b6c      	ldr	r3, [pc, #432]	@ (80086d4 <csp_connect+0x1e0>)
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	f003 031f 	and.w	r3, r3, #31
 800852a:	b2da      	uxtb	r2, r3
 800852c:	89fb      	ldrh	r3, [r7, #14]
 800852e:	f362 1308 	bfi	r3, r2, #4, #5
 8008532:	81fb      	strh	r3, [r7, #14]
	incoming_id.src = dest;
 8008534:	79bb      	ldrb	r3, [r7, #6]
 8008536:	f003 031f 	and.w	r3, r3, #31
 800853a:	b2da      	uxtb	r2, r3
 800853c:	7bfb      	ldrb	r3, [r7, #15]
 800853e:	f362 0345 	bfi	r3, r2, #1, #5
 8008542:	73fb      	strb	r3, [r7, #15]
	incoming_id.sport = dport;
 8008544:	797b      	ldrb	r3, [r7, #5]
 8008546:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800854a:	b2da      	uxtb	r2, r3
 800854c:	7b7b      	ldrb	r3, [r7, #13]
 800854e:	f362 0305 	bfi	r3, r2, #0, #6
 8008552:	737b      	strb	r3, [r7, #13]
	incoming_id.flags = 0;
 8008554:	2300      	movs	r3, #0
 8008556:	733b      	strb	r3, [r7, #12]
	outgoing_id.pri = prio;
 8008558:	79fb      	ldrb	r3, [r7, #7]
 800855a:	f003 0303 	and.w	r3, r3, #3
 800855e:	b2da      	uxtb	r2, r3
 8008560:	7afb      	ldrb	r3, [r7, #11]
 8008562:	f362 1387 	bfi	r3, r2, #6, #2
 8008566:	72fb      	strb	r3, [r7, #11]
	outgoing_id.dst = dest;
 8008568:	79bb      	ldrb	r3, [r7, #6]
 800856a:	f003 031f 	and.w	r3, r3, #31
 800856e:	b2da      	uxtb	r2, r3
 8008570:	897b      	ldrh	r3, [r7, #10]
 8008572:	f362 1308 	bfi	r3, r2, #4, #5
 8008576:	817b      	strh	r3, [r7, #10]
	outgoing_id.src = csp_conf.address;
 8008578:	4b56      	ldr	r3, [pc, #344]	@ (80086d4 <csp_connect+0x1e0>)
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	f003 031f 	and.w	r3, r3, #31
 8008580:	b2da      	uxtb	r2, r3
 8008582:	7afb      	ldrb	r3, [r7, #11]
 8008584:	f362 0345 	bfi	r3, r2, #1, #5
 8008588:	72fb      	strb	r3, [r7, #11]
	outgoing_id.dport = dport;
 800858a:	797b      	ldrb	r3, [r7, #5]
 800858c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008590:	b2da      	uxtb	r2, r3
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	f362 3393 	bfi	r3, r2, #14, #6
 8008598:	60bb      	str	r3, [r7, #8]
	outgoing_id.flags = 0;
 800859a:	2300      	movs	r3, #0
 800859c:	723b      	strb	r3, [r7, #8]

	/* Set connection options */
	if (opts & CSP_O_NOCRC32) {
 800859e:	6a3b      	ldr	r3, [r7, #32]
 80085a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d003      	beq.n	80085b0 <csp_connect+0xbc>
		opts &= ~CSP_O_CRC32;
 80085a8:	6a3b      	ldr	r3, [r7, #32]
 80085aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085ae:	623b      	str	r3, [r7, #32]
	}

	if (opts & CSP_O_RDP) {
 80085b0:	6a3b      	ldr	r3, [r7, #32]
 80085b2:	f003 0301 	and.w	r3, r3, #1
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d009      	beq.n	80085ce <csp_connect+0xda>
#if (CSP_USE_RDP)
		incoming_id.flags |= CSP_FRDP;
		outgoing_id.flags |= CSP_FRDP;
#else
		csp_log_error("Attempt to create RDP connection, but CSP was compiled without RDP support");
 80085ba:	4b47      	ldr	r3, [pc, #284]	@ (80086d8 <csp_connect+0x1e4>)
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d003      	beq.n	80085ca <csp_connect+0xd6>
 80085c2:	4946      	ldr	r1, [pc, #280]	@ (80086dc <csp_connect+0x1e8>)
 80085c4:	2000      	movs	r0, #0
 80085c6:	f000 f8b3 	bl	8008730 <do_csp_debug>
		return NULL;
 80085ca:	2300      	movs	r3, #0
 80085cc:	e07e      	b.n	80086cc <csp_connect+0x1d8>
#endif
	}

	if (opts & CSP_O_HMAC) {
 80085ce:	6a3b      	ldr	r3, [r7, #32]
 80085d0:	f003 0304 	and.w	r3, r3, #4
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d009      	beq.n	80085ec <csp_connect+0xf8>
#if (CSP_USE_HMAC)
		outgoing_id.flags |= CSP_FHMAC;
		incoming_id.flags |= CSP_FHMAC;
#else
		csp_log_error("Attempt to create HMAC authenticated connection, but CSP was compiled without HMAC support");
 80085d8:	4b3f      	ldr	r3, [pc, #252]	@ (80086d8 <csp_connect+0x1e4>)
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d003      	beq.n	80085e8 <csp_connect+0xf4>
 80085e0:	493f      	ldr	r1, [pc, #252]	@ (80086e0 <csp_connect+0x1ec>)
 80085e2:	2000      	movs	r0, #0
 80085e4:	f000 f8a4 	bl	8008730 <do_csp_debug>
		return NULL;
 80085e8:	2300      	movs	r3, #0
 80085ea:	e06f      	b.n	80086cc <csp_connect+0x1d8>
#endif
	}

	if (opts & CSP_O_XTEA) {
 80085ec:	6a3b      	ldr	r3, [r7, #32]
 80085ee:	f003 0310 	and.w	r3, r3, #16
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d009      	beq.n	800860a <csp_connect+0x116>
#if (CSP_USE_XTEA)
		outgoing_id.flags |= CSP_FXTEA;
		incoming_id.flags |= CSP_FXTEA;
#else
		csp_log_error("Attempt to create XTEA encrypted connection, but CSP was compiled without XTEA support");
 80085f6:	4b38      	ldr	r3, [pc, #224]	@ (80086d8 <csp_connect+0x1e4>)
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d003      	beq.n	8008606 <csp_connect+0x112>
 80085fe:	4939      	ldr	r1, [pc, #228]	@ (80086e4 <csp_connect+0x1f0>)
 8008600:	2000      	movs	r0, #0
 8008602:	f000 f895 	bl	8008730 <do_csp_debug>
		return NULL;
 8008606:	2300      	movs	r3, #0
 8008608:	e060      	b.n	80086cc <csp_connect+0x1d8>
#endif
	}

	if (opts & CSP_O_CRC32) {
 800860a:	6a3b      	ldr	r3, [r7, #32]
 800860c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008610:	2b00      	cmp	r3, #0
 8008612:	d009      	beq.n	8008628 <csp_connect+0x134>
#if (CSP_USE_CRC32)
		outgoing_id.flags |= CSP_FCRC32;
		incoming_id.flags |= CSP_FCRC32;
#else
		csp_log_error("Attempt to create CRC32 validated connection, but CSP was compiled without CRC32 support");
 8008614:	4b30      	ldr	r3, [pc, #192]	@ (80086d8 <csp_connect+0x1e4>)
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d003      	beq.n	8008624 <csp_connect+0x130>
 800861c:	4932      	ldr	r1, [pc, #200]	@ (80086e8 <csp_connect+0x1f4>)
 800861e:	2000      	movs	r0, #0
 8008620:	f000 f886 	bl	8008730 <do_csp_debug>
		return NULL;
 8008624:	2300      	movs	r3, #0
 8008626:	e051      	b.n	80086cc <csp_connect+0x1d8>
#endif
	}

	/* Find an unused ephemeral port */
	csp_conn_t * conn = NULL;
 8008628:	2300      	movs	r3, #0
 800862a:	617b      	str	r3, [r7, #20]

	/* Wait for sport lock - note that csp_conn_new(..) is called inside the lock! */
	if (csp_bin_sem_wait(&sport_lock, CSP_MAX_TIMEOUT) != CSP_SEMAPHORE_OK) {
 800862c:	f04f 31ff 	mov.w	r1, #4294967295
 8008630:	482e      	ldr	r0, [pc, #184]	@ (80086ec <csp_connect+0x1f8>)
 8008632:	f7ff fa29 	bl	8007a88 <csp_bin_sem_wait>
 8008636:	4603      	mov	r3, r0
 8008638:	2b01      	cmp	r3, #1
 800863a:	d001      	beq.n	8008640 <csp_connect+0x14c>
		return NULL;
 800863c:	2300      	movs	r3, #0
 800863e:	e045      	b.n	80086cc <csp_connect+0x1d8>
	}

	const uint8_t start = sport;
 8008640:	4b2b      	ldr	r3, [pc, #172]	@ (80086f0 <csp_connect+0x1fc>)
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	74fb      	strb	r3, [r7, #19]
	while (++sport != start) {
 8008646:	e02a      	b.n	800869e <csp_connect+0x1aa>
		if (sport > CSP_ID_PORT_MAX)
 8008648:	4b29      	ldr	r3, [pc, #164]	@ (80086f0 <csp_connect+0x1fc>)
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	2b3f      	cmp	r3, #63	@ 0x3f
 800864e:	d905      	bls.n	800865c <csp_connect+0x168>
			sport = csp_conf.port_max_bind + 1;
 8008650:	4b20      	ldr	r3, [pc, #128]	@ (80086d4 <csp_connect+0x1e0>)
 8008652:	7cdb      	ldrb	r3, [r3, #19]
 8008654:	3301      	adds	r3, #1
 8008656:	b2da      	uxtb	r2, r3
 8008658:	4b25      	ldr	r3, [pc, #148]	@ (80086f0 <csp_connect+0x1fc>)
 800865a:	701a      	strb	r2, [r3, #0]

		outgoing_id.sport = sport;
 800865c:	4b24      	ldr	r3, [pc, #144]	@ (80086f0 <csp_connect+0x1fc>)
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008664:	b2da      	uxtb	r2, r3
 8008666:	7a7b      	ldrb	r3, [r7, #9]
 8008668:	f362 0305 	bfi	r3, r2, #0, #6
 800866c:	727b      	strb	r3, [r7, #9]
		incoming_id.dport = sport;
 800866e:	4b20      	ldr	r3, [pc, #128]	@ (80086f0 <csp_connect+0x1fc>)
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008676:	b2da      	uxtb	r2, r3
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f362 3393 	bfi	r3, r2, #14, #6
 800867e:	60fb      	str	r3, [r7, #12]

		/* Match on destination port of _incoming_ identifier */
		if (csp_conn_find(incoming_id.ext, CSP_ID_DPORT_MASK) == NULL) {
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f44f 217c 	mov.w	r1, #1032192	@ 0xfc000
 8008686:	4618      	mov	r0, r3
 8008688:	f7ff fdc8 	bl	800821c <csp_conn_find>
 800868c:	4603      	mov	r3, r0
 800868e:	2b00      	cmp	r3, #0
 8008690:	d105      	bne.n	800869e <csp_connect+0x1aa>
			/* Break - we found an unused ephemeral port
                           allocate connection while locked to mark port in use */
			conn = csp_conn_new(incoming_id, outgoing_id);
 8008692:	68b9      	ldr	r1, [r7, #8]
 8008694:	68f8      	ldr	r0, [r7, #12]
 8008696:	f7ff fea9 	bl	80083ec <csp_conn_new>
 800869a:	6178      	str	r0, [r7, #20]
			break;
 800869c:	e00a      	b.n	80086b4 <csp_connect+0x1c0>
	while (++sport != start) {
 800869e:	4b14      	ldr	r3, [pc, #80]	@ (80086f0 <csp_connect+0x1fc>)
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	3301      	adds	r3, #1
 80086a4:	b2da      	uxtb	r2, r3
 80086a6:	4b12      	ldr	r3, [pc, #72]	@ (80086f0 <csp_connect+0x1fc>)
 80086a8:	701a      	strb	r2, [r3, #0]
 80086aa:	4b11      	ldr	r3, [pc, #68]	@ (80086f0 <csp_connect+0x1fc>)
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	7cfa      	ldrb	r2, [r7, #19]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d1c9      	bne.n	8008648 <csp_connect+0x154>
		}
	}

	/* Post sport lock */
	csp_bin_sem_post(&sport_lock);
 80086b4:	480d      	ldr	r0, [pc, #52]	@ (80086ec <csp_connect+0x1f8>)
 80086b6:	f7ff fa0d 	bl	8007ad4 <csp_bin_sem_post>

	if (conn == NULL) {
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d101      	bne.n	80086c4 <csp_connect+0x1d0>
		return NULL;
 80086c0:	2300      	movs	r3, #0
 80086c2:	e003      	b.n	80086cc <csp_connect+0x1d8>
	}

	/* Set connection options */
	conn->opts = opts;
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	6a3a      	ldr	r2, [r7, #32]
 80086c8:	619a      	str	r2, [r3, #24]
		}
	}
#endif

	/* We have a successful connection */
	return conn;
 80086ca:	697b      	ldr	r3, [r7, #20]

}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3718      	adds	r7, #24
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	24042bec 	.word	0x24042bec
 80086d8:	2400008c 	.word	0x2400008c
 80086dc:	08011724 	.word	0x08011724
 80086e0:	08011770 	.word	0x08011770
 80086e4:	080117cc 	.word	0x080117cc
 80086e8:	08011824 	.word	0x08011824
 80086ec:	24042bdc 	.word	0x24042bdc
 80086f0:	24042bd8 	.word	0x24042bd8

080086f4 <csp_conn_dport>:

int csp_conn_dport(csp_conn_t * conn) {
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]

	return conn->idin.dport;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	f3c3 3385 	ubfx	r3, r3, #14, #6
 8008704:	b2db      	uxtb	r3, r3

}
 8008706:	4618      	mov	r0, r3
 8008708:	370c      	adds	r7, #12
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr

08008712 <csp_conn_src>:

	return conn->idin.dst;

}

int csp_conn_src(csp_conn_t * conn) {
 8008712:	b480      	push	{r7}
 8008714:	b083      	sub	sp, #12
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]

	return conn->idin.src;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	79db      	ldrb	r3, [r3, #7]
 800871e:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8008722:	b2db      	uxtb	r3, r3

}
 8008724:	4618      	mov	r0, r3
 8008726:	370c      	adds	r7, #12
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <do_csp_debug>:
void csp_debug_hook_set(csp_debug_hook_func_t f) {

	csp_debug_hook_func = f;
}

void do_csp_debug(csp_debug_level_t level, const char *format, ...) {
 8008730:	b40e      	push	{r1, r2, r3}
 8008732:	b580      	push	{r7, lr}
 8008734:	b085      	sub	sp, #20
 8008736:	af00      	add	r7, sp, #0
 8008738:	4603      	mov	r3, r0
 800873a:	71fb      	strb	r3, [r7, #7]

	int color = COLOR_RESET;
 800873c:	23f0      	movs	r3, #240	@ 0xf0
 800873e:	60fb      	str	r3, [r7, #12]
	va_list args;

	/* Don't print anything if log level is disabled */
	if (level > CSP_LOCK || !csp_debug_level_enabled[level])
 8008740:	79fb      	ldrb	r3, [r7, #7]
 8008742:	2b06      	cmp	r3, #6
 8008744:	d84f      	bhi.n	80087e6 <do_csp_debug+0xb6>
 8008746:	79fb      	ldrb	r3, [r7, #7]
 8008748:	4a2b      	ldr	r2, [pc, #172]	@ (80087f8 <do_csp_debug+0xc8>)
 800874a:	5cd3      	ldrb	r3, [r2, r3]
 800874c:	f083 0301 	eor.w	r3, r3, #1
 8008750:	b2db      	uxtb	r3, r3
 8008752:	2b00      	cmp	r3, #0
 8008754:	d147      	bne.n	80087e6 <do_csp_debug+0xb6>
		return;

	switch(level) {
 8008756:	79fb      	ldrb	r3, [r7, #7]
 8008758:	2b06      	cmp	r3, #6
 800875a:	d846      	bhi.n	80087ea <do_csp_debug+0xba>
 800875c:	a201      	add	r2, pc, #4	@ (adr r2, 8008764 <do_csp_debug+0x34>)
 800875e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008762:	bf00      	nop
 8008764:	08008787 	.word	0x08008787
 8008768:	0800878d 	.word	0x0800878d
 800876c:	08008781 	.word	0x08008781
 8008770:	08008793 	.word	0x08008793
 8008774:	08008799 	.word	0x08008799
 8008778:	0800879f 	.word	0x0800879f
 800877c:	080087a5 	.word	0x080087a5
	case CSP_INFO:
		color = COLOR_GREEN | COLOR_BOLD;
 8008780:	2313      	movs	r3, #19
 8008782:	60fb      	str	r3, [r7, #12]
		break;
 8008784:	e011      	b.n	80087aa <do_csp_debug+0x7a>
	case CSP_ERROR:
		color = COLOR_RED | COLOR_BOLD;
 8008786:	2312      	movs	r3, #18
 8008788:	60fb      	str	r3, [r7, #12]
		break;
 800878a:	e00e      	b.n	80087aa <do_csp_debug+0x7a>
	case CSP_WARN:
		color = COLOR_YELLOW | COLOR_BOLD;
 800878c:	2314      	movs	r3, #20
 800878e:	60fb      	str	r3, [r7, #12]
		break;
 8008790:	e00b      	b.n	80087aa <do_csp_debug+0x7a>
	case CSP_BUFFER:
		color = COLOR_MAGENTA;
 8008792:	2306      	movs	r3, #6
 8008794:	60fb      	str	r3, [r7, #12]
		break;
 8008796:	e008      	b.n	80087aa <do_csp_debug+0x7a>
	case CSP_PACKET:
		color = COLOR_GREEN;
 8008798:	2303      	movs	r3, #3
 800879a:	60fb      	str	r3, [r7, #12]
		break;
 800879c:	e005      	b.n	80087aa <do_csp_debug+0x7a>
	case CSP_PROTOCOL:
		color = COLOR_BLUE;
 800879e:	2305      	movs	r3, #5
 80087a0:	60fb      	str	r3, [r7, #12]
		break;
 80087a2:	e002      	b.n	80087aa <do_csp_debug+0x7a>
	case CSP_LOCK:
		color = COLOR_CYAN;
 80087a4:	2307      	movs	r3, #7
 80087a6:	60fb      	str	r3, [r7, #12]
		break;
 80087a8:	bf00      	nop
	default:
		return;
	}

	va_start(args, format);
 80087aa:	f107 0320 	add.w	r3, r7, #32
 80087ae:	60bb      	str	r3, [r7, #8]

	/* If csp_debug_hook symbol is defined, pass on the message.
	 * Otherwise, just print with pretty colors ... */
	if (csp_debug_hook_func) {
 80087b0:	4b12      	ldr	r3, [pc, #72]	@ (80087fc <do_csp_debug+0xcc>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d006      	beq.n	80087c6 <do_csp_debug+0x96>
		csp_debug_hook_func(level, format, args);
 80087b8:	4b10      	ldr	r3, [pc, #64]	@ (80087fc <do_csp_debug+0xcc>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	79f8      	ldrb	r0, [r7, #7]
 80087be:	68ba      	ldr	r2, [r7, #8]
 80087c0:	69f9      	ldr	r1, [r7, #28]
 80087c2:	4798      	blx	r3
 80087c4:	e012      	b.n	80087ec <do_csp_debug+0xbc>
	} else {
		csp_sys_set_color(color);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7ff f9a4 	bl	8007b18 <csp_sys_set_color>
                printf("%u.%06u ", ts.tv_sec, ts.tv_nsec / 1000U);
#endif
#ifdef __AVR__
		vfprintf_P(stdout, format, args);
#else
		vprintf(format, args);
 80087d0:	68b9      	ldr	r1, [r7, #8]
 80087d2:	69f8      	ldr	r0, [r7, #28]
 80087d4:	f007 fb2c 	bl	800fe30 <viprintf>
#endif
		printf("\r\n");
 80087d8:	4809      	ldr	r0, [pc, #36]	@ (8008800 <do_csp_debug+0xd0>)
 80087da:	f007 fa85 	bl	800fce8 <puts>
		csp_sys_set_color(COLOR_RESET);
 80087de:	20f0      	movs	r0, #240	@ 0xf0
 80087e0:	f7ff f99a 	bl	8007b18 <csp_sys_set_color>
 80087e4:	e002      	b.n	80087ec <do_csp_debug+0xbc>
		return;
 80087e6:	bf00      	nop
 80087e8:	e000      	b.n	80087ec <do_csp_debug+0xbc>
		return;
 80087ea:	bf00      	nop
	}

	va_end(args);
}
 80087ec:	3714      	adds	r7, #20
 80087ee:	46bd      	mov	sp, r7
 80087f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80087f4:	b003      	add	sp, #12
 80087f6:	4770      	bx	lr
 80087f8:	2400008c 	.word	0x2400008c
 80087fc:	24042be4 	.word	0x24042be4
 8008800:	080118e0 	.word	0x080118e0

08008804 <csp_hton16>:
*/

#include <csp/csp_endian.h>

/* Convert 16-bit number from host byte order to network byte order */
inline uint16_t __attribute__ ((__const__)) csp_hton16(uint16_t h16) {
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	4603      	mov	r3, r0
 800880c:	80fb      	strh	r3, [r7, #6]
#if (CSP_BIG_ENDIAN)
	return h16;
#else
	return (((h16 & 0xff00) >> 8) |
 800880e:	88fb      	ldrh	r3, [r7, #6]
 8008810:	0a1b      	lsrs	r3, r3, #8
 8008812:	b29b      	uxth	r3, r3
 8008814:	b21a      	sxth	r2, r3
 8008816:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800881a:	021b      	lsls	r3, r3, #8
 800881c:	b21b      	sxth	r3, r3
 800881e:	4313      	orrs	r3, r2
 8008820:	b21b      	sxth	r3, r3
 8008822:	b29b      	uxth	r3, r3
			((h16 & 0x00ff) << 8));
#endif
}
 8008824:	4618      	mov	r0, r3
 8008826:	370c      	adds	r7, #12
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr

08008830 <csp_ntoh16>:

/* Convert 16-bit number from network byte order to host byte order */
inline uint16_t __attribute__ ((__const__)) csp_ntoh16(uint16_t n16) {
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	4603      	mov	r3, r0
 8008838:	80fb      	strh	r3, [r7, #6]
	return csp_hton16(n16);
 800883a:	88fb      	ldrh	r3, [r7, #6]
 800883c:	4618      	mov	r0, r3
 800883e:	f7ff ffe1 	bl	8008804 <csp_hton16>
 8008842:	4603      	mov	r3, r0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3708      	adds	r7, #8
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <csp_hton32>:

/* Convert 32-bit number from host byte order to network byte order */
inline uint32_t __attribute__ ((__const__)) csp_hton32(uint32_t h32) {
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
#if (CSP_BIG_ENDIAN)
	return h32;
#else
	return (((h32 & 0xff000000) >> 24) |
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	0e1a      	lsrs	r2, r3, #24
			((h32 & 0x000000ff) << 24) |
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	061b      	lsls	r3, r3, #24
	return (((h32 & 0xff000000) >> 24) |
 800885c:	431a      	orrs	r2, r3
			((h32 & 0x0000ff00) <<  8) |
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	021b      	lsls	r3, r3, #8
 8008862:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
			((h32 & 0x000000ff) << 24) |
 8008866:	431a      	orrs	r2, r3
			((h32 & 0x00ff0000) >>  8));
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	0a1b      	lsrs	r3, r3, #8
 800886c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
			((h32 & 0x0000ff00) <<  8) |
 8008870:	4313      	orrs	r3, r2
#endif
}
 8008872:	4618      	mov	r0, r3
 8008874:	370c      	adds	r7, #12
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr

0800887e <csp_ntoh32>:

/* Convert 32-bit number from network byte order to host byte order */
inline uint32_t __attribute__ ((__const__)) csp_ntoh32(uint32_t n32) {
 800887e:	b580      	push	{r7, lr}
 8008880:	b082      	sub	sp, #8
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
	return csp_hton32(n32);
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f7ff ffe0 	bl	800884c <csp_hton32>
 800888c:	4603      	mov	r3, r0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
	...

08008898 <csp_iflist_add>:
		ifc = ifc->next;
	}
	return ifc;
}

int csp_iflist_add(csp_iface_t *ifc) {
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]

	ifc->next = NULL;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	63da      	str	r2, [r3, #60]	@ 0x3c

	/* Add interface to pool */
	if (interfaces == NULL) {
 80088a6:	4b18      	ldr	r3, [pc, #96]	@ (8008908 <csp_iflist_add+0x70>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d103      	bne.n	80088b6 <csp_iflist_add+0x1e>
		/* This is the first interface to be added */
		interfaces = ifc;
 80088ae:	4a16      	ldr	r2, [pc, #88]	@ (8008908 <csp_iflist_add+0x70>)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6013      	str	r3, [r2, #0]
 80088b4:	e022      	b.n	80088fc <csp_iflist_add+0x64>
	} else {
		/* Insert interface last if not already in pool */
		csp_iface_t * last = NULL;
 80088b6:	2300      	movs	r3, #0
 80088b8:	60fb      	str	r3, [r7, #12]
		for (csp_iface_t * i = interfaces; i != NULL; i = i->next) {
 80088ba:	4b13      	ldr	r3, [pc, #76]	@ (8008908 <csp_iflist_add+0x70>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	60bb      	str	r3, [r7, #8]
 80088c0:	e016      	b.n	80088f0 <csp_iflist_add+0x58>
			if ((i == ifc) || (strncasecmp(ifc->name, i->name, CSP_IFLIST_NAME_MAX) == 0)) {
 80088c2:	68ba      	ldr	r2, [r7, #8]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d00a      	beq.n	80088e0 <csp_iflist_add+0x48>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6818      	ldr	r0, [r3, #0]
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	220a      	movs	r2, #10
 80088d4:	4619      	mov	r1, r3
 80088d6:	f007 fb79 	bl	800ffcc <strncasecmp>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d102      	bne.n	80088e6 <csp_iflist_add+0x4e>
				return CSP_ERR_ALREADY;
 80088e0:	f06f 0306 	mvn.w	r3, #6
 80088e4:	e00b      	b.n	80088fe <csp_iflist_add+0x66>
			}
			last = i;
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	60fb      	str	r3, [r7, #12]
		for (csp_iface_t * i = interfaces; i != NULL; i = i->next) {
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088ee:	60bb      	str	r3, [r7, #8]
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1e5      	bne.n	80088c2 <csp_iflist_add+0x2a>
		}

		last->next = ifc;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	63da      	str	r2, [r3, #60]	@ 0x3c
	}

	return CSP_ERR_NONE;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	24042be8 	.word	0x24042be8

0800890c <csp_route_set>:
   @param[in] dest_address destination address.
   @param[in] ifc interface.
   @param[in] via assosicated via address.
   @return #CSP_ERR_NONE on success, or an error code.
*/
static inline int csp_route_set(uint8_t dest_address, csp_iface_t *ifc, uint8_t via) {
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	4603      	mov	r3, r0
 8008914:	6039      	str	r1, [r7, #0]
 8008916:	71fb      	strb	r3, [r7, #7]
 8008918:	4613      	mov	r3, r2
 800891a:	71bb      	strb	r3, [r7, #6]
    return csp_rtable_set(dest_address, CSP_ID_HOST_SIZE, ifc, via);
 800891c:	79bb      	ldrb	r3, [r7, #6]
 800891e:	79f8      	ldrb	r0, [r7, #7]
 8008920:	683a      	ldr	r2, [r7, #0]
 8008922:	2105      	movs	r1, #5
 8008924:	f001 fa1e 	bl	8009d64 <csp_rtable_set>
 8008928:	4603      	mov	r3, r0
}
 800892a:	4618      	mov	r0, r3
 800892c:	3708      	adds	r7, #8
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
	...

08008934 <csp_init>:
uint8_t csp_get_address(void) {

	return csp_conf.address;
}

int csp_init(const csp_conf_t * conf) {
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]

	/* make offset first time, so uptime is counted from process/task boot */
	csp_get_uptime_s();
 800893c:	f7fe ffce 	bl	80078dc <csp_get_uptime_s>

	/* Make a copy of the configuration
	 * The copy is kept hidden for the user in csp_init.h
	 * Configuration cannot be changed after calling init
	 * unless specific get/set functions are made */
	memcpy(&csp_conf, conf, sizeof(csp_conf));
 8008940:	2220      	movs	r2, #32
 8008942:	6879      	ldr	r1, [r7, #4]
 8008944:	481b      	ldr	r0, [pc, #108]	@ (80089b4 <csp_init+0x80>)
 8008946:	f007 fbe8 	bl	801011a <memcpy>

	int ret = csp_buffer_init();
 800894a:	f7ff f989 	bl	8007c60 <csp_buffer_init>
 800894e:	60f8      	str	r0, [r7, #12]
	if (ret != CSP_ERR_NONE) {
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d001      	beq.n	800895a <csp_init+0x26>
		return ret;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	e027      	b.n	80089aa <csp_init+0x76>
	}

	ret = csp_conn_init();
 800895a:	f7ff fbad 	bl	80080b8 <csp_conn_init>
 800895e:	60f8      	str	r0, [r7, #12]
	if (ret != CSP_ERR_NONE) {
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d001      	beq.n	800896a <csp_init+0x36>
		return ret;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	e01f      	b.n	80089aa <csp_init+0x76>
	}

	ret = csp_port_init();
 800896a:	f000 fa4f 	bl	8008e0c <csp_port_init>
 800896e:	60f8      	str	r0, [r7, #12]
	if (ret != CSP_ERR_NONE) {
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d001      	beq.n	800897a <csp_init+0x46>
		return ret;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	e017      	b.n	80089aa <csp_init+0x76>
	}

	ret = csp_qfifo_init();
 800897a:	f000 faed 	bl	8008f58 <csp_qfifo_init>
 800897e:	60f8      	str	r0, [r7, #12]
	if (ret != CSP_ERR_NONE) {
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d001      	beq.n	800898a <csp_init+0x56>
		return ret;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	e00f      	b.n	80089aa <csp_init+0x76>
	}

	/* Loopback */
	csp_iflist_add(&csp_if_lo);
 800898a:	480b      	ldr	r0, [pc, #44]	@ (80089b8 <csp_init+0x84>)
 800898c:	f7ff ff84 	bl	8008898 <csp_iflist_add>

	/* Register loopback route */
	csp_route_set(csp_conf.address, &csp_if_lo, CSP_NO_VIA_ADDRESS);
 8008990:	4b08      	ldr	r3, [pc, #32]	@ (80089b4 <csp_init+0x80>)
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	22ff      	movs	r2, #255	@ 0xff
 8008996:	4908      	ldr	r1, [pc, #32]	@ (80089b8 <csp_init+0x84>)
 8008998:	4618      	mov	r0, r3
 800899a:	f7ff ffb7 	bl	800890c <csp_route_set>

	/* Also register loopback as default, until user redefines default route */
	csp_route_set(CSP_DEFAULT_ROUTE, &csp_if_lo, CSP_NO_VIA_ADDRESS);
 800899e:	22ff      	movs	r2, #255	@ 0xff
 80089a0:	4905      	ldr	r1, [pc, #20]	@ (80089b8 <csp_init+0x84>)
 80089a2:	2020      	movs	r0, #32
 80089a4:	f7ff ffb2 	bl	800890c <csp_route_set>

	return CSP_ERR_NONE;
 80089a8:	2300      	movs	r3, #0

}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3710      	adds	r7, #16
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	bf00      	nop
 80089b4:	24042bec 	.word	0x24042bec
 80089b8:	24000094 	.word	0x24000094

080089bc <csp_socket>:

#if (CSP_USE_PROMISC)
extern csp_queue_handle_t csp_promisc_queue;
#endif

csp_socket_t * csp_socket(uint32_t opts) {
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
	
	/* Validate socket options */
#if (CSP_USE_RDP == 0)
	if (opts & CSP_SO_RDPREQ) {
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f003 0301 	and.w	r3, r3, #1
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d009      	beq.n	80089e2 <csp_socket+0x26>
		csp_log_error("Attempt to create socket that requires RDP, but CSP was compiled without RDP support");
 80089ce:	4b38      	ldr	r3, [pc, #224]	@ (8008ab0 <csp_socket+0xf4>)
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d003      	beq.n	80089de <csp_socket+0x22>
 80089d6:	4937      	ldr	r1, [pc, #220]	@ (8008ab4 <csp_socket+0xf8>)
 80089d8:	2000      	movs	r0, #0
 80089da:	f7ff fea9 	bl	8008730 <do_csp_debug>
		return NULL;
 80089de:	2300      	movs	r3, #0
 80089e0:	e062      	b.n	8008aa8 <csp_socket+0xec>
	}
#endif

#if (CSP_USE_XTEA == 0)
	if (opts & CSP_SO_XTEAREQ) {
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f003 0310 	and.w	r3, r3, #16
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d009      	beq.n	8008a00 <csp_socket+0x44>
		csp_log_error("Attempt to create socket that requires XTEA, but CSP was compiled without XTEA support");
 80089ec:	4b30      	ldr	r3, [pc, #192]	@ (8008ab0 <csp_socket+0xf4>)
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d003      	beq.n	80089fc <csp_socket+0x40>
 80089f4:	4930      	ldr	r1, [pc, #192]	@ (8008ab8 <csp_socket+0xfc>)
 80089f6:	2000      	movs	r0, #0
 80089f8:	f7ff fe9a 	bl	8008730 <do_csp_debug>
		return NULL;
 80089fc:	2300      	movs	r3, #0
 80089fe:	e053      	b.n	8008aa8 <csp_socket+0xec>
	}
#endif

#if (CSP_USE_HMAC == 0)
	if (opts & CSP_SO_HMACREQ) {
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f003 0304 	and.w	r3, r3, #4
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d009      	beq.n	8008a1e <csp_socket+0x62>
		csp_log_error("Attempt to create socket that requires HMAC, but CSP was compiled without HMAC support");
 8008a0a:	4b29      	ldr	r3, [pc, #164]	@ (8008ab0 <csp_socket+0xf4>)
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d003      	beq.n	8008a1a <csp_socket+0x5e>
 8008a12:	492a      	ldr	r1, [pc, #168]	@ (8008abc <csp_socket+0x100>)
 8008a14:	2000      	movs	r0, #0
 8008a16:	f7ff fe8b 	bl	8008730 <do_csp_debug>
		return NULL;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	e044      	b.n	8008aa8 <csp_socket+0xec>
	} 
#endif

#if (CSP_USE_CRC32 == 0)
	if (opts & CSP_SO_CRC32REQ) {
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d009      	beq.n	8008a3c <csp_socket+0x80>
		csp_log_error("Attempt to create socket that requires CRC32, but CSP was compiled without CRC32 support");
 8008a28:	4b21      	ldr	r3, [pc, #132]	@ (8008ab0 <csp_socket+0xf4>)
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d003      	beq.n	8008a38 <csp_socket+0x7c>
 8008a30:	4923      	ldr	r1, [pc, #140]	@ (8008ac0 <csp_socket+0x104>)
 8008a32:	2000      	movs	r0, #0
 8008a34:	f7ff fe7c 	bl	8008730 <do_csp_debug>
		return NULL;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	e035      	b.n	8008aa8 <csp_socket+0xec>
	} 
#endif
	
	/* Drop packet if reserved flags are set */
	if (opts & ~(CSP_SO_RDPREQ | CSP_SO_XTEAREQ | CSP_SO_HMACREQ | CSP_SO_CRC32REQ | CSP_SO_CONN_LESS)) {
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	4b21      	ldr	r3, [pc, #132]	@ (8008ac4 <csp_socket+0x108>)
 8008a40:	4013      	ands	r3, r2
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d009      	beq.n	8008a5a <csp_socket+0x9e>
		csp_log_error("Invalid socket option");
 8008a46:	4b1a      	ldr	r3, [pc, #104]	@ (8008ab0 <csp_socket+0xf4>)
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d003      	beq.n	8008a56 <csp_socket+0x9a>
 8008a4e:	491e      	ldr	r1, [pc, #120]	@ (8008ac8 <csp_socket+0x10c>)
 8008a50:	2000      	movs	r0, #0
 8008a52:	f7ff fe6d 	bl	8008730 <do_csp_debug>
		return NULL;
 8008a56:	2300      	movs	r3, #0
 8008a58:	e026      	b.n	8008aa8 <csp_socket+0xec>
	}

	/* Use CSP buffers instead? */
	csp_socket_t * sock = csp_conn_allocate(CONN_SERVER);
 8008a5a:	2001      	movs	r0, #1
 8008a5c:	f7ff fc40 	bl	80082e0 <csp_conn_allocate>
 8008a60:	60f8      	str	r0, [r7, #12]
	if (sock == NULL)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d101      	bne.n	8008a6c <csp_socket+0xb0>
		return NULL;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	e01d      	b.n	8008aa8 <csp_socket+0xec>

	/* If connectionless, init the queue to a pre-defined size
	 * if not, the user must init the queue using csp_listen */
	if (opts & CSP_SO_CONN_LESS) {
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d011      	beq.n	8008a9a <csp_socket+0xde>
		sock->socket = csp_queue_create(csp_conf.conn_queue_length, sizeof(csp_packet_t *));
 8008a76:	4b15      	ldr	r3, [pc, #84]	@ (8008acc <csp_socket+0x110>)
 8008a78:	7c5b      	ldrb	r3, [r3, #17]
 8008a7a:	2104      	movs	r1, #4
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7fe ff77 	bl	8007970 <csp_queue_create>
 8008a82:	4602      	mov	r2, r0
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	611a      	str	r2, [r3, #16]
		if (sock->socket == NULL) {
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	691b      	ldr	r3, [r3, #16]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d107      	bne.n	8008aa0 <csp_socket+0xe4>
			csp_close(sock);
 8008a90:	68f8      	ldr	r0, [r7, #12]
 8008a92:	f7ff fcca 	bl	800842a <csp_close>
			return NULL;
 8008a96:	2300      	movs	r3, #0
 8008a98:	e006      	b.n	8008aa8 <csp_socket+0xec>
                }
	} else {
		sock->socket = NULL;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	611a      	str	r2, [r3, #16]
	}
	sock->opts = opts;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	619a      	str	r2, [r3, #24]

	return sock;
 8008aa6:	68fb      	ldr	r3, [r7, #12]

}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}
 8008ab0:	2400008c 	.word	0x2400008c
 8008ab4:	080118e4 	.word	0x080118e4
 8008ab8:	0801193c 	.word	0x0801193c
 8008abc:	08011994 	.word	0x08011994
 8008ac0:	080119ec 	.word	0x080119ec
 8008ac4:	fffffeaa 	.word	0xfffffeaa
 8008ac8:	08011a48 	.word	0x08011a48
 8008acc:	24042bec 	.word	0x24042bec

08008ad0 <csp_accept>:

csp_conn_t * csp_accept(csp_socket_t * sock, uint32_t timeout) {
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]

	if (sock == NULL)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d101      	bne.n	8008ae4 <csp_accept+0x14>
		return NULL;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	e013      	b.n	8008b0c <csp_accept+0x3c>

	if (sock->socket == NULL)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d101      	bne.n	8008af0 <csp_accept+0x20>
		return NULL;
 8008aec:	2300      	movs	r3, #0
 8008aee:	e00d      	b.n	8008b0c <csp_accept+0x3c>

	csp_conn_t * conn;
	if (csp_queue_dequeue(sock->socket, &conn, timeout) == CSP_QUEUE_OK)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	f107 010c 	add.w	r1, r7, #12
 8008af8:	683a      	ldr	r2, [r7, #0]
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7fe ff78 	bl	80079f0 <csp_queue_dequeue>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d101      	bne.n	8008b0a <csp_accept+0x3a>
		return conn;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	e000      	b.n	8008b0c <csp_accept+0x3c>

	return NULL;
 8008b0a:	2300      	movs	r3, #0

}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3710      	adds	r7, #16
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <csp_read>:

csp_packet_t * csp_read(csp_conn_t * conn, uint32_t timeout) {
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]

	csp_packet_t * packet = NULL;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	60fb      	str	r3, [r7, #12]

	if ((conn == NULL) || (conn->state != CONN_OPEN)) {
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d003      	beq.n	8008b30 <csp_read+0x1c>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	785b      	ldrb	r3, [r3, #1]
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d001      	beq.n	8008b34 <csp_read+0x20>
		return NULL;
 8008b30:	2300      	movs	r3, #0
 8008b32:	e00d      	b.n	8008b50 <csp_read+0x3c>
		if (csp_queue_dequeue(conn->rx_queue[prio], &packet, 0) == CSP_QUEUE_OK) {
			break;
		}
	}
#else
	if (csp_queue_dequeue(conn->rx_queue[0], &packet, timeout) != CSP_QUEUE_OK) {
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	f107 010c 	add.w	r1, r7, #12
 8008b3c:	683a      	ldr	r2, [r7, #0]
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7fe ff56 	bl	80079f0 <csp_queue_dequeue>
 8008b44:	4603      	mov	r3, r0
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d001      	beq.n	8008b4e <csp_read+0x3a>
		return NULL;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	e000      	b.n	8008b50 <csp_read+0x3c>
	if ((conn->idin.flags & CSP_FRDP) && conn->rdp.delayed_acks) {
		csp_rdp_check_ack(conn);
	}
#endif

	return packet;
 8008b4e:	68fb      	ldr	r3, [r7, #12]

}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <csp_send_direct>:

int csp_send_direct(csp_id_t idout, csp_packet_t * packet, const csp_route_t * ifroute, uint32_t timeout) {
 8008b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b5a:	b08f      	sub	sp, #60	@ 0x3c
 8008b5c:	af08      	add	r7, sp, #32
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	607a      	str	r2, [r7, #4]
 8008b64:	603b      	str	r3, [r7, #0]

	if (packet == NULL) {
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d109      	bne.n	8008b80 <csp_send_direct+0x28>
		csp_log_error("csp_send_direct called with NULL packet");
 8008b6c:	4b66      	ldr	r3, [pc, #408]	@ (8008d08 <csp_send_direct+0x1b0>)
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f000 80c0 	beq.w	8008cf6 <csp_send_direct+0x19e>
 8008b76:	4965      	ldr	r1, [pc, #404]	@ (8008d0c <csp_send_direct+0x1b4>)
 8008b78:	2000      	movs	r0, #0
 8008b7a:	f7ff fdd9 	bl	8008730 <do_csp_debug>
		goto err;
 8008b7e:	e0ba      	b.n	8008cf6 <csp_send_direct+0x19e>
	}

	if (ifroute == NULL) {
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d10f      	bne.n	8008ba6 <csp_send_direct+0x4e>
		csp_log_error("No route to host: %u (0x%08"PRIx32")", idout.dst, idout.ext);
 8008b86:	4b60      	ldr	r3, [pc, #384]	@ (8008d08 <csp_send_direct+0x1b0>)
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	f000 80b5 	beq.w	8008cfa <csp_send_direct+0x1a2>
 8008b90:	89fb      	ldrh	r3, [r7, #14]
 8008b92:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	461a      	mov	r2, r3
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	495c      	ldr	r1, [pc, #368]	@ (8008d10 <csp_send_direct+0x1b8>)
 8008b9e:	2000      	movs	r0, #0
 8008ba0:	f7ff fdc6 	bl	8008730 <do_csp_debug>
		goto err;
 8008ba4:	e0a9      	b.n	8008cfa <csp_send_direct+0x1a2>
	}

	csp_iface_t * ifout = ifroute->iface;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	617b      	str	r3, [r7, #20]

	csp_log_packet("OUT: S %u, D %u, Dp %u, Sp %u, Pr %u, Fl 0x%02X, Sz %u VIA: %s (%u)",
 8008bac:	4b56      	ldr	r3, [pc, #344]	@ (8008d08 <csp_send_direct+0x1b0>)
 8008bae:	791b      	ldrb	r3, [r3, #4]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d037      	beq.n	8008c24 <csp_send_direct+0xcc>
 8008bb4:	7bfb      	ldrb	r3, [r7, #15]
 8008bb6:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	469c      	mov	ip, r3
 8008bbe:	89fb      	ldrh	r3, [r7, #14]
 8008bc0:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	469e      	mov	lr, r3
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f3c3 3385 	ubfx	r3, r3, #14, #6
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	7b7b      	ldrb	r3, [r7, #13]
 8008bd4:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	4618      	mov	r0, r3
 8008bdc:	7bfb      	ldrb	r3, [r7, #15]
 8008bde:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	461c      	mov	r4, r3
 8008be6:	7b3b      	ldrb	r3, [r7, #12]
 8008be8:	461d      	mov	r5, r3
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	895b      	ldrh	r3, [r3, #10]
 8008bee:	461e      	mov	r6, r3
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	7912      	ldrb	r2, [r2, #4]
 8008bf8:	2aff      	cmp	r2, #255	@ 0xff
 8008bfa:	d002      	beq.n	8008c02 <csp_send_direct+0xaa>
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	7912      	ldrb	r2, [r2, #4]
 8008c00:	e003      	b.n	8008c0a <csp_send_direct+0xb2>
 8008c02:	89fa      	ldrh	r2, [r7, #14]
 8008c04:	f3c2 1204 	ubfx	r2, r2, #4, #5
 8008c08:	b2d2      	uxtb	r2, r2
 8008c0a:	9206      	str	r2, [sp, #24]
 8008c0c:	9305      	str	r3, [sp, #20]
 8008c0e:	9604      	str	r6, [sp, #16]
 8008c10:	9503      	str	r5, [sp, #12]
 8008c12:	9402      	str	r4, [sp, #8]
 8008c14:	9001      	str	r0, [sp, #4]
 8008c16:	9100      	str	r1, [sp, #0]
 8008c18:	4673      	mov	r3, lr
 8008c1a:	4662      	mov	r2, ip
 8008c1c:	493d      	ldr	r1, [pc, #244]	@ (8008d14 <csp_send_direct+0x1bc>)
 8008c1e:	2004      	movs	r0, #4
 8008c20:	f7ff fd86 	bl	8008730 <do_csp_debug>
                       idout.src, idout.dst, idout.dport, idout.sport, idout.pri, idout.flags, packet->length, ifout->name, (ifroute->via != CSP_NO_VIA_ADDRESS) ? ifroute->via : idout.dst);

	/* Copy identifier to packet (before crc, xtea and hmac) */
	packet->id.ext = idout.ext;
 8008c24:	68fa      	ldr	r2, [r7, #12]
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	60da      	str	r2, [r3, #12]
		csp_promisc_add(packet);
	}
#endif

	/* Only encrypt packets from the current node */
	if (idout.src == csp_conf.address) {
 8008c2a:	7bfb      	ldrb	r3, [r7, #15]
 8008c2c:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	461a      	mov	r2, r3
 8008c34:	4b38      	ldr	r3, [pc, #224]	@ (8008d18 <csp_send_direct+0x1c0>)
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d12d      	bne.n	8008c98 <csp_send_direct+0x140>
		/* Append HMAC */
		if (idout.flags & CSP_FHMAC) {
 8008c3c:	7b3b      	ldrb	r3, [r7, #12]
 8008c3e:	f003 0308 	and.w	r3, r3, #8
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d008      	beq.n	8008c58 <csp_send_direct+0x100>
				/* HMAC append failed */
				csp_log_warn("HMAC append failed!");
				goto tx_err;
			}
#else
			csp_log_warn("Attempt to send packet with HMAC, but CSP was compiled without HMAC support. Discarding packet");
 8008c46:	4b30      	ldr	r3, [pc, #192]	@ (8008d08 <csp_send_direct+0x1b0>)
 8008c48:	785b      	ldrb	r3, [r3, #1]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d046      	beq.n	8008cdc <csp_send_direct+0x184>
 8008c4e:	4933      	ldr	r1, [pc, #204]	@ (8008d1c <csp_send_direct+0x1c4>)
 8008c50:	2001      	movs	r0, #1
 8008c52:	f7ff fd6d 	bl	8008730 <do_csp_debug>
			goto tx_err;
 8008c56:	e041      	b.n	8008cdc <csp_send_direct+0x184>
#endif
		}

		/* Append CRC32 */
		if (idout.flags & CSP_FCRC32) {
 8008c58:	7b3b      	ldrb	r3, [r7, #12]
 8008c5a:	f003 0301 	and.w	r3, r3, #1
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00c      	beq.n	8008c7c <csp_send_direct+0x124>
				/* CRC32 append failed */
				csp_log_warn("CRC32 append failed!");
				goto tx_err;
			}
#else
			csp_log_warn("Attempt to send packet with CRC32, but CSP was compiled without CRC32 support. Sending without CRC32r");
 8008c62:	4b29      	ldr	r3, [pc, #164]	@ (8008d08 <csp_send_direct+0x1b0>)
 8008c64:	785b      	ldrb	r3, [r3, #1]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d003      	beq.n	8008c72 <csp_send_direct+0x11a>
 8008c6a:	492d      	ldr	r1, [pc, #180]	@ (8008d20 <csp_send_direct+0x1c8>)
 8008c6c:	2001      	movs	r0, #1
 8008c6e:	f7ff fd5f 	bl	8008730 <do_csp_debug>
			idout.flags &= ~(CSP_FCRC32);
 8008c72:	7b3b      	ldrb	r3, [r7, #12]
 8008c74:	f023 0301 	bic.w	r3, r3, #1
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	733b      	strb	r3, [r7, #12]
#endif
		}

		if (idout.flags & CSP_FXTEA) {
 8008c7c:	7b3b      	ldrb	r3, [r7, #12]
 8008c7e:	f003 0304 	and.w	r3, r3, #4
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d008      	beq.n	8008c98 <csp_send_direct+0x140>
				/* Encryption failed */
				csp_log_warn("XTEA Encryption failed!");
				goto tx_err;
			}
#else
			csp_log_warn("Attempt to send XTEA encrypted packet, but CSP was compiled without XTEA support. Discarding packet");
 8008c86:	4b20      	ldr	r3, [pc, #128]	@ (8008d08 <csp_send_direct+0x1b0>)
 8008c88:	785b      	ldrb	r3, [r3, #1]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d028      	beq.n	8008ce0 <csp_send_direct+0x188>
 8008c8e:	4925      	ldr	r1, [pc, #148]	@ (8008d24 <csp_send_direct+0x1cc>)
 8008c90:	2001      	movs	r0, #1
 8008c92:	f7ff fd4d 	bl	8008730 <do_csp_debug>
			goto tx_err;
 8008c96:	e023      	b.n	8008ce0 <csp_send_direct+0x188>
#endif
		}
	}

	/* Store length before passing to interface */
	uint16_t bytes = packet->length;
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	895b      	ldrh	r3, [r3, #10]
 8008c9c:	827b      	strh	r3, [r7, #18]
	uint16_t mtu = ifout->mtu;
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	8a1b      	ldrh	r3, [r3, #16]
 8008ca2:	823b      	strh	r3, [r7, #16]

	if (mtu > 0 && bytes > mtu)
 8008ca4:	8a3b      	ldrh	r3, [r7, #16]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d003      	beq.n	8008cb2 <csp_send_direct+0x15a>
 8008caa:	8a7a      	ldrh	r2, [r7, #18]
 8008cac:	8a3b      	ldrh	r3, [r7, #16]
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d818      	bhi.n	8008ce4 <csp_send_direct+0x18c>
		goto tx_err;

	if ((*ifout->nexthop)(ifroute, packet) != CSP_ERR_NONE)
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	68b9      	ldr	r1, [r7, #8]
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	4798      	blx	r3
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d112      	bne.n	8008ce8 <csp_send_direct+0x190>
		goto tx_err;

	ifout->tx++;
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	695b      	ldr	r3, [r3, #20]
 8008cc6:	1c5a      	adds	r2, r3, #1
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	615a      	str	r2, [r3, #20]
	ifout->txbytes += bytes;
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008cd0:	8a7b      	ldrh	r3, [r7, #18]
 8008cd2:	441a      	add	r2, r3
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	631a      	str	r2, [r3, #48]	@ 0x30
	return CSP_ERR_NONE;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	e011      	b.n	8008d00 <csp_send_direct+0x1a8>
			goto tx_err;
 8008cdc:	bf00      	nop
 8008cde:	e004      	b.n	8008cea <csp_send_direct+0x192>
			goto tx_err;
 8008ce0:	bf00      	nop
 8008ce2:	e002      	b.n	8008cea <csp_send_direct+0x192>
		goto tx_err;
 8008ce4:	bf00      	nop
 8008ce6:	e000      	b.n	8008cea <csp_send_direct+0x192>
		goto tx_err;
 8008ce8:	bf00      	nop

tx_err:
	ifout->tx_error++;
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	69db      	ldr	r3, [r3, #28]
 8008cee:	1c5a      	adds	r2, r3, #1
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	61da      	str	r2, [r3, #28]
 8008cf4:	e002      	b.n	8008cfc <csp_send_direct+0x1a4>
		goto err;
 8008cf6:	bf00      	nop
 8008cf8:	e000      	b.n	8008cfc <csp_send_direct+0x1a4>
		goto err;
 8008cfa:	bf00      	nop
err:
	return CSP_ERR_TX;
 8008cfc:	f06f 0309 	mvn.w	r3, #9

}
 8008d00:	4618      	mov	r0, r3
 8008d02:	371c      	adds	r7, #28
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d08:	2400008c 	.word	0x2400008c
 8008d0c:	08011a60 	.word	0x08011a60
 8008d10:	08011a88 	.word	0x08011a88
 8008d14:	08011aa8 	.word	0x08011aa8
 8008d18:	24042bec 	.word	0x24042bec
 8008d1c:	08011aec 	.word	0x08011aec
 8008d20:	08011b4c 	.word	0x08011b4c
 8008d24:	08011bb4 	.word	0x08011bb4

08008d28 <csp_send>:

int csp_send(csp_conn_t * conn, csp_packet_t * packet, uint32_t timeout) {
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b086      	sub	sp, #24
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]

	if ((conn == NULL) || (packet == NULL) || (conn->state != CONN_OPEN)) {
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d006      	beq.n	8008d48 <csp_send+0x20>
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d003      	beq.n	8008d48 <csp_send+0x20>
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	785b      	ldrb	r3, [r3, #1]
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d009      	beq.n	8008d5c <csp_send+0x34>
		csp_log_error("Invalid call to csp_send");
 8008d48:	4b11      	ldr	r3, [pc, #68]	@ (8008d90 <csp_send+0x68>)
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d003      	beq.n	8008d58 <csp_send+0x30>
 8008d50:	4910      	ldr	r1, [pc, #64]	@ (8008d94 <csp_send+0x6c>)
 8008d52:	2000      	movs	r0, #0
 8008d54:	f7ff fcec 	bl	8008730 <do_csp_debug>
		return 0;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	e015      	b.n	8008d88 <csp_send+0x60>
			return 0;
		}
	}
#endif

	int ret = csp_send_direct(conn->idout, packet, csp_rtable_find_route(conn->idout.dst), timeout);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	895b      	ldrh	r3, [r3, #10]
 8008d60:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	4618      	mov	r0, r3
 8008d68:	f001 f89e 	bl	8009ea8 <csp_rtable_find_route>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	68b9      	ldr	r1, [r7, #8]
 8008d74:	6880      	ldr	r0, [r0, #8]
 8008d76:	f7ff feef 	bl	8008b58 <csp_send_direct>
 8008d7a:	6178      	str	r0, [r7, #20]

	return (ret == CSP_ERR_NONE) ? 1 : 0;
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	bf0c      	ite	eq
 8008d82:	2301      	moveq	r3, #1
 8008d84:	2300      	movne	r3, #0
 8008d86:	b2db      	uxtb	r3, r3

}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3718      	adds	r7, #24
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	2400008c 	.word	0x2400008c
 8008d94:	08011c18 	.word	0x08011c18

08008d98 <csp_port_get_socket>:
#include "csp_init.h"

/* Dynamic allocated port array */
static csp_port_t * ports;

csp_socket_t * csp_port_get_socket(unsigned int port) {
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]

	if (port > csp_conf.port_max_bind) {
 8008da0:	4b18      	ldr	r3, [pc, #96]	@ (8008e04 <csp_port_get_socket+0x6c>)
 8008da2:	7cdb      	ldrb	r3, [r3, #19]
 8008da4:	461a      	mov	r2, r3
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d901      	bls.n	8008db0 <csp_port_get_socket+0x18>
		return NULL;
 8008dac:	2300      	movs	r3, #0
 8008dae:	e022      	b.n	8008df6 <csp_port_get_socket+0x5e>
	}

	/* Match dport to socket or local "catch all" port number */
	if (ports[port].state == PORT_OPEN) {
 8008db0:	4b15      	ldr	r3, [pc, #84]	@ (8008e08 <csp_port_get_socket+0x70>)
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	00db      	lsls	r3, r3, #3
 8008db8:	4413      	add	r3, r2
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d106      	bne.n	8008dce <csp_port_get_socket+0x36>
		return ports[port].socket;
 8008dc0:	4b11      	ldr	r3, [pc, #68]	@ (8008e08 <csp_port_get_socket+0x70>)
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	00db      	lsls	r3, r3, #3
 8008dc8:	4413      	add	r3, r2
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	e013      	b.n	8008df6 <csp_port_get_socket+0x5e>
	}

	if (ports[csp_conf.port_max_bind + 1].state == PORT_OPEN) {
 8008dce:	4b0e      	ldr	r3, [pc, #56]	@ (8008e08 <csp_port_get_socket+0x70>)
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8008e04 <csp_port_get_socket+0x6c>)
 8008dd4:	7cdb      	ldrb	r3, [r3, #19]
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	00db      	lsls	r3, r3, #3
 8008dda:	4413      	add	r3, r2
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d108      	bne.n	8008df4 <csp_port_get_socket+0x5c>
		return ports[csp_conf.port_max_bind + 1].socket;
 8008de2:	4b09      	ldr	r3, [pc, #36]	@ (8008e08 <csp_port_get_socket+0x70>)
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	4b07      	ldr	r3, [pc, #28]	@ (8008e04 <csp_port_get_socket+0x6c>)
 8008de8:	7cdb      	ldrb	r3, [r3, #19]
 8008dea:	3301      	adds	r3, #1
 8008dec:	00db      	lsls	r3, r3, #3
 8008dee:	4413      	add	r3, r2
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	e000      	b.n	8008df6 <csp_port_get_socket+0x5e>
	}

	return NULL;
 8008df4:	2300      	movs	r3, #0

}
 8008df6:	4618      	mov	r0, r3
 8008df8:	370c      	adds	r7, #12
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop
 8008e04:	24042bec 	.word	0x24042bec
 8008e08:	24042c0c 	.word	0x24042c0c

08008e0c <csp_port_init>:

int csp_port_init(void) {
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	af00      	add	r7, sp, #0

	ports = csp_calloc(csp_conf.port_max_bind + 2, sizeof(*ports)); // +2 for max port and CSP_ANY
 8008e10:	4b09      	ldr	r3, [pc, #36]	@ (8008e38 <csp_port_init+0x2c>)
 8008e12:	7cdb      	ldrb	r3, [r3, #19]
 8008e14:	3302      	adds	r3, #2
 8008e16:	2108      	movs	r1, #8
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7fe fd83 	bl	8007924 <csp_calloc>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	4a06      	ldr	r2, [pc, #24]	@ (8008e3c <csp_port_init+0x30>)
 8008e22:	6013      	str	r3, [r2, #0]
	if (ports == NULL) {
 8008e24:	4b05      	ldr	r3, [pc, #20]	@ (8008e3c <csp_port_init+0x30>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d102      	bne.n	8008e32 <csp_port_init+0x26>
		return CSP_ERR_NOMEM;
 8008e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e30:	e000      	b.n	8008e34 <csp_port_init+0x28>
	}

	return CSP_ERR_NONE;
 8008e32:	2300      	movs	r3, #0

}
 8008e34:	4618      	mov	r0, r3
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	24042bec 	.word	0x24042bec
 8008e3c:	24042c0c 	.word	0x24042c0c

08008e40 <csp_listen>:

	csp_free(ports);
	ports = NULL;
}

int csp_listen(csp_socket_t * socket, size_t backlog) {
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
	
	if (socket == NULL)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d102      	bne.n	8008e56 <csp_listen+0x16>
		return CSP_ERR_INVAL;
 8008e50:	f06f 0301 	mvn.w	r3, #1
 8008e54:	e015      	b.n	8008e82 <csp_listen+0x42>

	socket->socket = csp_queue_create(backlog, sizeof(csp_conn_t *));
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	2104      	movs	r1, #4
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7fe fd88 	bl	8007970 <csp_queue_create>
 8008e60:	4602      	mov	r2, r0
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	611a      	str	r2, [r3, #16]
	if (socket->socket == NULL)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d102      	bne.n	8008e74 <csp_listen+0x34>
		return CSP_ERR_NOMEM;
 8008e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8008e72:	e006      	b.n	8008e82 <csp_listen+0x42>

        socket->opts |= CSP_SO_INTERNAL_LISTEN;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	699b      	ldr	r3, [r3, #24]
 8008e78:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	619a      	str	r2, [r3, #24]

	return CSP_ERR_NONE;
 8008e80:	2300      	movs	r3, #0

}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3708      	adds	r7, #8
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
	...

08008e8c <csp_bind>:

int csp_bind(csp_socket_t * socket, uint8_t port) {
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	460b      	mov	r3, r1
 8008e96:	70fb      	strb	r3, [r7, #3]
	
	if (socket == NULL)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d102      	bne.n	8008ea4 <csp_bind+0x18>
		return CSP_ERR_INVAL;
 8008e9e:	f06f 0301 	mvn.w	r3, #1
 8008ea2:	e048      	b.n	8008f36 <csp_bind+0xaa>

	if (port == CSP_ANY) {
 8008ea4:	78fb      	ldrb	r3, [r7, #3]
 8008ea6:	2bff      	cmp	r3, #255	@ 0xff
 8008ea8:	d104      	bne.n	8008eb4 <csp_bind+0x28>
		port = csp_conf.port_max_bind + 1;
 8008eaa:	4b25      	ldr	r3, [pc, #148]	@ (8008f40 <csp_bind+0xb4>)
 8008eac:	7cdb      	ldrb	r3, [r3, #19]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	70fb      	strb	r3, [r7, #3]
 8008eb2:	e012      	b.n	8008eda <csp_bind+0x4e>
	} else if (port > csp_conf.port_max_bind) {
 8008eb4:	4b22      	ldr	r3, [pc, #136]	@ (8008f40 <csp_bind+0xb4>)
 8008eb6:	7cdb      	ldrb	r3, [r3, #19]
 8008eb8:	78fa      	ldrb	r2, [r7, #3]
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d90d      	bls.n	8008eda <csp_bind+0x4e>
		csp_log_error("csp_bind: invalid port %u, only ports from 0-%u (+ CSP_ANY for default) are available for incoming ports", port, csp_conf.port_max_bind);
 8008ebe:	4b21      	ldr	r3, [pc, #132]	@ (8008f44 <csp_bind+0xb8>)
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d006      	beq.n	8008ed4 <csp_bind+0x48>
 8008ec6:	78fa      	ldrb	r2, [r7, #3]
 8008ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8008f40 <csp_bind+0xb4>)
 8008eca:	7cdb      	ldrb	r3, [r3, #19]
 8008ecc:	491e      	ldr	r1, [pc, #120]	@ (8008f48 <csp_bind+0xbc>)
 8008ece:	2000      	movs	r0, #0
 8008ed0:	f7ff fc2e 	bl	8008730 <do_csp_debug>
		return CSP_ERR_INVAL;
 8008ed4:	f06f 0301 	mvn.w	r3, #1
 8008ed8:	e02d      	b.n	8008f36 <csp_bind+0xaa>
	}

	if (ports[port].state != PORT_CLOSED) {
 8008eda:	4b1c      	ldr	r3, [pc, #112]	@ (8008f4c <csp_bind+0xc0>)
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	78fb      	ldrb	r3, [r7, #3]
 8008ee0:	00db      	lsls	r3, r3, #3
 8008ee2:	4413      	add	r3, r2
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d00c      	beq.n	8008f04 <csp_bind+0x78>
		csp_log_error("Port %d is already in use", port);
 8008eea:	4b16      	ldr	r3, [pc, #88]	@ (8008f44 <csp_bind+0xb8>)
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d005      	beq.n	8008efe <csp_bind+0x72>
 8008ef2:	78fb      	ldrb	r3, [r7, #3]
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	4916      	ldr	r1, [pc, #88]	@ (8008f50 <csp_bind+0xc4>)
 8008ef8:	2000      	movs	r0, #0
 8008efa:	f7ff fc19 	bl	8008730 <do_csp_debug>
		return CSP_ERR_USED;
 8008efe:	f06f 0303 	mvn.w	r3, #3
 8008f02:	e018      	b.n	8008f36 <csp_bind+0xaa>
	}

	csp_log_info("Binding socket %p to port %u", socket, port);
 8008f04:	4b0f      	ldr	r3, [pc, #60]	@ (8008f44 <csp_bind+0xb8>)
 8008f06:	789b      	ldrb	r3, [r3, #2]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d005      	beq.n	8008f18 <csp_bind+0x8c>
 8008f0c:	78fb      	ldrb	r3, [r7, #3]
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	4910      	ldr	r1, [pc, #64]	@ (8008f54 <csp_bind+0xc8>)
 8008f12:	2002      	movs	r0, #2
 8008f14:	f7ff fc0c 	bl	8008730 <do_csp_debug>

	/* Save listener */
	ports[port].socket = socket;
 8008f18:	4b0c      	ldr	r3, [pc, #48]	@ (8008f4c <csp_bind+0xc0>)
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	78fb      	ldrb	r3, [r7, #3]
 8008f1e:	00db      	lsls	r3, r3, #3
 8008f20:	4413      	add	r3, r2
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	605a      	str	r2, [r3, #4]
	ports[port].state = PORT_OPEN;
 8008f26:	4b09      	ldr	r3, [pc, #36]	@ (8008f4c <csp_bind+0xc0>)
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	78fb      	ldrb	r3, [r7, #3]
 8008f2c:	00db      	lsls	r3, r3, #3
 8008f2e:	4413      	add	r3, r2
 8008f30:	2201      	movs	r2, #1
 8008f32:	701a      	strb	r2, [r3, #0]

	return CSP_ERR_NONE;
 8008f34:	2300      	movs	r3, #0

}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3708      	adds	r7, #8
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	24042bec 	.word	0x24042bec
 8008f44:	2400008c 	.word	0x2400008c
 8008f48:	08011d8c 	.word	0x08011d8c
 8008f4c:	24042c0c 	.word	0x24042c0c
 8008f50:	08011df8 	.word	0x08011df8
 8008f54:	08011e14 	.word	0x08011e14

08008f58 <csp_qfifo_init>:
static csp_queue_handle_t qfifo[CSP_ROUTE_FIFOS];
#if (CSP_USE_QOS)
static csp_queue_handle_t qfifo_events;
#endif

int csp_qfifo_init(void) {
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b082      	sub	sp, #8
 8008f5c:	af00      	add	r7, sp, #0

	/* Create router fifos for each priority */
	for (int prio = 0; prio < CSP_ROUTE_FIFOS; prio++) {
 8008f5e:	2300      	movs	r3, #0
 8008f60:	607b      	str	r3, [r7, #4]
 8008f62:	e01c      	b.n	8008f9e <csp_qfifo_init+0x46>
		if (qfifo[prio] == NULL) {
 8008f64:	4a12      	ldr	r2, [pc, #72]	@ (8008fb0 <csp_qfifo_init+0x58>)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d113      	bne.n	8008f98 <csp_qfifo_init+0x40>
			qfifo[prio] = csp_queue_create(csp_conf.fifo_length, sizeof(csp_qfifo_t));
 8008f70:	4b10      	ldr	r3, [pc, #64]	@ (8008fb4 <csp_qfifo_init+0x5c>)
 8008f72:	7c9b      	ldrb	r3, [r3, #18]
 8008f74:	2108      	movs	r1, #8
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7fe fcfa 	bl	8007970 <csp_queue_create>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	490c      	ldr	r1, [pc, #48]	@ (8008fb0 <csp_qfifo_init+0x58>)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (!qfifo[prio])
 8008f86:	4a0a      	ldr	r2, [pc, #40]	@ (8008fb0 <csp_qfifo_init+0x58>)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d102      	bne.n	8008f98 <csp_qfifo_init+0x40>
				return CSP_ERR_NOMEM;
 8008f92:	f04f 33ff 	mov.w	r3, #4294967295
 8008f96:	e006      	b.n	8008fa6 <csp_qfifo_init+0x4e>
	for (int prio = 0; prio < CSP_ROUTE_FIFOS; prio++) {
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	607b      	str	r3, [r7, #4]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	dddf      	ble.n	8008f64 <csp_qfifo_init+0xc>
	if (!qfifo_events) {
		return CSP_ERR_NOMEM;
	}
#endif

	return CSP_ERR_NONE;
 8008fa4:	2300      	movs	r3, #0

}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3708      	adds	r7, #8
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	24042c10 	.word	0x24042c10
 8008fb4:	24042bec 	.word	0x24042bec

08008fb8 <csp_qfifo_read>:
	}
#endif

}

int csp_qfifo_read(csp_qfifo_t * input) {
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
	if (!found) {
		csp_log_warn("Spurious wakeup: No packet found");
		return CSP_ERR_TIMEDOUT;
	}
#else
	if (csp_queue_dequeue(qfifo[0], input, FIFO_TIMEOUT) != CSP_QUEUE_OK)
 8008fc0:	4b09      	ldr	r3, [pc, #36]	@ (8008fe8 <csp_qfifo_read+0x30>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8008fc8:	6879      	ldr	r1, [r7, #4]
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7fe fd10 	bl	80079f0 <csp_queue_dequeue>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d002      	beq.n	8008fdc <csp_qfifo_read+0x24>
		return CSP_ERR_TIMEDOUT;
 8008fd6:	f06f 0302 	mvn.w	r3, #2
 8008fda:	e000      	b.n	8008fde <csp_qfifo_read+0x26>
#endif

	return CSP_ERR_NONE;
 8008fdc:	2300      	movs	r3, #0

}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3708      	adds	r7, #8
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	24042c10 	.word	0x24042c10

08008fec <csp_qfifo_write>:

void csp_qfifo_write(csp_packet_t * packet, csp_iface_t * iface, CSP_BASE_TYPE * pxTaskWoken) {
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b088      	sub	sp, #32
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	607a      	str	r2, [r7, #4]

	int result;

	if (packet == NULL) {
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d10b      	bne.n	8009016 <csp_qfifo_write+0x2a>
		if (pxTaskWoken == NULL) { // Only do logging in non-ISR context
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d15f      	bne.n	80090c4 <csp_qfifo_write+0xd8>
			csp_log_warn("csp_new packet called with NULL packet");
 8009004:	4b31      	ldr	r3, [pc, #196]	@ (80090cc <csp_qfifo_write+0xe0>)
 8009006:	785b      	ldrb	r3, [r3, #1]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d05b      	beq.n	80090c4 <csp_qfifo_write+0xd8>
 800900c:	4930      	ldr	r1, [pc, #192]	@ (80090d0 <csp_qfifo_write+0xe4>)
 800900e:	2001      	movs	r0, #1
 8009010:	f7ff fb8e 	bl	8008730 <do_csp_debug>
		}
		return;
 8009014:	e056      	b.n	80090c4 <csp_qfifo_write+0xd8>
	}

	if (iface == NULL) {
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d115      	bne.n	8009048 <csp_qfifo_write+0x5c>
		if (pxTaskWoken == NULL) { // Only do logging in non-ISR context
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d107      	bne.n	8009032 <csp_qfifo_write+0x46>
			csp_log_warn("csp_new packet called with NULL interface");
 8009022:	4b2a      	ldr	r3, [pc, #168]	@ (80090cc <csp_qfifo_write+0xe0>)
 8009024:	785b      	ldrb	r3, [r3, #1]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d003      	beq.n	8009032 <csp_qfifo_write+0x46>
 800902a:	492a      	ldr	r1, [pc, #168]	@ (80090d4 <csp_qfifo_write+0xe8>)
 800902c:	2001      	movs	r0, #1
 800902e:	f7ff fb7f 	bl	8008730 <do_csp_debug>
		}
		if (pxTaskWoken == NULL)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d103      	bne.n	8009040 <csp_qfifo_write+0x54>
			csp_buffer_free(packet);
 8009038:	68f8      	ldr	r0, [r7, #12]
 800903a:	f7fe ff53 	bl	8007ee4 <csp_buffer_free>
		else
			csp_buffer_free_isr(packet);
		return;
 800903e:	e042      	b.n	80090c6 <csp_qfifo_write+0xda>
			csp_buffer_free_isr(packet);
 8009040:	68f8      	ldr	r0, [r7, #12]
 8009042:	f7fe ff15 	bl	8007e70 <csp_buffer_free_isr>
		return;
 8009046:	e03e      	b.n	80090c6 <csp_qfifo_write+0xda>
	}

	csp_qfifo_t queue_element;
	queue_element.iface = iface;
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	613b      	str	r3, [r7, #16]
	queue_element.packet = packet;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	617b      	str	r3, [r7, #20]

#if (CSP_USE_QOS)
	int fifo = packet->id.pri;
#else
	int fifo = 0;
 8009050:	2300      	movs	r3, #0
 8009052:	61bb      	str	r3, [r7, #24]
#endif

	if (pxTaskWoken == NULL)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d10b      	bne.n	8009072 <csp_qfifo_write+0x86>
		result = csp_queue_enqueue(qfifo[fifo], &queue_element, 0);
 800905a:	4a1f      	ldr	r2, [pc, #124]	@ (80090d8 <csp_qfifo_write+0xec>)
 800905c:	69bb      	ldr	r3, [r7, #24]
 800905e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009062:	f107 0110 	add.w	r1, r7, #16
 8009066:	2200      	movs	r2, #0
 8009068:	4618      	mov	r0, r3
 800906a:	f7fe fc9c 	bl	80079a6 <csp_queue_enqueue>
 800906e:	61f8      	str	r0, [r7, #28]
 8009070:	e00a      	b.n	8009088 <csp_qfifo_write+0x9c>
	else
		result = csp_queue_enqueue_isr(qfifo[fifo], &queue_element, pxTaskWoken);
 8009072:	4a19      	ldr	r2, [pc, #100]	@ (80090d8 <csp_qfifo_write+0xec>)
 8009074:	69bb      	ldr	r3, [r7, #24]
 8009076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800907a:	f107 0110 	add.w	r1, r7, #16
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	4618      	mov	r0, r3
 8009082:	f7fe fca4 	bl	80079ce <csp_queue_enqueue_isr>
 8009086:	61f8      	str	r0, [r7, #28]
		else
			csp_queue_enqueue_isr(qfifo_events, &event, pxTaskWoken);
	}
#endif

	if (result != CSP_QUEUE_OK) {
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	2b01      	cmp	r3, #1
 800908c:	d01b      	beq.n	80090c6 <csp_qfifo_write+0xda>
		if (pxTaskWoken == NULL) { // Only do logging in non-ISR context
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d107      	bne.n	80090a4 <csp_qfifo_write+0xb8>
			csp_log_warn("ERROR: Routing input FIFO is FULL. Dropping packet.");
 8009094:	4b0d      	ldr	r3, [pc, #52]	@ (80090cc <csp_qfifo_write+0xe0>)
 8009096:	785b      	ldrb	r3, [r3, #1]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d003      	beq.n	80090a4 <csp_qfifo_write+0xb8>
 800909c:	490f      	ldr	r1, [pc, #60]	@ (80090dc <csp_qfifo_write+0xf0>)
 800909e:	2001      	movs	r0, #1
 80090a0:	f7ff fb46 	bl	8008730 <do_csp_debug>
		}
		iface->drop++;
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090a8:	1c5a      	adds	r2, r3, #1
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	625a      	str	r2, [r3, #36]	@ 0x24
		if (pxTaskWoken == NULL)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d103      	bne.n	80090bc <csp_qfifo_write+0xd0>
			csp_buffer_free(packet);
 80090b4:	68f8      	ldr	r0, [r7, #12]
 80090b6:	f7fe ff15 	bl	8007ee4 <csp_buffer_free>
 80090ba:	e004      	b.n	80090c6 <csp_qfifo_write+0xda>
		else
			csp_buffer_free_isr(packet);
 80090bc:	68f8      	ldr	r0, [r7, #12]
 80090be:	f7fe fed7 	bl	8007e70 <csp_buffer_free_isr>
 80090c2:	e000      	b.n	80090c6 <csp_qfifo_write+0xda>
		return;
 80090c4:	bf00      	nop
	}

}
 80090c6:	3720      	adds	r7, #32
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	2400008c 	.word	0x2400008c
 80090d0:	08011e34 	.word	0x08011e34
 80090d4:	08011e5c 	.word	0x08011e5c
 80090d8:	24042c10 	.word	0x24042c10
 80090dc:	08011e88 	.word	0x08011e88

080090e0 <csp_route_check_options>:
 * @param iface pointer to incoming interface
 * @param packet pointer to packet
 * @return CSP_ERR_NONE is all options are supported, CSP_ERR_NOTSUP if not
 */
static int csp_route_check_options(csp_iface_t *iface, csp_packet_t *packet)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	6039      	str	r1, [r7, #0]
#if (CSP_USE_XTEA == 0)
	/* Drop XTEA packets */
	if (packet->id.flags & CSP_FXTEA) {
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	7b1b      	ldrb	r3, [r3, #12]
 80090ee:	f003 0304 	and.w	r3, r3, #4
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00f      	beq.n	8009116 <csp_route_check_options+0x36>
		csp_log_error("Received XTEA encrypted packet, but CSP was compiled without XTEA support. Discarding packet");
 80090f6:	4b20      	ldr	r3, [pc, #128]	@ (8009178 <csp_route_check_options+0x98>)
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d003      	beq.n	8009106 <csp_route_check_options+0x26>
 80090fe:	491f      	ldr	r1, [pc, #124]	@ (800917c <csp_route_check_options+0x9c>)
 8009100:	2000      	movs	r0, #0
 8009102:	f7ff fb15 	bl	8008730 <do_csp_debug>
		iface->autherr++;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800910a:	1c5a      	adds	r2, r3, #1
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	629a      	str	r2, [r3, #40]	@ 0x28
		return CSP_ERR_NOTSUP;
 8009110:	f06f 0304 	mvn.w	r3, #4
 8009114:	e02c      	b.n	8009170 <csp_route_check_options+0x90>
	}
#endif

#if (CSP_USE_HMAC == 0)
	/* Drop HMAC packets */
	if (packet->id.flags & CSP_FHMAC) {
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	7b1b      	ldrb	r3, [r3, #12]
 800911a:	f003 0308 	and.w	r3, r3, #8
 800911e:	2b00      	cmp	r3, #0
 8009120:	d00f      	beq.n	8009142 <csp_route_check_options+0x62>
		csp_log_error("Received packet with HMAC, but CSP was compiled without HMAC support. Discarding packet");
 8009122:	4b15      	ldr	r3, [pc, #84]	@ (8009178 <csp_route_check_options+0x98>)
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d003      	beq.n	8009132 <csp_route_check_options+0x52>
 800912a:	4915      	ldr	r1, [pc, #84]	@ (8009180 <csp_route_check_options+0xa0>)
 800912c:	2000      	movs	r0, #0
 800912e:	f7ff faff 	bl	8008730 <do_csp_debug>
		iface->autherr++;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009136:	1c5a      	adds	r2, r3, #1
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	629a      	str	r2, [r3, #40]	@ 0x28
		return CSP_ERR_NOTSUP;
 800913c:	f06f 0304 	mvn.w	r3, #4
 8009140:	e016      	b.n	8009170 <csp_route_check_options+0x90>
	}
#endif

#if (CSP_USE_RDP == 0)
	/* Drop RDP packets */
	if (packet->id.flags & CSP_FRDP) {
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	7b1b      	ldrb	r3, [r3, #12]
 8009146:	f003 0302 	and.w	r3, r3, #2
 800914a:	2b00      	cmp	r3, #0
 800914c:	d00f      	beq.n	800916e <csp_route_check_options+0x8e>
		csp_log_error("Received RDP packet, but CSP was compiled without RDP support. Discarding packet");
 800914e:	4b0a      	ldr	r3, [pc, #40]	@ (8009178 <csp_route_check_options+0x98>)
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d003      	beq.n	800915e <csp_route_check_options+0x7e>
 8009156:	490b      	ldr	r1, [pc, #44]	@ (8009184 <csp_route_check_options+0xa4>)
 8009158:	2000      	movs	r0, #0
 800915a:	f7ff fae9 	bl	8008730 <do_csp_debug>
		iface->rx_error++;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6a1b      	ldr	r3, [r3, #32]
 8009162:	1c5a      	adds	r2, r3, #1
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	621a      	str	r2, [r3, #32]
		return CSP_ERR_NOTSUP;
 8009168:	f06f 0304 	mvn.w	r3, #4
 800916c:	e000      	b.n	8009170 <csp_route_check_options+0x90>
	}
#endif
	return CSP_ERR_NONE;
 800916e:	2300      	movs	r3, #0
}
 8009170:	4618      	mov	r0, r3
 8009172:	3708      	adds	r7, #8
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	2400008c 	.word	0x2400008c
 800917c:	08011ebc 	.word	0x08011ebc
 8009180:	08011f1c 	.word	0x08011f1c
 8009184:	08011f74 	.word	0x08011f74

08009188 <csp_route_security_check>:
 * @param security_opts either socket_opts or conn_opts
 * @param iface pointer to incoming interface
 * @param packet pointer to packet
 * @return #CSP_ERR_NONE on success, otherwise an error code.
 */
static int csp_route_security_check(uint32_t security_opts, csp_iface_t * iface, csp_packet_t * packet) {
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
		return CSP_ERR_XTEA;
	}
#endif

	/* CRC32 verified packet */
	if (packet->id.flags & CSP_FCRC32) {
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	7b1b      	ldrb	r3, [r3, #12]
 8009198:	f003 0301 	and.w	r3, r3, #1
 800919c:	2b00      	cmp	r3, #0
 800919e:	d01a      	beq.n	80091d6 <csp_route_security_check+0x4e>
			iface->rx_error++;
			return CSP_ERR_CRC32;
		}
#else
		/* No CRC32 validation - but size must be checked and adjusted */
		if (packet->length < sizeof(uint32_t)) {
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	895b      	ldrh	r3, [r3, #10]
 80091a4:	2b03      	cmp	r3, #3
 80091a6:	d80f      	bhi.n	80091c8 <csp_route_security_check+0x40>
			csp_log_error("CRC32 verification error! Discarding packet");
 80091a8:	4b14      	ldr	r3, [pc, #80]	@ (80091fc <csp_route_security_check+0x74>)
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d003      	beq.n	80091b8 <csp_route_security_check+0x30>
 80091b0:	4913      	ldr	r1, [pc, #76]	@ (8009200 <csp_route_security_check+0x78>)
 80091b2:	2000      	movs	r0, #0
 80091b4:	f7ff fabc 	bl	8008730 <do_csp_debug>
			iface->rx_error++;
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	6a1b      	ldr	r3, [r3, #32]
 80091bc:	1c5a      	adds	r2, r3, #1
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	621a      	str	r2, [r3, #32]
			return CSP_ERR_CRC32;
 80091c2:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80091c6:	e014      	b.n	80091f2 <csp_route_security_check+0x6a>
		}
		packet->length -= sizeof(uint32_t);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	895b      	ldrh	r3, [r3, #10]
 80091cc:	3b04      	subs	r3, #4
 80091ce:	b29a      	uxth	r2, r3
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	815a      	strh	r2, [r3, #10]
 80091d4:	e00c      	b.n	80091f0 <csp_route_security_check+0x68>
#endif
	} else if (security_opts & CSP_SO_CRC32REQ) {
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d007      	beq.n	80091f0 <csp_route_security_check+0x68>
		csp_log_warn("Received packet with CRC32, but CSP was compiled without CRC32 support. Accepting packet");
 80091e0:	4b06      	ldr	r3, [pc, #24]	@ (80091fc <csp_route_security_check+0x74>)
 80091e2:	785b      	ldrb	r3, [r3, #1]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d003      	beq.n	80091f0 <csp_route_security_check+0x68>
 80091e8:	4906      	ldr	r1, [pc, #24]	@ (8009204 <csp_route_security_check+0x7c>)
 80091ea:	2001      	movs	r0, #1
 80091ec:	f7ff faa0 	bl	8008730 <do_csp_debug>
			return CSP_ERR_INVAL;
		}
	}
#endif

	return CSP_ERR_NONE;
 80091f0:	2300      	movs	r3, #0

}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3710      	adds	r7, #16
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	bf00      	nop
 80091fc:	2400008c 	.word	0x2400008c
 8009200:	08011fc8 	.word	0x08011fc8
 8009204:	08011ff4 	.word	0x08011ff4

08009208 <csp_route_work>:

int csp_route_work(uint32_t timeout) {
 8009208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800920a:	b091      	sub	sp, #68	@ 0x44
 800920c:	af06      	add	r7, sp, #24
 800920e:	6078      	str	r0, [r7, #4]
	/* Check connection timeouts (currently only for RDP) */
	csp_conn_check_timeouts();
#endif

	/* Get next packet to route */
	if (csp_qfifo_read(&input) != CSP_ERR_NONE) {
 8009210:	f107 0314 	add.w	r3, r7, #20
 8009214:	4618      	mov	r0, r3
 8009216:	f7ff fecf 	bl	8008fb8 <csp_qfifo_read>
 800921a:	4603      	mov	r3, r0
 800921c:	2b00      	cmp	r3, #0
 800921e:	d002      	beq.n	8009226 <csp_route_work+0x1e>
		return CSP_ERR_TIMEDOUT;
 8009220:	f06f 0302 	mvn.w	r3, #2
 8009224:	e172      	b.n	800950c <csp_route_work+0x304>
	}

	packet = input.packet;
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	613b      	str	r3, [r7, #16]
	if (packet == NULL) {
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d102      	bne.n	8009236 <csp_route_work+0x2e>
		return CSP_ERR_TIMEDOUT;
 8009230:	f06f 0302 	mvn.w	r3, #2
 8009234:	e16a      	b.n	800950c <csp_route_work+0x304>
	}

	csp_log_packet("INP: S %u, D %u, Dp %u, Sp %u, Pr %u, Fl 0x%02X, Sz %"PRIu16" VIA: %s",
 8009236:	4ba3      	ldr	r3, [pc, #652]	@ (80094c4 <csp_route_work+0x2bc>)
 8009238:	791b      	ldrb	r3, [r3, #4]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d031      	beq.n	80092a2 <csp_route_work+0x9a>
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	7bdb      	ldrb	r3, [r3, #15]
 8009242:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8009246:	b2db      	uxtb	r3, r3
 8009248:	461e      	mov	r6, r3
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	89db      	ldrh	r3, [r3, #14]
 800924e:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8009252:	b2db      	uxtb	r3, r3
 8009254:	469c      	mov	ip, r3
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	f3c3 3385 	ubfx	r3, r3, #14, #6
 800925e:	b2db      	uxtb	r3, r3
 8009260:	461a      	mov	r2, r3
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	7b5b      	ldrb	r3, [r3, #13]
 8009266:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800926a:	b2db      	uxtb	r3, r3
 800926c:	4619      	mov	r1, r3
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	7bdb      	ldrb	r3, [r3, #15]
 8009272:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8009276:	b2db      	uxtb	r3, r3
 8009278:	4618      	mov	r0, r3
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	7b1b      	ldrb	r3, [r3, #12]
 800927e:	461c      	mov	r4, r3
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	895b      	ldrh	r3, [r3, #10]
 8009284:	461d      	mov	r5, r3
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	9305      	str	r3, [sp, #20]
 800928c:	9504      	str	r5, [sp, #16]
 800928e:	9403      	str	r4, [sp, #12]
 8009290:	9002      	str	r0, [sp, #8]
 8009292:	9101      	str	r1, [sp, #4]
 8009294:	9200      	str	r2, [sp, #0]
 8009296:	4663      	mov	r3, ip
 8009298:	4632      	mov	r2, r6
 800929a:	498b      	ldr	r1, [pc, #556]	@ (80094c8 <csp_route_work+0x2c0>)
 800929c:	2004      	movs	r0, #4
 800929e:	f7ff fa47 	bl	8008730 <do_csp_debug>
		return CSP_ERR_NONE;
	}
#endif

	/* Now we count the message (since its deduplicated) */
	input.iface->rx++;
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	699a      	ldr	r2, [r3, #24]
 80092a6:	3201      	adds	r2, #1
 80092a8:	619a      	str	r2, [r3, #24]
	input.iface->rxbytes += packet->length;
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	895b      	ldrh	r3, [r3, #10]
 80092b2:	4619      	mov	r1, r3
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	440a      	add	r2, r1
 80092b8:	635a      	str	r2, [r3, #52]	@ 0x34

	/* If the message is not to me, route the message to the correct interface */
	if ((packet->id.dst != csp_conf.address) && (packet->id.dst != CSP_BROADCAST_ADDR)) {
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	89db      	ldrh	r3, [r3, #14]
 80092be:	f3c3 1304 	ubfx	r3, r3, #4, #5
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	461a      	mov	r2, r3
 80092c6:	4b81      	ldr	r3, [pc, #516]	@ (80094cc <csp_route_work+0x2c4>)
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d03a      	beq.n	8009344 <csp_route_work+0x13c>
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	89db      	ldrh	r3, [r3, #14]
 80092d2:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	f5b3 7ff8 	cmp.w	r3, #496	@ 0x1f0
 80092dc:	d032      	beq.n	8009344 <csp_route_work+0x13c>

		/* Find the destination interface */
		const csp_route_t * ifroute = csp_rtable_find_route(packet->id.dst);
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	89db      	ldrh	r3, [r3, #14]
 80092e2:	f3c3 1304 	ubfx	r3, r3, #4, #5
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	4618      	mov	r0, r3
 80092ea:	f000 fddd 	bl	8009ea8 <csp_rtable_find_route>
 80092ee:	6238      	str	r0, [r7, #32]

		/* If the message resolves to the input interface, don't loop it back out */
		if ((ifroute == NULL) || ((ifroute->iface == input.iface) && (input.iface->split_horizon_off == 0))) {
 80092f0:	6a3b      	ldr	r3, [r7, #32]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d008      	beq.n	8009308 <csp_route_work+0x100>
 80092f6:	6a3b      	ldr	r3, [r7, #32]
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d109      	bne.n	8009314 <csp_route_work+0x10c>
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	7c9b      	ldrb	r3, [r3, #18]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d105      	bne.n	8009314 <csp_route_work+0x10c>
			csp_buffer_free(packet);
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	4618      	mov	r0, r3
 800930c:	f7fe fdea 	bl	8007ee4 <csp_buffer_free>
			return CSP_ERR_NONE;
 8009310:	2300      	movs	r3, #0
 8009312:	e0fb      	b.n	800950c <csp_route_work+0x304>
		}

		/* Otherwise, actually send the message */
		if (csp_send_direct(packet->id, packet, ifroute, 0) != CSP_ERR_NONE) {
 8009314:	6938      	ldr	r0, [r7, #16]
 8009316:	6939      	ldr	r1, [r7, #16]
 8009318:	2300      	movs	r3, #0
 800931a:	6a3a      	ldr	r2, [r7, #32]
 800931c:	68c0      	ldr	r0, [r0, #12]
 800931e:	f7ff fc1b 	bl	8008b58 <csp_send_direct>
 8009322:	4603      	mov	r3, r0
 8009324:	2b00      	cmp	r3, #0
 8009326:	d00b      	beq.n	8009340 <csp_route_work+0x138>
			csp_log_warn("Router failed to send");
 8009328:	4b66      	ldr	r3, [pc, #408]	@ (80094c4 <csp_route_work+0x2bc>)
 800932a:	785b      	ldrb	r3, [r3, #1]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d003      	beq.n	8009338 <csp_route_work+0x130>
 8009330:	4967      	ldr	r1, [pc, #412]	@ (80094d0 <csp_route_work+0x2c8>)
 8009332:	2001      	movs	r0, #1
 8009334:	f7ff f9fc 	bl	8008730 <do_csp_debug>
			csp_buffer_free(packet);
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	4618      	mov	r0, r3
 800933c:	f7fe fdd2 	bl	8007ee4 <csp_buffer_free>
		}

		/* Next message, please */
		return CSP_ERR_NONE;
 8009340:	2300      	movs	r3, #0
 8009342:	e0e3      	b.n	800950c <csp_route_work+0x304>
	}

	/* Discard packets with unsupported options */
	if (csp_route_check_options(input.iface, packet) != CSP_ERR_NONE) {
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	693a      	ldr	r2, [r7, #16]
 8009348:	4611      	mov	r1, r2
 800934a:	4618      	mov	r0, r3
 800934c:	f7ff fec8 	bl	80090e0 <csp_route_check_options>
 8009350:	4603      	mov	r3, r0
 8009352:	2b00      	cmp	r3, #0
 8009354:	d005      	beq.n	8009362 <csp_route_work+0x15a>
		csp_buffer_free(packet);
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	4618      	mov	r0, r3
 800935a:	f7fe fdc3 	bl	8007ee4 <csp_buffer_free>
		return CSP_ERR_NONE;
 800935e:	2300      	movs	r3, #0
 8009360:	e0d4      	b.n	800950c <csp_route_work+0x304>
	}

	/* The message is to me, search for incoming socket */
	socket = csp_port_get_socket(packet->id.dport);
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	68db      	ldr	r3, [r3, #12]
 8009366:	f3c3 3385 	ubfx	r3, r3, #14, #6
 800936a:	b2db      	uxtb	r3, r3
 800936c:	4618      	mov	r0, r3
 800936e:	f7ff fd13 	bl	8008d98 <csp_port_get_socket>
 8009372:	61f8      	str	r0, [r7, #28]

	/* If the socket is connection-less, deliver now */
	if (socket && (socket->opts & CSP_SO_CONN_LESS)) {
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d030      	beq.n	80093dc <csp_route_work+0x1d4>
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	699b      	ldr	r3, [r3, #24]
 800937e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009382:	2b00      	cmp	r3, #0
 8009384:	d02a      	beq.n	80093dc <csp_route_work+0x1d4>
		if (csp_route_security_check(socket->opts, input.iface, packet) < 0) {
 8009386:	69fb      	ldr	r3, [r7, #28]
 8009388:	699b      	ldr	r3, [r3, #24]
 800938a:	6979      	ldr	r1, [r7, #20]
 800938c:	693a      	ldr	r2, [r7, #16]
 800938e:	4618      	mov	r0, r3
 8009390:	f7ff fefa 	bl	8009188 <csp_route_security_check>
 8009394:	4603      	mov	r3, r0
 8009396:	2b00      	cmp	r3, #0
 8009398:	da05      	bge.n	80093a6 <csp_route_work+0x19e>
			csp_buffer_free(packet);
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	4618      	mov	r0, r3
 800939e:	f7fe fda1 	bl	8007ee4 <csp_buffer_free>
			return CSP_ERR_NONE;
 80093a2:	2300      	movs	r3, #0
 80093a4:	e0b2      	b.n	800950c <csp_route_work+0x304>
		}
		if (csp_queue_enqueue(socket->socket, &packet, 0) != CSP_QUEUE_OK) {
 80093a6:	69fb      	ldr	r3, [r7, #28]
 80093a8:	691b      	ldr	r3, [r3, #16]
 80093aa:	f107 0110 	add.w	r1, r7, #16
 80093ae:	2200      	movs	r2, #0
 80093b0:	4618      	mov	r0, r3
 80093b2:	f7fe faf8 	bl	80079a6 <csp_queue_enqueue>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d00d      	beq.n	80093d8 <csp_route_work+0x1d0>
			csp_log_error("Conn-less socket queue full");
 80093bc:	4b41      	ldr	r3, [pc, #260]	@ (80094c4 <csp_route_work+0x2bc>)
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d003      	beq.n	80093cc <csp_route_work+0x1c4>
 80093c4:	4943      	ldr	r1, [pc, #268]	@ (80094d4 <csp_route_work+0x2cc>)
 80093c6:	2000      	movs	r0, #0
 80093c8:	f7ff f9b2 	bl	8008730 <do_csp_debug>
			csp_buffer_free(packet);
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fe fd88 	bl	8007ee4 <csp_buffer_free>
			return CSP_ERR_NONE;
 80093d4:	2300      	movs	r3, #0
 80093d6:	e099      	b.n	800950c <csp_route_work+0x304>
		}
		return CSP_ERR_NONE;
 80093d8:	2300      	movs	r3, #0
 80093da:	e097      	b.n	800950c <csp_route_work+0x304>
	}

	/* Search for an existing connection */
	conn = csp_conn_find(packet->id.ext, CSP_ID_CONN_MASK);
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	493d      	ldr	r1, [pc, #244]	@ (80094d8 <csp_route_work+0x2d0>)
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7fe ff1a 	bl	800821c <csp_conn_find>
 80093e8:	6278      	str	r0, [r7, #36]	@ 0x24

	/* If this is an incoming packet on a new connection */
	if (conn == NULL) {
 80093ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d177      	bne.n	80094e0 <csp_route_work+0x2d8>

		/* Reject packet if no matching socket is found */
		if (!socket) {
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d105      	bne.n	8009402 <csp_route_work+0x1fa>
			csp_buffer_free(packet);
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7fe fd73 	bl	8007ee4 <csp_buffer_free>
			return CSP_ERR_NONE;
 80093fe:	2300      	movs	r3, #0
 8009400:	e084      	b.n	800950c <csp_route_work+0x304>
		}

		/* Run security check on incoming packet */
		if (csp_route_security_check(socket->opts, input.iface, packet) < 0) {
 8009402:	69fb      	ldr	r3, [r7, #28]
 8009404:	699b      	ldr	r3, [r3, #24]
 8009406:	6979      	ldr	r1, [r7, #20]
 8009408:	693a      	ldr	r2, [r7, #16]
 800940a:	4618      	mov	r0, r3
 800940c:	f7ff febc 	bl	8009188 <csp_route_security_check>
 8009410:	4603      	mov	r3, r0
 8009412:	2b00      	cmp	r3, #0
 8009414:	da05      	bge.n	8009422 <csp_route_work+0x21a>
			csp_buffer_free(packet);
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	4618      	mov	r0, r3
 800941a:	f7fe fd63 	bl	8007ee4 <csp_buffer_free>
			return CSP_ERR_NONE;
 800941e:	2300      	movs	r3, #0
 8009420:	e074      	b.n	800950c <csp_route_work+0x304>
		}

		/* New incoming connection accepted */
		csp_id_t idout;
		idout.pri   = packet->id.pri;
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	7bdb      	ldrb	r3, [r3, #15]
 8009426:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800942a:	b2da      	uxtb	r2, r3
 800942c:	7bfb      	ldrb	r3, [r7, #15]
 800942e:	f362 1387 	bfi	r3, r2, #6, #2
 8009432:	73fb      	strb	r3, [r7, #15]
		idout.src   = csp_conf.address;
 8009434:	4b25      	ldr	r3, [pc, #148]	@ (80094cc <csp_route_work+0x2c4>)
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	f003 031f 	and.w	r3, r3, #31
 800943c:	b2da      	uxtb	r2, r3
 800943e:	7bfb      	ldrb	r3, [r7, #15]
 8009440:	f362 0345 	bfi	r3, r2, #1, #5
 8009444:	73fb      	strb	r3, [r7, #15]

		idout.dst   = packet->id.src;
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	7bdb      	ldrb	r3, [r3, #15]
 800944a:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800944e:	b2da      	uxtb	r2, r3
 8009450:	89fb      	ldrh	r3, [r7, #14]
 8009452:	f362 1308 	bfi	r3, r2, #4, #5
 8009456:	81fb      	strh	r3, [r7, #14]
		idout.dport = packet->id.sport;
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	7b5b      	ldrb	r3, [r3, #13]
 800945c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8009460:	b2da      	uxtb	r2, r3
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f362 3393 	bfi	r3, r2, #14, #6
 8009468:	60fb      	str	r3, [r7, #12]
		idout.sport = packet->id.dport;
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	f3c3 3385 	ubfx	r3, r3, #14, #6
 8009472:	b2da      	uxtb	r2, r3
 8009474:	7b7b      	ldrb	r3, [r7, #13]
 8009476:	f362 0305 	bfi	r3, r2, #0, #6
 800947a:	737b      	strb	r3, [r7, #13]
		idout.flags = packet->id.flags;
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	7b1b      	ldrb	r3, [r3, #12]
 8009480:	733b      	strb	r3, [r7, #12]

		/* Create connection */
		conn = csp_conn_new(packet->id, idout);
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	68f9      	ldr	r1, [r7, #12]
 8009486:	68d8      	ldr	r0, [r3, #12]
 8009488:	f7fe ffb0 	bl	80083ec <csp_conn_new>
 800948c:	6278      	str	r0, [r7, #36]	@ 0x24

		if (!conn) {
 800948e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009490:	2b00      	cmp	r3, #0
 8009492:	d10d      	bne.n	80094b0 <csp_route_work+0x2a8>
			csp_log_error("No more connections available");
 8009494:	4b0b      	ldr	r3, [pc, #44]	@ (80094c4 <csp_route_work+0x2bc>)
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d003      	beq.n	80094a4 <csp_route_work+0x29c>
 800949c:	490f      	ldr	r1, [pc, #60]	@ (80094dc <csp_route_work+0x2d4>)
 800949e:	2000      	movs	r0, #0
 80094a0:	f7ff f946 	bl	8008730 <do_csp_debug>
			csp_buffer_free(packet);
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7fe fd1c 	bl	8007ee4 <csp_buffer_free>
			return CSP_ERR_NONE;
 80094ac:	2300      	movs	r3, #0
 80094ae:	e02d      	b.n	800950c <csp_route_work+0x304>
		}

		/* Store the socket queue and options */
		conn->socket = socket->socket;
 80094b0:	69fb      	ldr	r3, [r7, #28]
 80094b2:	691a      	ldr	r2, [r3, #16]
 80094b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094b6:	611a      	str	r2, [r3, #16]
		conn->opts = socket->opts;
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	699a      	ldr	r2, [r3, #24]
 80094bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094be:	619a      	str	r2, [r3, #24]
 80094c0:	e01e      	b.n	8009500 <csp_route_work+0x2f8>
 80094c2:	bf00      	nop
 80094c4:	2400008c 	.word	0x2400008c
 80094c8:	08012050 	.word	0x08012050
 80094cc:	24042bec 	.word	0x24042bec
 80094d0:	08012090 	.word	0x08012090
 80094d4:	080120a8 	.word	0x080120a8
 80094d8:	3fffff00 	.word	0x3fffff00
 80094dc:	080120c4 	.word	0x080120c4

	/* Packet to existing connection */
	} else {

		/* Run security check on incoming packet */
		if (csp_route_security_check(conn->opts, input.iface, packet) < 0) {
 80094e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094e2:	699b      	ldr	r3, [r3, #24]
 80094e4:	6979      	ldr	r1, [r7, #20]
 80094e6:	693a      	ldr	r2, [r7, #16]
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7ff fe4d 	bl	8009188 <csp_route_security_check>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	da05      	bge.n	8009500 <csp_route_work+0x2f8>
			csp_buffer_free(packet);
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7fe fcf4 	bl	8007ee4 <csp_buffer_free>
			return CSP_ERR_NONE;
 80094fc:	2300      	movs	r3, #0
 80094fe:	e005      	b.n	800950c <csp_route_work+0x304>
		return CSP_ERR_NONE;
	}
#endif

	/* Pass packet to UDP module */
	csp_udp_new_packet(conn, packet);
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	4619      	mov	r1, r3
 8009504:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009506:	f000 fd31 	bl	8009f6c <csp_udp_new_packet>
	return CSP_ERR_NONE;
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	372c      	adds	r7, #44	@ 0x2c
 8009510:	46bd      	mov	sp, r7
 8009512:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009514 <csp_task_router>:

static CSP_DEFINE_TASK(csp_task_router) {
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]

	/* Here there be routing */
	while (1) {
		csp_route_work(FIFO_TIMEOUT);
 800951c:	f04f 30ff 	mov.w	r0, #4294967295
 8009520:	f7ff fe72 	bl	8009208 <csp_route_work>
 8009524:	e7fa      	b.n	800951c <csp_task_router+0x8>
	...

08009528 <csp_route_start_task>:

	return CSP_TASK_RETURN;

}

int csp_route_start_task(unsigned int task_stack_size, unsigned int task_priority) {
 8009528:	b580      	push	{r7, lr}
 800952a:	b086      	sub	sp, #24
 800952c:	af02      	add	r7, sp, #8
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]

	int ret = csp_thread_create(csp_task_router, "RTE", task_stack_size, NULL, task_priority, NULL);
 8009532:	2300      	movs	r3, #0
 8009534:	9301      	str	r3, [sp, #4]
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	9300      	str	r3, [sp, #0]
 800953a:	2300      	movs	r3, #0
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	490c      	ldr	r1, [pc, #48]	@ (8009570 <csp_route_start_task+0x48>)
 8009540:	480c      	ldr	r0, [pc, #48]	@ (8009574 <csp_route_start_task+0x4c>)
 8009542:	f7fe fb4d 	bl	8007be0 <csp_thread_create>
 8009546:	60f8      	str	r0, [r7, #12]
	if (ret != 0) {
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d00a      	beq.n	8009564 <csp_route_start_task+0x3c>
		csp_log_error("Failed to start router task, error: %d", ret);
 800954e:	4b0a      	ldr	r3, [pc, #40]	@ (8009578 <csp_route_start_task+0x50>)
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d004      	beq.n	8009560 <csp_route_start_task+0x38>
 8009556:	68fa      	ldr	r2, [r7, #12]
 8009558:	4908      	ldr	r1, [pc, #32]	@ (800957c <csp_route_start_task+0x54>)
 800955a:	2000      	movs	r0, #0
 800955c:	f7ff f8e8 	bl	8008730 <do_csp_debug>
		return ret;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	e000      	b.n	8009566 <csp_route_start_task+0x3e>
	}

	return CSP_ERR_NONE;
 8009564:	2300      	movs	r3, #0

}
 8009566:	4618      	mov	r0, r3
 8009568:	3710      	adds	r7, #16
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	080120e4 	.word	0x080120e4
 8009574:	08009515 	.word	0x08009515
 8009578:	2400008c 	.word	0x2400008c
 800957c:	080120e8 	.word	0x080120e8

08009580 <csp_can_tx_frame>:
extern FDCAN_HandleTypeDef hfdcan2;

csp_can_interface_data_t can_ifdata;
csp_iface_t can_iface;

static int csp_can_tx_frame(void *driver_data, uint32_t id, const uint8_t *data, uint8_t dlc) {
 8009580:	b580      	push	{r7, lr}
 8009582:	b08e      	sub	sp, #56	@ 0x38
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	60b9      	str	r1, [r7, #8]
 800958a:	607a      	str	r2, [r7, #4]
 800958c:	70fb      	strb	r3, [r7, #3]

    FDCAN_TxHeaderTypeDef txHeader;
    txHeader.Identifier          = (uint32_t)id;
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	617b      	str	r3, [r7, #20]
    txHeader.IdType              = FDCAN_EXTENDED_ID;
 8009592:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009596:	61bb      	str	r3, [r7, #24]
    txHeader.TxFrameType         = FDCAN_DATA_FRAME;
 8009598:	2300      	movs	r3, #0
 800959a:	61fb      	str	r3, [r7, #28]
    txHeader.DataLength          = dlc;
 800959c:	78fb      	ldrb	r3, [r7, #3]
 800959e:	623b      	str	r3, [r7, #32]
    txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80095a0:	2300      	movs	r3, #0
 80095a2:	627b      	str	r3, [r7, #36]	@ 0x24
    txHeader.BitRateSwitch       = FDCAN_BRS_OFF;
 80095a4:	2300      	movs	r3, #0
 80095a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    txHeader.FDFormat            = FDCAN_CLASSIC_CAN;
 80095a8:	2300      	movs	r3, #0
 80095aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    txHeader.TxEventFifoControl  = FDCAN_NO_TX_EVENTS;
 80095ac:	2300      	movs	r3, #0
 80095ae:	633b      	str	r3, [r7, #48]	@ 0x30
    txHeader.MessageMarker       = 0;
 80095b0:	2300      	movs	r3, #0
 80095b2:	637b      	str	r3, [r7, #52]	@ 0x34

    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &txHeader, data) != HAL_OK) {
 80095b4:	f107 0314 	add.w	r3, r7, #20
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	4619      	mov	r1, r3
 80095bc:	4806      	ldr	r0, [pc, #24]	@ (80095d8 <csp_can_tx_frame+0x58>)
 80095be:	f001 fa22 	bl	800aa06 <HAL_FDCAN_AddMessageToTxFifoQ>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d002      	beq.n	80095ce <csp_can_tx_frame+0x4e>
        return CSP_ERR_DRIVER;
 80095c8:	f06f 030a 	mvn.w	r3, #10
 80095cc:	e000      	b.n	80095d0 <csp_can_tx_frame+0x50>
    }

	return CSP_ERR_NONE;
 80095ce:	2300      	movs	r3, #0
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3738      	adds	r7, #56	@ 0x38
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	24000154 	.word	0x24000154

080095dc <can_csp_init>:

void can_csp_init(void) {
 80095dc:	b580      	push	{r7, lr}
 80095de:	b088      	sub	sp, #32
 80095e0:	af00      	add	r7, sp, #0
	FDCAN_FilterTypeDef sFilterConfig = {
 80095e2:	463b      	mov	r3, r7
 80095e4:	2220      	movs	r2, #32
 80095e6:	2100      	movs	r1, #0
 80095e8:	4618      	mov	r0, r3
 80095ea:	f006 fcd9 	bl	800ffa0 <memset>
 80095ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80095f2:	603b      	str	r3, [r7, #0]
 80095f4:	2303      	movs	r3, #3
 80095f6:	60bb      	str	r3, [r7, #8]
 80095f8:	2301      	movs	r3, #1
 80095fa:	60fb      	str	r3, [r7, #12]
 80095fc:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8009600:	617b      	str	r3, [r7, #20]
		.FilterType = FDCAN_FILTER_RANGE_NO_EIDM,
		.FilterConfig = FDCAN_FILTER_TO_RXFIFO0,
		.FilterID1 = 0x00000000,
		.FilterID2 = 0x1FFFFFFF
	};
	HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig);
 8009602:	463b      	mov	r3, r7
 8009604:	4619      	mov	r1, r3
 8009606:	480f      	ldr	r0, [pc, #60]	@ (8009644 <can_csp_init+0x68>)
 8009608:	f001 f95c 	bl	800a8c4 <HAL_FDCAN_ConfigFilter>

	HAL_FDCAN_Start(&hfdcan2);
 800960c:	480d      	ldr	r0, [pc, #52]	@ (8009644 <can_csp_init+0x68>)
 800960e:	f001 f9cf 	bl	800a9b0 <HAL_FDCAN_Start>

	HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8009612:	2200      	movs	r2, #0
 8009614:	2101      	movs	r1, #1
 8009616:	480b      	ldr	r0, [pc, #44]	@ (8009644 <can_csp_init+0x68>)
 8009618:	f001 fbbc 	bl	800ad94 <HAL_FDCAN_ActivateNotification>

	can_ifdata.tx_func			= csp_can_tx_frame;
 800961c:	4b0a      	ldr	r3, [pc, #40]	@ (8009648 <can_csp_init+0x6c>)
 800961e:	4a0b      	ldr	r2, [pc, #44]	@ (800964c <can_csp_init+0x70>)
 8009620:	605a      	str	r2, [r3, #4]
	can_iface.name				= "can";
 8009622:	4b0b      	ldr	r3, [pc, #44]	@ (8009650 <can_csp_init+0x74>)
 8009624:	4a0b      	ldr	r2, [pc, #44]	@ (8009654 <can_csp_init+0x78>)
 8009626:	601a      	str	r2, [r3, #0]
	can_iface.driver_data		= &hfdcan2;
 8009628:	4b09      	ldr	r3, [pc, #36]	@ (8009650 <can_csp_init+0x74>)
 800962a:	4a06      	ldr	r2, [pc, #24]	@ (8009644 <can_csp_init+0x68>)
 800962c:	609a      	str	r2, [r3, #8]
	can_iface.interface_data	= &can_ifdata;
 800962e:	4b08      	ldr	r3, [pc, #32]	@ (8009650 <can_csp_init+0x74>)
 8009630:	4a05      	ldr	r2, [pc, #20]	@ (8009648 <can_csp_init+0x6c>)
 8009632:	605a      	str	r2, [r3, #4]
	csp_can_add_interface(&can_iface);
 8009634:	4806      	ldr	r0, [pc, #24]	@ (8009650 <can_csp_init+0x74>)
 8009636:	f000 fa3f 	bl	8009ab8 <csp_can_add_interface>
}
 800963a:	bf00      	nop
 800963c:	3720      	adds	r7, #32
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	24000154 	.word	0x24000154
 8009648:	24042c14 	.word	0x24042c14
 800964c:	08009581 	.word	0x08009581
 8009650:	24042c1c 	.word	0x24042c1c
 8009654:	08012110 	.word	0x08012110

08009658 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b092      	sub	sp, #72	@ 0x48
 800965c:	af02      	add	r7, sp, #8
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
    FDCAN_RxHeaderTypeDef rxHeader;
    uint8_t rxData[8];
    CSP_BASE_TYPE xCspTaskWoken = pdFALSE;
 8009662:	2300      	movs	r3, #0
 8009664:	60fb      	str	r3, [r7, #12]

    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rxHeader, rxData) == HAL_OK) {
 8009666:	f107 0310 	add.w	r3, r7, #16
 800966a:	f107 0218 	add.w	r2, r7, #24
 800966e:	2140      	movs	r1, #64	@ 0x40
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f001 fa23 	bl	800aabc <HAL_FDCAN_GetRxMessage>
 8009676:	4603      	mov	r3, r0
 8009678:	2b00      	cmp	r3, #0
 800967a:	d119      	bne.n	80096b0 <HAL_FDCAN_RxFifo0Callback+0x58>
    	csp_can_rx(&can_iface, rxHeader.Identifier, rxData, rxHeader.DataLength, &xCspTaskWoken);
 800967c:	69b9      	ldr	r1, [r7, #24]
 800967e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009680:	b2d8      	uxtb	r0, r3
 8009682:	f107 0210 	add.w	r2, r7, #16
 8009686:	f107 030c 	add.w	r3, r7, #12
 800968a:	9300      	str	r3, [sp, #0]
 800968c:	4603      	mov	r3, r0
 800968e:	480a      	ldr	r0, [pc, #40]	@ (80096b8 <HAL_FDCAN_RxFifo0Callback+0x60>)
 8009690:	f000 f816 	bl	80096c0 <csp_can_rx>

    	if(xCspTaskWoken) {
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d00a      	beq.n	80096b0 <HAL_FDCAN_RxFifo0Callback+0x58>
    		portYIELD_FROM_ISR(xCspTaskWoken);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d007      	beq.n	80096b0 <HAL_FDCAN_RxFifo0Callback+0x58>
 80096a0:	4b06      	ldr	r3, [pc, #24]	@ (80096bc <HAL_FDCAN_RxFifo0Callback+0x64>)
 80096a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096a6:	601a      	str	r2, [r3, #0]
 80096a8:	f3bf 8f4f 	dsb	sy
 80096ac:	f3bf 8f6f 	isb	sy
    	}
	}
}
 80096b0:	bf00      	nop
 80096b2:	3740      	adds	r7, #64	@ 0x40
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	24042c1c 	.word	0x24042c1c
 80096bc:	e000ed04 	.word	0xe000ed04

080096c0 <csp_can_rx>:
	/* Remaining CFP fragment(s) of a CSP packet */
	CFP_MORE = 1
};

int csp_can_rx(csp_iface_t *iface, uint32_t id, const uint8_t *data, uint8_t dlc, CSP_BASE_TYPE *task_woken)
{
 80096c0:	b590      	push	{r4, r7, lr}
 80096c2:	b087      	sub	sp, #28
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	607a      	str	r2, [r7, #4]
 80096cc:	70fb      	strb	r3, [r7, #3]
			return CSP_ERR_DRIVER;
		}
	}

	/* Bind incoming frame to a packet buffer */
	csp_can_pbuf_element_t * buf = csp_can_pbuf_find(id, CFP_ID_CONN_MASK, task_woken);
 80096ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80096d0:	4989      	ldr	r1, [pc, #548]	@ (80098f8 <csp_can_rx+0x238>)
 80096d2:	68b8      	ldr	r0, [r7, #8]
 80096d4:	f000 fad8 	bl	8009c88 <csp_can_pbuf_find>
 80096d8:	6178      	str	r0, [r7, #20]
	if (buf == NULL) {
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d11d      	bne.n	800971c <csp_can_rx+0x5c>
		if (CFP_TYPE(id) == CFP_BEGIN) {
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	0c9b      	lsrs	r3, r3, #18
 80096e4:	f003 0301 	and.w	r3, r3, #1
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d10f      	bne.n	800970c <csp_can_rx+0x4c>
			buf = csp_can_pbuf_new(id, task_woken);
 80096ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80096ee:	68b8      	ldr	r0, [r7, #8]
 80096f0:	f000 fa4a 	bl	8009b88 <csp_can_pbuf_new>
 80096f4:	6178      	str	r0, [r7, #20]
			if (buf == NULL) {
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d10f      	bne.n	800971c <csp_can_rx+0x5c>
				//csp_log_warn("No available packet buffer for CAN");
				iface->rx_error++;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6a1b      	ldr	r3, [r3, #32]
 8009700:	1c5a      	adds	r2, r3, #1
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	621a      	str	r2, [r3, #32]
				return CSP_ERR_NOMEM;
 8009706:	f04f 33ff 	mov.w	r3, #4294967295
 800970a:	e0f1      	b.n	80098f0 <csp_can_rx+0x230>
			}
		} else {
			//csp_log_warn("Out of order id 0x%X remain %u", CFP_ID(id), CFP_REMAIN(id));
			iface->frame++;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009710:	1c5a      	adds	r2, r3, #1
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	62da      	str	r2, [r3, #44]	@ 0x2c
			return CSP_ERR_INVAL;
 8009716:	f06f 0301 	mvn.w	r3, #1
 800971a:	e0e9      	b.n	80098f0 <csp_can_rx+0x230>
		}
	}

	/* Reset frame data offset */
	uint8_t offset = 0;
 800971c:	2300      	movs	r3, #0
 800971e:	74fb      	strb	r3, [r7, #19]

	switch (CFP_TYPE(id)) {
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	0c9b      	lsrs	r3, r3, #18
 8009724:	f003 0301 	and.w	r3, r3, #1
 8009728:	2b00      	cmp	r3, #0
 800972a:	d002      	beq.n	8009732 <csp_can_rx+0x72>
 800972c:	2b01      	cmp	r3, #1
 800972e:	d07a      	beq.n	8009826 <csp_can_rx+0x166>
 8009730:	e0d7      	b.n	80098e2 <csp_can_rx+0x222>

	case CFP_BEGIN:

		/* Discard packet if DLC is less than CSP id + CSP length fields */
		if (dlc < (sizeof(csp_id_t) + sizeof(uint16_t))) {
 8009732:	78fb      	ldrb	r3, [r7, #3]
 8009734:	2b05      	cmp	r3, #5
 8009736:	d809      	bhi.n	800974c <csp_can_rx+0x8c>
			//csp_log_warn("Short BEGIN frame received");
			iface->frame++;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800973c:	1c5a      	adds	r2, r3, #1
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	62da      	str	r2, [r3, #44]	@ 0x2c
			csp_can_pbuf_free(buf, task_woken);
 8009742:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009744:	6978      	ldr	r0, [r7, #20]
 8009746:	f000 f9f1 	bl	8009b2c <csp_can_pbuf_free>
			break;
 800974a:	e0d0      	b.n	80098ee <csp_can_rx+0x22e>
		}

		/* Check for incomplete frame */
		if (buf->packet != NULL) {
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d005      	beq.n	8009760 <csp_can_rx+0xa0>
			/* Reuse the buffer */
			//csp_log_warn("Incomplete frame");
			iface->frame++;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009758:	1c5a      	adds	r2, r3, #1
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800975e:	e01b      	b.n	8009798 <csp_can_rx+0xd8>
		} else {
			/* Get free buffer for frame */
			buf->packet = task_woken ? csp_buffer_get_isr(0) : csp_buffer_get(0); // CSP only supports one size
 8009760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009762:	2b00      	cmp	r3, #0
 8009764:	d004      	beq.n	8009770 <csp_can_rx+0xb0>
 8009766:	2000      	movs	r0, #0
 8009768:	f7fe faee 	bl	8007d48 <csp_buffer_get_isr>
 800976c:	4603      	mov	r3, r0
 800976e:	e003      	b.n	8009778 <csp_can_rx+0xb8>
 8009770:	2000      	movs	r0, #0
 8009772:	f7fe fb1b 	bl	8007dac <csp_buffer_get>
 8009776:	4603      	mov	r3, r0
 8009778:	697a      	ldr	r2, [r7, #20]
 800977a:	60d3      	str	r3, [r2, #12]
			if (buf->packet == NULL) {
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d109      	bne.n	8009798 <csp_can_rx+0xd8>
				//csp_log_error("Failed to get buffer for CSP_BEGIN packet");
				iface->frame++;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009788:	1c5a      	adds	r2, r3, #1
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	62da      	str	r2, [r3, #44]	@ 0x2c
				csp_can_pbuf_free(buf, task_woken);
 800978e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009790:	6978      	ldr	r0, [r7, #20]
 8009792:	f000 f9cb 	bl	8009b2c <csp_can_pbuf_free>
				break;
 8009796:	e0aa      	b.n	80098ee <csp_can_rx+0x22e>
			}
		}

		/* Copy CSP identifier (header) */
		memcpy(&(buf->packet->id), data, sizeof(buf->packet->id));
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	330c      	adds	r3, #12
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	6812      	ldr	r2, [r2, #0]
 80097a2:	601a      	str	r2, [r3, #0]
		buf->packet->id.ext = csp_ntoh32(buf->packet->id.ext);
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	68da      	ldr	r2, [r3, #12]
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	68dc      	ldr	r4, [r3, #12]
 80097ae:	4610      	mov	r0, r2
 80097b0:	f7ff f865 	bl	800887e <csp_ntoh32>
 80097b4:	4603      	mov	r3, r0
 80097b6:	60e3      	str	r3, [r4, #12]

		/* Copy CSP length (of data) */
		memcpy(&(buf->packet->length), data + sizeof(csp_id_t), sizeof(buf->packet->length));
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	330a      	adds	r3, #10
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	3204      	adds	r2, #4
 80097c2:	8812      	ldrh	r2, [r2, #0]
 80097c4:	b292      	uxth	r2, r2
 80097c6:	801a      	strh	r2, [r3, #0]
		buf->packet->length = csp_ntoh16(buf->packet->length);
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	895a      	ldrh	r2, [r3, #10]
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	68dc      	ldr	r4, [r3, #12]
 80097d2:	4610      	mov	r0, r2
 80097d4:	f7ff f82c 	bl	8008830 <csp_ntoh16>
 80097d8:	4603      	mov	r3, r0
 80097da:	8163      	strh	r3, [r4, #10]

		/* Check length against max */
		if ((buf->packet->length > MAX_CAN_DATA_SIZE) || (buf->packet->length > csp_buffer_data_size())) {
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	895b      	ldrh	r3, [r3, #10]
 80097e2:	f240 72fa 	movw	r2, #2042	@ 0x7fa
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d808      	bhi.n	80097fc <csp_can_rx+0x13c>
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	68db      	ldr	r3, [r3, #12]
 80097ee:	895b      	ldrh	r3, [r3, #10]
 80097f0:	461c      	mov	r4, r3
 80097f2:	f7fe fbfb 	bl	8007fec <csp_buffer_data_size>
 80097f6:	4603      	mov	r3, r0
 80097f8:	429c      	cmp	r4, r3
 80097fa:	d909      	bls.n	8009810 <csp_can_rx+0x150>
			iface->rx_error++;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	6a1b      	ldr	r3, [r3, #32]
 8009800:	1c5a      	adds	r2, r3, #1
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	621a      	str	r2, [r3, #32]
			csp_can_pbuf_free(buf, task_woken);
 8009806:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009808:	6978      	ldr	r0, [r7, #20]
 800980a:	f000 f98f 	bl	8009b2c <csp_can_pbuf_free>
			break;
 800980e:	e06e      	b.n	80098ee <csp_can_rx+0x22e>
		}

		/* Reset RX count */
		buf->rx_count = 0;
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	2200      	movs	r2, #0
 8009814:	801a      	strh	r2, [r3, #0]

		/* Set offset to prevent CSP header from being copied to CSP data */
		offset = sizeof(csp_id_t) + sizeof(uint16_t);
 8009816:	2306      	movs	r3, #6
 8009818:	74fb      	strb	r3, [r7, #19]

		/* Set remain field - increment to include begin packet */
		buf->remain = CFP_REMAIN(id) + 1;
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	0a9b      	lsrs	r3, r3, #10
 800981e:	b2db      	uxtb	r3, r3
 8009820:	1c5a      	adds	r2, r3, #1
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	605a      	str	r2, [r3, #4]
		/* FALLTHROUGH */

	case CFP_MORE:

		/* Check 'remain' field match */
		if (CFP_REMAIN(id) != buf->remain - 1) {
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	0a9b      	lsrs	r3, r3, #10
 800982a:	b2da      	uxtb	r2, r3
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	3b01      	subs	r3, #1
 8009832:	429a      	cmp	r2, r3
 8009834:	d009      	beq.n	800984a <csp_can_rx+0x18a>
			//csp_log_error("CAN frame lost in CSP packet");
			csp_can_pbuf_free(buf, task_woken);
 8009836:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009838:	6978      	ldr	r0, [r7, #20]
 800983a:	f000 f977 	bl	8009b2c <csp_can_pbuf_free>
			iface->frame++;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009842:	1c5a      	adds	r2, r3, #1
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	62da      	str	r2, [r3, #44]	@ 0x2c
			break;
 8009848:	e051      	b.n	80098ee <csp_can_rx+0x22e>
		}

		/* Decrement remaining frames */
		buf->remain--;
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	1e5a      	subs	r2, r3, #1
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	605a      	str	r2, [r3, #4]

		/* Check for overflow */
		if ((buf->rx_count + dlc - offset) > buf->packet->length) {
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	881b      	ldrh	r3, [r3, #0]
 8009858:	461a      	mov	r2, r3
 800985a:	78fb      	ldrb	r3, [r7, #3]
 800985c:	441a      	add	r2, r3
 800985e:	7cfb      	ldrb	r3, [r7, #19]
 8009860:	1ad3      	subs	r3, r2, r3
 8009862:	697a      	ldr	r2, [r7, #20]
 8009864:	68d2      	ldr	r2, [r2, #12]
 8009866:	8952      	ldrh	r2, [r2, #10]
 8009868:	4293      	cmp	r3, r2
 800986a:	dd09      	ble.n	8009880 <csp_can_rx+0x1c0>
			//csp_log_error("RX buffer overflow");
			iface->frame++;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009870:	1c5a      	adds	r2, r3, #1
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	62da      	str	r2, [r3, #44]	@ 0x2c
			csp_can_pbuf_free(buf, task_woken);
 8009876:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009878:	6978      	ldr	r0, [r7, #20]
 800987a:	f000 f957 	bl	8009b2c <csp_can_pbuf_free>
			break;
 800987e:	e036      	b.n	80098ee <csp_can_rx+0x22e>
		}

		/* Copy dlc bytes into buffer */
		memcpy(&buf->packet->data[buf->rx_count], data + offset, dlc - offset);
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	68da      	ldr	r2, [r3, #12]
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	881b      	ldrh	r3, [r3, #0]
 8009888:	3310      	adds	r3, #16
 800988a:	18d0      	adds	r0, r2, r3
 800988c:	7cfb      	ldrb	r3, [r7, #19]
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	18d1      	adds	r1, r2, r3
 8009892:	78fa      	ldrb	r2, [r7, #3]
 8009894:	7cfb      	ldrb	r3, [r7, #19]
 8009896:	1ad3      	subs	r3, r2, r3
 8009898:	461a      	mov	r2, r3
 800989a:	f006 fc3e 	bl	801011a <memcpy>
		buf->rx_count += dlc - offset;
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	881a      	ldrh	r2, [r3, #0]
 80098a2:	78fb      	ldrb	r3, [r7, #3]
 80098a4:	b299      	uxth	r1, r3
 80098a6:	7cfb      	ldrb	r3, [r7, #19]
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	1acb      	subs	r3, r1, r3
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	4413      	add	r3, r2
 80098b0:	b29a      	uxth	r2, r3
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	801a      	strh	r2, [r3, #0]

		/* Check if more data is expected */
		if (buf->rx_count != buf->packet->length)
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	881a      	ldrh	r2, [r3, #0]
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	68db      	ldr	r3, [r3, #12]
 80098be:	895b      	ldrh	r3, [r3, #10]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d113      	bne.n	80098ec <csp_can_rx+0x22c>
			break;

		/* Data is available */
		csp_qfifo_write(buf->packet, iface, task_woken);
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80098ca:	68f9      	ldr	r1, [r7, #12]
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7ff fb8d 	bl	8008fec <csp_qfifo_write>

		/* Drop packet buffer reference */
		buf->packet = NULL;
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	2200      	movs	r2, #0
 80098d6:	60da      	str	r2, [r3, #12]

		/* Free packet buffer */
		csp_can_pbuf_free(buf, task_woken);
 80098d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098da:	6978      	ldr	r0, [r7, #20]
 80098dc:	f000 f926 	bl	8009b2c <csp_can_pbuf_free>

		break;
 80098e0:	e005      	b.n	80098ee <csp_can_rx+0x22e>

	default:
		//csp_log_warn("Received unknown CFP message type");
		csp_can_pbuf_free(buf, task_woken);
 80098e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098e4:	6978      	ldr	r0, [r7, #20]
 80098e6:	f000 f921 	bl	8009b2c <csp_can_pbuf_free>
		break;
 80098ea:	e000      	b.n	80098ee <csp_can_rx+0x22e>
			break;
 80098ec:	bf00      	nop
	}

	return CSP_ERR_NONE;
 80098ee:	2300      	movs	r3, #0
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	371c      	adds	r7, #28
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd90      	pop	{r4, r7, pc}
 80098f8:	1ff803ff 	.word	0x1ff803ff

080098fc <csp_can_tx>:

int csp_can_tx(const csp_route_t * ifroute, csp_packet_t *packet)
{
 80098fc:	b590      	push	{r4, r7, lr}
 80098fe:	b08f      	sub	sp, #60	@ 0x3c
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	6039      	str	r1, [r7, #0]
        csp_iface_t * iface = ifroute->iface;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	633b      	str	r3, [r7, #48]	@ 0x30
        csp_can_interface_data_t * ifdata = iface->interface_data;
 800990c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Get an unique CFP id - this should be locked to prevent access from multiple tasks */
	const uint32_t ident = ifdata->cfp_frame_id++;
 8009912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	1c59      	adds	r1, r3, #1
 8009918:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800991a:	6011      	str	r1, [r2, #0]
 800991c:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check protocol's max length - limit is 1 (first) frame + as many frames that can be specified in 'remain' */
        if (packet->length > MAX_CAN_DATA_SIZE) {
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	895b      	ldrh	r3, [r3, #10]
 8009922:	f240 72fa 	movw	r2, #2042	@ 0x7fa
 8009926:	4293      	cmp	r3, r2
 8009928:	d902      	bls.n	8009930 <csp_can_tx+0x34>
		return CSP_ERR_TX;
 800992a:	f06f 0309 	mvn.w	r3, #9
 800992e:	e0bf      	b.n	8009ab0 <csp_can_tx+0x1b4>
        }

	/* Insert destination node/via address into the CFP destination field */
	const uint8_t dest = (ifroute->via != CSP_NO_VIA_ADDRESS) ? ifroute->via : packet->id.dst;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	791b      	ldrb	r3, [r3, #4]
 8009934:	2bff      	cmp	r3, #255	@ 0xff
 8009936:	d002      	beq.n	800993e <csp_can_tx+0x42>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	791b      	ldrb	r3, [r3, #4]
 800993c:	e004      	b.n	8009948 <csp_can_tx+0x4c>
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	89db      	ldrh	r3, [r3, #14]
 8009942:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8009946:	b2db      	uxtb	r3, r3
 8009948:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	/* Create CAN identifier */
	uint32_t id = (CFP_MAKE_SRC(packet->id.src) |
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	7bdb      	ldrb	r3, [r3, #15]
 8009950:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8009954:	b2db      	uxtb	r3, r3
 8009956:	061a      	lsls	r2, r3, #24
                       CFP_MAKE_DST(dest) |
 8009958:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800995c:	04db      	lsls	r3, r3, #19
 800995e:	f403 0378 	and.w	r3, r3, #16252928	@ 0xf80000
	uint32_t id = (CFP_MAKE_SRC(packet->id.src) |
 8009962:	431a      	orrs	r2, r3
                       CFP_MAKE_ID(ident) |
 8009964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009966:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800996a:	431a      	orrs	r2, r3
                       CFP_MAKE_TYPE(CFP_BEGIN) |
                       CFP_MAKE_REMAIN((packet->length + CFP_OVERHEAD - 1) / MAX_BYTES_IN_CAN_FRAME));
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	895b      	ldrh	r3, [r3, #10]
 8009970:	3305      	adds	r3, #5
 8009972:	08db      	lsrs	r3, r3, #3
 8009974:	029b      	lsls	r3, r3, #10
 8009976:	f403 337f 	and.w	r3, r3, #261120	@ 0x3fc00
	uint32_t id = (CFP_MAKE_SRC(packet->id.src) |
 800997a:	4313      	orrs	r3, r2
 800997c:	623b      	str	r3, [r7, #32]

	/* Calculate first frame data bytes */
	const uint8_t avail = MAX_BYTES_IN_CAN_FRAME - CFP_OVERHEAD;
 800997e:	2302      	movs	r3, #2
 8009980:	77fb      	strb	r3, [r7, #31]
	uint8_t bytes = (packet->length <= avail) ? packet->length : avail;
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	895a      	ldrh	r2, [r3, #10]
 8009986:	7ffb      	ldrb	r3, [r7, #31]
 8009988:	b29b      	uxth	r3, r3
 800998a:	429a      	cmp	r2, r3
 800998c:	d803      	bhi.n	8009996 <csp_can_tx+0x9a>
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	895b      	ldrh	r3, [r3, #10]
 8009992:	b2db      	uxtb	r3, r3
 8009994:	e000      	b.n	8009998 <csp_can_tx+0x9c>
 8009996:	7ffb      	ldrb	r3, [r7, #31]
 8009998:	77bb      	strb	r3, [r7, #30]

	/* Copy CSP headers and data */
	const uint32_t csp_id_be = csp_hton32(packet->id.ext);
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	4618      	mov	r0, r3
 80099a0:	f7fe ff54 	bl	800884c <csp_hton32>
 80099a4:	4603      	mov	r3, r0
 80099a6:	617b      	str	r3, [r7, #20]
	const uint16_t csp_length_be = csp_hton16(packet->length);
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	895b      	ldrh	r3, [r3, #10]
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7fe ff29 	bl	8008804 <csp_hton16>
 80099b2:	4603      	mov	r3, r0
 80099b4:	827b      	strh	r3, [r7, #18]

	uint8_t frame_buf[MAX_BYTES_IN_CAN_FRAME];
	memcpy(frame_buf, &csp_id_be, sizeof(csp_id_be));
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	60bb      	str	r3, [r7, #8]
	memcpy(frame_buf + sizeof(csp_id_be), &csp_length_be, sizeof(csp_length_be));
 80099ba:	f107 0308 	add.w	r3, r7, #8
 80099be:	3304      	adds	r3, #4
 80099c0:	8a7a      	ldrh	r2, [r7, #18]
 80099c2:	801a      	strh	r2, [r3, #0]
	memcpy(frame_buf + CFP_OVERHEAD, packet->data, bytes);
 80099c4:	f107 0308 	add.w	r3, r7, #8
 80099c8:	3306      	adds	r3, #6
 80099ca:	683a      	ldr	r2, [r7, #0]
 80099cc:	f102 0110 	add.w	r1, r2, #16
 80099d0:	7fba      	ldrb	r2, [r7, #30]
 80099d2:	4618      	mov	r0, r3
 80099d4:	f006 fba1 	bl	801011a <memcpy>

	/* Increment tx counter */
	uint16_t tx_count = bytes;
 80099d8:	7fbb      	ldrb	r3, [r7, #30]
 80099da:	86fb      	strh	r3, [r7, #54]	@ 0x36

        const csp_can_driver_tx_t tx_func = ifdata->tx_func;
 80099dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	61bb      	str	r3, [r7, #24]

	/* Send first frame */
	if ((tx_func)(iface->driver_data, id, frame_buf, CFP_OVERHEAD + bytes) != CSP_ERR_NONE) {
 80099e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e4:	6898      	ldr	r0, [r3, #8]
 80099e6:	7fbb      	ldrb	r3, [r7, #30]
 80099e8:	3306      	adds	r3, #6
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	f107 0208 	add.w	r2, r7, #8
 80099f0:	69bc      	ldr	r4, [r7, #24]
 80099f2:	6a39      	ldr	r1, [r7, #32]
 80099f4:	47a0      	blx	r4
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d050      	beq.n	8009a9e <csp_can_tx+0x1a2>
		//csp_log_warn("Failed to send CAN frame in csp_tx_can");
		iface->tx_error++;
 80099fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099fe:	69db      	ldr	r3, [r3, #28]
 8009a00:	1c5a      	adds	r2, r3, #1
 8009a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a04:	61da      	str	r2, [r3, #28]
		return CSP_ERR_DRIVER;
 8009a06:	f06f 030a 	mvn.w	r3, #10
 8009a0a:	e051      	b.n	8009ab0 <csp_can_tx+0x1b4>
	}

	/* Send next frames if not complete */
	while (tx_count < packet->length) {
		/* Calculate frame data bytes */
		bytes = (packet->length - tx_count >= MAX_BYTES_IN_CAN_FRAME) ? MAX_BYTES_IN_CAN_FRAME : packet->length - tx_count;
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	895b      	ldrh	r3, [r3, #10]
 8009a10:	461a      	mov	r2, r3
 8009a12:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009a14:	1ad3      	subs	r3, r2, r3
 8009a16:	2b08      	cmp	r3, #8
 8009a18:	bfa8      	it	ge
 8009a1a:	2308      	movge	r3, #8
 8009a1c:	77bb      	strb	r3, [r7, #30]

		/* Prepare identifier */
		id = (CFP_MAKE_SRC(packet->id.src) |
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	7bdb      	ldrb	r3, [r3, #15]
 8009a22:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	061a      	lsls	r2, r3, #24
                      CFP_MAKE_DST(dest) |
 8009a2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a2e:	04db      	lsls	r3, r3, #19
 8009a30:	f403 0378 	and.w	r3, r3, #16252928	@ 0xf80000
		id = (CFP_MAKE_SRC(packet->id.src) |
 8009a34:	431a      	orrs	r2, r3
                      CFP_MAKE_ID(ident) |
 8009a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a38:	f3c3 0309 	ubfx	r3, r3, #0, #10
                      CFP_MAKE_DST(dest) |
 8009a3c:	431a      	orrs	r2, r3
                      CFP_MAKE_TYPE(CFP_MORE) |
                      CFP_MAKE_REMAIN((packet->length - tx_count - bytes + MAX_BYTES_IN_CAN_FRAME - 1) / MAX_BYTES_IN_CAN_FRAME));
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	895b      	ldrh	r3, [r3, #10]
 8009a42:	4619      	mov	r1, r3
 8009a44:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009a46:	1ac9      	subs	r1, r1, r3
 8009a48:	7fbb      	ldrb	r3, [r7, #30]
 8009a4a:	1acb      	subs	r3, r1, r3
 8009a4c:	3307      	adds	r3, #7
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	da00      	bge.n	8009a54 <csp_can_tx+0x158>
 8009a52:	3307      	adds	r3, #7
 8009a54:	10db      	asrs	r3, r3, #3
 8009a56:	029b      	lsls	r3, r3, #10
 8009a58:	f403 337f 	and.w	r3, r3, #261120	@ 0x3fc00
                      CFP_MAKE_TYPE(CFP_MORE) |
 8009a5c:	4313      	orrs	r3, r2
		id = (CFP_MAKE_SRC(packet->id.src) |
 8009a5e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009a62:	623b      	str	r3, [r7, #32]

		/* Increment tx counter */
		tx_count += bytes;
 8009a64:	7fbb      	ldrb	r3, [r7, #30]
 8009a66:	b29a      	uxth	r2, r3
 8009a68:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009a6a:	4413      	add	r3, r2
 8009a6c:	86fb      	strh	r3, [r7, #54]	@ 0x36

		/* Send frame */
		if ((tx_func)(iface->driver_data, id, packet->data + tx_count - bytes, bytes) != CSP_ERR_NONE) {
 8009a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a70:	6898      	ldr	r0, [r3, #8]
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	f103 0210 	add.w	r2, r3, #16
 8009a78:	8ef9      	ldrh	r1, [r7, #54]	@ 0x36
 8009a7a:	7fbb      	ldrb	r3, [r7, #30]
 8009a7c:	1acb      	subs	r3, r1, r3
 8009a7e:	441a      	add	r2, r3
 8009a80:	7fbb      	ldrb	r3, [r7, #30]
 8009a82:	69bc      	ldr	r4, [r7, #24]
 8009a84:	6a39      	ldr	r1, [r7, #32]
 8009a86:	47a0      	blx	r4
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d007      	beq.n	8009a9e <csp_can_tx+0x1a2>
			//csp_log_warn("Failed to send CAN frame in Tx callback");
			iface->tx_error++;
 8009a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a90:	69db      	ldr	r3, [r3, #28]
 8009a92:	1c5a      	adds	r2, r3, #1
 8009a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a96:	61da      	str	r2, [r3, #28]
			return CSP_ERR_DRIVER;
 8009a98:	f06f 030a 	mvn.w	r3, #10
 8009a9c:	e008      	b.n	8009ab0 <csp_can_tx+0x1b4>
	while (tx_count < packet->length) {
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	895b      	ldrh	r3, [r3, #10]
 8009aa2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d3b1      	bcc.n	8009a0c <csp_can_tx+0x110>
		}
	}

	csp_buffer_free(packet);
 8009aa8:	6838      	ldr	r0, [r7, #0]
 8009aaa:	f7fe fa1b 	bl	8007ee4 <csp_buffer_free>

	return CSP_ERR_NONE;
 8009aae:	2300      	movs	r3, #0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	373c      	adds	r7, #60	@ 0x3c
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd90      	pop	{r4, r7, pc}

08009ab8 <csp_can_add_interface>:

int csp_can_add_interface(csp_iface_t * iface) {
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b084      	sub	sp, #16
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]

	if ((iface == NULL) || (iface->name == NULL) || (iface->interface_data == NULL)) {
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d007      	beq.n	8009ad6 <csp_can_add_interface+0x1e>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d003      	beq.n	8009ad6 <csp_can_add_interface+0x1e>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d102      	bne.n	8009adc <csp_can_add_interface+0x24>
		return CSP_ERR_INVAL;
 8009ad6:	f06f 0301 	mvn.w	r3, #1
 8009ada:	e021      	b.n	8009b20 <csp_can_add_interface+0x68>
	}

        csp_can_interface_data_t * ifdata = iface->interface_data;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	60fb      	str	r3, [r7, #12]
	if (ifdata->tx_func == NULL) {
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d102      	bne.n	8009af0 <csp_can_add_interface+0x38>
		return CSP_ERR_INVAL;
 8009aea:	f06f 0301 	mvn.w	r3, #1
 8009aee:	e017      	b.n	8009b20 <csp_can_add_interface+0x68>
	}

        if ((iface->mtu == 0) || (iface->mtu > MAX_CAN_DATA_SIZE)) {
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	8a1b      	ldrh	r3, [r3, #16]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d005      	beq.n	8009b04 <csp_can_add_interface+0x4c>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	8a1b      	ldrh	r3, [r3, #16]
 8009afc:	f240 72fa 	movw	r2, #2042	@ 0x7fa
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d903      	bls.n	8009b0c <csp_can_add_interface+0x54>
            iface->mtu = MAX_CAN_DATA_SIZE;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f240 72fa 	movw	r2, #2042	@ 0x7fa
 8009b0a:	821a      	strh	r2, [r3, #16]
        }

        ifdata->cfp_frame_id = 0;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	601a      	str	r2, [r3, #0]

	iface->nexthop = csp_can_tx;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4a04      	ldr	r2, [pc, #16]	@ (8009b28 <csp_can_add_interface+0x70>)
 8009b16:	60da      	str	r2, [r3, #12]

	return csp_iflist_add(iface);
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f7fe febd 	bl	8008898 <csp_iflist_add>
 8009b1e:	4603      	mov	r3, r0
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3710      	adds	r7, #16
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	080098fd 	.word	0x080098fd

08009b2c <csp_can_pbuf_free>:
#define PBUF_TIMEOUT_MS		1000

static csp_can_pbuf_element_t csp_can_pbuf[PBUF_ELEMENTS] = {};

int csp_can_pbuf_free(csp_can_pbuf_element_t *buf, CSP_BASE_TYPE *task_woken)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
	/* Free CSP packet */
	if (buf->packet != NULL) {
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	68db      	ldr	r3, [r3, #12]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d00d      	beq.n	8009b5a <csp_can_pbuf_free+0x2e>
		if (task_woken == NULL) {
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d105      	bne.n	8009b50 <csp_can_pbuf_free+0x24>
			csp_buffer_free(buf->packet);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f7fe f9cb 	bl	8007ee4 <csp_buffer_free>
 8009b4e:	e004      	b.n	8009b5a <csp_can_pbuf_free+0x2e>
		} else {
			csp_buffer_free_isr(buf->packet);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	4618      	mov	r0, r3
 8009b56:	f7fe f98b 	bl	8007e70 <csp_buffer_free_isr>
		}
	}

	/* Mark buffer element free */
	buf->packet = NULL;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	60da      	str	r2, [r3, #12]
	buf->rx_count = 0;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	801a      	strh	r2, [r3, #0]
	buf->cfpid = 0;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	609a      	str	r2, [r3, #8]
	buf->last_used = 0;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	615a      	str	r2, [r3, #20]
	buf->remain = 0;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2200      	movs	r2, #0
 8009b76:	605a      	str	r2, [r3, #4]
	buf->state = BUF_FREE;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	741a      	strb	r2, [r3, #16]

	return CSP_ERR_NONE;
 8009b7e:	2300      	movs	r3, #0
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3708      	adds	r7, #8
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <csp_can_pbuf_new>:

csp_can_pbuf_element_t *csp_can_pbuf_new(uint32_t id, CSP_BASE_TYPE *task_woken)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b084      	sub	sp, #16
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
	uint32_t now = (task_woken) ? csp_get_ms_isr() : csp_get_ms();
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d003      	beq.n	8009ba0 <csp_can_pbuf_new+0x18>
 8009b98:	f7fe f84d 	bl	8007c36 <csp_get_ms_isr>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	e002      	b.n	8009ba6 <csp_can_pbuf_new+0x1e>
 8009ba0:	f7fe f842 	bl	8007c28 <csp_get_ms>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < PBUF_ELEMENTS; i++) {
 8009ba8:	2300      	movs	r3, #0
 8009baa:	60fb      	str	r3, [r7, #12]
 8009bac:	e061      	b.n	8009c72 <csp_can_pbuf_new+0xea>

		/* Perform cleanup in used pbufs */
		if (csp_can_pbuf[i].state == BUF_USED) {
 8009bae:	4935      	ldr	r1, [pc, #212]	@ (8009c84 <csp_can_pbuf_new+0xfc>)
 8009bb0:	68fa      	ldr	r2, [r7, #12]
 8009bb2:	4613      	mov	r3, r2
 8009bb4:	005b      	lsls	r3, r3, #1
 8009bb6:	4413      	add	r3, r2
 8009bb8:	00db      	lsls	r3, r3, #3
 8009bba:	440b      	add	r3, r1
 8009bbc:	3310      	adds	r3, #16
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d118      	bne.n	8009bf6 <csp_can_pbuf_new+0x6e>
			if (now - csp_can_pbuf[i].last_used > PBUF_TIMEOUT_MS)
 8009bc4:	492f      	ldr	r1, [pc, #188]	@ (8009c84 <csp_can_pbuf_new+0xfc>)
 8009bc6:	68fa      	ldr	r2, [r7, #12]
 8009bc8:	4613      	mov	r3, r2
 8009bca:	005b      	lsls	r3, r3, #1
 8009bcc:	4413      	add	r3, r2
 8009bce:	00db      	lsls	r3, r3, #3
 8009bd0:	440b      	add	r3, r1
 8009bd2:	3314      	adds	r3, #20
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	68ba      	ldr	r2, [r7, #8]
 8009bd8:	1ad3      	subs	r3, r2, r3
 8009bda:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009bde:	d90a      	bls.n	8009bf6 <csp_can_pbuf_new+0x6e>
				csp_can_pbuf_free(&csp_can_pbuf[i], task_woken);
 8009be0:	68fa      	ldr	r2, [r7, #12]
 8009be2:	4613      	mov	r3, r2
 8009be4:	005b      	lsls	r3, r3, #1
 8009be6:	4413      	add	r3, r2
 8009be8:	00db      	lsls	r3, r3, #3
 8009bea:	4a26      	ldr	r2, [pc, #152]	@ (8009c84 <csp_can_pbuf_new+0xfc>)
 8009bec:	4413      	add	r3, r2
 8009bee:	6839      	ldr	r1, [r7, #0]
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f7ff ff9b 	bl	8009b2c <csp_can_pbuf_free>
		}

		if (csp_can_pbuf[i].state == BUF_FREE) {
 8009bf6:	4923      	ldr	r1, [pc, #140]	@ (8009c84 <csp_can_pbuf_new+0xfc>)
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	4613      	mov	r3, r2
 8009bfc:	005b      	lsls	r3, r3, #1
 8009bfe:	4413      	add	r3, r2
 8009c00:	00db      	lsls	r3, r3, #3
 8009c02:	440b      	add	r3, r1
 8009c04:	3310      	adds	r3, #16
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d12f      	bne.n	8009c6c <csp_can_pbuf_new+0xe4>
			csp_can_pbuf[i].state = BUF_USED;
 8009c0c:	491d      	ldr	r1, [pc, #116]	@ (8009c84 <csp_can_pbuf_new+0xfc>)
 8009c0e:	68fa      	ldr	r2, [r7, #12]
 8009c10:	4613      	mov	r3, r2
 8009c12:	005b      	lsls	r3, r3, #1
 8009c14:	4413      	add	r3, r2
 8009c16:	00db      	lsls	r3, r3, #3
 8009c18:	440b      	add	r3, r1
 8009c1a:	3310      	adds	r3, #16
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	701a      	strb	r2, [r3, #0]
			csp_can_pbuf[i].cfpid = id;
 8009c20:	4918      	ldr	r1, [pc, #96]	@ (8009c84 <csp_can_pbuf_new+0xfc>)
 8009c22:	68fa      	ldr	r2, [r7, #12]
 8009c24:	4613      	mov	r3, r2
 8009c26:	005b      	lsls	r3, r3, #1
 8009c28:	4413      	add	r3, r2
 8009c2a:	00db      	lsls	r3, r3, #3
 8009c2c:	440b      	add	r3, r1
 8009c2e:	3308      	adds	r3, #8
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	601a      	str	r2, [r3, #0]
			csp_can_pbuf[i].remain = 0;
 8009c34:	4913      	ldr	r1, [pc, #76]	@ (8009c84 <csp_can_pbuf_new+0xfc>)
 8009c36:	68fa      	ldr	r2, [r7, #12]
 8009c38:	4613      	mov	r3, r2
 8009c3a:	005b      	lsls	r3, r3, #1
 8009c3c:	4413      	add	r3, r2
 8009c3e:	00db      	lsls	r3, r3, #3
 8009c40:	440b      	add	r3, r1
 8009c42:	3304      	adds	r3, #4
 8009c44:	2200      	movs	r2, #0
 8009c46:	601a      	str	r2, [r3, #0]
			csp_can_pbuf[i].last_used = now;
 8009c48:	490e      	ldr	r1, [pc, #56]	@ (8009c84 <csp_can_pbuf_new+0xfc>)
 8009c4a:	68fa      	ldr	r2, [r7, #12]
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	005b      	lsls	r3, r3, #1
 8009c50:	4413      	add	r3, r2
 8009c52:	00db      	lsls	r3, r3, #3
 8009c54:	440b      	add	r3, r1
 8009c56:	3314      	adds	r3, #20
 8009c58:	68ba      	ldr	r2, [r7, #8]
 8009c5a:	601a      	str	r2, [r3, #0]
			return &csp_can_pbuf[i];
 8009c5c:	68fa      	ldr	r2, [r7, #12]
 8009c5e:	4613      	mov	r3, r2
 8009c60:	005b      	lsls	r3, r3, #1
 8009c62:	4413      	add	r3, r2
 8009c64:	00db      	lsls	r3, r3, #3
 8009c66:	4a07      	ldr	r2, [pc, #28]	@ (8009c84 <csp_can_pbuf_new+0xfc>)
 8009c68:	4413      	add	r3, r2
 8009c6a:	e006      	b.n	8009c7a <csp_can_pbuf_new+0xf2>
	for (int i = 0; i < PBUF_ELEMENTS; i++) {
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	3301      	adds	r3, #1
 8009c70:	60fb      	str	r3, [r7, #12]
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2b04      	cmp	r3, #4
 8009c76:	dd9a      	ble.n	8009bae <csp_can_pbuf_new+0x26>
		}

	}

	return NULL;
 8009c78:	2300      	movs	r3, #0

}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3710      	adds	r7, #16
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	24042c5c 	.word	0x24042c5c

08009c88 <csp_can_pbuf_find>:

csp_can_pbuf_element_t *csp_can_pbuf_find(uint32_t id, uint32_t mask, CSP_BASE_TYPE *task_woken)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b086      	sub	sp, #24
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	60f8      	str	r0, [r7, #12]
 8009c90:	60b9      	str	r1, [r7, #8]
 8009c92:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < PBUF_ELEMENTS; i++) {
 8009c94:	2300      	movs	r3, #0
 8009c96:	617b      	str	r3, [r7, #20]
 8009c98:	e037      	b.n	8009d0a <csp_can_pbuf_find+0x82>
		if ((csp_can_pbuf[i].state == BUF_USED) && ((csp_can_pbuf[i].cfpid & mask) == (id & mask))) {
 8009c9a:	4920      	ldr	r1, [pc, #128]	@ (8009d1c <csp_can_pbuf_find+0x94>)
 8009c9c:	697a      	ldr	r2, [r7, #20]
 8009c9e:	4613      	mov	r3, r2
 8009ca0:	005b      	lsls	r3, r3, #1
 8009ca2:	4413      	add	r3, r2
 8009ca4:	00db      	lsls	r3, r3, #3
 8009ca6:	440b      	add	r3, r1
 8009ca8:	3310      	adds	r3, #16
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d129      	bne.n	8009d04 <csp_can_pbuf_find+0x7c>
 8009cb0:	491a      	ldr	r1, [pc, #104]	@ (8009d1c <csp_can_pbuf_find+0x94>)
 8009cb2:	697a      	ldr	r2, [r7, #20]
 8009cb4:	4613      	mov	r3, r2
 8009cb6:	005b      	lsls	r3, r3, #1
 8009cb8:	4413      	add	r3, r2
 8009cba:	00db      	lsls	r3, r3, #3
 8009cbc:	440b      	add	r3, r1
 8009cbe:	3308      	adds	r3, #8
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	405a      	eors	r2, r3
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	4013      	ands	r3, r2
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d11a      	bne.n	8009d04 <csp_can_pbuf_find+0x7c>
			csp_can_pbuf[i].last_used = (task_woken) ? csp_get_ms_isr() : csp_get_ms();
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d003      	beq.n	8009cdc <csp_can_pbuf_find+0x54>
 8009cd4:	f7fd ffaf 	bl	8007c36 <csp_get_ms_isr>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	e002      	b.n	8009ce2 <csp_can_pbuf_find+0x5a>
 8009cdc:	f7fd ffa4 	bl	8007c28 <csp_get_ms>
 8009ce0:	4602      	mov	r2, r0
 8009ce2:	480e      	ldr	r0, [pc, #56]	@ (8009d1c <csp_can_pbuf_find+0x94>)
 8009ce4:	6979      	ldr	r1, [r7, #20]
 8009ce6:	460b      	mov	r3, r1
 8009ce8:	005b      	lsls	r3, r3, #1
 8009cea:	440b      	add	r3, r1
 8009cec:	00db      	lsls	r3, r3, #3
 8009cee:	4403      	add	r3, r0
 8009cf0:	3314      	adds	r3, #20
 8009cf2:	601a      	str	r2, [r3, #0]
			return &csp_can_pbuf[i];
 8009cf4:	697a      	ldr	r2, [r7, #20]
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	005b      	lsls	r3, r3, #1
 8009cfa:	4413      	add	r3, r2
 8009cfc:	00db      	lsls	r3, r3, #3
 8009cfe:	4a07      	ldr	r2, [pc, #28]	@ (8009d1c <csp_can_pbuf_find+0x94>)
 8009d00:	4413      	add	r3, r2
 8009d02:	e006      	b.n	8009d12 <csp_can_pbuf_find+0x8a>
	for (int i = 0; i < PBUF_ELEMENTS; i++) {
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	3301      	adds	r3, #1
 8009d08:	617b      	str	r3, [r7, #20]
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	2b04      	cmp	r3, #4
 8009d0e:	ddc4      	ble.n	8009c9a <csp_can_pbuf_find+0x12>
		}
	}
	return NULL;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3718      	adds	r7, #24
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	24042c5c 	.word	0x24042c5c

08009d20 <csp_lo_tx>:
/**
 * Loopback interface transmit function
 * @param packet Packet to transmit
 * @return 1 if packet was successfully transmitted, 0 on error
 */
static int csp_lo_tx(const csp_route_t * ifroute, csp_packet_t * packet) {
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]

	/* Drop packet silently if not destined for us. This allows
	 * blackhole routing addresses by setting their nexthop to
	 * the loopback interface.
	 */
	if (packet->id.dst != csp_conf.address) {
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	89db      	ldrh	r3, [r3, #14]
 8009d2e:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	461a      	mov	r2, r3
 8009d36:	4b09      	ldr	r3, [pc, #36]	@ (8009d5c <csp_lo_tx+0x3c>)
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d004      	beq.n	8009d48 <csp_lo_tx+0x28>
		/* Consume and drop packet */
		csp_buffer_free(packet);
 8009d3e:	6838      	ldr	r0, [r7, #0]
 8009d40:	f7fe f8d0 	bl	8007ee4 <csp_buffer_free>
		return CSP_ERR_NONE;
 8009d44:	2300      	movs	r3, #0
 8009d46:	e005      	b.n	8009d54 <csp_lo_tx+0x34>
	}

	/* Send back into CSP, notice calling from task so last argument must be NULL! */
	csp_qfifo_write(packet, &csp_if_lo, NULL);
 8009d48:	2200      	movs	r2, #0
 8009d4a:	4905      	ldr	r1, [pc, #20]	@ (8009d60 <csp_lo_tx+0x40>)
 8009d4c:	6838      	ldr	r0, [r7, #0]
 8009d4e:	f7ff f94d 	bl	8008fec <csp_qfifo_write>

	return CSP_ERR_NONE;
 8009d52:	2300      	movs	r3, #0

}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3708      	adds	r7, #8
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}
 8009d5c:	24042bec 	.word	0x24042bec
 8009d60:	24000094 	.word	0x24000094

08009d64 <csp_rtable_set>:

int csp_rtable_check(const char * rtable) {
	return csp_rtable_parse(rtable, 1);
}

int csp_rtable_set(uint8_t address, uint8_t netmask, csp_iface_t *ifc, uint8_t via) {
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b086      	sub	sp, #24
 8009d68:	af04      	add	r7, sp, #16
 8009d6a:	603a      	str	r2, [r7, #0]
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	4603      	mov	r3, r0
 8009d70:	71fb      	strb	r3, [r7, #7]
 8009d72:	460b      	mov	r3, r1
 8009d74:	71bb      	strb	r3, [r7, #6]
 8009d76:	4613      	mov	r3, r2
 8009d78:	717b      	strb	r3, [r7, #5]

	/* Legacy reference to default route (the old way) */
	if (address == CSP_DEFAULT_ROUTE) {
 8009d7a:	79fb      	ldrb	r3, [r7, #7]
 8009d7c:	2b20      	cmp	r3, #32
 8009d7e:	d103      	bne.n	8009d88 <csp_rtable_set+0x24>
		netmask = 0;
 8009d80:	2300      	movs	r3, #0
 8009d82:	71bb      	strb	r3, [r7, #6]
		address = 0;
 8009d84:	2300      	movs	r3, #0
 8009d86:	71fb      	strb	r3, [r7, #7]
	}

	/* Validates options */
	if (((address > CSP_ID_HOST_MAX) && (address != 255)) || (ifc == NULL) || (netmask > CSP_ID_HOST_SIZE)) {
 8009d88:	79fb      	ldrb	r3, [r7, #7]
 8009d8a:	2b1f      	cmp	r3, #31
 8009d8c:	d902      	bls.n	8009d94 <csp_rtable_set+0x30>
 8009d8e:	79fb      	ldrb	r3, [r7, #7]
 8009d90:	2bff      	cmp	r3, #255	@ 0xff
 8009d92:	d105      	bne.n	8009da0 <csp_rtable_set+0x3c>
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d002      	beq.n	8009da0 <csp_rtable_set+0x3c>
 8009d9a:	79bb      	ldrb	r3, [r7, #6]
 8009d9c:	2b05      	cmp	r3, #5
 8009d9e:	d91b      	bls.n	8009dd8 <csp_rtable_set+0x74>
		csp_log_error("%s: invalid route: address %u, netmask %u, interface %p (%s), via %u",
 8009da0:	4b13      	ldr	r3, [pc, #76]	@ (8009df0 <csp_rtable_set+0x8c>)
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d014      	beq.n	8009dd2 <csp_rtable_set+0x6e>
 8009da8:	79f8      	ldrb	r0, [r7, #7]
 8009daa:	79ba      	ldrb	r2, [r7, #6]
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d002      	beq.n	8009db8 <csp_rtable_set+0x54>
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	e000      	b.n	8009dba <csp_rtable_set+0x56>
 8009db8:	4b0e      	ldr	r3, [pc, #56]	@ (8009df4 <csp_rtable_set+0x90>)
 8009dba:	7979      	ldrb	r1, [r7, #5]
 8009dbc:	9103      	str	r1, [sp, #12]
 8009dbe:	9302      	str	r3, [sp, #8]
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	9301      	str	r3, [sp, #4]
 8009dc4:	9200      	str	r2, [sp, #0]
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	4a0b      	ldr	r2, [pc, #44]	@ (8009df8 <csp_rtable_set+0x94>)
 8009dca:	490c      	ldr	r1, [pc, #48]	@ (8009dfc <csp_rtable_set+0x98>)
 8009dcc:	2000      	movs	r0, #0
 8009dce:	f7fe fcaf 	bl	8008730 <do_csp_debug>
                              __FUNCTION__, address, netmask, ifc, (ifc != NULL) ? ifc->name : "", via);
		return CSP_ERR_INVAL;
 8009dd2:	f06f 0301 	mvn.w	r3, #1
 8009dd6:	e006      	b.n	8009de6 <csp_rtable_set+0x82>
	}

        return csp_rtable_set_internal(address, netmask, ifc, via);
 8009dd8:	797b      	ldrb	r3, [r7, #5]
 8009dda:	79b9      	ldrb	r1, [r7, #6]
 8009ddc:	79f8      	ldrb	r0, [r7, #7]
 8009dde:	683a      	ldr	r2, [r7, #0]
 8009de0:	f000 f878 	bl	8009ed4 <csp_rtable_set_internal>
 8009de4:	4603      	mov	r3, r0
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3708      	adds	r7, #8
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	2400008c 	.word	0x2400008c
 8009df4:	0801218c 	.word	0x0801218c
 8009df8:	08012378 	.word	0x08012378
 8009dfc:	08012190 	.word	0x08012190

08009e00 <csp_rtable_find>:
} csp_rtable_t;

/* Routing table (linked list) */
static csp_rtable_t * rtable = NULL;

static csp_rtable_t * csp_rtable_find(uint8_t addr, uint8_t netmask, uint8_t exact) {
 8009e00:	b480      	push	{r7}
 8009e02:	b087      	sub	sp, #28
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	4603      	mov	r3, r0
 8009e08:	71fb      	strb	r3, [r7, #7]
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	71bb      	strb	r3, [r7, #6]
 8009e0e:	4613      	mov	r3, r2
 8009e10:	717b      	strb	r3, [r7, #5]

	/* Remember best result */
	csp_rtable_t * best_result = NULL;
 8009e12:	2300      	movs	r3, #0
 8009e14:	617b      	str	r3, [r7, #20]
	uint8_t best_result_mask = 0;
 8009e16:	2300      	movs	r3, #0
 8009e18:	74fb      	strb	r3, [r7, #19]

	/* Start search */
	csp_rtable_t * i = rtable;
 8009e1a:	4b22      	ldr	r3, [pc, #136]	@ (8009ea4 <csp_rtable_find+0xa4>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	60fb      	str	r3, [r7, #12]
	while(i) {
 8009e20:	e036      	b.n	8009e90 <csp_rtable_find+0x90>

		/* Look for exact match */
		if (i->address == addr && i->netmask == netmask) {
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	7a1b      	ldrb	r3, [r3, #8]
 8009e26:	79fa      	ldrb	r2, [r7, #7]
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d107      	bne.n	8009e3c <csp_rtable_find+0x3c>
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	7a5b      	ldrb	r3, [r3, #9]
 8009e30:	79ba      	ldrb	r2, [r7, #6]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d102      	bne.n	8009e3c <csp_rtable_find+0x3c>
			best_result = i;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	617b      	str	r3, [r7, #20]
			break;
 8009e3a:	e02c      	b.n	8009e96 <csp_rtable_find+0x96>
		}

		/* Try a CIDR netmask match */
		if (!exact) {
 8009e3c:	797b      	ldrb	r3, [r7, #5]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d123      	bne.n	8009e8a <csp_rtable_find+0x8a>
			uint8_t hostbits = (1 << (CSP_ID_HOST_SIZE - i->netmask)) - 1;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	7a5b      	ldrb	r3, [r3, #9]
 8009e46:	f1c3 0305 	rsb	r3, r3, #5
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	3b01      	subs	r3, #1
 8009e54:	72fb      	strb	r3, [r7, #11]
			uint8_t netbits = ~hostbits;
 8009e56:	7afb      	ldrb	r3, [r7, #11]
 8009e58:	43db      	mvns	r3, r3
 8009e5a:	72bb      	strb	r3, [r7, #10]
			//printf("Netbits %x Hostbits %x\r\n", netbits, hostbits);

			/* Match network addresses */
			uint8_t net_a = i->address & netbits;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	7a1a      	ldrb	r2, [r3, #8]
 8009e60:	7abb      	ldrb	r3, [r7, #10]
 8009e62:	4013      	ands	r3, r2
 8009e64:	727b      	strb	r3, [r7, #9]
			uint8_t net_b = addr & netbits;
 8009e66:	79fa      	ldrb	r2, [r7, #7]
 8009e68:	7abb      	ldrb	r3, [r7, #10]
 8009e6a:	4013      	ands	r3, r2
 8009e6c:	723b      	strb	r3, [r7, #8]
			//printf("A: %hhx, B: %hhx\r\n", net_a, net_b);

			/* We have a match */
			if (net_a == net_b) {
 8009e6e:	7a7a      	ldrb	r2, [r7, #9]
 8009e70:	7a3b      	ldrb	r3, [r7, #8]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d109      	bne.n	8009e8a <csp_rtable_find+0x8a>
				if (i->netmask >= best_result_mask) {
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	7a5b      	ldrb	r3, [r3, #9]
 8009e7a:	7cfa      	ldrb	r2, [r7, #19]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d804      	bhi.n	8009e8a <csp_rtable_find+0x8a>
					//printf("Match best result %u %u\r\n", best_result_mask, i->netmask);
					best_result = i;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	617b      	str	r3, [r7, #20]
					best_result_mask = i->netmask;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	7a5b      	ldrb	r3, [r3, #9]
 8009e88:	74fb      	strb	r3, [r7, #19]
				}
			}

		}

		i = i->next;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	68db      	ldr	r3, [r3, #12]
 8009e8e:	60fb      	str	r3, [r7, #12]
	while(i) {
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d1c5      	bne.n	8009e22 <csp_rtable_find+0x22>
	if (0 && best_result) {
		csp_log_packet("Using routing entry: %u/%u if %s mtu %u",
				best_result->address, best_result->netmask, best_result->route.iface->name, best_result->route.via);
        }

	return best_result;
 8009e96:	697b      	ldr	r3, [r7, #20]

}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	371c      	adds	r7, #28
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr
 8009ea4:	24042cd4 	.word	0x24042cd4

08009ea8 <csp_rtable_find_route>:

const csp_route_t * csp_rtable_find_route(uint8_t dest_address)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	4603      	mov	r3, r0
 8009eb0:	71fb      	strb	r3, [r7, #7]
    csp_rtable_t * entry = csp_rtable_find(dest_address, CSP_ID_HOST_SIZE, 0);
 8009eb2:	79fb      	ldrb	r3, [r7, #7]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	2105      	movs	r1, #5
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f7ff ffa1 	bl	8009e00 <csp_rtable_find>
 8009ebe:	60f8      	str	r0, [r7, #12]
    if (entry) {
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d001      	beq.n	8009eca <csp_rtable_find_route+0x22>
	return &entry->route;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	e000      	b.n	8009ecc <csp_rtable_find_route+0x24>
    }
    return NULL;
 8009eca:	2300      	movs	r3, #0
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3710      	adds	r7, #16
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <csp_rtable_set_internal>:

int csp_rtable_set_internal(uint8_t address, uint8_t netmask, csp_iface_t *ifc, uint8_t via) {
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	603a      	str	r2, [r7, #0]
 8009edc:	461a      	mov	r2, r3
 8009ede:	4603      	mov	r3, r0
 8009ee0:	71fb      	strb	r3, [r7, #7]
 8009ee2:	460b      	mov	r3, r1
 8009ee4:	71bb      	strb	r3, [r7, #6]
 8009ee6:	4613      	mov	r3, r2
 8009ee8:	717b      	strb	r3, [r7, #5]

	/* First see if the entry exists */
	csp_rtable_t * entry = csp_rtable_find(address, netmask, 1);
 8009eea:	79b9      	ldrb	r1, [r7, #6]
 8009eec:	79fb      	ldrb	r3, [r7, #7]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f7ff ff85 	bl	8009e00 <csp_rtable_find>
 8009ef6:	60f8      	str	r0, [r7, #12]

	/* If not, create a new one */
	if (!entry) {
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d122      	bne.n	8009f44 <csp_rtable_set_internal+0x70>
		entry = csp_malloc(sizeof(*entry));
 8009efe:	2010      	movs	r0, #16
 8009f00:	f7fd fd04 	bl	800790c <csp_malloc>
 8009f04:	60f8      	str	r0, [r7, #12]
		if (entry == NULL) {
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d102      	bne.n	8009f12 <csp_rtable_set_internal+0x3e>
			return CSP_ERR_NOMEM;
 8009f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8009f10:	e025      	b.n	8009f5e <csp_rtable_set_internal+0x8a>
		}

		entry->next = NULL;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2200      	movs	r2, #0
 8009f16:	60da      	str	r2, [r3, #12]
		/* Add entry to linked-list */
		if (rtable == NULL) {
 8009f18:	4b13      	ldr	r3, [pc, #76]	@ (8009f68 <csp_rtable_set_internal+0x94>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d103      	bne.n	8009f28 <csp_rtable_set_internal+0x54>
			/* This is the first interface to be added */
			rtable = entry;
 8009f20:	4a11      	ldr	r2, [pc, #68]	@ (8009f68 <csp_rtable_set_internal+0x94>)
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	6013      	str	r3, [r2, #0]
 8009f26:	e00d      	b.n	8009f44 <csp_rtable_set_internal+0x70>
		} else {
			/* One or more interfaces were already added */
			csp_rtable_t * i = rtable;
 8009f28:	4b0f      	ldr	r3, [pc, #60]	@ (8009f68 <csp_rtable_set_internal+0x94>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	60bb      	str	r3, [r7, #8]
			while (i->next) {
 8009f2e:	e002      	b.n	8009f36 <csp_rtable_set_internal+0x62>
				i = i->next;
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	60bb      	str	r3, [r7, #8]
			while (i->next) {
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	68db      	ldr	r3, [r3, #12]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d1f8      	bne.n	8009f30 <csp_rtable_set_internal+0x5c>
			}
			i->next = entry;
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	68fa      	ldr	r2, [r7, #12]
 8009f42:	60da      	str	r2, [r3, #12]
		}
	}

	/* Fill in the data */
	entry->address = address;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	79fa      	ldrb	r2, [r7, #7]
 8009f48:	721a      	strb	r2, [r3, #8]
	entry->netmask = netmask;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	79ba      	ldrb	r2, [r7, #6]
 8009f4e:	725a      	strb	r2, [r3, #9]
	entry->route.iface = ifc;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	683a      	ldr	r2, [r7, #0]
 8009f54:	601a      	str	r2, [r3, #0]
	entry->route.via = via;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	797a      	ldrb	r2, [r7, #5]
 8009f5a:	711a      	strb	r2, [r3, #4]

	return CSP_ERR_NONE;
 8009f5c:	2300      	movs	r3, #0
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	24042cd4 	.word	0x24042cd4

08009f6c <csp_udp_new_packet>:
#include <csp/csp.h>
#include <csp/arch/csp_queue.h>

#include "../csp_conn.h"

void csp_udp_new_packet(csp_conn_t * conn, csp_packet_t * packet) {
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b082      	sub	sp, #8
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]

	/* Enqueue */
	if (csp_conn_enqueue_packet(conn, packet) < 0) {
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6839      	ldr	r1, [r7, #0]
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f7fe f84e 	bl	800801c <csp_conn_enqueue_packet>
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	da0b      	bge.n	8009f9e <csp_udp_new_packet+0x32>
		csp_log_error("Connection buffer queue full!");
 8009f86:	4b16      	ldr	r3, [pc, #88]	@ (8009fe0 <csp_udp_new_packet+0x74>)
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d003      	beq.n	8009f96 <csp_udp_new_packet+0x2a>
 8009f8e:	4915      	ldr	r1, [pc, #84]	@ (8009fe4 <csp_udp_new_packet+0x78>)
 8009f90:	2000      	movs	r0, #0
 8009f92:	f7fe fbcd 	bl	8008730 <do_csp_debug>
		csp_buffer_free(packet);
 8009f96:	6838      	ldr	r0, [r7, #0]
 8009f98:	f7fd ffa4 	bl	8007ee4 <csp_buffer_free>
		return;
 8009f9c:	e01d      	b.n	8009fda <csp_udp_new_packet+0x6e>
	}

	/* Try to queue up the new connection pointer */
	if (conn->socket != NULL) {
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d019      	beq.n	8009fda <csp_udp_new_packet+0x6e>
		if (csp_queue_enqueue(conn->socket, &conn, 0) != CSP_QUEUE_OK) {
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	691b      	ldr	r3, [r3, #16]
 8009faa:	1d39      	adds	r1, r7, #4
 8009fac:	2200      	movs	r2, #0
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7fd fcf9 	bl	80079a6 <csp_queue_enqueue>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d00c      	beq.n	8009fd4 <csp_udp_new_packet+0x68>
			csp_log_warn("Warning socket connection queue full");
 8009fba:	4b09      	ldr	r3, [pc, #36]	@ (8009fe0 <csp_udp_new_packet+0x74>)
 8009fbc:	785b      	ldrb	r3, [r3, #1]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d003      	beq.n	8009fca <csp_udp_new_packet+0x5e>
 8009fc2:	4909      	ldr	r1, [pc, #36]	@ (8009fe8 <csp_udp_new_packet+0x7c>)
 8009fc4:	2001      	movs	r0, #1
 8009fc6:	f7fe fbb3 	bl	8008730 <do_csp_debug>
			csp_close(conn);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f7fe fa2c 	bl	800842a <csp_close>
			return;
 8009fd2:	e002      	b.n	8009fda <csp_udp_new_packet+0x6e>
		}

		/* Ensure that this connection will not be posted to this socket again */
		conn->socket = NULL;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	611a      	str	r2, [r3, #16]
	}

}
 8009fda:	3708      	adds	r7, #8
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	2400008c 	.word	0x2400008c
 8009fe4:	08012210 	.word	0x08012210
 8009fe8:	08012230 	.word	0x08012230

08009fec <RingBuffer_Create>:

#include "ring_buffer.h"

void RingBuffer_Create(s_RingBufferType *rb, uint32_t id, const char *name,
                         RingBufElement *buffer, RingBufCtr max_size)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b088      	sub	sp, #32
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	60f8      	str	r0, [r7, #12]
 8009ff4:	60b9      	str	r1, [r7, #8]
 8009ff6:	607a      	str	r2, [r7, #4]
 8009ff8:	603b      	str	r3, [r7, #0]
    rb->id = id;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	68ba      	ldr	r2, [r7, #8]
 8009ffe:	601a      	str	r2, [r3, #0]

    strncpy(rb->name, name, RINGBUFFER_NAME_MAX_LEN - 1);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	3304      	adds	r3, #4
 800a004:	221f      	movs	r2, #31
 800a006:	6879      	ldr	r1, [r7, #4]
 800a008:	4618      	mov	r0, r3
 800a00a:	f005 ffff 	bl	801000c <strncpy>
    rb->name[RINGBUFFER_NAME_MAX_LEN - 1] = '\0';
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2200      	movs	r2, #0
 800a012:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

    rb->buffer = buffer;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	683a      	ldr	r2, [r7, #0]
 800a01a:	625a      	str	r2, [r3, #36]	@ 0x24
    rb->max_size = max_size;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a020:	851a      	strh	r2, [r3, #40]	@ 0x28

    atomic_store_explicit(&rb->head, 0U, memory_order_release);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	332a      	adds	r3, #42	@ 0x2a
 800a026:	61fb      	str	r3, [r7, #28]
 800a028:	2300      	movs	r3, #0
 800a02a:	82fb      	strh	r3, [r7, #22]
 800a02c:	8afa      	ldrh	r2, [r7, #22]
 800a02e:	69fb      	ldr	r3, [r7, #28]
 800a030:	f3bf 8f5b 	dmb	ish
 800a034:	801a      	strh	r2, [r3, #0]
    atomic_store_explicit(&rb->tail, 0U, memory_order_release);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	332c      	adds	r3, #44	@ 0x2c
 800a03a:	61bb      	str	r3, [r7, #24]
 800a03c:	2300      	movs	r3, #0
 800a03e:	82bb      	strh	r3, [r7, #20]
 800a040:	8aba      	ldrh	r2, [r7, #20]
 800a042:	69bb      	ldr	r3, [r7, #24]
 800a044:	f3bf 8f5b 	dmb	ish
 800a048:	801a      	strh	r2, [r3, #0]
}
 800a04a:	bf00      	nop
 800a04c:	3720      	adds	r7, #32
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}

0800a052 <RingBuffer_Put>:

_Bool RingBuffer_Put(s_RingBufferType * const rb, RingBufElement const el)
{
 800a052:	b480      	push	{r7}
 800a054:	b08b      	sub	sp, #44	@ 0x2c
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
 800a05a:	460b      	mov	r3, r1
 800a05c:	70fb      	strb	r3, [r7, #3]
//	__disable_irq();
    RingBufCtr head = atomic_load_explicit(&rb->head, memory_order_relaxed) + 1U;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	332a      	adds	r3, #42	@ 0x2a
 800a062:	623b      	str	r3, [r7, #32]
 800a064:	6a3b      	ldr	r3, [r7, #32]
 800a066:	881b      	ldrh	r3, [r3, #0]
 800a068:	b29b      	uxth	r3, r3
 800a06a:	81fb      	strh	r3, [r7, #14]
 800a06c:	89fb      	ldrh	r3, [r7, #14]
 800a06e:	3301      	adds	r3, #1
 800a070:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (head == rb->max_size)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a076:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a078:	429a      	cmp	r2, r3
 800a07a:	d101      	bne.n	800a080 <RingBuffer_Put+0x2e>
    {
        head = 0U;
 800a07c:	2300      	movs	r3, #0
 800a07e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }

    RingBufCtr tail = atomic_load_explicit(&rb->tail, memory_order_acquire);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	332c      	adds	r3, #44	@ 0x2c
 800a084:	61fb      	str	r3, [r7, #28]
 800a086:	69fb      	ldr	r3, [r7, #28]
 800a088:	881b      	ldrh	r3, [r3, #0]
 800a08a:	f3bf 8f5b 	dmb	ish
 800a08e:	b29b      	uxth	r3, r3
 800a090:	81bb      	strh	r3, [r7, #12]
 800a092:	89bb      	ldrh	r3, [r7, #12]
 800a094:	837b      	strh	r3, [r7, #26]
    if (head != tail) // buffer NOT full?
 800a096:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a098:	8b7b      	ldrh	r3, [r7, #26]
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d018      	beq.n	800a0d0 <RingBuffer_Put+0x7e>
    {
        rb->buffer[atomic_load_explicit(&rb->head, memory_order_relaxed)] = el;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	322a      	adds	r2, #42	@ 0x2a
 800a0a6:	617a      	str	r2, [r7, #20]
 800a0a8:	697a      	ldr	r2, [r7, #20]
 800a0aa:	8812      	ldrh	r2, [r2, #0]
 800a0ac:	b292      	uxth	r2, r2
 800a0ae:	817a      	strh	r2, [r7, #10]
 800a0b0:	897a      	ldrh	r2, [r7, #10]
 800a0b2:	4413      	add	r3, r2
 800a0b4:	78fa      	ldrb	r2, [r7, #3]
 800a0b6:	701a      	strb	r2, [r3, #0]
        atomic_store_explicit(&rb->head, head, memory_order_release);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	332a      	adds	r3, #42	@ 0x2a
 800a0bc:	613b      	str	r3, [r7, #16]
 800a0be:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a0c0:	813b      	strh	r3, [r7, #8]
 800a0c2:	893a      	ldrh	r2, [r7, #8]
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	f3bf 8f5b 	dmb	ish
 800a0ca:	801a      	strh	r2, [r3, #0]
//        __enable_irq();
        return true;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	e000      	b.n	800a0d2 <RingBuffer_Put+0x80>
    }
    else
    {
//    	__enable_irq();
        return false;
 800a0d0:	2300      	movs	r3, #0
    }
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	372c      	adds	r7, #44	@ 0x2c
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr

0800a0de <RingBuffer_Get>:

_Bool RingBuffer_Get(s_RingBufferType * const rb, RingBufElement *pel)
{
 800a0de:	b480      	push	{r7}
 800a0e0:	b08b      	sub	sp, #44	@ 0x2c
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
 800a0e6:	6039      	str	r1, [r7, #0]
//	__disable_irq();
    RingBufCtr tail = atomic_load_explicit(&rb->tail, memory_order_relaxed);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	332c      	adds	r3, #44	@ 0x2c
 800a0ec:	623b      	str	r3, [r7, #32]
 800a0ee:	6a3b      	ldr	r3, [r7, #32]
 800a0f0:	881b      	ldrh	r3, [r3, #0]
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	827b      	strh	r3, [r7, #18]
 800a0f6:	8a7b      	ldrh	r3, [r7, #18]
 800a0f8:	84fb      	strh	r3, [r7, #38]	@ 0x26
    RingBufCtr head = atomic_load_explicit(&rb->head, memory_order_acquire);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	332a      	adds	r3, #42	@ 0x2a
 800a0fe:	61fb      	str	r3, [r7, #28]
 800a100:	69fb      	ldr	r3, [r7, #28]
 800a102:	881b      	ldrh	r3, [r3, #0]
 800a104:	f3bf 8f5b 	dmb	ish
 800a108:	b29b      	uxth	r3, r3
 800a10a:	823b      	strh	r3, [r7, #16]
 800a10c:	8a3b      	ldrh	r3, [r7, #16]
 800a10e:	837b      	strh	r3, [r7, #26]
    if (head != tail)  // buffer NOT empty?
 800a110:	8b7a      	ldrh	r2, [r7, #26]
 800a112:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a114:	429a      	cmp	r2, r3
 800a116:	d01c      	beq.n	800a152 <RingBuffer_Get+0x74>
    {
        *pel = rb->buffer[tail];
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a11c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a11e:	4413      	add	r3, r2
 800a120:	781a      	ldrb	r2, [r3, #0]
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	701a      	strb	r2, [r3, #0]
        ++tail;
 800a126:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a128:	3301      	adds	r3, #1
 800a12a:	84fb      	strh	r3, [r7, #38]	@ 0x26
        if (tail == rb->max_size)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a130:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a132:	429a      	cmp	r2, r3
 800a134:	d101      	bne.n	800a13a <RingBuffer_Get+0x5c>
        {
            tail = 0U;
 800a136:	2300      	movs	r3, #0
 800a138:	84fb      	strh	r3, [r7, #38]	@ 0x26
        }
        atomic_store_explicit(&rb->tail, tail, memory_order_release);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	332c      	adds	r3, #44	@ 0x2c
 800a13e:	617b      	str	r3, [r7, #20]
 800a140:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a142:	81fb      	strh	r3, [r7, #14]
 800a144:	89fa      	ldrh	r2, [r7, #14]
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	f3bf 8f5b 	dmb	ish
 800a14c:	801a      	strh	r2, [r3, #0]
//    	__enable_irq();
        return true;
 800a14e:	2301      	movs	r3, #1
 800a150:	e000      	b.n	800a154 <RingBuffer_Get+0x76>
    }
    else
    {
//    	__enable_irq();
        return false;
 800a152:	2300      	movs	r3, #0
    }
}
 800a154:	4618      	mov	r0, r3
 800a156:	372c      	adds	r7, #44	@ 0x2c
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <RingBuffer_IsDataAvailable>:
    }
    return rb->buffer[tail];
}

_Bool RingBuffer_IsDataAvailable(s_RingBufferType * const rb)
{
 800a160:	b480      	push	{r7}
 800a162:	b089      	sub	sp, #36	@ 0x24
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
    RingBufCtr head = atomic_load_explicit(&rb->head, memory_order_acquire);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	332a      	adds	r3, #42	@ 0x2a
 800a16c:	61fb      	str	r3, [r7, #28]
 800a16e:	69fb      	ldr	r3, [r7, #28]
 800a170:	881b      	ldrh	r3, [r3, #0]
 800a172:	f3bf 8f5b 	dmb	ish
 800a176:	b29b      	uxth	r3, r3
 800a178:	823b      	strh	r3, [r7, #16]
 800a17a:	8a3b      	ldrh	r3, [r7, #16]
 800a17c:	837b      	strh	r3, [r7, #26]
    RingBufCtr tail = atomic_load_explicit(&rb->tail, memory_order_relaxed);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	332c      	adds	r3, #44	@ 0x2c
 800a182:	617b      	str	r3, [r7, #20]
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	881b      	ldrh	r3, [r3, #0]
 800a188:	b29b      	uxth	r3, r3
 800a18a:	81fb      	strh	r3, [r7, #14]
 800a18c:	89fb      	ldrh	r3, [r7, #14]
 800a18e:	827b      	strh	r3, [r7, #18]
    return (head != tail);
 800a190:	8b7a      	ldrh	r2, [r7, #26]
 800a192:	8a7b      	ldrh	r3, [r7, #18]
 800a194:	429a      	cmp	r2, r3
 800a196:	bf14      	ite	ne
 800a198:	2301      	movne	r3, #1
 800a19a:	2300      	moveq	r3, #0
 800a19c:	b2db      	uxtb	r3, r3
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3724      	adds	r7, #36	@ 0x24
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr
	...

0800a1ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a1b2:	2003      	movs	r0, #3
 800a1b4:	f000 f968 	bl	800a488 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a1b8:	f002 fb8e 	bl	800c8d8 <HAL_RCC_GetSysClockFreq>
 800a1bc:	4602      	mov	r2, r0
 800a1be:	4b15      	ldr	r3, [pc, #84]	@ (800a214 <HAL_Init+0x68>)
 800a1c0:	699b      	ldr	r3, [r3, #24]
 800a1c2:	0a1b      	lsrs	r3, r3, #8
 800a1c4:	f003 030f 	and.w	r3, r3, #15
 800a1c8:	4913      	ldr	r1, [pc, #76]	@ (800a218 <HAL_Init+0x6c>)
 800a1ca:	5ccb      	ldrb	r3, [r1, r3]
 800a1cc:	f003 031f 	and.w	r3, r3, #31
 800a1d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a1d4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a1d6:	4b0f      	ldr	r3, [pc, #60]	@ (800a214 <HAL_Init+0x68>)
 800a1d8:	699b      	ldr	r3, [r3, #24]
 800a1da:	f003 030f 	and.w	r3, r3, #15
 800a1de:	4a0e      	ldr	r2, [pc, #56]	@ (800a218 <HAL_Init+0x6c>)
 800a1e0:	5cd3      	ldrb	r3, [r2, r3]
 800a1e2:	f003 031f 	and.w	r3, r3, #31
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	fa22 f303 	lsr.w	r3, r2, r3
 800a1ec:	4a0b      	ldr	r2, [pc, #44]	@ (800a21c <HAL_Init+0x70>)
 800a1ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a1f0:	4a0b      	ldr	r2, [pc, #44]	@ (800a220 <HAL_Init+0x74>)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a1f6:	200f      	movs	r0, #15
 800a1f8:	f000 f814 	bl	800a224 <HAL_InitTick>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d001      	beq.n	800a206 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800a202:	2301      	movs	r3, #1
 800a204:	e002      	b.n	800a20c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800a206:	f7f7 fb51 	bl	80018ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a20a:	2300      	movs	r3, #0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3708      	adds	r7, #8
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}
 800a214:	58024400 	.word	0x58024400
 800a218:	080122a4 	.word	0x080122a4
 800a21c:	24000004 	.word	0x24000004
 800a220:	24000000 	.word	0x24000000

0800a224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800a22c:	4b15      	ldr	r3, [pc, #84]	@ (800a284 <HAL_InitTick+0x60>)
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d101      	bne.n	800a238 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800a234:	2301      	movs	r3, #1
 800a236:	e021      	b.n	800a27c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800a238:	4b13      	ldr	r3, [pc, #76]	@ (800a288 <HAL_InitTick+0x64>)
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	4b11      	ldr	r3, [pc, #68]	@ (800a284 <HAL_InitTick+0x60>)
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	4619      	mov	r1, r3
 800a242:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a246:	fbb3 f3f1 	udiv	r3, r3, r1
 800a24a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a24e:	4618      	mov	r0, r3
 800a250:	f000 f94d 	bl	800a4ee <HAL_SYSTICK_Config>
 800a254:	4603      	mov	r3, r0
 800a256:	2b00      	cmp	r3, #0
 800a258:	d001      	beq.n	800a25e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800a25a:	2301      	movs	r3, #1
 800a25c:	e00e      	b.n	800a27c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2b0f      	cmp	r3, #15
 800a262:	d80a      	bhi.n	800a27a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a264:	2200      	movs	r2, #0
 800a266:	6879      	ldr	r1, [r7, #4]
 800a268:	f04f 30ff 	mov.w	r0, #4294967295
 800a26c:	f000 f917 	bl	800a49e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a270:	4a06      	ldr	r2, [pc, #24]	@ (800a28c <HAL_InitTick+0x68>)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a276:	2300      	movs	r3, #0
 800a278:	e000      	b.n	800a27c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800a27a:	2301      	movs	r3, #1
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3708      	adds	r7, #8
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}
 800a284:	240000d8 	.word	0x240000d8
 800a288:	24000000 	.word	0x24000000
 800a28c:	240000d4 	.word	0x240000d4

0800a290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a290:	b480      	push	{r7}
 800a292:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800a294:	4b06      	ldr	r3, [pc, #24]	@ (800a2b0 <HAL_IncTick+0x20>)
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	461a      	mov	r2, r3
 800a29a:	4b06      	ldr	r3, [pc, #24]	@ (800a2b4 <HAL_IncTick+0x24>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4413      	add	r3, r2
 800a2a0:	4a04      	ldr	r2, [pc, #16]	@ (800a2b4 <HAL_IncTick+0x24>)
 800a2a2:	6013      	str	r3, [r2, #0]
}
 800a2a4:	bf00      	nop
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ac:	4770      	bx	lr
 800a2ae:	bf00      	nop
 800a2b0:	240000d8 	.word	0x240000d8
 800a2b4:	24042cd8 	.word	0x24042cd8

0800a2b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	af00      	add	r7, sp, #0
  return uwTick;
 800a2bc:	4b03      	ldr	r3, [pc, #12]	@ (800a2cc <HAL_GetTick+0x14>)
 800a2be:	681b      	ldr	r3, [r3, #0]
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr
 800a2ca:	bf00      	nop
 800a2cc:	24042cd8 	.word	0x24042cd8

0800a2d0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800a2d4:	4b03      	ldr	r3, [pc, #12]	@ (800a2e4 <HAL_GetREVID+0x14>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	0c1b      	lsrs	r3, r3, #16
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr
 800a2e4:	5c001000 	.word	0x5c001000

0800a2e8 <__NVIC_SetPriorityGrouping>:
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b085      	sub	sp, #20
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f003 0307 	and.w	r3, r3, #7
 800a2f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a2f8:	4b0b      	ldr	r3, [pc, #44]	@ (800a328 <__NVIC_SetPriorityGrouping+0x40>)
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a2fe:	68ba      	ldr	r2, [r7, #8]
 800a300:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a304:	4013      	ands	r3, r2
 800a306:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800a310:	4b06      	ldr	r3, [pc, #24]	@ (800a32c <__NVIC_SetPriorityGrouping+0x44>)
 800a312:	4313      	orrs	r3, r2
 800a314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a316:	4a04      	ldr	r2, [pc, #16]	@ (800a328 <__NVIC_SetPriorityGrouping+0x40>)
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	60d3      	str	r3, [r2, #12]
}
 800a31c:	bf00      	nop
 800a31e:	3714      	adds	r7, #20
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr
 800a328:	e000ed00 	.word	0xe000ed00
 800a32c:	05fa0000 	.word	0x05fa0000

0800a330 <__NVIC_GetPriorityGrouping>:
{
 800a330:	b480      	push	{r7}
 800a332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a334:	4b04      	ldr	r3, [pc, #16]	@ (800a348 <__NVIC_GetPriorityGrouping+0x18>)
 800a336:	68db      	ldr	r3, [r3, #12]
 800a338:	0a1b      	lsrs	r3, r3, #8
 800a33a:	f003 0307 	and.w	r3, r3, #7
}
 800a33e:	4618      	mov	r0, r3
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr
 800a348:	e000ed00 	.word	0xe000ed00

0800a34c <__NVIC_EnableIRQ>:
{
 800a34c:	b480      	push	{r7}
 800a34e:	b083      	sub	sp, #12
 800a350:	af00      	add	r7, sp, #0
 800a352:	4603      	mov	r3, r0
 800a354:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a356:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	db0b      	blt.n	800a376 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a35e:	88fb      	ldrh	r3, [r7, #6]
 800a360:	f003 021f 	and.w	r2, r3, #31
 800a364:	4907      	ldr	r1, [pc, #28]	@ (800a384 <__NVIC_EnableIRQ+0x38>)
 800a366:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a36a:	095b      	lsrs	r3, r3, #5
 800a36c:	2001      	movs	r0, #1
 800a36e:	fa00 f202 	lsl.w	r2, r0, r2
 800a372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a376:	bf00      	nop
 800a378:	370c      	adds	r7, #12
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr
 800a382:	bf00      	nop
 800a384:	e000e100 	.word	0xe000e100

0800a388 <__NVIC_SetPriority>:
{
 800a388:	b480      	push	{r7}
 800a38a:	b083      	sub	sp, #12
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	4603      	mov	r3, r0
 800a390:	6039      	str	r1, [r7, #0]
 800a392:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a394:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	db0a      	blt.n	800a3b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	b2da      	uxtb	r2, r3
 800a3a0:	490c      	ldr	r1, [pc, #48]	@ (800a3d4 <__NVIC_SetPriority+0x4c>)
 800a3a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a3a6:	0112      	lsls	r2, r2, #4
 800a3a8:	b2d2      	uxtb	r2, r2
 800a3aa:	440b      	add	r3, r1
 800a3ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a3b0:	e00a      	b.n	800a3c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	b2da      	uxtb	r2, r3
 800a3b6:	4908      	ldr	r1, [pc, #32]	@ (800a3d8 <__NVIC_SetPriority+0x50>)
 800a3b8:	88fb      	ldrh	r3, [r7, #6]
 800a3ba:	f003 030f 	and.w	r3, r3, #15
 800a3be:	3b04      	subs	r3, #4
 800a3c0:	0112      	lsls	r2, r2, #4
 800a3c2:	b2d2      	uxtb	r2, r2
 800a3c4:	440b      	add	r3, r1
 800a3c6:	761a      	strb	r2, [r3, #24]
}
 800a3c8:	bf00      	nop
 800a3ca:	370c      	adds	r7, #12
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr
 800a3d4:	e000e100 	.word	0xe000e100
 800a3d8:	e000ed00 	.word	0xe000ed00

0800a3dc <NVIC_EncodePriority>:
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b089      	sub	sp, #36	@ 0x24
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f003 0307 	and.w	r3, r3, #7
 800a3ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a3f0:	69fb      	ldr	r3, [r7, #28]
 800a3f2:	f1c3 0307 	rsb	r3, r3, #7
 800a3f6:	2b04      	cmp	r3, #4
 800a3f8:	bf28      	it	cs
 800a3fa:	2304      	movcs	r3, #4
 800a3fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a3fe:	69fb      	ldr	r3, [r7, #28]
 800a400:	3304      	adds	r3, #4
 800a402:	2b06      	cmp	r3, #6
 800a404:	d902      	bls.n	800a40c <NVIC_EncodePriority+0x30>
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	3b03      	subs	r3, #3
 800a40a:	e000      	b.n	800a40e <NVIC_EncodePriority+0x32>
 800a40c:	2300      	movs	r3, #0
 800a40e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a410:	f04f 32ff 	mov.w	r2, #4294967295
 800a414:	69bb      	ldr	r3, [r7, #24]
 800a416:	fa02 f303 	lsl.w	r3, r2, r3
 800a41a:	43da      	mvns	r2, r3
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	401a      	ands	r2, r3
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a424:	f04f 31ff 	mov.w	r1, #4294967295
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	fa01 f303 	lsl.w	r3, r1, r3
 800a42e:	43d9      	mvns	r1, r3
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a434:	4313      	orrs	r3, r2
}
 800a436:	4618      	mov	r0, r3
 800a438:	3724      	adds	r7, #36	@ 0x24
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr
	...

0800a444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	3b01      	subs	r3, #1
 800a450:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a454:	d301      	bcc.n	800a45a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a456:	2301      	movs	r3, #1
 800a458:	e00f      	b.n	800a47a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a45a:	4a0a      	ldr	r2, [pc, #40]	@ (800a484 <SysTick_Config+0x40>)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	3b01      	subs	r3, #1
 800a460:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a462:	210f      	movs	r1, #15
 800a464:	f04f 30ff 	mov.w	r0, #4294967295
 800a468:	f7ff ff8e 	bl	800a388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a46c:	4b05      	ldr	r3, [pc, #20]	@ (800a484 <SysTick_Config+0x40>)
 800a46e:	2200      	movs	r2, #0
 800a470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a472:	4b04      	ldr	r3, [pc, #16]	@ (800a484 <SysTick_Config+0x40>)
 800a474:	2207      	movs	r2, #7
 800a476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a478:	2300      	movs	r3, #0
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3708      	adds	r7, #8
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	e000e010 	.word	0xe000e010

0800a488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f7ff ff29 	bl	800a2e8 <__NVIC_SetPriorityGrouping>
}
 800a496:	bf00      	nop
 800a498:	3708      	adds	r7, #8
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}

0800a49e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a49e:	b580      	push	{r7, lr}
 800a4a0:	b086      	sub	sp, #24
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	60b9      	str	r1, [r7, #8]
 800a4a8:	607a      	str	r2, [r7, #4]
 800a4aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a4ac:	f7ff ff40 	bl	800a330 <__NVIC_GetPriorityGrouping>
 800a4b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a4b2:	687a      	ldr	r2, [r7, #4]
 800a4b4:	68b9      	ldr	r1, [r7, #8]
 800a4b6:	6978      	ldr	r0, [r7, #20]
 800a4b8:	f7ff ff90 	bl	800a3dc <NVIC_EncodePriority>
 800a4bc:	4602      	mov	r2, r0
 800a4be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a4c2:	4611      	mov	r1, r2
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f7ff ff5f 	bl	800a388 <__NVIC_SetPriority>
}
 800a4ca:	bf00      	nop
 800a4cc:	3718      	adds	r7, #24
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}

0800a4d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b082      	sub	sp, #8
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	4603      	mov	r3, r0
 800a4da:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a4dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7ff ff33 	bl	800a34c <__NVIC_EnableIRQ>
}
 800a4e6:	bf00      	nop
 800a4e8:	3708      	adds	r7, #8
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}

0800a4ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b082      	sub	sp, #8
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f7ff ffa4 	bl	800a444 <SysTick_Config>
 800a4fc:	4603      	mov	r3, r0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3708      	adds	r7, #8
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
	...

0800a508 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b098      	sub	sp, #96	@ 0x60
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800a510:	4a84      	ldr	r2, [pc, #528]	@ (800a724 <HAL_FDCAN_Init+0x21c>)
 800a512:	f107 030c 	add.w	r3, r7, #12
 800a516:	4611      	mov	r1, r2
 800a518:	224c      	movs	r2, #76	@ 0x4c
 800a51a:	4618      	mov	r0, r3
 800a51c:	f005 fdfd 	bl	801011a <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d101      	bne.n	800a52a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800a526:	2301      	movs	r3, #1
 800a528:	e1c6      	b.n	800a8b8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4a7e      	ldr	r2, [pc, #504]	@ (800a728 <HAL_FDCAN_Init+0x220>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d106      	bne.n	800a542 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800a53c:	461a      	mov	r2, r3
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800a548:	b2db      	uxtb	r3, r3
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d106      	bne.n	800a55c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2200      	movs	r2, #0
 800a552:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f7f7 f9c2 	bl	80018e0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	699a      	ldr	r2, [r3, #24]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f022 0210 	bic.w	r2, r2, #16
 800a56a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a56c:	f7ff fea4 	bl	800a2b8 <HAL_GetTick>
 800a570:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800a572:	e014      	b.n	800a59e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800a574:	f7ff fea0 	bl	800a2b8 <HAL_GetTick>
 800a578:	4602      	mov	r2, r0
 800a57a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a57c:	1ad3      	subs	r3, r2, r3
 800a57e:	2b0a      	cmp	r3, #10
 800a580:	d90d      	bls.n	800a59e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a588:	f043 0201 	orr.w	r2, r3, #1
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2203      	movs	r2, #3
 800a596:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800a59a:	2301      	movs	r3, #1
 800a59c:	e18c      	b.n	800a8b8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	699b      	ldr	r3, [r3, #24]
 800a5a4:	f003 0308 	and.w	r3, r3, #8
 800a5a8:	2b08      	cmp	r3, #8
 800a5aa:	d0e3      	beq.n	800a574 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	699a      	ldr	r2, [r3, #24]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f042 0201 	orr.w	r2, r2, #1
 800a5ba:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a5bc:	f7ff fe7c 	bl	800a2b8 <HAL_GetTick>
 800a5c0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800a5c2:	e014      	b.n	800a5ee <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800a5c4:	f7ff fe78 	bl	800a2b8 <HAL_GetTick>
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a5cc:	1ad3      	subs	r3, r2, r3
 800a5ce:	2b0a      	cmp	r3, #10
 800a5d0:	d90d      	bls.n	800a5ee <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a5d8:	f043 0201 	orr.w	r2, r3, #1
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2203      	movs	r2, #3
 800a5e6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	e164      	b.n	800a8b8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	699b      	ldr	r3, [r3, #24]
 800a5f4:	f003 0301 	and.w	r3, r3, #1
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d0e3      	beq.n	800a5c4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	699a      	ldr	r2, [r3, #24]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f042 0202 	orr.w	r2, r2, #2
 800a60a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	7c1b      	ldrb	r3, [r3, #16]
 800a610:	2b01      	cmp	r3, #1
 800a612:	d108      	bne.n	800a626 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	699a      	ldr	r2, [r3, #24]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a622:	619a      	str	r2, [r3, #24]
 800a624:	e007      	b.n	800a636 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	699a      	ldr	r2, [r3, #24]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a634:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	7c5b      	ldrb	r3, [r3, #17]
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d108      	bne.n	800a650 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	699a      	ldr	r2, [r3, #24]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a64c:	619a      	str	r2, [r3, #24]
 800a64e:	e007      	b.n	800a660 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	699a      	ldr	r2, [r3, #24]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a65e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	7c9b      	ldrb	r3, [r3, #18]
 800a664:	2b01      	cmp	r3, #1
 800a666:	d108      	bne.n	800a67a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	699a      	ldr	r2, [r3, #24]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a676:	619a      	str	r2, [r3, #24]
 800a678:	e007      	b.n	800a68a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	699a      	ldr	r2, [r3, #24]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a688:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	699b      	ldr	r3, [r3, #24]
 800a690:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	689a      	ldr	r2, [r3, #8]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	430a      	orrs	r2, r1
 800a69e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	699a      	ldr	r2, [r3, #24]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800a6ae:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	691a      	ldr	r2, [r3, #16]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f022 0210 	bic.w	r2, r2, #16
 800a6be:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	68db      	ldr	r3, [r3, #12]
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d108      	bne.n	800a6da <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	699a      	ldr	r2, [r3, #24]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f042 0204 	orr.w	r2, r2, #4
 800a6d6:	619a      	str	r2, [r3, #24]
 800a6d8:	e030      	b.n	800a73c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d02c      	beq.n	800a73c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	68db      	ldr	r3, [r3, #12]
 800a6e6:	2b02      	cmp	r3, #2
 800a6e8:	d020      	beq.n	800a72c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	699a      	ldr	r2, [r3, #24]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a6f8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	691a      	ldr	r2, [r3, #16]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f042 0210 	orr.w	r2, r2, #16
 800a708:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	68db      	ldr	r3, [r3, #12]
 800a70e:	2b03      	cmp	r3, #3
 800a710:	d114      	bne.n	800a73c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	699a      	ldr	r2, [r3, #24]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f042 0220 	orr.w	r2, r2, #32
 800a720:	619a      	str	r2, [r3, #24]
 800a722:	e00b      	b.n	800a73c <HAL_FDCAN_Init+0x234>
 800a724:	08012258 	.word	0x08012258
 800a728:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	699a      	ldr	r2, [r3, #24]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f042 0220 	orr.w	r2, r2, #32
 800a73a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	699b      	ldr	r3, [r3, #24]
 800a740:	3b01      	subs	r3, #1
 800a742:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	69db      	ldr	r3, [r3, #28]
 800a748:	3b01      	subs	r3, #1
 800a74a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a74c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6a1b      	ldr	r3, [r3, #32]
 800a752:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800a754:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	695b      	ldr	r3, [r3, #20]
 800a75c:	3b01      	subs	r3, #1
 800a75e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800a764:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a766:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a770:	d115      	bne.n	800a79e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a776:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a77c:	3b01      	subs	r3, #1
 800a77e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800a780:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a786:	3b01      	subs	r3, #1
 800a788:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800a78a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a792:	3b01      	subs	r3, #1
 800a794:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800a79a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800a79c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d00a      	beq.n	800a7bc <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	430a      	orrs	r2, r1
 800a7b8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a7c4:	4413      	add	r3, r2
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d011      	beq.n	800a7ee <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800a7d2:	f023 0107 	bic.w	r1, r3, #7
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a7da:	009b      	lsls	r3, r3, #2
 800a7dc:	3360      	adds	r3, #96	@ 0x60
 800a7de:	443b      	add	r3, r7
 800a7e0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	430a      	orrs	r2, r1
 800a7ea:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d011      	beq.n	800a81a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a7fe:	f023 0107 	bic.w	r1, r3, #7
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a806:	009b      	lsls	r3, r3, #2
 800a808:	3360      	adds	r3, #96	@ 0x60
 800a80a:	443b      	add	r3, r7
 800a80c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	430a      	orrs	r2, r1
 800a816:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d012      	beq.n	800a848 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a82a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a832:	009b      	lsls	r3, r3, #2
 800a834:	3360      	adds	r3, #96	@ 0x60
 800a836:	443b      	add	r3, r7
 800a838:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800a83c:	011a      	lsls	r2, r3, #4
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	430a      	orrs	r2, r1
 800a844:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d012      	beq.n	800a876 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a858:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a860:	009b      	lsls	r3, r3, #2
 800a862:	3360      	adds	r3, #96	@ 0x60
 800a864:	443b      	add	r3, r7
 800a866:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800a86a:	021a      	lsls	r2, r3, #8
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	430a      	orrs	r2, r1
 800a872:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4a11      	ldr	r2, [pc, #68]	@ (800a8c0 <HAL_FDCAN_Init+0x3b8>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d107      	bne.n	800a890 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	689a      	ldr	r2, [r3, #8]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	f022 0203 	bic.w	r2, r2, #3
 800a88e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2200      	movs	r2, #0
 800a89c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 fdf7 	bl	800b49c <FDCAN_CalcultateRamBlockAddresses>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 800a8b4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3760      	adds	r7, #96	@ 0x60
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}
 800a8c0:	4000a000 	.word	0x4000a000

0800a8c4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b087      	sub	sp, #28
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800a8d4:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800a8d6:	7bfb      	ldrb	r3, [r7, #15]
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	d002      	beq.n	800a8e2 <HAL_FDCAN_ConfigFilter+0x1e>
 800a8dc:	7bfb      	ldrb	r3, [r7, #15]
 800a8de:	2b02      	cmp	r3, #2
 800a8e0:	d157      	bne.n	800a992 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d12b      	bne.n	800a942 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	68db      	ldr	r3, [r3, #12]
 800a8ee:	2b07      	cmp	r3, #7
 800a8f0:	d10d      	bne.n	800a90e <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	691b      	ldr	r3, [r3, #16]
 800a8f6:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	69db      	ldr	r3, [r3, #28]
 800a8fc:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800a8fe:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800a904:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800a906:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 800a90a:	617b      	str	r3, [r7, #20]
 800a90c:	e00e      	b.n	800a92c <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	68db      	ldr	r3, [r3, #12]
 800a918:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800a91a:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	691b      	ldr	r3, [r3, #16]
 800a920:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800a922:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800a928:	4313      	orrs	r3, r2
 800a92a:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	4413      	add	r3, r2
 800a938:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	697a      	ldr	r2, [r7, #20]
 800a93e:	601a      	str	r2, [r3, #0]
 800a940:	e025      	b.n	800a98e <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	68db      	ldr	r3, [r3, #12]
 800a946:	075a      	lsls	r2, r3, #29
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	691b      	ldr	r3, [r3, #16]
 800a94c:	4313      	orrs	r3, r2
 800a94e:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	2b07      	cmp	r3, #7
 800a956:	d103      	bne.n	800a960 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	699b      	ldr	r3, [r3, #24]
 800a95c:	613b      	str	r3, [r7, #16]
 800a95e:	e006      	b.n	800a96e <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	689b      	ldr	r3, [r3, #8]
 800a964:	079a      	lsls	r2, r3, #30
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	695b      	ldr	r3, [r3, #20]
 800a96a:	4313      	orrs	r3, r2
 800a96c:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	00db      	lsls	r3, r3, #3
 800a978:	4413      	add	r3, r2
 800a97a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	697a      	ldr	r2, [r7, #20]
 800a980:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	3304      	adds	r3, #4
 800a986:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	693a      	ldr	r2, [r7, #16]
 800a98c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800a98e:	2300      	movs	r3, #0
 800a990:	e008      	b.n	800a9a4 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a998:	f043 0202 	orr.w	r2, r3, #2
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800a9a2:	2301      	movs	r3, #1
  }
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	371c      	adds	r7, #28
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr

0800a9b0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b083      	sub	sp, #12
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d111      	bne.n	800a9e8 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2202      	movs	r2, #2
 800a9c8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	699a      	ldr	r2, [r3, #24]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f022 0201 	bic.w	r2, r2, #1
 800a9da:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	e008      	b.n	800a9fa <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a9ee:	f043 0204 	orr.w	r2, r3, #4
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800a9f8:	2301      	movs	r3, #1
  }
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	370c      	adds	r7, #12
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr

0800aa06 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800aa06:	b580      	push	{r7, lr}
 800aa08:	b086      	sub	sp, #24
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	60f8      	str	r0, [r7, #12]
 800aa0e:	60b9      	str	r1, [r7, #8]
 800aa10:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	2b02      	cmp	r3, #2
 800aa1c:	d141      	bne.n	800aaa2 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800aa26:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d109      	bne.n	800aa42 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aa34:	f043 0220 	orr.w	r2, r3, #32
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e038      	b.n	800aab4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800aa4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d009      	beq.n	800aa66 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aa58:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800aa62:	2301      	movs	r3, #1
 800aa64:	e026      	b.n	800aab4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800aa6e:	0c1b      	lsrs	r3, r3, #16
 800aa70:	f003 031f 	and.w	r3, r3, #31
 800aa74:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	687a      	ldr	r2, [r7, #4]
 800aa7a:	68b9      	ldr	r1, [r7, #8]
 800aa7c:	68f8      	ldr	r0, [r7, #12]
 800aa7e:	f000 fe93 	bl	800b7a8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	2101      	movs	r1, #1
 800aa88:	697a      	ldr	r2, [r7, #20]
 800aa8a:	fa01 f202 	lsl.w	r2, r1, r2
 800aa8e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800aa92:	2201      	movs	r2, #1
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	409a      	lsls	r2, r3
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	e008      	b.n	800aab4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aaa8:	f043 0208 	orr.w	r2, r3, #8
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800aab2:	2301      	movs	r3, #1
  }
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3718      	adds	r7, #24
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b08b      	sub	sp, #44	@ 0x2c
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	60f8      	str	r0, [r7, #12]
 800aac4:	60b9      	str	r1, [r7, #8]
 800aac6:	607a      	str	r2, [r7, #4]
 800aac8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800aaca:	2300      	movs	r3, #0
 800aacc:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800aad4:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800aad6:	7efb      	ldrb	r3, [r7, #27]
 800aad8:	2b02      	cmp	r3, #2
 800aada:	f040 8149 	bne.w	800ad70 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	2b40      	cmp	r3, #64	@ 0x40
 800aae2:	d14c      	bne.n	800ab7e <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800aaec:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d109      	bne.n	800ab08 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aafa:	f043 0220 	orr.w	r2, r3, #32
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800ab04:	2301      	movs	r3, #1
 800ab06:	e13c      	b.n	800ad82 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ab10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d109      	bne.n	800ab2c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ab1e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800ab28:	2301      	movs	r3, #1
 800ab2a:	e12a      	b.n	800ad82 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ab34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ab38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ab3c:	d10a      	bne.n	800ab54 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ab46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ab4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ab4e:	d101      	bne.n	800ab54 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800ab50:	2301      	movs	r3, #1
 800ab52:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ab5c:	0a1b      	lsrs	r3, r3, #8
 800ab5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ab62:	69fa      	ldr	r2, [r7, #28]
 800ab64:	4413      	add	r3, r2
 800ab66:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab70:	69f9      	ldr	r1, [r7, #28]
 800ab72:	fb01 f303 	mul.w	r3, r1, r3
 800ab76:	009b      	lsls	r3, r3, #2
 800ab78:	4413      	add	r3, r2
 800ab7a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab7c:	e068      	b.n	800ac50 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	2b41      	cmp	r3, #65	@ 0x41
 800ab82:	d14c      	bne.n	800ac1e <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ab8c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d109      	bne.n	800aba8 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ab9a:	f043 0220 	orr.w	r2, r3, #32
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800aba4:	2301      	movs	r3, #1
 800aba6:	e0ec      	b.n	800ad82 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800abb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d109      	bne.n	800abcc <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800abbe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800abc8:	2301      	movs	r3, #1
 800abca:	e0da      	b.n	800ad82 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800abd4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800abd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800abdc:	d10a      	bne.n	800abf4 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800abe6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800abea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800abee:	d101      	bne.n	800abf4 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800abf0:	2301      	movs	r3, #1
 800abf2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800abfc:	0a1b      	lsrs	r3, r3, #8
 800abfe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ac02:	69fa      	ldr	r2, [r7, #28]
 800ac04:	4413      	add	r3, r2
 800ac06:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac10:	69f9      	ldr	r1, [r7, #28]
 800ac12:	fb01 f303 	mul.w	r3, r1, r3
 800ac16:	009b      	lsls	r3, r3, #2
 800ac18:	4413      	add	r3, r2
 800ac1a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac1c:	e018      	b.n	800ac50 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac22:	68ba      	ldr	r2, [r7, #8]
 800ac24:	429a      	cmp	r2, r3
 800ac26:	d309      	bcc.n	800ac3c <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ac2e:	f043 0220 	orr.w	r2, r3, #32
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	e0a2      	b.n	800ad82 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac44:	68b9      	ldr	r1, [r7, #8]
 800ac46:	fb01 f303 	mul.w	r3, r1, r3
 800ac4a:	009b      	lsls	r3, r3, #2
 800ac4c:	4413      	add	r3, r2
 800ac4e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800ac50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d107      	bne.n	800ac74 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800ac64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	0c9b      	lsrs	r3, r3, #18
 800ac6a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	601a      	str	r2, [r3, #0]
 800ac72:	e005      	b.n	800ac80 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800ac74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800ac80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800ac8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800ac98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac9a:	3304      	adds	r3, #4
 800ac9c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800ac9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	b29a      	uxth	r2, r3
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800aca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	0c1b      	lsrs	r3, r3, #16
 800acae:	f003 020f 	and.w	r2, r3, #15
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800acb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800acc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800acce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	0e1b      	lsrs	r3, r3, #24
 800acd4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800acdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	0fda      	lsrs	r2, r3, #31
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800ace6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace8:	3304      	adds	r3, #4
 800acea:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800acec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acee:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800acf0:	2300      	movs	r3, #0
 800acf2:	623b      	str	r3, [r7, #32]
 800acf4:	e00a      	b.n	800ad0c <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800acf6:	697a      	ldr	r2, [r7, #20]
 800acf8:	6a3b      	ldr	r3, [r7, #32]
 800acfa:	441a      	add	r2, r3
 800acfc:	6839      	ldr	r1, [r7, #0]
 800acfe:	6a3b      	ldr	r3, [r7, #32]
 800ad00:	440b      	add	r3, r1
 800ad02:	7812      	ldrb	r2, [r2, #0]
 800ad04:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800ad06:	6a3b      	ldr	r3, [r7, #32]
 800ad08:	3301      	adds	r3, #1
 800ad0a:	623b      	str	r3, [r7, #32]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	68db      	ldr	r3, [r3, #12]
 800ad10:	4a1f      	ldr	r2, [pc, #124]	@ (800ad90 <HAL_FDCAN_GetRxMessage+0x2d4>)
 800ad12:	5cd3      	ldrb	r3, [r2, r3]
 800ad14:	461a      	mov	r2, r3
 800ad16:	6a3b      	ldr	r3, [r7, #32]
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d3ec      	bcc.n	800acf6 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	2b40      	cmp	r3, #64	@ 0x40
 800ad20:	d105      	bne.n	800ad2e <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	69fa      	ldr	r2, [r7, #28]
 800ad28:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 800ad2c:	e01e      	b.n	800ad6c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	2b41      	cmp	r3, #65	@ 0x41
 800ad32:	d105      	bne.n	800ad40 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	69fa      	ldr	r2, [r7, #28]
 800ad3a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 800ad3e:	e015      	b.n	800ad6c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	2b1f      	cmp	r3, #31
 800ad44:	d808      	bhi.n	800ad58 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	2101      	movs	r1, #1
 800ad4c:	68ba      	ldr	r2, [r7, #8]
 800ad4e:	fa01 f202 	lsl.w	r2, r1, r2
 800ad52:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800ad56:	e009      	b.n	800ad6c <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	f003 021f 	and.w	r2, r3, #31
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	2101      	movs	r1, #1
 800ad64:	fa01 f202 	lsl.w	r2, r1, r2
 800ad68:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	e008      	b.n	800ad82 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ad76:	f043 0208 	orr.w	r2, r3, #8
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800ad80:	2301      	movs	r3, #1
  }
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	372c      	adds	r7, #44	@ 0x2c
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr
 800ad8e:	bf00      	nop
 800ad90:	08012388 	.word	0x08012388

0800ad94 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b087      	sub	sp, #28
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	60f8      	str	r0, [r7, #12]
 800ad9c:	60b9      	str	r1, [r7, #8]
 800ad9e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800ada6:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800ada8:	7dfb      	ldrb	r3, [r7, #23]
 800adaa:	2b01      	cmp	r3, #1
 800adac:	d002      	beq.n	800adb4 <HAL_FDCAN_ActivateNotification+0x20>
 800adae:	7dfb      	ldrb	r3, [r7, #23]
 800adb0:	2b02      	cmp	r3, #2
 800adb2:	d155      	bne.n	800ae60 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	4013      	ands	r3, r2
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d108      	bne.n	800add4 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f042 0201 	orr.w	r2, r2, #1
 800add0:	65da      	str	r2, [r3, #92]	@ 0x5c
 800add2:	e014      	b.n	800adfe <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	4013      	ands	r3, r2
 800adde:	68ba      	ldr	r2, [r7, #8]
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d108      	bne.n	800adf6 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f042 0202 	orr.w	r2, r2, #2
 800adf2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800adf4:	e003      	b.n	800adfe <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	2203      	movs	r2, #3
 800adfc:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d009      	beq.n	800ae1c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	430a      	orrs	r2, r1
 800ae18:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d009      	beq.n	800ae3a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	430a      	orrs	r2, r1
 800ae36:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ae40:	68ba      	ldr	r2, [r7, #8]
 800ae42:	4b0f      	ldr	r3, [pc, #60]	@ (800ae80 <HAL_FDCAN_ActivateNotification+0xec>)
 800ae44:	4013      	ands	r3, r2
 800ae46:	68fa      	ldr	r2, [r7, #12]
 800ae48:	6812      	ldr	r2, [r2, #0]
 800ae4a:	430b      	orrs	r3, r1
 800ae4c:	6553      	str	r3, [r2, #84]	@ 0x54
 800ae4e:	4b0d      	ldr	r3, [pc, #52]	@ (800ae84 <HAL_FDCAN_ActivateNotification+0xf0>)
 800ae50:	695a      	ldr	r2, [r3, #20]
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	0f9b      	lsrs	r3, r3, #30
 800ae56:	490b      	ldr	r1, [pc, #44]	@ (800ae84 <HAL_FDCAN_ActivateNotification+0xf0>)
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	e008      	b.n	800ae72 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ae66:	f043 0202 	orr.w	r2, r3, #2
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800ae70:	2301      	movs	r3, #1
  }
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	371c      	adds	r7, #28
 800ae76:	46bd      	mov	sp, r7
 800ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7c:	4770      	bx	lr
 800ae7e:	bf00      	nop
 800ae80:	3fcfffff 	.word	0x3fcfffff
 800ae84:	4000a800 	.word	0x4000a800

0800ae88 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b096      	sub	sp, #88	@ 0x58
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 800ae90:	4b9a      	ldr	r3, [pc, #616]	@ (800b0fc <HAL_FDCAN_IRQHandler+0x274>)
 800ae92:	691b      	ldr	r3, [r3, #16]
 800ae94:	079b      	lsls	r3, r3, #30
 800ae96:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 800ae98:	4b98      	ldr	r3, [pc, #608]	@ (800b0fc <HAL_FDCAN_IRQHandler+0x274>)
 800ae9a:	695b      	ldr	r3, [r3, #20]
 800ae9c:	079b      	lsls	r3, r3, #30
 800ae9e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800aea0:	4013      	ands	r3, r2
 800aea2:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aeaa:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800aeae:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aeb6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800aeb8:	4013      	ands	r3, r2
 800aeba:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aec2:	f003 030f 	and.w	r3, r3, #15
 800aec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aece:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aed0:	4013      	ands	r3, r2
 800aed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aeda:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800aede:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aee6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aee8:	4013      	ands	r3, r2
 800aeea:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aef2:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 800aef6:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aefe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af00:	4013      	ands	r3, r2
 800af02:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af0a:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 800af0e:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800af18:	4013      	ands	r3, r2
 800af1a:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af2a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800af2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af2e:	0a1b      	lsrs	r3, r3, #8
 800af30:	f003 0301 	and.w	r3, r3, #1
 800af34:	2b00      	cmp	r3, #0
 800af36:	d010      	beq.n	800af5a <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800af38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af3a:	0a1b      	lsrs	r3, r3, #8
 800af3c:	f003 0301 	and.w	r3, r3, #1
 800af40:	2b00      	cmp	r3, #0
 800af42:	d00a      	beq.n	800af5a <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800af4c:	651a      	str	r2, [r3, #80]	@ 0x50
 800af4e:	4b6b      	ldr	r3, [pc, #428]	@ (800b0fc <HAL_FDCAN_IRQHandler+0x274>)
 800af50:	2200      	movs	r2, #0
 800af52:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f000 fa54 	bl	800b402 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800af5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af5c:	0a9b      	lsrs	r3, r3, #10
 800af5e:	f003 0301 	and.w	r3, r3, #1
 800af62:	2b00      	cmp	r3, #0
 800af64:	d01d      	beq.n	800afa2 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800af66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af68:	0a9b      	lsrs	r3, r3, #10
 800af6a:	f003 0301 	and.w	r3, r3, #1
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d017      	beq.n	800afa2 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800af7a:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800af84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800af86:	4013      	ands	r3, r2
 800af88:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800af92:	651a      	str	r2, [r3, #80]	@ 0x50
 800af94:	4b59      	ldr	r3, [pc, #356]	@ (800b0fc <HAL_FDCAN_IRQHandler+0x274>)
 800af96:	2200      	movs	r2, #0
 800af98:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800af9a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f000 fa07 	bl	800b3b0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800afa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d00d      	beq.n	800afc4 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800afae:	4b54      	ldr	r3, [pc, #336]	@ (800b100 <HAL_FDCAN_IRQHandler+0x278>)
 800afb0:	400b      	ands	r3, r1
 800afb2:	6513      	str	r3, [r2, #80]	@ 0x50
 800afb4:	4a51      	ldr	r2, [pc, #324]	@ (800b0fc <HAL_FDCAN_IRQHandler+0x274>)
 800afb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afb8:	0f9b      	lsrs	r3, r3, #30
 800afba:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 800afbc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f000 f9c0 	bl	800b344 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800afc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d00d      	beq.n	800afe6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681a      	ldr	r2, [r3, #0]
 800afce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800afd0:	4b4b      	ldr	r3, [pc, #300]	@ (800b100 <HAL_FDCAN_IRQHandler+0x278>)
 800afd2:	400b      	ands	r3, r1
 800afd4:	6513      	str	r3, [r2, #80]	@ 0x50
 800afd6:	4a49      	ldr	r2, [pc, #292]	@ (800b0fc <HAL_FDCAN_IRQHandler+0x274>)
 800afd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800afda:	0f9b      	lsrs	r3, r3, #30
 800afdc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800afde:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f000 f9ba 	bl	800b35a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800afe6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d00d      	beq.n	800b008 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681a      	ldr	r2, [r3, #0]
 800aff0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800aff2:	4b43      	ldr	r3, [pc, #268]	@ (800b100 <HAL_FDCAN_IRQHandler+0x278>)
 800aff4:	400b      	ands	r3, r1
 800aff6:	6513      	str	r3, [r2, #80]	@ 0x50
 800aff8:	4a40      	ldr	r2, [pc, #256]	@ (800b0fc <HAL_FDCAN_IRQHandler+0x274>)
 800affa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800affc:	0f9b      	lsrs	r3, r3, #30
 800affe:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800b000:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f7fe fb28 	bl	8009658 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800b008:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d00d      	beq.n	800b02a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800b014:	4b3a      	ldr	r3, [pc, #232]	@ (800b100 <HAL_FDCAN_IRQHandler+0x278>)
 800b016:	400b      	ands	r3, r1
 800b018:	6513      	str	r3, [r2, #80]	@ 0x50
 800b01a:	4a38      	ldr	r2, [pc, #224]	@ (800b0fc <HAL_FDCAN_IRQHandler+0x274>)
 800b01c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b01e:	0f9b      	lsrs	r3, r3, #30
 800b020:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800b022:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f000 f9a3 	bl	800b370 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800b02a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b02c:	0adb      	lsrs	r3, r3, #11
 800b02e:	f003 0301 	and.w	r3, r3, #1
 800b032:	2b00      	cmp	r3, #0
 800b034:	d010      	beq.n	800b058 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800b036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b038:	0adb      	lsrs	r3, r3, #11
 800b03a:	f003 0301 	and.w	r3, r3, #1
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d00a      	beq.n	800b058 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b04a:	651a      	str	r2, [r3, #80]	@ 0x50
 800b04c:	4b2b      	ldr	r3, [pc, #172]	@ (800b0fc <HAL_FDCAN_IRQHandler+0x274>)
 800b04e:	2200      	movs	r2, #0
 800b050:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f000 f997 	bl	800b386 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 800b058:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b05a:	0a5b      	lsrs	r3, r3, #9
 800b05c:	f003 0301 	and.w	r3, r3, #1
 800b060:	2b00      	cmp	r3, #0
 800b062:	d01d      	beq.n	800b0a0 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800b064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b066:	0a5b      	lsrs	r3, r3, #9
 800b068:	f003 0301 	and.w	r3, r3, #1
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d017      	beq.n	800b0a0 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b078:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b082:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b084:	4013      	ands	r3, r2
 800b086:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b090:	651a      	str	r2, [r3, #80]	@ 0x50
 800b092:	4b1a      	ldr	r3, [pc, #104]	@ (800b0fc <HAL_FDCAN_IRQHandler+0x274>)
 800b094:	2200      	movs	r2, #0
 800b096:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800b098:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f000 f97d 	bl	800b39a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 800b0a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0a2:	0cdb      	lsrs	r3, r3, #19
 800b0a4:	f003 0301 	and.w	r3, r3, #1
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d010      	beq.n	800b0ce <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 800b0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ae:	0cdb      	lsrs	r3, r3, #19
 800b0b0:	f003 0301 	and.w	r3, r3, #1
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d00a      	beq.n	800b0ce <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800b0c0:	651a      	str	r2, [r3, #80]	@ 0x50
 800b0c2:	4b0e      	ldr	r3, [pc, #56]	@ (800b0fc <HAL_FDCAN_IRQHandler+0x274>)
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f000 f97c 	bl	800b3c6 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800b0ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0d0:	0c1b      	lsrs	r3, r3, #16
 800b0d2:	f003 0301 	and.w	r3, r3, #1
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d016      	beq.n	800b108 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800b0da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0dc:	0c1b      	lsrs	r3, r3, #16
 800b0de:	f003 0301 	and.w	r3, r3, #1
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d010      	beq.n	800b108 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800b0ee:	651a      	str	r2, [r3, #80]	@ 0x50
 800b0f0:	4b02      	ldr	r3, [pc, #8]	@ (800b0fc <HAL_FDCAN_IRQHandler+0x274>)
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	e004      	b.n	800b104 <HAL_FDCAN_IRQHandler+0x27c>
 800b0fa:	bf00      	nop
 800b0fc:	4000a800 	.word	0x4000a800
 800b100:	3fcfffff 	.word	0x3fcfffff
 800b104:	f000 f969 	bl	800b3da <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800b108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b10a:	0c9b      	lsrs	r3, r3, #18
 800b10c:	f003 0301 	and.w	r3, r3, #1
 800b110:	2b00      	cmp	r3, #0
 800b112:	d010      	beq.n	800b136 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800b114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b116:	0c9b      	lsrs	r3, r3, #18
 800b118:	f003 0301 	and.w	r3, r3, #1
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d00a      	beq.n	800b136 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800b128:	651a      	str	r2, [r3, #80]	@ 0x50
 800b12a:	4b83      	ldr	r3, [pc, #524]	@ (800b338 <HAL_FDCAN_IRQHandler+0x4b0>)
 800b12c:	2200      	movs	r2, #0
 800b12e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f000 f95c 	bl	800b3ee <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800b136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b138:	0c5b      	lsrs	r3, r3, #17
 800b13a:	f003 0301 	and.w	r3, r3, #1
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d015      	beq.n	800b16e <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800b142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b144:	0c5b      	lsrs	r3, r3, #17
 800b146:	f003 0301 	and.w	r3, r3, #1
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d00f      	beq.n	800b16e <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800b156:	651a      	str	r2, [r3, #80]	@ 0x50
 800b158:	4b77      	ldr	r3, [pc, #476]	@ (800b338 <HAL_FDCAN_IRQHandler+0x4b0>)
 800b15a:	2200      	movs	r2, #0
 800b15c:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b164:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800b16e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b170:	2b00      	cmp	r3, #0
 800b172:	d00d      	beq.n	800b190 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681a      	ldr	r2, [r3, #0]
 800b178:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b17a:	4b70      	ldr	r3, [pc, #448]	@ (800b33c <HAL_FDCAN_IRQHandler+0x4b4>)
 800b17c:	400b      	ands	r3, r1
 800b17e:	6513      	str	r3, [r2, #80]	@ 0x50
 800b180:	4a6d      	ldr	r2, [pc, #436]	@ (800b338 <HAL_FDCAN_IRQHandler+0x4b0>)
 800b182:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b184:	0f9b      	lsrs	r3, r3, #30
 800b186:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800b188:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 f94d 	bl	800b42a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800b190:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b192:	2b00      	cmp	r3, #0
 800b194:	d011      	beq.n	800b1ba <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b19c:	4b67      	ldr	r3, [pc, #412]	@ (800b33c <HAL_FDCAN_IRQHandler+0x4b4>)
 800b19e:	400b      	ands	r3, r1
 800b1a0:	6513      	str	r3, [r2, #80]	@ 0x50
 800b1a2:	4a65      	ldr	r2, [pc, #404]	@ (800b338 <HAL_FDCAN_IRQHandler+0x4b0>)
 800b1a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1a6:	0f9b      	lsrs	r3, r3, #30
 800b1a8:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800b1b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1b2:	431a      	orrs	r2, r3
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4a60      	ldr	r2, [pc, #384]	@ (800b340 <HAL_FDCAN_IRQHandler+0x4b8>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	f040 80ac 	bne.w	800b31e <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	689b      	ldr	r3, [r3, #8]
 800b1cc:	f003 0303 	and.w	r3, r3, #3
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	f000 80a4 	beq.w	800b31e <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	6a1b      	ldr	r3, [r3, #32]
 800b1dc:	f003 030f 	and.w	r3, r3, #15
 800b1e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b1ea:	4013      	ands	r3, r2
 800b1ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	6a1b      	ldr	r3, [r3, #32]
 800b1f4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b1f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b200:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b202:	4013      	ands	r3, r2
 800b204:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	6a1b      	ldr	r3, [r3, #32]
 800b20c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800b210:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b218:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b21a:	4013      	ands	r3, r2
 800b21c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	6a1b      	ldr	r3, [r3, #32]
 800b224:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 800b228:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b230:	6a3a      	ldr	r2, [r7, #32]
 800b232:	4013      	ands	r3, r2
 800b234:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	6a1b      	ldr	r3, [r3, #32]
 800b23c:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 800b240:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	685b      	ldr	r3, [r3, #4]
 800b246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b248:	69fa      	ldr	r2, [r7, #28]
 800b24a:	4013      	ands	r3, r2
 800b24c:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b254:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	685b      	ldr	r3, [r3, #4]
 800b25a:	6a1b      	ldr	r3, [r3, #32]
 800b25c:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800b25e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b260:	2b00      	cmp	r3, #0
 800b262:	d007      	beq.n	800b274 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	685b      	ldr	r3, [r3, #4]
 800b268:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b26a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800b26c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f000 f8e6 	bl	800b440 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800b274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b276:	2b00      	cmp	r3, #0
 800b278:	d007      	beq.n	800b28a <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b280:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800b282:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f000 f8e6 	bl	800b456 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 800b28a:	69bb      	ldr	r3, [r7, #24]
 800b28c:	099b      	lsrs	r3, r3, #6
 800b28e:	f003 0301 	and.w	r3, r3, #1
 800b292:	2b00      	cmp	r3, #0
 800b294:	d01a      	beq.n	800b2cc <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	099b      	lsrs	r3, r3, #6
 800b29a:	f003 0301 	and.w	r3, r3, #1
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d014      	beq.n	800b2cc <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2a8:	0c1b      	lsrs	r3, r3, #16
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b2b8:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	2240      	movs	r2, #64	@ 0x40
 800b2c0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800b2c2:	68fa      	ldr	r2, [r7, #12]
 800b2c4:	6939      	ldr	r1, [r7, #16]
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f000 f8d0 	bl	800b46c <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800b2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d007      	beq.n	800b2e2 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b2d8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800b2da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f000 f8d1 	bl	800b484 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800b2e2:	6a3b      	ldr	r3, [r7, #32]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d00b      	beq.n	800b300 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	6a3a      	ldr	r2, [r7, #32]
 800b2ee:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800b2f6:	6a3b      	ldr	r3, [r7, #32]
 800b2f8:	431a      	orrs	r2, r3
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800b300:	69fb      	ldr	r3, [r7, #28]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d00b      	beq.n	800b31e <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	685b      	ldr	r3, [r3, #4]
 800b30a:	69fa      	ldr	r2, [r7, #28]
 800b30c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800b314:	69fb      	ldr	r3, [r7, #28]
 800b316:	431a      	orrs	r2, r3
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b324:	2b00      	cmp	r3, #0
 800b326:	d002      	beq.n	800b32e <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f000 f874 	bl	800b416 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800b32e:	bf00      	nop
 800b330:	3758      	adds	r7, #88	@ 0x58
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop
 800b338:	4000a800 	.word	0x4000a800
 800b33c:	3fcfffff 	.word	0x3fcfffff
 800b340:	4000a000 	.word	0x4000a000

0800b344 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800b344:	b480      	push	{r7}
 800b346:	b083      	sub	sp, #12
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800b34e:	bf00      	nop
 800b350:	370c      	adds	r7, #12
 800b352:	46bd      	mov	sp, r7
 800b354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b358:	4770      	bx	lr

0800b35a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800b35a:	b480      	push	{r7}
 800b35c:	b083      	sub	sp, #12
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]
 800b362:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800b364:	bf00      	nop
 800b366:	370c      	adds	r7, #12
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr

0800b370 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800b37a:	bf00      	nop
 800b37c:	370c      	adds	r7, #12
 800b37e:	46bd      	mov	sp, r7
 800b380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b384:	4770      	bx	lr

0800b386 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800b386:	b480      	push	{r7}
 800b388:	b083      	sub	sp, #12
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800b38e:	bf00      	nop
 800b390:	370c      	adds	r7, #12
 800b392:	46bd      	mov	sp, r7
 800b394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b398:	4770      	bx	lr

0800b39a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800b39a:	b480      	push	{r7}
 800b39c:	b083      	sub	sp, #12
 800b39e:	af00      	add	r7, sp, #0
 800b3a0:	6078      	str	r0, [r7, #4]
 800b3a2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800b3a4:	bf00      	nop
 800b3a6:	370c      	adds	r7, #12
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ae:	4770      	bx	lr

0800b3b0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b083      	sub	sp, #12
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800b3ba:	bf00      	nop
 800b3bc:	370c      	adds	r7, #12
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c4:	4770      	bx	lr

0800b3c6 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800b3c6:	b480      	push	{r7}
 800b3c8:	b083      	sub	sp, #12
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800b3ce:	bf00      	nop
 800b3d0:	370c      	adds	r7, #12
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d8:	4770      	bx	lr

0800b3da <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800b3da:	b480      	push	{r7}
 800b3dc:	b083      	sub	sp, #12
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800b3e2:	bf00      	nop
 800b3e4:	370c      	adds	r7, #12
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr

0800b3ee <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800b3ee:	b480      	push	{r7}
 800b3f0:	b083      	sub	sp, #12
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800b3f6:	bf00      	nop
 800b3f8:	370c      	adds	r7, #12
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b400:	4770      	bx	lr

0800b402 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800b402:	b480      	push	{r7}
 800b404:	b083      	sub	sp, #12
 800b406:	af00      	add	r7, sp, #0
 800b408:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800b40a:	bf00      	nop
 800b40c:	370c      	adds	r7, #12
 800b40e:	46bd      	mov	sp, r7
 800b410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b414:	4770      	bx	lr

0800b416 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800b416:	b480      	push	{r7}
 800b418:	b083      	sub	sp, #12
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800b41e:	bf00      	nop
 800b420:	370c      	adds	r7, #12
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr

0800b42a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800b42a:	b480      	push	{r7}
 800b42c:	b083      	sub	sp, #12
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
 800b432:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800b434:	bf00      	nop
 800b436:	370c      	adds	r7, #12
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800b440:	b480      	push	{r7}
 800b442:	b083      	sub	sp, #12
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800b44a:	bf00      	nop
 800b44c:	370c      	adds	r7, #12
 800b44e:	46bd      	mov	sp, r7
 800b450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b454:	4770      	bx	lr

0800b456 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800b456:	b480      	push	{r7}
 800b458:	b083      	sub	sp, #12
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	6078      	str	r0, [r7, #4]
 800b45e:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800b460:	bf00      	nop
 800b462:	370c      	adds	r7, #12
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr

0800b46c <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800b46c:	b480      	push	{r7}
 800b46e:	b085      	sub	sp, #20
 800b470:	af00      	add	r7, sp, #0
 800b472:	60f8      	str	r0, [r7, #12]
 800b474:	60b9      	str	r1, [r7, #8]
 800b476:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800b478:	bf00      	nop
 800b47a:	3714      	adds	r7, #20
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr

0800b484 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800b484:	b480      	push	{r7}
 800b486:	b083      	sub	sp, #12
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800b48e:	bf00      	nop
 800b490:	370c      	adds	r7, #12
 800b492:	46bd      	mov	sp, r7
 800b494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b498:	4770      	bx	lr
	...

0800b49c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b085      	sub	sp, #20
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4a8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800b4b2:	4ba7      	ldr	r3, [pc, #668]	@ (800b750 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800b4b4:	4013      	ands	r3, r2
 800b4b6:	68ba      	ldr	r2, [r7, #8]
 800b4b8:	0091      	lsls	r1, r2, #2
 800b4ba:	687a      	ldr	r2, [r7, #4]
 800b4bc:	6812      	ldr	r2, [r2, #0]
 800b4be:	430b      	orrs	r3, r1
 800b4c0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b4cc:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4d4:	041a      	lsls	r2, r3, #16
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	430a      	orrs	r2, r1
 800b4dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4e4:	68ba      	ldr	r2, [r7, #8]
 800b4e6:	4413      	add	r3, r2
 800b4e8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b4f2:	4b97      	ldr	r3, [pc, #604]	@ (800b750 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800b4f4:	4013      	ands	r3, r2
 800b4f6:	68ba      	ldr	r2, [r7, #8]
 800b4f8:	0091      	lsls	r1, r2, #2
 800b4fa:	687a      	ldr	r2, [r7, #4]
 800b4fc:	6812      	ldr	r2, [r2, #0]
 800b4fe:	430b      	orrs	r3, r1
 800b500:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b50c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b514:	041a      	lsls	r2, r3, #16
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	430a      	orrs	r2, r1
 800b51c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b524:	005b      	lsls	r3, r3, #1
 800b526:	68ba      	ldr	r2, [r7, #8]
 800b528:	4413      	add	r3, r2
 800b52a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800b534:	4b86      	ldr	r3, [pc, #536]	@ (800b750 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800b536:	4013      	ands	r3, r2
 800b538:	68ba      	ldr	r2, [r7, #8]
 800b53a:	0091      	lsls	r1, r2, #2
 800b53c:	687a      	ldr	r2, [r7, #4]
 800b53e:	6812      	ldr	r2, [r2, #0]
 800b540:	430b      	orrs	r3, r1
 800b542:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b54e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b556:	041a      	lsls	r2, r3, #16
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	430a      	orrs	r2, r1
 800b55e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b566:	687a      	ldr	r2, [r7, #4]
 800b568:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800b56a:	fb02 f303 	mul.w	r3, r2, r3
 800b56e:	68ba      	ldr	r2, [r7, #8]
 800b570:	4413      	add	r3, r2
 800b572:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800b57c:	4b74      	ldr	r3, [pc, #464]	@ (800b750 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800b57e:	4013      	ands	r3, r2
 800b580:	68ba      	ldr	r2, [r7, #8]
 800b582:	0091      	lsls	r1, r2, #2
 800b584:	687a      	ldr	r2, [r7, #4]
 800b586:	6812      	ldr	r2, [r2, #0]
 800b588:	430b      	orrs	r3, r1
 800b58a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b596:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b59e:	041a      	lsls	r2, r3, #16
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	430a      	orrs	r2, r1
 800b5a6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b5ae:	687a      	ldr	r2, [r7, #4]
 800b5b0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800b5b2:	fb02 f303 	mul.w	r3, r2, r3
 800b5b6:	68ba      	ldr	r2, [r7, #8]
 800b5b8:	4413      	add	r3, r2
 800b5ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800b5c4:	4b62      	ldr	r3, [pc, #392]	@ (800b750 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800b5c6:	4013      	ands	r3, r2
 800b5c8:	68ba      	ldr	r2, [r7, #8]
 800b5ca:	0091      	lsls	r1, r2, #2
 800b5cc:	687a      	ldr	r2, [r7, #4]
 800b5ce:	6812      	ldr	r2, [r2, #0]
 800b5d0:	430b      	orrs	r3, r1
 800b5d2:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5da:	687a      	ldr	r2, [r7, #4]
 800b5dc:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800b5de:	fb02 f303 	mul.w	r3, r2, r3
 800b5e2:	68ba      	ldr	r2, [r7, #8]
 800b5e4:	4413      	add	r3, r2
 800b5e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800b5f0:	4b57      	ldr	r3, [pc, #348]	@ (800b750 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800b5f2:	4013      	ands	r3, r2
 800b5f4:	68ba      	ldr	r2, [r7, #8]
 800b5f6:	0091      	lsls	r1, r2, #2
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	6812      	ldr	r2, [r2, #0]
 800b5fc:	430b      	orrs	r3, r1
 800b5fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b60a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b612:	041a      	lsls	r2, r3, #16
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	430a      	orrs	r2, r1
 800b61a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b622:	005b      	lsls	r3, r3, #1
 800b624:	68ba      	ldr	r2, [r7, #8]
 800b626:	4413      	add	r3, r2
 800b628:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800b632:	4b47      	ldr	r3, [pc, #284]	@ (800b750 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800b634:	4013      	ands	r3, r2
 800b636:	68ba      	ldr	r2, [r7, #8]
 800b638:	0091      	lsls	r1, r2, #2
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	6812      	ldr	r2, [r2, #0]
 800b63e:	430b      	orrs	r3, r1
 800b640:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b64c:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b654:	041a      	lsls	r2, r3, #16
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	430a      	orrs	r2, r1
 800b65c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b668:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b670:	061a      	lsls	r2, r3, #24
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	430a      	orrs	r2, r1
 800b678:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b680:	4b34      	ldr	r3, [pc, #208]	@ (800b754 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800b682:	4413      	add	r3, r2
 800b684:	009a      	lsls	r2, r3, #2
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b692:	009b      	lsls	r3, r3, #2
 800b694:	441a      	add	r2, r3
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6a2:	00db      	lsls	r3, r3, #3
 800b6a4:	441a      	add	r2, r3
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6b2:	6879      	ldr	r1, [r7, #4]
 800b6b4:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800b6b6:	fb01 f303 	mul.w	r3, r1, r3
 800b6ba:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800b6bc:	441a      	add	r2, r3
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b6ca:	6879      	ldr	r1, [r7, #4]
 800b6cc:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800b6ce:	fb01 f303 	mul.w	r3, r1, r3
 800b6d2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800b6d4:	441a      	add	r2, r3
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6e2:	6879      	ldr	r1, [r7, #4]
 800b6e4:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800b6e6:	fb01 f303 	mul.w	r3, r1, r3
 800b6ea:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800b6ec:	441a      	add	r2, r3
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b6fe:	00db      	lsls	r3, r3, #3
 800b700:	441a      	add	r2, r3
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b712:	6879      	ldr	r1, [r7, #4]
 800b714:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800b716:	fb01 f303 	mul.w	r3, r1, r3
 800b71a:	009b      	lsls	r3, r3, #2
 800b71c:	441a      	add	r2, r3
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b72e:	6879      	ldr	r1, [r7, #4]
 800b730:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800b732:	fb01 f303 	mul.w	r3, r1, r3
 800b736:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800b738:	441a      	add	r2, r3
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b746:	4a04      	ldr	r2, [pc, #16]	@ (800b758 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d915      	bls.n	800b778 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800b74c:	e006      	b.n	800b75c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800b74e:	bf00      	nop
 800b750:	ffff0003 	.word	0xffff0003
 800b754:	10002b00 	.word	0x10002b00
 800b758:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b762:	f043 0220 	orr.w	r2, r3, #32
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2203      	movs	r2, #3
 800b770:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 800b774:	2301      	movs	r3, #1
 800b776:	e010      	b.n	800b79a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b77c:	60fb      	str	r3, [r7, #12]
 800b77e:	e005      	b.n	800b78c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2200      	movs	r2, #0
 800b784:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	3304      	adds	r3, #4
 800b78a:	60fb      	str	r3, [r7, #12]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b792:	68fa      	ldr	r2, [r7, #12]
 800b794:	429a      	cmp	r2, r3
 800b796:	d3f3      	bcc.n	800b780 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800b798:	2300      	movs	r3, #0
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3714      	adds	r7, #20
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a4:	4770      	bx	lr
 800b7a6:	bf00      	nop

0800b7a8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b089      	sub	sp, #36	@ 0x24
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	60b9      	str	r1, [r7, #8]
 800b7b2:	607a      	str	r2, [r7, #4]
 800b7b4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d10a      	bne.n	800b7d4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800b7c6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	61fb      	str	r3, [r7, #28]
 800b7d2:	e00a      	b.n	800b7ea <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800b7dc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800b7e2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800b7e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b7e8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	6a1b      	ldr	r3, [r3, #32]
 800b7ee:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800b7f4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800b7fa:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800b800:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	68db      	ldr	r3, [r3, #12]
 800b806:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800b808:	4313      	orrs	r3, r2
 800b80a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b816:	6839      	ldr	r1, [r7, #0]
 800b818:	fb01 f303 	mul.w	r3, r1, r3
 800b81c:	009b      	lsls	r3, r3, #2
 800b81e:	4413      	add	r3, r2
 800b820:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800b822:	69bb      	ldr	r3, [r7, #24]
 800b824:	69fa      	ldr	r2, [r7, #28]
 800b826:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800b828:	69bb      	ldr	r3, [r7, #24]
 800b82a:	3304      	adds	r3, #4
 800b82c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800b82e:	69bb      	ldr	r3, [r7, #24]
 800b830:	693a      	ldr	r2, [r7, #16]
 800b832:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800b834:	69bb      	ldr	r3, [r7, #24]
 800b836:	3304      	adds	r3, #4
 800b838:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800b83a:	2300      	movs	r3, #0
 800b83c:	617b      	str	r3, [r7, #20]
 800b83e:	e020      	b.n	800b882 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	3303      	adds	r3, #3
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	4413      	add	r3, r2
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	3302      	adds	r3, #2
 800b850:	6879      	ldr	r1, [r7, #4]
 800b852:	440b      	add	r3, r1
 800b854:	781b      	ldrb	r3, [r3, #0]
 800b856:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800b858:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	3301      	adds	r3, #1
 800b85e:	6879      	ldr	r1, [r7, #4]
 800b860:	440b      	add	r3, r1
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800b866:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800b868:	6879      	ldr	r1, [r7, #4]
 800b86a:	697a      	ldr	r2, [r7, #20]
 800b86c:	440a      	add	r2, r1
 800b86e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800b870:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800b872:	69bb      	ldr	r3, [r7, #24]
 800b874:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800b876:	69bb      	ldr	r3, [r7, #24]
 800b878:	3304      	adds	r3, #4
 800b87a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	3304      	adds	r3, #4
 800b880:	617b      	str	r3, [r7, #20]
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	68db      	ldr	r3, [r3, #12]
 800b886:	4a06      	ldr	r2, [pc, #24]	@ (800b8a0 <FDCAN_CopyMessageToRAM+0xf8>)
 800b888:	5cd3      	ldrb	r3, [r2, r3]
 800b88a:	461a      	mov	r2, r3
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	4293      	cmp	r3, r2
 800b890:	d3d6      	bcc.n	800b840 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 800b892:	bf00      	nop
 800b894:	bf00      	nop
 800b896:	3724      	adds	r7, #36	@ 0x24
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr
 800b8a0:	08012388 	.word	0x08012388

0800b8a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b089      	sub	sp, #36	@ 0x24
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b8b2:	4b89      	ldr	r3, [pc, #548]	@ (800bad8 <HAL_GPIO_Init+0x234>)
 800b8b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b8b6:	e194      	b.n	800bbe2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	681a      	ldr	r2, [r3, #0]
 800b8bc:	2101      	movs	r1, #1
 800b8be:	69fb      	ldr	r3, [r7, #28]
 800b8c0:	fa01 f303 	lsl.w	r3, r1, r3
 800b8c4:	4013      	ands	r3, r2
 800b8c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	f000 8186 	beq.w	800bbdc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	f003 0303 	and.w	r3, r3, #3
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d005      	beq.n	800b8e8 <HAL_GPIO_Init+0x44>
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	f003 0303 	and.w	r3, r3, #3
 800b8e4:	2b02      	cmp	r3, #2
 800b8e6:	d130      	bne.n	800b94a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	689b      	ldr	r3, [r3, #8]
 800b8ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b8ee:	69fb      	ldr	r3, [r7, #28]
 800b8f0:	005b      	lsls	r3, r3, #1
 800b8f2:	2203      	movs	r2, #3
 800b8f4:	fa02 f303 	lsl.w	r3, r2, r3
 800b8f8:	43db      	mvns	r3, r3
 800b8fa:	69ba      	ldr	r2, [r7, #24]
 800b8fc:	4013      	ands	r3, r2
 800b8fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	68da      	ldr	r2, [r3, #12]
 800b904:	69fb      	ldr	r3, [r7, #28]
 800b906:	005b      	lsls	r3, r3, #1
 800b908:	fa02 f303 	lsl.w	r3, r2, r3
 800b90c:	69ba      	ldr	r2, [r7, #24]
 800b90e:	4313      	orrs	r3, r2
 800b910:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	69ba      	ldr	r2, [r7, #24]
 800b916:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b91e:	2201      	movs	r2, #1
 800b920:	69fb      	ldr	r3, [r7, #28]
 800b922:	fa02 f303 	lsl.w	r3, r2, r3
 800b926:	43db      	mvns	r3, r3
 800b928:	69ba      	ldr	r2, [r7, #24]
 800b92a:	4013      	ands	r3, r2
 800b92c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	685b      	ldr	r3, [r3, #4]
 800b932:	091b      	lsrs	r3, r3, #4
 800b934:	f003 0201 	and.w	r2, r3, #1
 800b938:	69fb      	ldr	r3, [r7, #28]
 800b93a:	fa02 f303 	lsl.w	r3, r2, r3
 800b93e:	69ba      	ldr	r2, [r7, #24]
 800b940:	4313      	orrs	r3, r2
 800b942:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	69ba      	ldr	r2, [r7, #24]
 800b948:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	f003 0303 	and.w	r3, r3, #3
 800b952:	2b03      	cmp	r3, #3
 800b954:	d017      	beq.n	800b986 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	68db      	ldr	r3, [r3, #12]
 800b95a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b95c:	69fb      	ldr	r3, [r7, #28]
 800b95e:	005b      	lsls	r3, r3, #1
 800b960:	2203      	movs	r2, #3
 800b962:	fa02 f303 	lsl.w	r3, r2, r3
 800b966:	43db      	mvns	r3, r3
 800b968:	69ba      	ldr	r2, [r7, #24]
 800b96a:	4013      	ands	r3, r2
 800b96c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	689a      	ldr	r2, [r3, #8]
 800b972:	69fb      	ldr	r3, [r7, #28]
 800b974:	005b      	lsls	r3, r3, #1
 800b976:	fa02 f303 	lsl.w	r3, r2, r3
 800b97a:	69ba      	ldr	r2, [r7, #24]
 800b97c:	4313      	orrs	r3, r2
 800b97e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	69ba      	ldr	r2, [r7, #24]
 800b984:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	f003 0303 	and.w	r3, r3, #3
 800b98e:	2b02      	cmp	r3, #2
 800b990:	d123      	bne.n	800b9da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b992:	69fb      	ldr	r3, [r7, #28]
 800b994:	08da      	lsrs	r2, r3, #3
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	3208      	adds	r2, #8
 800b99a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b99e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b9a0:	69fb      	ldr	r3, [r7, #28]
 800b9a2:	f003 0307 	and.w	r3, r3, #7
 800b9a6:	009b      	lsls	r3, r3, #2
 800b9a8:	220f      	movs	r2, #15
 800b9aa:	fa02 f303 	lsl.w	r3, r2, r3
 800b9ae:	43db      	mvns	r3, r3
 800b9b0:	69ba      	ldr	r2, [r7, #24]
 800b9b2:	4013      	ands	r3, r2
 800b9b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	691a      	ldr	r2, [r3, #16]
 800b9ba:	69fb      	ldr	r3, [r7, #28]
 800b9bc:	f003 0307 	and.w	r3, r3, #7
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	fa02 f303 	lsl.w	r3, r2, r3
 800b9c6:	69ba      	ldr	r2, [r7, #24]
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b9cc:	69fb      	ldr	r3, [r7, #28]
 800b9ce:	08da      	lsrs	r2, r3, #3
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	3208      	adds	r2, #8
 800b9d4:	69b9      	ldr	r1, [r7, #24]
 800b9d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b9e0:	69fb      	ldr	r3, [r7, #28]
 800b9e2:	005b      	lsls	r3, r3, #1
 800b9e4:	2203      	movs	r2, #3
 800b9e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b9ea:	43db      	mvns	r3, r3
 800b9ec:	69ba      	ldr	r2, [r7, #24]
 800b9ee:	4013      	ands	r3, r2
 800b9f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	685b      	ldr	r3, [r3, #4]
 800b9f6:	f003 0203 	and.w	r2, r3, #3
 800b9fa:	69fb      	ldr	r3, [r7, #28]
 800b9fc:	005b      	lsls	r3, r3, #1
 800b9fe:	fa02 f303 	lsl.w	r3, r2, r3
 800ba02:	69ba      	ldr	r2, [r7, #24]
 800ba04:	4313      	orrs	r3, r2
 800ba06:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	69ba      	ldr	r2, [r7, #24]
 800ba0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	f000 80e0 	beq.w	800bbdc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ba1c:	4b2f      	ldr	r3, [pc, #188]	@ (800badc <HAL_GPIO_Init+0x238>)
 800ba1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ba22:	4a2e      	ldr	r2, [pc, #184]	@ (800badc <HAL_GPIO_Init+0x238>)
 800ba24:	f043 0302 	orr.w	r3, r3, #2
 800ba28:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800ba2c:	4b2b      	ldr	r3, [pc, #172]	@ (800badc <HAL_GPIO_Init+0x238>)
 800ba2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ba32:	f003 0302 	and.w	r3, r3, #2
 800ba36:	60fb      	str	r3, [r7, #12]
 800ba38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ba3a:	4a29      	ldr	r2, [pc, #164]	@ (800bae0 <HAL_GPIO_Init+0x23c>)
 800ba3c:	69fb      	ldr	r3, [r7, #28]
 800ba3e:	089b      	lsrs	r3, r3, #2
 800ba40:	3302      	adds	r3, #2
 800ba42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800ba48:	69fb      	ldr	r3, [r7, #28]
 800ba4a:	f003 0303 	and.w	r3, r3, #3
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	220f      	movs	r2, #15
 800ba52:	fa02 f303 	lsl.w	r3, r2, r3
 800ba56:	43db      	mvns	r3, r3
 800ba58:	69ba      	ldr	r2, [r7, #24]
 800ba5a:	4013      	ands	r3, r2
 800ba5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	4a20      	ldr	r2, [pc, #128]	@ (800bae4 <HAL_GPIO_Init+0x240>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d052      	beq.n	800bb0c <HAL_GPIO_Init+0x268>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	4a1f      	ldr	r2, [pc, #124]	@ (800bae8 <HAL_GPIO_Init+0x244>)
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d031      	beq.n	800bad2 <HAL_GPIO_Init+0x22e>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	4a1e      	ldr	r2, [pc, #120]	@ (800baec <HAL_GPIO_Init+0x248>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d02b      	beq.n	800bace <HAL_GPIO_Init+0x22a>
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	4a1d      	ldr	r2, [pc, #116]	@ (800baf0 <HAL_GPIO_Init+0x24c>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d025      	beq.n	800baca <HAL_GPIO_Init+0x226>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	4a1c      	ldr	r2, [pc, #112]	@ (800baf4 <HAL_GPIO_Init+0x250>)
 800ba82:	4293      	cmp	r3, r2
 800ba84:	d01f      	beq.n	800bac6 <HAL_GPIO_Init+0x222>
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	4a1b      	ldr	r2, [pc, #108]	@ (800baf8 <HAL_GPIO_Init+0x254>)
 800ba8a:	4293      	cmp	r3, r2
 800ba8c:	d019      	beq.n	800bac2 <HAL_GPIO_Init+0x21e>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	4a1a      	ldr	r2, [pc, #104]	@ (800bafc <HAL_GPIO_Init+0x258>)
 800ba92:	4293      	cmp	r3, r2
 800ba94:	d013      	beq.n	800babe <HAL_GPIO_Init+0x21a>
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	4a19      	ldr	r2, [pc, #100]	@ (800bb00 <HAL_GPIO_Init+0x25c>)
 800ba9a:	4293      	cmp	r3, r2
 800ba9c:	d00d      	beq.n	800baba <HAL_GPIO_Init+0x216>
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	4a18      	ldr	r2, [pc, #96]	@ (800bb04 <HAL_GPIO_Init+0x260>)
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d007      	beq.n	800bab6 <HAL_GPIO_Init+0x212>
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	4a17      	ldr	r2, [pc, #92]	@ (800bb08 <HAL_GPIO_Init+0x264>)
 800baaa:	4293      	cmp	r3, r2
 800baac:	d101      	bne.n	800bab2 <HAL_GPIO_Init+0x20e>
 800baae:	2309      	movs	r3, #9
 800bab0:	e02d      	b.n	800bb0e <HAL_GPIO_Init+0x26a>
 800bab2:	230a      	movs	r3, #10
 800bab4:	e02b      	b.n	800bb0e <HAL_GPIO_Init+0x26a>
 800bab6:	2308      	movs	r3, #8
 800bab8:	e029      	b.n	800bb0e <HAL_GPIO_Init+0x26a>
 800baba:	2307      	movs	r3, #7
 800babc:	e027      	b.n	800bb0e <HAL_GPIO_Init+0x26a>
 800babe:	2306      	movs	r3, #6
 800bac0:	e025      	b.n	800bb0e <HAL_GPIO_Init+0x26a>
 800bac2:	2305      	movs	r3, #5
 800bac4:	e023      	b.n	800bb0e <HAL_GPIO_Init+0x26a>
 800bac6:	2304      	movs	r3, #4
 800bac8:	e021      	b.n	800bb0e <HAL_GPIO_Init+0x26a>
 800baca:	2303      	movs	r3, #3
 800bacc:	e01f      	b.n	800bb0e <HAL_GPIO_Init+0x26a>
 800bace:	2302      	movs	r3, #2
 800bad0:	e01d      	b.n	800bb0e <HAL_GPIO_Init+0x26a>
 800bad2:	2301      	movs	r3, #1
 800bad4:	e01b      	b.n	800bb0e <HAL_GPIO_Init+0x26a>
 800bad6:	bf00      	nop
 800bad8:	58000080 	.word	0x58000080
 800badc:	58024400 	.word	0x58024400
 800bae0:	58000400 	.word	0x58000400
 800bae4:	58020000 	.word	0x58020000
 800bae8:	58020400 	.word	0x58020400
 800baec:	58020800 	.word	0x58020800
 800baf0:	58020c00 	.word	0x58020c00
 800baf4:	58021000 	.word	0x58021000
 800baf8:	58021400 	.word	0x58021400
 800bafc:	58021800 	.word	0x58021800
 800bb00:	58021c00 	.word	0x58021c00
 800bb04:	58022000 	.word	0x58022000
 800bb08:	58022400 	.word	0x58022400
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	69fa      	ldr	r2, [r7, #28]
 800bb10:	f002 0203 	and.w	r2, r2, #3
 800bb14:	0092      	lsls	r2, r2, #2
 800bb16:	4093      	lsls	r3, r2
 800bb18:	69ba      	ldr	r2, [r7, #24]
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bb1e:	4938      	ldr	r1, [pc, #224]	@ (800bc00 <HAL_GPIO_Init+0x35c>)
 800bb20:	69fb      	ldr	r3, [r7, #28]
 800bb22:	089b      	lsrs	r3, r3, #2
 800bb24:	3302      	adds	r3, #2
 800bb26:	69ba      	ldr	r2, [r7, #24]
 800bb28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800bb2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	43db      	mvns	r3, r3
 800bb38:	69ba      	ldr	r2, [r7, #24]
 800bb3a:	4013      	ands	r3, r2
 800bb3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	685b      	ldr	r3, [r3, #4]
 800bb42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d003      	beq.n	800bb52 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800bb4a:	69ba      	ldr	r2, [r7, #24]
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800bb52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bb56:	69bb      	ldr	r3, [r7, #24]
 800bb58:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800bb5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	43db      	mvns	r3, r3
 800bb66:	69ba      	ldr	r2, [r7, #24]
 800bb68:	4013      	ands	r3, r2
 800bb6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d003      	beq.n	800bb80 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800bb78:	69ba      	ldr	r2, [r7, #24]
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	4313      	orrs	r3, r2
 800bb7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800bb80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bb84:	69bb      	ldr	r3, [r7, #24]
 800bb86:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	685b      	ldr	r3, [r3, #4]
 800bb8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	43db      	mvns	r3, r3
 800bb92:	69ba      	ldr	r2, [r7, #24]
 800bb94:	4013      	ands	r3, r2
 800bb96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d003      	beq.n	800bbac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800bba4:	69ba      	ldr	r2, [r7, #24]
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	69ba      	ldr	r2, [r7, #24]
 800bbb0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	43db      	mvns	r3, r3
 800bbbc:	69ba      	ldr	r2, [r7, #24]
 800bbbe:	4013      	ands	r3, r2
 800bbc0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d003      	beq.n	800bbd6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800bbce:	69ba      	ldr	r2, [r7, #24]
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	4313      	orrs	r3, r2
 800bbd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	69ba      	ldr	r2, [r7, #24]
 800bbda:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800bbdc:	69fb      	ldr	r3, [r7, #28]
 800bbde:	3301      	adds	r3, #1
 800bbe0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	681a      	ldr	r2, [r3, #0]
 800bbe6:	69fb      	ldr	r3, [r7, #28]
 800bbe8:	fa22 f303 	lsr.w	r3, r2, r3
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	f47f ae63 	bne.w	800b8b8 <HAL_GPIO_Init+0x14>
  }
}
 800bbf2:	bf00      	nop
 800bbf4:	bf00      	nop
 800bbf6:	3724      	adds	r7, #36	@ 0x24
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr
 800bc00:	58000400 	.word	0x58000400

0800bc04 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b084      	sub	sp, #16
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800bc0c:	4b29      	ldr	r3, [pc, #164]	@ (800bcb4 <HAL_PWREx_ConfigSupply+0xb0>)
 800bc0e:	68db      	ldr	r3, [r3, #12]
 800bc10:	f003 0307 	and.w	r3, r3, #7
 800bc14:	2b06      	cmp	r3, #6
 800bc16:	d00a      	beq.n	800bc2e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800bc18:	4b26      	ldr	r3, [pc, #152]	@ (800bcb4 <HAL_PWREx_ConfigSupply+0xb0>)
 800bc1a:	68db      	ldr	r3, [r3, #12]
 800bc1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bc20:	687a      	ldr	r2, [r7, #4]
 800bc22:	429a      	cmp	r2, r3
 800bc24:	d001      	beq.n	800bc2a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800bc26:	2301      	movs	r3, #1
 800bc28:	e040      	b.n	800bcac <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	e03e      	b.n	800bcac <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800bc2e:	4b21      	ldr	r3, [pc, #132]	@ (800bcb4 <HAL_PWREx_ConfigSupply+0xb0>)
 800bc30:	68db      	ldr	r3, [r3, #12]
 800bc32:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800bc36:	491f      	ldr	r1, [pc, #124]	@ (800bcb4 <HAL_PWREx_ConfigSupply+0xb0>)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800bc3e:	f7fe fb3b 	bl	800a2b8 <HAL_GetTick>
 800bc42:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800bc44:	e009      	b.n	800bc5a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800bc46:	f7fe fb37 	bl	800a2b8 <HAL_GetTick>
 800bc4a:	4602      	mov	r2, r0
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	1ad3      	subs	r3, r2, r3
 800bc50:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bc54:	d901      	bls.n	800bc5a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800bc56:	2301      	movs	r3, #1
 800bc58:	e028      	b.n	800bcac <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800bc5a:	4b16      	ldr	r3, [pc, #88]	@ (800bcb4 <HAL_PWREx_ConfigSupply+0xb0>)
 800bc5c:	685b      	ldr	r3, [r3, #4]
 800bc5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bc62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bc66:	d1ee      	bne.n	800bc46 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2b1e      	cmp	r3, #30
 800bc6c:	d008      	beq.n	800bc80 <HAL_PWREx_ConfigSupply+0x7c>
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc72:	d005      	beq.n	800bc80 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2b1d      	cmp	r3, #29
 800bc78:	d002      	beq.n	800bc80 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2b2d      	cmp	r3, #45	@ 0x2d
 800bc7e:	d114      	bne.n	800bcaa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800bc80:	f7fe fb1a 	bl	800a2b8 <HAL_GetTick>
 800bc84:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800bc86:	e009      	b.n	800bc9c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800bc88:	f7fe fb16 	bl	800a2b8 <HAL_GetTick>
 800bc8c:	4602      	mov	r2, r0
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	1ad3      	subs	r3, r2, r3
 800bc92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bc96:	d901      	bls.n	800bc9c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800bc98:	2301      	movs	r3, #1
 800bc9a:	e007      	b.n	800bcac <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800bc9c:	4b05      	ldr	r3, [pc, #20]	@ (800bcb4 <HAL_PWREx_ConfigSupply+0xb0>)
 800bc9e:	68db      	ldr	r3, [r3, #12]
 800bca0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bca8:	d1ee      	bne.n	800bc88 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800bcaa:	2300      	movs	r3, #0
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3710      	adds	r7, #16
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}
 800bcb4:	58024800 	.word	0x58024800

0800bcb8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b08c      	sub	sp, #48	@ 0x30
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d102      	bne.n	800bccc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	f000 bc48 	b.w	800c55c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f003 0301 	and.w	r3, r3, #1
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	f000 8088 	beq.w	800bdea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bcda:	4b99      	ldr	r3, [pc, #612]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800bcdc:	691b      	ldr	r3, [r3, #16]
 800bcde:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bce4:	4b96      	ldr	r3, [pc, #600]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800bce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bce8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800bcea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcec:	2b10      	cmp	r3, #16
 800bcee:	d007      	beq.n	800bd00 <HAL_RCC_OscConfig+0x48>
 800bcf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcf2:	2b18      	cmp	r3, #24
 800bcf4:	d111      	bne.n	800bd1a <HAL_RCC_OscConfig+0x62>
 800bcf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcf8:	f003 0303 	and.w	r3, r3, #3
 800bcfc:	2b02      	cmp	r3, #2
 800bcfe:	d10c      	bne.n	800bd1a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bd00:	4b8f      	ldr	r3, [pc, #572]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d06d      	beq.n	800bde8 <HAL_RCC_OscConfig+0x130>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	685b      	ldr	r3, [r3, #4]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d169      	bne.n	800bde8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800bd14:	2301      	movs	r3, #1
 800bd16:	f000 bc21 	b.w	800c55c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	685b      	ldr	r3, [r3, #4]
 800bd1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd22:	d106      	bne.n	800bd32 <HAL_RCC_OscConfig+0x7a>
 800bd24:	4b86      	ldr	r3, [pc, #536]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	4a85      	ldr	r2, [pc, #532]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800bd2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bd2e:	6013      	str	r3, [r2, #0]
 800bd30:	e02e      	b.n	800bd90 <HAL_RCC_OscConfig+0xd8>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d10c      	bne.n	800bd54 <HAL_RCC_OscConfig+0x9c>
 800bd3a:	4b81      	ldr	r3, [pc, #516]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	4a80      	ldr	r2, [pc, #512]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800bd40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bd44:	6013      	str	r3, [r2, #0]
 800bd46:	4b7e      	ldr	r3, [pc, #504]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	4a7d      	ldr	r2, [pc, #500]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800bd4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bd50:	6013      	str	r3, [r2, #0]
 800bd52:	e01d      	b.n	800bd90 <HAL_RCC_OscConfig+0xd8>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	685b      	ldr	r3, [r3, #4]
 800bd58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bd5c:	d10c      	bne.n	800bd78 <HAL_RCC_OscConfig+0xc0>
 800bd5e:	4b78      	ldr	r3, [pc, #480]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	4a77      	ldr	r2, [pc, #476]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800bd64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bd68:	6013      	str	r3, [r2, #0]
 800bd6a:	4b75      	ldr	r3, [pc, #468]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	4a74      	ldr	r2, [pc, #464]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800bd70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bd74:	6013      	str	r3, [r2, #0]
 800bd76:	e00b      	b.n	800bd90 <HAL_RCC_OscConfig+0xd8>
 800bd78:	4b71      	ldr	r3, [pc, #452]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	4a70      	ldr	r2, [pc, #448]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800bd7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bd82:	6013      	str	r3, [r2, #0]
 800bd84:	4b6e      	ldr	r3, [pc, #440]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	4a6d      	ldr	r2, [pc, #436]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800bd8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bd8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	685b      	ldr	r3, [r3, #4]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d013      	beq.n	800bdc0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd98:	f7fe fa8e 	bl	800a2b8 <HAL_GetTick>
 800bd9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bd9e:	e008      	b.n	800bdb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bda0:	f7fe fa8a 	bl	800a2b8 <HAL_GetTick>
 800bda4:	4602      	mov	r2, r0
 800bda6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bda8:	1ad3      	subs	r3, r2, r3
 800bdaa:	2b64      	cmp	r3, #100	@ 0x64
 800bdac:	d901      	bls.n	800bdb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800bdae:	2303      	movs	r3, #3
 800bdb0:	e3d4      	b.n	800c55c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bdb2:	4b63      	ldr	r3, [pc, #396]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d0f0      	beq.n	800bda0 <HAL_RCC_OscConfig+0xe8>
 800bdbe:	e014      	b.n	800bdea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdc0:	f7fe fa7a 	bl	800a2b8 <HAL_GetTick>
 800bdc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800bdc6:	e008      	b.n	800bdda <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bdc8:	f7fe fa76 	bl	800a2b8 <HAL_GetTick>
 800bdcc:	4602      	mov	r2, r0
 800bdce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdd0:	1ad3      	subs	r3, r2, r3
 800bdd2:	2b64      	cmp	r3, #100	@ 0x64
 800bdd4:	d901      	bls.n	800bdda <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800bdd6:	2303      	movs	r3, #3
 800bdd8:	e3c0      	b.n	800c55c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800bdda:	4b59      	ldr	r3, [pc, #356]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d1f0      	bne.n	800bdc8 <HAL_RCC_OscConfig+0x110>
 800bde6:	e000      	b.n	800bdea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bde8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f003 0302 	and.w	r3, r3, #2
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	f000 80ca 	beq.w	800bf8c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bdf8:	4b51      	ldr	r3, [pc, #324]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800bdfa:	691b      	ldr	r3, [r3, #16]
 800bdfc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800be00:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800be02:	4b4f      	ldr	r3, [pc, #316]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800be04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be06:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800be08:	6a3b      	ldr	r3, [r7, #32]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d007      	beq.n	800be1e <HAL_RCC_OscConfig+0x166>
 800be0e:	6a3b      	ldr	r3, [r7, #32]
 800be10:	2b18      	cmp	r3, #24
 800be12:	d156      	bne.n	800bec2 <HAL_RCC_OscConfig+0x20a>
 800be14:	69fb      	ldr	r3, [r7, #28]
 800be16:	f003 0303 	and.w	r3, r3, #3
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d151      	bne.n	800bec2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800be1e:	4b48      	ldr	r3, [pc, #288]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f003 0304 	and.w	r3, r3, #4
 800be26:	2b00      	cmp	r3, #0
 800be28:	d005      	beq.n	800be36 <HAL_RCC_OscConfig+0x17e>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	68db      	ldr	r3, [r3, #12]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d101      	bne.n	800be36 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800be32:	2301      	movs	r3, #1
 800be34:	e392      	b.n	800c55c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800be36:	4b42      	ldr	r3, [pc, #264]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f023 0219 	bic.w	r2, r3, #25
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	68db      	ldr	r3, [r3, #12]
 800be42:	493f      	ldr	r1, [pc, #252]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800be44:	4313      	orrs	r3, r2
 800be46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be48:	f7fe fa36 	bl	800a2b8 <HAL_GetTick>
 800be4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800be4e:	e008      	b.n	800be62 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800be50:	f7fe fa32 	bl	800a2b8 <HAL_GetTick>
 800be54:	4602      	mov	r2, r0
 800be56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be58:	1ad3      	subs	r3, r2, r3
 800be5a:	2b02      	cmp	r3, #2
 800be5c:	d901      	bls.n	800be62 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800be5e:	2303      	movs	r3, #3
 800be60:	e37c      	b.n	800c55c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800be62:	4b37      	ldr	r3, [pc, #220]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f003 0304 	and.w	r3, r3, #4
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d0f0      	beq.n	800be50 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800be6e:	f7fe fa2f 	bl	800a2d0 <HAL_GetREVID>
 800be72:	4603      	mov	r3, r0
 800be74:	f241 0203 	movw	r2, #4099	@ 0x1003
 800be78:	4293      	cmp	r3, r2
 800be7a:	d817      	bhi.n	800beac <HAL_RCC_OscConfig+0x1f4>
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	691b      	ldr	r3, [r3, #16]
 800be80:	2b40      	cmp	r3, #64	@ 0x40
 800be82:	d108      	bne.n	800be96 <HAL_RCC_OscConfig+0x1de>
 800be84:	4b2e      	ldr	r3, [pc, #184]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800be86:	685b      	ldr	r3, [r3, #4]
 800be88:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800be8c:	4a2c      	ldr	r2, [pc, #176]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800be8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800be92:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800be94:	e07a      	b.n	800bf8c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800be96:	4b2a      	ldr	r3, [pc, #168]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	691b      	ldr	r3, [r3, #16]
 800bea2:	031b      	lsls	r3, r3, #12
 800bea4:	4926      	ldr	r1, [pc, #152]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800bea6:	4313      	orrs	r3, r2
 800bea8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800beaa:	e06f      	b.n	800bf8c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800beac:	4b24      	ldr	r3, [pc, #144]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800beae:	685b      	ldr	r3, [r3, #4]
 800beb0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	691b      	ldr	r3, [r3, #16]
 800beb8:	061b      	lsls	r3, r3, #24
 800beba:	4921      	ldr	r1, [pc, #132]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800bebc:	4313      	orrs	r3, r2
 800bebe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bec0:	e064      	b.n	800bf8c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	68db      	ldr	r3, [r3, #12]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d047      	beq.n	800bf5a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800beca:	4b1d      	ldr	r3, [pc, #116]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f023 0219 	bic.w	r2, r3, #25
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	68db      	ldr	r3, [r3, #12]
 800bed6:	491a      	ldr	r1, [pc, #104]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800bed8:	4313      	orrs	r3, r2
 800beda:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bedc:	f7fe f9ec 	bl	800a2b8 <HAL_GetTick>
 800bee0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bee2:	e008      	b.n	800bef6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bee4:	f7fe f9e8 	bl	800a2b8 <HAL_GetTick>
 800bee8:	4602      	mov	r2, r0
 800beea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beec:	1ad3      	subs	r3, r2, r3
 800beee:	2b02      	cmp	r3, #2
 800bef0:	d901      	bls.n	800bef6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800bef2:	2303      	movs	r3, #3
 800bef4:	e332      	b.n	800c55c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bef6:	4b12      	ldr	r3, [pc, #72]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f003 0304 	and.w	r3, r3, #4
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d0f0      	beq.n	800bee4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bf02:	f7fe f9e5 	bl	800a2d0 <HAL_GetREVID>
 800bf06:	4603      	mov	r3, r0
 800bf08:	f241 0203 	movw	r2, #4099	@ 0x1003
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	d819      	bhi.n	800bf44 <HAL_RCC_OscConfig+0x28c>
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	691b      	ldr	r3, [r3, #16]
 800bf14:	2b40      	cmp	r3, #64	@ 0x40
 800bf16:	d108      	bne.n	800bf2a <HAL_RCC_OscConfig+0x272>
 800bf18:	4b09      	ldr	r3, [pc, #36]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800bf1a:	685b      	ldr	r3, [r3, #4]
 800bf1c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800bf20:	4a07      	ldr	r2, [pc, #28]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800bf22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bf26:	6053      	str	r3, [r2, #4]
 800bf28:	e030      	b.n	800bf8c <HAL_RCC_OscConfig+0x2d4>
 800bf2a:	4b05      	ldr	r3, [pc, #20]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	691b      	ldr	r3, [r3, #16]
 800bf36:	031b      	lsls	r3, r3, #12
 800bf38:	4901      	ldr	r1, [pc, #4]	@ (800bf40 <HAL_RCC_OscConfig+0x288>)
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	604b      	str	r3, [r1, #4]
 800bf3e:	e025      	b.n	800bf8c <HAL_RCC_OscConfig+0x2d4>
 800bf40:	58024400 	.word	0x58024400
 800bf44:	4b9a      	ldr	r3, [pc, #616]	@ (800c1b0 <HAL_RCC_OscConfig+0x4f8>)
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	691b      	ldr	r3, [r3, #16]
 800bf50:	061b      	lsls	r3, r3, #24
 800bf52:	4997      	ldr	r1, [pc, #604]	@ (800c1b0 <HAL_RCC_OscConfig+0x4f8>)
 800bf54:	4313      	orrs	r3, r2
 800bf56:	604b      	str	r3, [r1, #4]
 800bf58:	e018      	b.n	800bf8c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bf5a:	4b95      	ldr	r3, [pc, #596]	@ (800c1b0 <HAL_RCC_OscConfig+0x4f8>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4a94      	ldr	r2, [pc, #592]	@ (800c1b0 <HAL_RCC_OscConfig+0x4f8>)
 800bf60:	f023 0301 	bic.w	r3, r3, #1
 800bf64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf66:	f7fe f9a7 	bl	800a2b8 <HAL_GetTick>
 800bf6a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bf6c:	e008      	b.n	800bf80 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bf6e:	f7fe f9a3 	bl	800a2b8 <HAL_GetTick>
 800bf72:	4602      	mov	r2, r0
 800bf74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf76:	1ad3      	subs	r3, r2, r3
 800bf78:	2b02      	cmp	r3, #2
 800bf7a:	d901      	bls.n	800bf80 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800bf7c:	2303      	movs	r3, #3
 800bf7e:	e2ed      	b.n	800c55c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bf80:	4b8b      	ldr	r3, [pc, #556]	@ (800c1b0 <HAL_RCC_OscConfig+0x4f8>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	f003 0304 	and.w	r3, r3, #4
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d1f0      	bne.n	800bf6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f003 0310 	and.w	r3, r3, #16
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	f000 80a9 	beq.w	800c0ec <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bf9a:	4b85      	ldr	r3, [pc, #532]	@ (800c1b0 <HAL_RCC_OscConfig+0x4f8>)
 800bf9c:	691b      	ldr	r3, [r3, #16]
 800bf9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bfa2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bfa4:	4b82      	ldr	r3, [pc, #520]	@ (800c1b0 <HAL_RCC_OscConfig+0x4f8>)
 800bfa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfa8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800bfaa:	69bb      	ldr	r3, [r7, #24]
 800bfac:	2b08      	cmp	r3, #8
 800bfae:	d007      	beq.n	800bfc0 <HAL_RCC_OscConfig+0x308>
 800bfb0:	69bb      	ldr	r3, [r7, #24]
 800bfb2:	2b18      	cmp	r3, #24
 800bfb4:	d13a      	bne.n	800c02c <HAL_RCC_OscConfig+0x374>
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	f003 0303 	and.w	r3, r3, #3
 800bfbc:	2b01      	cmp	r3, #1
 800bfbe:	d135      	bne.n	800c02c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bfc0:	4b7b      	ldr	r3, [pc, #492]	@ (800c1b0 <HAL_RCC_OscConfig+0x4f8>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d005      	beq.n	800bfd8 <HAL_RCC_OscConfig+0x320>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	69db      	ldr	r3, [r3, #28]
 800bfd0:	2b80      	cmp	r3, #128	@ 0x80
 800bfd2:	d001      	beq.n	800bfd8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	e2c1      	b.n	800c55c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bfd8:	f7fe f97a 	bl	800a2d0 <HAL_GetREVID>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	f241 0203 	movw	r2, #4099	@ 0x1003
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	d817      	bhi.n	800c016 <HAL_RCC_OscConfig+0x35e>
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6a1b      	ldr	r3, [r3, #32]
 800bfea:	2b20      	cmp	r3, #32
 800bfec:	d108      	bne.n	800c000 <HAL_RCC_OscConfig+0x348>
 800bfee:	4b70      	ldr	r3, [pc, #448]	@ (800c1b0 <HAL_RCC_OscConfig+0x4f8>)
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800bff6:	4a6e      	ldr	r2, [pc, #440]	@ (800c1b0 <HAL_RCC_OscConfig+0x4f8>)
 800bff8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bffc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bffe:	e075      	b.n	800c0ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c000:	4b6b      	ldr	r3, [pc, #428]	@ (800c1b0 <HAL_RCC_OscConfig+0x4f8>)
 800c002:	685b      	ldr	r3, [r3, #4]
 800c004:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6a1b      	ldr	r3, [r3, #32]
 800c00c:	069b      	lsls	r3, r3, #26
 800c00e:	4968      	ldr	r1, [pc, #416]	@ (800c1b0 <HAL_RCC_OscConfig+0x4f8>)
 800c010:	4313      	orrs	r3, r2
 800c012:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c014:	e06a      	b.n	800c0ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c016:	4b66      	ldr	r3, [pc, #408]	@ (800c1b0 <HAL_RCC_OscConfig+0x4f8>)
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6a1b      	ldr	r3, [r3, #32]
 800c022:	061b      	lsls	r3, r3, #24
 800c024:	4962      	ldr	r1, [pc, #392]	@ (800c1b0 <HAL_RCC_OscConfig+0x4f8>)
 800c026:	4313      	orrs	r3, r2
 800c028:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c02a:	e05f      	b.n	800c0ec <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	69db      	ldr	r3, [r3, #28]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d042      	beq.n	800c0ba <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800c034:	4b5e      	ldr	r3, [pc, #376]	@ (800c1b0 <HAL_RCC_OscConfig+0x4f8>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	4a5d      	ldr	r2, [pc, #372]	@ (800c1b0 <HAL_RCC_OscConfig+0x4f8>)
 800c03a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c03e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c040:	f7fe f93a 	bl	800a2b8 <HAL_GetTick>
 800c044:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c046:	e008      	b.n	800c05a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800c048:	f7fe f936 	bl	800a2b8 <HAL_GetTick>
 800c04c:	4602      	mov	r2, r0
 800c04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c050:	1ad3      	subs	r3, r2, r3
 800c052:	2b02      	cmp	r3, #2
 800c054:	d901      	bls.n	800c05a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800c056:	2303      	movs	r3, #3
 800c058:	e280      	b.n	800c55c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c05a:	4b55      	ldr	r3, [pc, #340]	@ (800c1b0 <HAL_RCC_OscConfig+0x4f8>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c062:	2b00      	cmp	r3, #0
 800c064:	d0f0      	beq.n	800c048 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c066:	f7fe f933 	bl	800a2d0 <HAL_GetREVID>
 800c06a:	4603      	mov	r3, r0
 800c06c:	f241 0203 	movw	r2, #4099	@ 0x1003
 800c070:	4293      	cmp	r3, r2
 800c072:	d817      	bhi.n	800c0a4 <HAL_RCC_OscConfig+0x3ec>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6a1b      	ldr	r3, [r3, #32]
 800c078:	2b20      	cmp	r3, #32
 800c07a:	d108      	bne.n	800c08e <HAL_RCC_OscConfig+0x3d6>
 800c07c:	4b4c      	ldr	r3, [pc, #304]	@ (800c1b0 <HAL_RCC_OscConfig+0x4f8>)
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800c084:	4a4a      	ldr	r2, [pc, #296]	@ (800c1b0 <HAL_RCC_OscConfig+0x4f8>)
 800c086:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c08a:	6053      	str	r3, [r2, #4]
 800c08c:	e02e      	b.n	800c0ec <HAL_RCC_OscConfig+0x434>
 800c08e:	4b48      	ldr	r3, [pc, #288]	@ (800c1b0 <HAL_RCC_OscConfig+0x4f8>)
 800c090:	685b      	ldr	r3, [r3, #4]
 800c092:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6a1b      	ldr	r3, [r3, #32]
 800c09a:	069b      	lsls	r3, r3, #26
 800c09c:	4944      	ldr	r1, [pc, #272]	@ (800c1b0 <HAL_RCC_OscConfig+0x4f8>)
 800c09e:	4313      	orrs	r3, r2
 800c0a0:	604b      	str	r3, [r1, #4]
 800c0a2:	e023      	b.n	800c0ec <HAL_RCC_OscConfig+0x434>
 800c0a4:	4b42      	ldr	r3, [pc, #264]	@ (800c1b0 <HAL_RCC_OscConfig+0x4f8>)
 800c0a6:	68db      	ldr	r3, [r3, #12]
 800c0a8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	6a1b      	ldr	r3, [r3, #32]
 800c0b0:	061b      	lsls	r3, r3, #24
 800c0b2:	493f      	ldr	r1, [pc, #252]	@ (800c1b0 <HAL_RCC_OscConfig+0x4f8>)
 800c0b4:	4313      	orrs	r3, r2
 800c0b6:	60cb      	str	r3, [r1, #12]
 800c0b8:	e018      	b.n	800c0ec <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800c0ba:	4b3d      	ldr	r3, [pc, #244]	@ (800c1b0 <HAL_RCC_OscConfig+0x4f8>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	4a3c      	ldr	r2, [pc, #240]	@ (800c1b0 <HAL_RCC_OscConfig+0x4f8>)
 800c0c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c0c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0c6:	f7fe f8f7 	bl	800a2b8 <HAL_GetTick>
 800c0ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c0cc:	e008      	b.n	800c0e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800c0ce:	f7fe f8f3 	bl	800a2b8 <HAL_GetTick>
 800c0d2:	4602      	mov	r2, r0
 800c0d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0d6:	1ad3      	subs	r3, r2, r3
 800c0d8:	2b02      	cmp	r3, #2
 800c0da:	d901      	bls.n	800c0e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800c0dc:	2303      	movs	r3, #3
 800c0de:	e23d      	b.n	800c55c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c0e0:	4b33      	ldr	r3, [pc, #204]	@ (800c1b0 <HAL_RCC_OscConfig+0x4f8>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d1f0      	bne.n	800c0ce <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	f003 0308 	and.w	r3, r3, #8
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d036      	beq.n	800c166 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	695b      	ldr	r3, [r3, #20]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d019      	beq.n	800c134 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c100:	4b2b      	ldr	r3, [pc, #172]	@ (800c1b0 <HAL_RCC_OscConfig+0x4f8>)
 800c102:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c104:	4a2a      	ldr	r2, [pc, #168]	@ (800c1b0 <HAL_RCC_OscConfig+0x4f8>)
 800c106:	f043 0301 	orr.w	r3, r3, #1
 800c10a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c10c:	f7fe f8d4 	bl	800a2b8 <HAL_GetTick>
 800c110:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c112:	e008      	b.n	800c126 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c114:	f7fe f8d0 	bl	800a2b8 <HAL_GetTick>
 800c118:	4602      	mov	r2, r0
 800c11a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c11c:	1ad3      	subs	r3, r2, r3
 800c11e:	2b02      	cmp	r3, #2
 800c120:	d901      	bls.n	800c126 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800c122:	2303      	movs	r3, #3
 800c124:	e21a      	b.n	800c55c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c126:	4b22      	ldr	r3, [pc, #136]	@ (800c1b0 <HAL_RCC_OscConfig+0x4f8>)
 800c128:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c12a:	f003 0302 	and.w	r3, r3, #2
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d0f0      	beq.n	800c114 <HAL_RCC_OscConfig+0x45c>
 800c132:	e018      	b.n	800c166 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c134:	4b1e      	ldr	r3, [pc, #120]	@ (800c1b0 <HAL_RCC_OscConfig+0x4f8>)
 800c136:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c138:	4a1d      	ldr	r2, [pc, #116]	@ (800c1b0 <HAL_RCC_OscConfig+0x4f8>)
 800c13a:	f023 0301 	bic.w	r3, r3, #1
 800c13e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c140:	f7fe f8ba 	bl	800a2b8 <HAL_GetTick>
 800c144:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c146:	e008      	b.n	800c15a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c148:	f7fe f8b6 	bl	800a2b8 <HAL_GetTick>
 800c14c:	4602      	mov	r2, r0
 800c14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c150:	1ad3      	subs	r3, r2, r3
 800c152:	2b02      	cmp	r3, #2
 800c154:	d901      	bls.n	800c15a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800c156:	2303      	movs	r3, #3
 800c158:	e200      	b.n	800c55c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c15a:	4b15      	ldr	r3, [pc, #84]	@ (800c1b0 <HAL_RCC_OscConfig+0x4f8>)
 800c15c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c15e:	f003 0302 	and.w	r3, r3, #2
 800c162:	2b00      	cmp	r3, #0
 800c164:	d1f0      	bne.n	800c148 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f003 0320 	and.w	r3, r3, #32
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d039      	beq.n	800c1e6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	699b      	ldr	r3, [r3, #24]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d01c      	beq.n	800c1b4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c17a:	4b0d      	ldr	r3, [pc, #52]	@ (800c1b0 <HAL_RCC_OscConfig+0x4f8>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	4a0c      	ldr	r2, [pc, #48]	@ (800c1b0 <HAL_RCC_OscConfig+0x4f8>)
 800c180:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c184:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c186:	f7fe f897 	bl	800a2b8 <HAL_GetTick>
 800c18a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c18c:	e008      	b.n	800c1a0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c18e:	f7fe f893 	bl	800a2b8 <HAL_GetTick>
 800c192:	4602      	mov	r2, r0
 800c194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c196:	1ad3      	subs	r3, r2, r3
 800c198:	2b02      	cmp	r3, #2
 800c19a:	d901      	bls.n	800c1a0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800c19c:	2303      	movs	r3, #3
 800c19e:	e1dd      	b.n	800c55c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c1a0:	4b03      	ldr	r3, [pc, #12]	@ (800c1b0 <HAL_RCC_OscConfig+0x4f8>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d0f0      	beq.n	800c18e <HAL_RCC_OscConfig+0x4d6>
 800c1ac:	e01b      	b.n	800c1e6 <HAL_RCC_OscConfig+0x52e>
 800c1ae:	bf00      	nop
 800c1b0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c1b4:	4b9b      	ldr	r3, [pc, #620]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	4a9a      	ldr	r2, [pc, #616]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c1ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c1be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c1c0:	f7fe f87a 	bl	800a2b8 <HAL_GetTick>
 800c1c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c1c6:	e008      	b.n	800c1da <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c1c8:	f7fe f876 	bl	800a2b8 <HAL_GetTick>
 800c1cc:	4602      	mov	r2, r0
 800c1ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1d0:	1ad3      	subs	r3, r2, r3
 800c1d2:	2b02      	cmp	r3, #2
 800c1d4:	d901      	bls.n	800c1da <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800c1d6:	2303      	movs	r3, #3
 800c1d8:	e1c0      	b.n	800c55c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c1da:	4b92      	ldr	r3, [pc, #584]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d1f0      	bne.n	800c1c8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f003 0304 	and.w	r3, r3, #4
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	f000 8081 	beq.w	800c2f6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c1f4:	4b8c      	ldr	r3, [pc, #560]	@ (800c428 <HAL_RCC_OscConfig+0x770>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	4a8b      	ldr	r2, [pc, #556]	@ (800c428 <HAL_RCC_OscConfig+0x770>)
 800c1fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c1fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c200:	f7fe f85a 	bl	800a2b8 <HAL_GetTick>
 800c204:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c206:	e008      	b.n	800c21a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c208:	f7fe f856 	bl	800a2b8 <HAL_GetTick>
 800c20c:	4602      	mov	r2, r0
 800c20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c210:	1ad3      	subs	r3, r2, r3
 800c212:	2b64      	cmp	r3, #100	@ 0x64
 800c214:	d901      	bls.n	800c21a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800c216:	2303      	movs	r3, #3
 800c218:	e1a0      	b.n	800c55c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c21a:	4b83      	ldr	r3, [pc, #524]	@ (800c428 <HAL_RCC_OscConfig+0x770>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c222:	2b00      	cmp	r3, #0
 800c224:	d0f0      	beq.n	800c208 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	689b      	ldr	r3, [r3, #8]
 800c22a:	2b01      	cmp	r3, #1
 800c22c:	d106      	bne.n	800c23c <HAL_RCC_OscConfig+0x584>
 800c22e:	4b7d      	ldr	r3, [pc, #500]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c232:	4a7c      	ldr	r2, [pc, #496]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c234:	f043 0301 	orr.w	r3, r3, #1
 800c238:	6713      	str	r3, [r2, #112]	@ 0x70
 800c23a:	e02d      	b.n	800c298 <HAL_RCC_OscConfig+0x5e0>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	689b      	ldr	r3, [r3, #8]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d10c      	bne.n	800c25e <HAL_RCC_OscConfig+0x5a6>
 800c244:	4b77      	ldr	r3, [pc, #476]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c248:	4a76      	ldr	r2, [pc, #472]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c24a:	f023 0301 	bic.w	r3, r3, #1
 800c24e:	6713      	str	r3, [r2, #112]	@ 0x70
 800c250:	4b74      	ldr	r3, [pc, #464]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c254:	4a73      	ldr	r2, [pc, #460]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c256:	f023 0304 	bic.w	r3, r3, #4
 800c25a:	6713      	str	r3, [r2, #112]	@ 0x70
 800c25c:	e01c      	b.n	800c298 <HAL_RCC_OscConfig+0x5e0>
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	689b      	ldr	r3, [r3, #8]
 800c262:	2b05      	cmp	r3, #5
 800c264:	d10c      	bne.n	800c280 <HAL_RCC_OscConfig+0x5c8>
 800c266:	4b6f      	ldr	r3, [pc, #444]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c26a:	4a6e      	ldr	r2, [pc, #440]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c26c:	f043 0304 	orr.w	r3, r3, #4
 800c270:	6713      	str	r3, [r2, #112]	@ 0x70
 800c272:	4b6c      	ldr	r3, [pc, #432]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c276:	4a6b      	ldr	r2, [pc, #428]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c278:	f043 0301 	orr.w	r3, r3, #1
 800c27c:	6713      	str	r3, [r2, #112]	@ 0x70
 800c27e:	e00b      	b.n	800c298 <HAL_RCC_OscConfig+0x5e0>
 800c280:	4b68      	ldr	r3, [pc, #416]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c284:	4a67      	ldr	r2, [pc, #412]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c286:	f023 0301 	bic.w	r3, r3, #1
 800c28a:	6713      	str	r3, [r2, #112]	@ 0x70
 800c28c:	4b65      	ldr	r3, [pc, #404]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c28e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c290:	4a64      	ldr	r2, [pc, #400]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c292:	f023 0304 	bic.w	r3, r3, #4
 800c296:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	689b      	ldr	r3, [r3, #8]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d015      	beq.n	800c2cc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c2a0:	f7fe f80a 	bl	800a2b8 <HAL_GetTick>
 800c2a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c2a6:	e00a      	b.n	800c2be <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c2a8:	f7fe f806 	bl	800a2b8 <HAL_GetTick>
 800c2ac:	4602      	mov	r2, r0
 800c2ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b0:	1ad3      	subs	r3, r2, r3
 800c2b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d901      	bls.n	800c2be <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800c2ba:	2303      	movs	r3, #3
 800c2bc:	e14e      	b.n	800c55c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c2be:	4b59      	ldr	r3, [pc, #356]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c2c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c2c2:	f003 0302 	and.w	r3, r3, #2
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d0ee      	beq.n	800c2a8 <HAL_RCC_OscConfig+0x5f0>
 800c2ca:	e014      	b.n	800c2f6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c2cc:	f7fd fff4 	bl	800a2b8 <HAL_GetTick>
 800c2d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c2d2:	e00a      	b.n	800c2ea <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c2d4:	f7fd fff0 	bl	800a2b8 <HAL_GetTick>
 800c2d8:	4602      	mov	r2, r0
 800c2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2dc:	1ad3      	subs	r3, r2, r3
 800c2de:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d901      	bls.n	800c2ea <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800c2e6:	2303      	movs	r3, #3
 800c2e8:	e138      	b.n	800c55c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c2ea:	4b4e      	ldr	r3, [pc, #312]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c2ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c2ee:	f003 0302 	and.w	r3, r3, #2
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d1ee      	bne.n	800c2d4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	f000 812d 	beq.w	800c55a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800c300:	4b48      	ldr	r3, [pc, #288]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c302:	691b      	ldr	r3, [r3, #16]
 800c304:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c308:	2b18      	cmp	r3, #24
 800c30a:	f000 80bd 	beq.w	800c488 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c312:	2b02      	cmp	r3, #2
 800c314:	f040 809e 	bne.w	800c454 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c318:	4b42      	ldr	r3, [pc, #264]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	4a41      	ldr	r2, [pc, #260]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c31e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c324:	f7fd ffc8 	bl	800a2b8 <HAL_GetTick>
 800c328:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c32a:	e008      	b.n	800c33e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c32c:	f7fd ffc4 	bl	800a2b8 <HAL_GetTick>
 800c330:	4602      	mov	r2, r0
 800c332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c334:	1ad3      	subs	r3, r2, r3
 800c336:	2b02      	cmp	r3, #2
 800c338:	d901      	bls.n	800c33e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800c33a:	2303      	movs	r3, #3
 800c33c:	e10e      	b.n	800c55c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c33e:	4b39      	ldr	r3, [pc, #228]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c346:	2b00      	cmp	r3, #0
 800c348:	d1f0      	bne.n	800c32c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c34a:	4b36      	ldr	r3, [pc, #216]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c34c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c34e:	4b37      	ldr	r3, [pc, #220]	@ (800c42c <HAL_RCC_OscConfig+0x774>)
 800c350:	4013      	ands	r3, r2
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800c356:	687a      	ldr	r2, [r7, #4]
 800c358:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800c35a:	0112      	lsls	r2, r2, #4
 800c35c:	430a      	orrs	r2, r1
 800c35e:	4931      	ldr	r1, [pc, #196]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c360:	4313      	orrs	r3, r2
 800c362:	628b      	str	r3, [r1, #40]	@ 0x28
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c368:	3b01      	subs	r3, #1
 800c36a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c372:	3b01      	subs	r3, #1
 800c374:	025b      	lsls	r3, r3, #9
 800c376:	b29b      	uxth	r3, r3
 800c378:	431a      	orrs	r2, r3
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c37e:	3b01      	subs	r3, #1
 800c380:	041b      	lsls	r3, r3, #16
 800c382:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c386:	431a      	orrs	r2, r3
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c38c:	3b01      	subs	r3, #1
 800c38e:	061b      	lsls	r3, r3, #24
 800c390:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c394:	4923      	ldr	r1, [pc, #140]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c396:	4313      	orrs	r3, r2
 800c398:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800c39a:	4b22      	ldr	r3, [pc, #136]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c39c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c39e:	4a21      	ldr	r2, [pc, #132]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c3a0:	f023 0301 	bic.w	r3, r3, #1
 800c3a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c3a6:	4b1f      	ldr	r3, [pc, #124]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c3a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c3aa:	4b21      	ldr	r3, [pc, #132]	@ (800c430 <HAL_RCC_OscConfig+0x778>)
 800c3ac:	4013      	ands	r3, r2
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c3b2:	00d2      	lsls	r2, r2, #3
 800c3b4:	491b      	ldr	r1, [pc, #108]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c3b6:	4313      	orrs	r3, r2
 800c3b8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800c3ba:	4b1a      	ldr	r3, [pc, #104]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c3bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3be:	f023 020c 	bic.w	r2, r3, #12
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3c6:	4917      	ldr	r1, [pc, #92]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c3c8:	4313      	orrs	r3, r2
 800c3ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800c3cc:	4b15      	ldr	r3, [pc, #84]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c3ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3d0:	f023 0202 	bic.w	r2, r3, #2
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3d8:	4912      	ldr	r1, [pc, #72]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c3da:	4313      	orrs	r3, r2
 800c3dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c3de:	4b11      	ldr	r3, [pc, #68]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c3e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3e2:	4a10      	ldr	r2, [pc, #64]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c3e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c3e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3ea:	4b0e      	ldr	r3, [pc, #56]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c3ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3ee:	4a0d      	ldr	r2, [pc, #52]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c3f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c3f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c3f6:	4b0b      	ldr	r3, [pc, #44]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c3f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3fa:	4a0a      	ldr	r2, [pc, #40]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c3fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c400:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800c402:	4b08      	ldr	r3, [pc, #32]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c406:	4a07      	ldr	r2, [pc, #28]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c408:	f043 0301 	orr.w	r3, r3, #1
 800c40c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c40e:	4b05      	ldr	r3, [pc, #20]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	4a04      	ldr	r2, [pc, #16]	@ (800c424 <HAL_RCC_OscConfig+0x76c>)
 800c414:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c41a:	f7fd ff4d 	bl	800a2b8 <HAL_GetTick>
 800c41e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c420:	e011      	b.n	800c446 <HAL_RCC_OscConfig+0x78e>
 800c422:	bf00      	nop
 800c424:	58024400 	.word	0x58024400
 800c428:	58024800 	.word	0x58024800
 800c42c:	fffffc0c 	.word	0xfffffc0c
 800c430:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c434:	f7fd ff40 	bl	800a2b8 <HAL_GetTick>
 800c438:	4602      	mov	r2, r0
 800c43a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c43c:	1ad3      	subs	r3, r2, r3
 800c43e:	2b02      	cmp	r3, #2
 800c440:	d901      	bls.n	800c446 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800c442:	2303      	movs	r3, #3
 800c444:	e08a      	b.n	800c55c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c446:	4b47      	ldr	r3, [pc, #284]	@ (800c564 <HAL_RCC_OscConfig+0x8ac>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d0f0      	beq.n	800c434 <HAL_RCC_OscConfig+0x77c>
 800c452:	e082      	b.n	800c55a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c454:	4b43      	ldr	r3, [pc, #268]	@ (800c564 <HAL_RCC_OscConfig+0x8ac>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	4a42      	ldr	r2, [pc, #264]	@ (800c564 <HAL_RCC_OscConfig+0x8ac>)
 800c45a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c45e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c460:	f7fd ff2a 	bl	800a2b8 <HAL_GetTick>
 800c464:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c466:	e008      	b.n	800c47a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c468:	f7fd ff26 	bl	800a2b8 <HAL_GetTick>
 800c46c:	4602      	mov	r2, r0
 800c46e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c470:	1ad3      	subs	r3, r2, r3
 800c472:	2b02      	cmp	r3, #2
 800c474:	d901      	bls.n	800c47a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800c476:	2303      	movs	r3, #3
 800c478:	e070      	b.n	800c55c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c47a:	4b3a      	ldr	r3, [pc, #232]	@ (800c564 <HAL_RCC_OscConfig+0x8ac>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c482:	2b00      	cmp	r3, #0
 800c484:	d1f0      	bne.n	800c468 <HAL_RCC_OscConfig+0x7b0>
 800c486:	e068      	b.n	800c55a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800c488:	4b36      	ldr	r3, [pc, #216]	@ (800c564 <HAL_RCC_OscConfig+0x8ac>)
 800c48a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c48c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c48e:	4b35      	ldr	r3, [pc, #212]	@ (800c564 <HAL_RCC_OscConfig+0x8ac>)
 800c490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c492:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c498:	2b01      	cmp	r3, #1
 800c49a:	d031      	beq.n	800c500 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	f003 0203 	and.w	r2, r3, #3
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c4a6:	429a      	cmp	r2, r3
 800c4a8:	d12a      	bne.n	800c500 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	091b      	lsrs	r3, r3, #4
 800c4ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c4b6:	429a      	cmp	r2, r3
 800c4b8:	d122      	bne.n	800c500 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d11a      	bne.n	800c500 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	0a5b      	lsrs	r3, r3, #9
 800c4ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4d6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c4d8:	429a      	cmp	r2, r3
 800c4da:	d111      	bne.n	800c500 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	0c1b      	lsrs	r3, r3, #16
 800c4e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d108      	bne.n	800c500 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	0e1b      	lsrs	r3, r3, #24
 800c4f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4fa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c4fc:	429a      	cmp	r2, r3
 800c4fe:	d001      	beq.n	800c504 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800c500:	2301      	movs	r3, #1
 800c502:	e02b      	b.n	800c55c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800c504:	4b17      	ldr	r3, [pc, #92]	@ (800c564 <HAL_RCC_OscConfig+0x8ac>)
 800c506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c508:	08db      	lsrs	r3, r3, #3
 800c50a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c50e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c514:	693a      	ldr	r2, [r7, #16]
 800c516:	429a      	cmp	r2, r3
 800c518:	d01f      	beq.n	800c55a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800c51a:	4b12      	ldr	r3, [pc, #72]	@ (800c564 <HAL_RCC_OscConfig+0x8ac>)
 800c51c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c51e:	4a11      	ldr	r2, [pc, #68]	@ (800c564 <HAL_RCC_OscConfig+0x8ac>)
 800c520:	f023 0301 	bic.w	r3, r3, #1
 800c524:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c526:	f7fd fec7 	bl	800a2b8 <HAL_GetTick>
 800c52a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800c52c:	bf00      	nop
 800c52e:	f7fd fec3 	bl	800a2b8 <HAL_GetTick>
 800c532:	4602      	mov	r2, r0
 800c534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c536:	4293      	cmp	r3, r2
 800c538:	d0f9      	beq.n	800c52e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c53a:	4b0a      	ldr	r3, [pc, #40]	@ (800c564 <HAL_RCC_OscConfig+0x8ac>)
 800c53c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c53e:	4b0a      	ldr	r3, [pc, #40]	@ (800c568 <HAL_RCC_OscConfig+0x8b0>)
 800c540:	4013      	ands	r3, r2
 800c542:	687a      	ldr	r2, [r7, #4]
 800c544:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c546:	00d2      	lsls	r2, r2, #3
 800c548:	4906      	ldr	r1, [pc, #24]	@ (800c564 <HAL_RCC_OscConfig+0x8ac>)
 800c54a:	4313      	orrs	r3, r2
 800c54c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800c54e:	4b05      	ldr	r3, [pc, #20]	@ (800c564 <HAL_RCC_OscConfig+0x8ac>)
 800c550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c552:	4a04      	ldr	r2, [pc, #16]	@ (800c564 <HAL_RCC_OscConfig+0x8ac>)
 800c554:	f043 0301 	orr.w	r3, r3, #1
 800c558:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800c55a:	2300      	movs	r3, #0
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3730      	adds	r7, #48	@ 0x30
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}
 800c564:	58024400 	.word	0x58024400
 800c568:	ffff0007 	.word	0xffff0007

0800c56c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b086      	sub	sp, #24
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d101      	bne.n	800c580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c57c:	2301      	movs	r3, #1
 800c57e:	e19c      	b.n	800c8ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c580:	4b8a      	ldr	r3, [pc, #552]	@ (800c7ac <HAL_RCC_ClockConfig+0x240>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f003 030f 	and.w	r3, r3, #15
 800c588:	683a      	ldr	r2, [r7, #0]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d910      	bls.n	800c5b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c58e:	4b87      	ldr	r3, [pc, #540]	@ (800c7ac <HAL_RCC_ClockConfig+0x240>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f023 020f 	bic.w	r2, r3, #15
 800c596:	4985      	ldr	r1, [pc, #532]	@ (800c7ac <HAL_RCC_ClockConfig+0x240>)
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	4313      	orrs	r3, r2
 800c59c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c59e:	4b83      	ldr	r3, [pc, #524]	@ (800c7ac <HAL_RCC_ClockConfig+0x240>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f003 030f 	and.w	r3, r3, #15
 800c5a6:	683a      	ldr	r2, [r7, #0]
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d001      	beq.n	800c5b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	e184      	b.n	800c8ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f003 0304 	and.w	r3, r3, #4
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d010      	beq.n	800c5de <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	691a      	ldr	r2, [r3, #16]
 800c5c0:	4b7b      	ldr	r3, [pc, #492]	@ (800c7b0 <HAL_RCC_ClockConfig+0x244>)
 800c5c2:	699b      	ldr	r3, [r3, #24]
 800c5c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d908      	bls.n	800c5de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c5cc:	4b78      	ldr	r3, [pc, #480]	@ (800c7b0 <HAL_RCC_ClockConfig+0x244>)
 800c5ce:	699b      	ldr	r3, [r3, #24]
 800c5d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	691b      	ldr	r3, [r3, #16]
 800c5d8:	4975      	ldr	r1, [pc, #468]	@ (800c7b0 <HAL_RCC_ClockConfig+0x244>)
 800c5da:	4313      	orrs	r3, r2
 800c5dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f003 0308 	and.w	r3, r3, #8
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d010      	beq.n	800c60c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	695a      	ldr	r2, [r3, #20]
 800c5ee:	4b70      	ldr	r3, [pc, #448]	@ (800c7b0 <HAL_RCC_ClockConfig+0x244>)
 800c5f0:	69db      	ldr	r3, [r3, #28]
 800c5f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d908      	bls.n	800c60c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c5fa:	4b6d      	ldr	r3, [pc, #436]	@ (800c7b0 <HAL_RCC_ClockConfig+0x244>)
 800c5fc:	69db      	ldr	r3, [r3, #28]
 800c5fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	695b      	ldr	r3, [r3, #20]
 800c606:	496a      	ldr	r1, [pc, #424]	@ (800c7b0 <HAL_RCC_ClockConfig+0x244>)
 800c608:	4313      	orrs	r3, r2
 800c60a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f003 0310 	and.w	r3, r3, #16
 800c614:	2b00      	cmp	r3, #0
 800c616:	d010      	beq.n	800c63a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	699a      	ldr	r2, [r3, #24]
 800c61c:	4b64      	ldr	r3, [pc, #400]	@ (800c7b0 <HAL_RCC_ClockConfig+0x244>)
 800c61e:	69db      	ldr	r3, [r3, #28]
 800c620:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c624:	429a      	cmp	r2, r3
 800c626:	d908      	bls.n	800c63a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c628:	4b61      	ldr	r3, [pc, #388]	@ (800c7b0 <HAL_RCC_ClockConfig+0x244>)
 800c62a:	69db      	ldr	r3, [r3, #28]
 800c62c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	699b      	ldr	r3, [r3, #24]
 800c634:	495e      	ldr	r1, [pc, #376]	@ (800c7b0 <HAL_RCC_ClockConfig+0x244>)
 800c636:	4313      	orrs	r3, r2
 800c638:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f003 0320 	and.w	r3, r3, #32
 800c642:	2b00      	cmp	r3, #0
 800c644:	d010      	beq.n	800c668 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	69da      	ldr	r2, [r3, #28]
 800c64a:	4b59      	ldr	r3, [pc, #356]	@ (800c7b0 <HAL_RCC_ClockConfig+0x244>)
 800c64c:	6a1b      	ldr	r3, [r3, #32]
 800c64e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c652:	429a      	cmp	r2, r3
 800c654:	d908      	bls.n	800c668 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c656:	4b56      	ldr	r3, [pc, #344]	@ (800c7b0 <HAL_RCC_ClockConfig+0x244>)
 800c658:	6a1b      	ldr	r3, [r3, #32]
 800c65a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	69db      	ldr	r3, [r3, #28]
 800c662:	4953      	ldr	r1, [pc, #332]	@ (800c7b0 <HAL_RCC_ClockConfig+0x244>)
 800c664:	4313      	orrs	r3, r2
 800c666:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f003 0302 	and.w	r3, r3, #2
 800c670:	2b00      	cmp	r3, #0
 800c672:	d010      	beq.n	800c696 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	68da      	ldr	r2, [r3, #12]
 800c678:	4b4d      	ldr	r3, [pc, #308]	@ (800c7b0 <HAL_RCC_ClockConfig+0x244>)
 800c67a:	699b      	ldr	r3, [r3, #24]
 800c67c:	f003 030f 	and.w	r3, r3, #15
 800c680:	429a      	cmp	r2, r3
 800c682:	d908      	bls.n	800c696 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c684:	4b4a      	ldr	r3, [pc, #296]	@ (800c7b0 <HAL_RCC_ClockConfig+0x244>)
 800c686:	699b      	ldr	r3, [r3, #24]
 800c688:	f023 020f 	bic.w	r2, r3, #15
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	68db      	ldr	r3, [r3, #12]
 800c690:	4947      	ldr	r1, [pc, #284]	@ (800c7b0 <HAL_RCC_ClockConfig+0x244>)
 800c692:	4313      	orrs	r3, r2
 800c694:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f003 0301 	and.w	r3, r3, #1
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d055      	beq.n	800c74e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800c6a2:	4b43      	ldr	r3, [pc, #268]	@ (800c7b0 <HAL_RCC_ClockConfig+0x244>)
 800c6a4:	699b      	ldr	r3, [r3, #24]
 800c6a6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	689b      	ldr	r3, [r3, #8]
 800c6ae:	4940      	ldr	r1, [pc, #256]	@ (800c7b0 <HAL_RCC_ClockConfig+0x244>)
 800c6b0:	4313      	orrs	r3, r2
 800c6b2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	685b      	ldr	r3, [r3, #4]
 800c6b8:	2b02      	cmp	r3, #2
 800c6ba:	d107      	bne.n	800c6cc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c6bc:	4b3c      	ldr	r3, [pc, #240]	@ (800c7b0 <HAL_RCC_ClockConfig+0x244>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d121      	bne.n	800c70c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	e0f6      	b.n	800c8ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	685b      	ldr	r3, [r3, #4]
 800c6d0:	2b03      	cmp	r3, #3
 800c6d2:	d107      	bne.n	800c6e4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c6d4:	4b36      	ldr	r3, [pc, #216]	@ (800c7b0 <HAL_RCC_ClockConfig+0x244>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d115      	bne.n	800c70c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	e0ea      	b.n	800c8ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	685b      	ldr	r3, [r3, #4]
 800c6e8:	2b01      	cmp	r3, #1
 800c6ea:	d107      	bne.n	800c6fc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c6ec:	4b30      	ldr	r3, [pc, #192]	@ (800c7b0 <HAL_RCC_ClockConfig+0x244>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d109      	bne.n	800c70c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	e0de      	b.n	800c8ba <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c6fc:	4b2c      	ldr	r3, [pc, #176]	@ (800c7b0 <HAL_RCC_ClockConfig+0x244>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	f003 0304 	and.w	r3, r3, #4
 800c704:	2b00      	cmp	r3, #0
 800c706:	d101      	bne.n	800c70c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c708:	2301      	movs	r3, #1
 800c70a:	e0d6      	b.n	800c8ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c70c:	4b28      	ldr	r3, [pc, #160]	@ (800c7b0 <HAL_RCC_ClockConfig+0x244>)
 800c70e:	691b      	ldr	r3, [r3, #16]
 800c710:	f023 0207 	bic.w	r2, r3, #7
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	685b      	ldr	r3, [r3, #4]
 800c718:	4925      	ldr	r1, [pc, #148]	@ (800c7b0 <HAL_RCC_ClockConfig+0x244>)
 800c71a:	4313      	orrs	r3, r2
 800c71c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c71e:	f7fd fdcb 	bl	800a2b8 <HAL_GetTick>
 800c722:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c724:	e00a      	b.n	800c73c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c726:	f7fd fdc7 	bl	800a2b8 <HAL_GetTick>
 800c72a:	4602      	mov	r2, r0
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	1ad3      	subs	r3, r2, r3
 800c730:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c734:	4293      	cmp	r3, r2
 800c736:	d901      	bls.n	800c73c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800c738:	2303      	movs	r3, #3
 800c73a:	e0be      	b.n	800c8ba <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c73c:	4b1c      	ldr	r3, [pc, #112]	@ (800c7b0 <HAL_RCC_ClockConfig+0x244>)
 800c73e:	691b      	ldr	r3, [r3, #16]
 800c740:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	685b      	ldr	r3, [r3, #4]
 800c748:	00db      	lsls	r3, r3, #3
 800c74a:	429a      	cmp	r2, r3
 800c74c:	d1eb      	bne.n	800c726 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f003 0302 	and.w	r3, r3, #2
 800c756:	2b00      	cmp	r3, #0
 800c758:	d010      	beq.n	800c77c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	68da      	ldr	r2, [r3, #12]
 800c75e:	4b14      	ldr	r3, [pc, #80]	@ (800c7b0 <HAL_RCC_ClockConfig+0x244>)
 800c760:	699b      	ldr	r3, [r3, #24]
 800c762:	f003 030f 	and.w	r3, r3, #15
 800c766:	429a      	cmp	r2, r3
 800c768:	d208      	bcs.n	800c77c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c76a:	4b11      	ldr	r3, [pc, #68]	@ (800c7b0 <HAL_RCC_ClockConfig+0x244>)
 800c76c:	699b      	ldr	r3, [r3, #24]
 800c76e:	f023 020f 	bic.w	r2, r3, #15
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	68db      	ldr	r3, [r3, #12]
 800c776:	490e      	ldr	r1, [pc, #56]	@ (800c7b0 <HAL_RCC_ClockConfig+0x244>)
 800c778:	4313      	orrs	r3, r2
 800c77a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c77c:	4b0b      	ldr	r3, [pc, #44]	@ (800c7ac <HAL_RCC_ClockConfig+0x240>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f003 030f 	and.w	r3, r3, #15
 800c784:	683a      	ldr	r2, [r7, #0]
 800c786:	429a      	cmp	r2, r3
 800c788:	d214      	bcs.n	800c7b4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c78a:	4b08      	ldr	r3, [pc, #32]	@ (800c7ac <HAL_RCC_ClockConfig+0x240>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f023 020f 	bic.w	r2, r3, #15
 800c792:	4906      	ldr	r1, [pc, #24]	@ (800c7ac <HAL_RCC_ClockConfig+0x240>)
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	4313      	orrs	r3, r2
 800c798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c79a:	4b04      	ldr	r3, [pc, #16]	@ (800c7ac <HAL_RCC_ClockConfig+0x240>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	f003 030f 	and.w	r3, r3, #15
 800c7a2:	683a      	ldr	r2, [r7, #0]
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d005      	beq.n	800c7b4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	e086      	b.n	800c8ba <HAL_RCC_ClockConfig+0x34e>
 800c7ac:	52002000 	.word	0x52002000
 800c7b0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	f003 0304 	and.w	r3, r3, #4
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d010      	beq.n	800c7e2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	691a      	ldr	r2, [r3, #16]
 800c7c4:	4b3f      	ldr	r3, [pc, #252]	@ (800c8c4 <HAL_RCC_ClockConfig+0x358>)
 800c7c6:	699b      	ldr	r3, [r3, #24]
 800c7c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d208      	bcs.n	800c7e2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c7d0:	4b3c      	ldr	r3, [pc, #240]	@ (800c8c4 <HAL_RCC_ClockConfig+0x358>)
 800c7d2:	699b      	ldr	r3, [r3, #24]
 800c7d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	691b      	ldr	r3, [r3, #16]
 800c7dc:	4939      	ldr	r1, [pc, #228]	@ (800c8c4 <HAL_RCC_ClockConfig+0x358>)
 800c7de:	4313      	orrs	r3, r2
 800c7e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f003 0308 	and.w	r3, r3, #8
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d010      	beq.n	800c810 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	695a      	ldr	r2, [r3, #20]
 800c7f2:	4b34      	ldr	r3, [pc, #208]	@ (800c8c4 <HAL_RCC_ClockConfig+0x358>)
 800c7f4:	69db      	ldr	r3, [r3, #28]
 800c7f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d208      	bcs.n	800c810 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c7fe:	4b31      	ldr	r3, [pc, #196]	@ (800c8c4 <HAL_RCC_ClockConfig+0x358>)
 800c800:	69db      	ldr	r3, [r3, #28]
 800c802:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	695b      	ldr	r3, [r3, #20]
 800c80a:	492e      	ldr	r1, [pc, #184]	@ (800c8c4 <HAL_RCC_ClockConfig+0x358>)
 800c80c:	4313      	orrs	r3, r2
 800c80e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f003 0310 	and.w	r3, r3, #16
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d010      	beq.n	800c83e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	699a      	ldr	r2, [r3, #24]
 800c820:	4b28      	ldr	r3, [pc, #160]	@ (800c8c4 <HAL_RCC_ClockConfig+0x358>)
 800c822:	69db      	ldr	r3, [r3, #28]
 800c824:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c828:	429a      	cmp	r2, r3
 800c82a:	d208      	bcs.n	800c83e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c82c:	4b25      	ldr	r3, [pc, #148]	@ (800c8c4 <HAL_RCC_ClockConfig+0x358>)
 800c82e:	69db      	ldr	r3, [r3, #28]
 800c830:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	699b      	ldr	r3, [r3, #24]
 800c838:	4922      	ldr	r1, [pc, #136]	@ (800c8c4 <HAL_RCC_ClockConfig+0x358>)
 800c83a:	4313      	orrs	r3, r2
 800c83c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f003 0320 	and.w	r3, r3, #32
 800c846:	2b00      	cmp	r3, #0
 800c848:	d010      	beq.n	800c86c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	69da      	ldr	r2, [r3, #28]
 800c84e:	4b1d      	ldr	r3, [pc, #116]	@ (800c8c4 <HAL_RCC_ClockConfig+0x358>)
 800c850:	6a1b      	ldr	r3, [r3, #32]
 800c852:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c856:	429a      	cmp	r2, r3
 800c858:	d208      	bcs.n	800c86c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c85a:	4b1a      	ldr	r3, [pc, #104]	@ (800c8c4 <HAL_RCC_ClockConfig+0x358>)
 800c85c:	6a1b      	ldr	r3, [r3, #32]
 800c85e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	69db      	ldr	r3, [r3, #28]
 800c866:	4917      	ldr	r1, [pc, #92]	@ (800c8c4 <HAL_RCC_ClockConfig+0x358>)
 800c868:	4313      	orrs	r3, r2
 800c86a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c86c:	f000 f834 	bl	800c8d8 <HAL_RCC_GetSysClockFreq>
 800c870:	4602      	mov	r2, r0
 800c872:	4b14      	ldr	r3, [pc, #80]	@ (800c8c4 <HAL_RCC_ClockConfig+0x358>)
 800c874:	699b      	ldr	r3, [r3, #24]
 800c876:	0a1b      	lsrs	r3, r3, #8
 800c878:	f003 030f 	and.w	r3, r3, #15
 800c87c:	4912      	ldr	r1, [pc, #72]	@ (800c8c8 <HAL_RCC_ClockConfig+0x35c>)
 800c87e:	5ccb      	ldrb	r3, [r1, r3]
 800c880:	f003 031f 	and.w	r3, r3, #31
 800c884:	fa22 f303 	lsr.w	r3, r2, r3
 800c888:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c88a:	4b0e      	ldr	r3, [pc, #56]	@ (800c8c4 <HAL_RCC_ClockConfig+0x358>)
 800c88c:	699b      	ldr	r3, [r3, #24]
 800c88e:	f003 030f 	and.w	r3, r3, #15
 800c892:	4a0d      	ldr	r2, [pc, #52]	@ (800c8c8 <HAL_RCC_ClockConfig+0x35c>)
 800c894:	5cd3      	ldrb	r3, [r2, r3]
 800c896:	f003 031f 	and.w	r3, r3, #31
 800c89a:	693a      	ldr	r2, [r7, #16]
 800c89c:	fa22 f303 	lsr.w	r3, r2, r3
 800c8a0:	4a0a      	ldr	r2, [pc, #40]	@ (800c8cc <HAL_RCC_ClockConfig+0x360>)
 800c8a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c8a4:	4a0a      	ldr	r2, [pc, #40]	@ (800c8d0 <HAL_RCC_ClockConfig+0x364>)
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800c8aa:	4b0a      	ldr	r3, [pc, #40]	@ (800c8d4 <HAL_RCC_ClockConfig+0x368>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f7fd fcb8 	bl	800a224 <HAL_InitTick>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c8b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	3718      	adds	r7, #24
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	bd80      	pop	{r7, pc}
 800c8c2:	bf00      	nop
 800c8c4:	58024400 	.word	0x58024400
 800c8c8:	080122a4 	.word	0x080122a4
 800c8cc:	24000004 	.word	0x24000004
 800c8d0:	24000000 	.word	0x24000000
 800c8d4:	240000d4 	.word	0x240000d4

0800c8d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b089      	sub	sp, #36	@ 0x24
 800c8dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c8de:	4bb3      	ldr	r3, [pc, #716]	@ (800cbac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c8e0:	691b      	ldr	r3, [r3, #16]
 800c8e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c8e6:	2b18      	cmp	r3, #24
 800c8e8:	f200 8155 	bhi.w	800cb96 <HAL_RCC_GetSysClockFreq+0x2be>
 800c8ec:	a201      	add	r2, pc, #4	@ (adr r2, 800c8f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800c8ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8f2:	bf00      	nop
 800c8f4:	0800c959 	.word	0x0800c959
 800c8f8:	0800cb97 	.word	0x0800cb97
 800c8fc:	0800cb97 	.word	0x0800cb97
 800c900:	0800cb97 	.word	0x0800cb97
 800c904:	0800cb97 	.word	0x0800cb97
 800c908:	0800cb97 	.word	0x0800cb97
 800c90c:	0800cb97 	.word	0x0800cb97
 800c910:	0800cb97 	.word	0x0800cb97
 800c914:	0800c97f 	.word	0x0800c97f
 800c918:	0800cb97 	.word	0x0800cb97
 800c91c:	0800cb97 	.word	0x0800cb97
 800c920:	0800cb97 	.word	0x0800cb97
 800c924:	0800cb97 	.word	0x0800cb97
 800c928:	0800cb97 	.word	0x0800cb97
 800c92c:	0800cb97 	.word	0x0800cb97
 800c930:	0800cb97 	.word	0x0800cb97
 800c934:	0800c985 	.word	0x0800c985
 800c938:	0800cb97 	.word	0x0800cb97
 800c93c:	0800cb97 	.word	0x0800cb97
 800c940:	0800cb97 	.word	0x0800cb97
 800c944:	0800cb97 	.word	0x0800cb97
 800c948:	0800cb97 	.word	0x0800cb97
 800c94c:	0800cb97 	.word	0x0800cb97
 800c950:	0800cb97 	.word	0x0800cb97
 800c954:	0800c98b 	.word	0x0800c98b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c958:	4b94      	ldr	r3, [pc, #592]	@ (800cbac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f003 0320 	and.w	r3, r3, #32
 800c960:	2b00      	cmp	r3, #0
 800c962:	d009      	beq.n	800c978 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c964:	4b91      	ldr	r3, [pc, #580]	@ (800cbac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	08db      	lsrs	r3, r3, #3
 800c96a:	f003 0303 	and.w	r3, r3, #3
 800c96e:	4a90      	ldr	r2, [pc, #576]	@ (800cbb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c970:	fa22 f303 	lsr.w	r3, r2, r3
 800c974:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800c976:	e111      	b.n	800cb9c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c978:	4b8d      	ldr	r3, [pc, #564]	@ (800cbb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c97a:	61bb      	str	r3, [r7, #24]
      break;
 800c97c:	e10e      	b.n	800cb9c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800c97e:	4b8d      	ldr	r3, [pc, #564]	@ (800cbb4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c980:	61bb      	str	r3, [r7, #24]
      break;
 800c982:	e10b      	b.n	800cb9c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800c984:	4b8c      	ldr	r3, [pc, #560]	@ (800cbb8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c986:	61bb      	str	r3, [r7, #24]
      break;
 800c988:	e108      	b.n	800cb9c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c98a:	4b88      	ldr	r3, [pc, #544]	@ (800cbac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c98c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c98e:	f003 0303 	and.w	r3, r3, #3
 800c992:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c994:	4b85      	ldr	r3, [pc, #532]	@ (800cbac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c998:	091b      	lsrs	r3, r3, #4
 800c99a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c99e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c9a0:	4b82      	ldr	r3, [pc, #520]	@ (800cbac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c9a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9a4:	f003 0301 	and.w	r3, r3, #1
 800c9a8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c9aa:	4b80      	ldr	r3, [pc, #512]	@ (800cbac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c9ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9ae:	08db      	lsrs	r3, r3, #3
 800c9b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c9b4:	68fa      	ldr	r2, [r7, #12]
 800c9b6:	fb02 f303 	mul.w	r3, r2, r3
 800c9ba:	ee07 3a90 	vmov	s15, r3
 800c9be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9c2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	f000 80e1 	beq.w	800cb90 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800c9ce:	697b      	ldr	r3, [r7, #20]
 800c9d0:	2b02      	cmp	r3, #2
 800c9d2:	f000 8083 	beq.w	800cadc <HAL_RCC_GetSysClockFreq+0x204>
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	2b02      	cmp	r3, #2
 800c9da:	f200 80a1 	bhi.w	800cb20 <HAL_RCC_GetSysClockFreq+0x248>
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d003      	beq.n	800c9ec <HAL_RCC_GetSysClockFreq+0x114>
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	2b01      	cmp	r3, #1
 800c9e8:	d056      	beq.n	800ca98 <HAL_RCC_GetSysClockFreq+0x1c0>
 800c9ea:	e099      	b.n	800cb20 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9ec:	4b6f      	ldr	r3, [pc, #444]	@ (800cbac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f003 0320 	and.w	r3, r3, #32
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d02d      	beq.n	800ca54 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9f8:	4b6c      	ldr	r3, [pc, #432]	@ (800cbac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	08db      	lsrs	r3, r3, #3
 800c9fe:	f003 0303 	and.w	r3, r3, #3
 800ca02:	4a6b      	ldr	r2, [pc, #428]	@ (800cbb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ca04:	fa22 f303 	lsr.w	r3, r2, r3
 800ca08:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	ee07 3a90 	vmov	s15, r3
 800ca10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca14:	693b      	ldr	r3, [r7, #16]
 800ca16:	ee07 3a90 	vmov	s15, r3
 800ca1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca22:	4b62      	ldr	r3, [pc, #392]	@ (800cbac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ca24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca2a:	ee07 3a90 	vmov	s15, r3
 800ca2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca32:	ed97 6a02 	vldr	s12, [r7, #8]
 800ca36:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800cbbc <HAL_RCC_GetSysClockFreq+0x2e4>
 800ca3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ca46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca4e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ca52:	e087      	b.n	800cb64 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	ee07 3a90 	vmov	s15, r3
 800ca5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca5e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800cbc0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ca62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca66:	4b51      	ldr	r3, [pc, #324]	@ (800cbac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ca68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca6e:	ee07 3a90 	vmov	s15, r3
 800ca72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca76:	ed97 6a02 	vldr	s12, [r7, #8]
 800ca7a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800cbbc <HAL_RCC_GetSysClockFreq+0x2e4>
 800ca7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ca8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ca96:	e065      	b.n	800cb64 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	ee07 3a90 	vmov	s15, r3
 800ca9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caa2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800cbc4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800caa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800caaa:	4b40      	ldr	r3, [pc, #256]	@ (800cbac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800caac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800caae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cab2:	ee07 3a90 	vmov	s15, r3
 800cab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800caba:	ed97 6a02 	vldr	s12, [r7, #8]
 800cabe:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800cbbc <HAL_RCC_GetSysClockFreq+0x2e4>
 800cac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800caca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cad6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800cada:	e043      	b.n	800cb64 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	ee07 3a90 	vmov	s15, r3
 800cae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cae6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800cbc8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800caea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800caee:	4b2f      	ldr	r3, [pc, #188]	@ (800cbac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800caf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800caf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caf6:	ee07 3a90 	vmov	s15, r3
 800cafa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cafe:	ed97 6a02 	vldr	s12, [r7, #8]
 800cb02:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800cbbc <HAL_RCC_GetSysClockFreq+0x2e4>
 800cb06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cb12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800cb1e:	e021      	b.n	800cb64 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cb20:	693b      	ldr	r3, [r7, #16]
 800cb22:	ee07 3a90 	vmov	s15, r3
 800cb26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb2a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800cbc4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800cb2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb32:	4b1e      	ldr	r3, [pc, #120]	@ (800cbac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cb34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb3a:	ee07 3a90 	vmov	s15, r3
 800cb3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb42:	ed97 6a02 	vldr	s12, [r7, #8]
 800cb46:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800cbbc <HAL_RCC_GetSysClockFreq+0x2e4>
 800cb4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cb56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800cb62:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800cb64:	4b11      	ldr	r3, [pc, #68]	@ (800cbac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cb66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb68:	0a5b      	lsrs	r3, r3, #9
 800cb6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb6e:	3301      	adds	r3, #1
 800cb70:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	ee07 3a90 	vmov	s15, r3
 800cb78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cb7c:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb88:	ee17 3a90 	vmov	r3, s15
 800cb8c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800cb8e:	e005      	b.n	800cb9c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800cb90:	2300      	movs	r3, #0
 800cb92:	61bb      	str	r3, [r7, #24]
      break;
 800cb94:	e002      	b.n	800cb9c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800cb96:	4b07      	ldr	r3, [pc, #28]	@ (800cbb4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800cb98:	61bb      	str	r3, [r7, #24]
      break;
 800cb9a:	bf00      	nop
  }

  return sysclockfreq;
 800cb9c:	69bb      	ldr	r3, [r7, #24]
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3724      	adds	r7, #36	@ 0x24
 800cba2:	46bd      	mov	sp, r7
 800cba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba8:	4770      	bx	lr
 800cbaa:	bf00      	nop
 800cbac:	58024400 	.word	0x58024400
 800cbb0:	03d09000 	.word	0x03d09000
 800cbb4:	003d0900 	.word	0x003d0900
 800cbb8:	017d7840 	.word	0x017d7840
 800cbbc:	46000000 	.word	0x46000000
 800cbc0:	4c742400 	.word	0x4c742400
 800cbc4:	4a742400 	.word	0x4a742400
 800cbc8:	4bbebc20 	.word	0x4bbebc20

0800cbcc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cbcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cbd0:	b0ca      	sub	sp, #296	@ 0x128
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800cbd8:	2300      	movs	r3, #0
 800cbda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800cbde:	2300      	movs	r3, #0
 800cbe0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800cbe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbec:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800cbf0:	2500      	movs	r5, #0
 800cbf2:	ea54 0305 	orrs.w	r3, r4, r5
 800cbf6:	d049      	beq.n	800cc8c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800cbf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cbfc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cbfe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800cc02:	d02f      	beq.n	800cc64 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800cc04:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800cc08:	d828      	bhi.n	800cc5c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800cc0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cc0e:	d01a      	beq.n	800cc46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800cc10:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cc14:	d822      	bhi.n	800cc5c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d003      	beq.n	800cc22 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800cc1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cc1e:	d007      	beq.n	800cc30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800cc20:	e01c      	b.n	800cc5c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc22:	4bb8      	ldr	r3, [pc, #736]	@ (800cf04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cc24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc26:	4ab7      	ldr	r2, [pc, #732]	@ (800cf04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cc28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cc2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800cc2e:	e01a      	b.n	800cc66 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cc30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc34:	3308      	adds	r3, #8
 800cc36:	2102      	movs	r1, #2
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f001 f9d1 	bl	800dfe0 <RCCEx_PLL2_Config>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800cc44:	e00f      	b.n	800cc66 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cc46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc4a:	3328      	adds	r3, #40	@ 0x28
 800cc4c:	2102      	movs	r1, #2
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f001 fa78 	bl	800e144 <RCCEx_PLL3_Config>
 800cc54:	4603      	mov	r3, r0
 800cc56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800cc5a:	e004      	b.n	800cc66 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cc62:	e000      	b.n	800cc66 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800cc64:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d10a      	bne.n	800cc84 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800cc6e:	4ba5      	ldr	r3, [pc, #660]	@ (800cf04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cc70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc72:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800cc76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cc7c:	4aa1      	ldr	r2, [pc, #644]	@ (800cf04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cc7e:	430b      	orrs	r3, r1
 800cc80:	6513      	str	r3, [r2, #80]	@ 0x50
 800cc82:	e003      	b.n	800cc8c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cc88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800cc8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc94:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800cc98:	f04f 0900 	mov.w	r9, #0
 800cc9c:	ea58 0309 	orrs.w	r3, r8, r9
 800cca0:	d047      	beq.n	800cd32 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800cca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cca8:	2b04      	cmp	r3, #4
 800ccaa:	d82a      	bhi.n	800cd02 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ccac:	a201      	add	r2, pc, #4	@ (adr r2, 800ccb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ccae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccb2:	bf00      	nop
 800ccb4:	0800ccc9 	.word	0x0800ccc9
 800ccb8:	0800ccd7 	.word	0x0800ccd7
 800ccbc:	0800cced 	.word	0x0800cced
 800ccc0:	0800cd0b 	.word	0x0800cd0b
 800ccc4:	0800cd0b 	.word	0x0800cd0b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ccc8:	4b8e      	ldr	r3, [pc, #568]	@ (800cf04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ccca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cccc:	4a8d      	ldr	r2, [pc, #564]	@ (800cf04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ccce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ccd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ccd4:	e01a      	b.n	800cd0c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ccd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ccda:	3308      	adds	r3, #8
 800ccdc:	2100      	movs	r1, #0
 800ccde:	4618      	mov	r0, r3
 800cce0:	f001 f97e 	bl	800dfe0 <RCCEx_PLL2_Config>
 800cce4:	4603      	mov	r3, r0
 800cce6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ccea:	e00f      	b.n	800cd0c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ccec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ccf0:	3328      	adds	r3, #40	@ 0x28
 800ccf2:	2100      	movs	r1, #0
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f001 fa25 	bl	800e144 <RCCEx_PLL3_Config>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cd00:	e004      	b.n	800cd0c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cd02:	2301      	movs	r3, #1
 800cd04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cd08:	e000      	b.n	800cd0c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800cd0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d10a      	bne.n	800cd2a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cd14:	4b7b      	ldr	r3, [pc, #492]	@ (800cf04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cd16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd18:	f023 0107 	bic.w	r1, r3, #7
 800cd1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd22:	4a78      	ldr	r2, [pc, #480]	@ (800cf04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cd24:	430b      	orrs	r3, r1
 800cd26:	6513      	str	r3, [r2, #80]	@ 0x50
 800cd28:	e003      	b.n	800cd32 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cd2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800cd32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd3a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800cd3e:	f04f 0b00 	mov.w	fp, #0
 800cd42:	ea5a 030b 	orrs.w	r3, sl, fp
 800cd46:	d04c      	beq.n	800cde2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800cd48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cd52:	d030      	beq.n	800cdb6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800cd54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cd58:	d829      	bhi.n	800cdae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800cd5a:	2bc0      	cmp	r3, #192	@ 0xc0
 800cd5c:	d02d      	beq.n	800cdba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800cd5e:	2bc0      	cmp	r3, #192	@ 0xc0
 800cd60:	d825      	bhi.n	800cdae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800cd62:	2b80      	cmp	r3, #128	@ 0x80
 800cd64:	d018      	beq.n	800cd98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800cd66:	2b80      	cmp	r3, #128	@ 0x80
 800cd68:	d821      	bhi.n	800cdae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d002      	beq.n	800cd74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800cd6e:	2b40      	cmp	r3, #64	@ 0x40
 800cd70:	d007      	beq.n	800cd82 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800cd72:	e01c      	b.n	800cdae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cd74:	4b63      	ldr	r3, [pc, #396]	@ (800cf04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cd76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd78:	4a62      	ldr	r2, [pc, #392]	@ (800cf04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cd7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cd7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800cd80:	e01c      	b.n	800cdbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cd82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd86:	3308      	adds	r3, #8
 800cd88:	2100      	movs	r1, #0
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f001 f928 	bl	800dfe0 <RCCEx_PLL2_Config>
 800cd90:	4603      	mov	r3, r0
 800cd92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800cd96:	e011      	b.n	800cdbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cd98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd9c:	3328      	adds	r3, #40	@ 0x28
 800cd9e:	2100      	movs	r1, #0
 800cda0:	4618      	mov	r0, r3
 800cda2:	f001 f9cf 	bl	800e144 <RCCEx_PLL3_Config>
 800cda6:	4603      	mov	r3, r0
 800cda8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800cdac:	e006      	b.n	800cdbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cdae:	2301      	movs	r3, #1
 800cdb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cdb4:	e002      	b.n	800cdbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800cdb6:	bf00      	nop
 800cdb8:	e000      	b.n	800cdbc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800cdba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cdbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d10a      	bne.n	800cdda <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800cdc4:	4b4f      	ldr	r3, [pc, #316]	@ (800cf04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cdc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cdc8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800cdcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cdd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cdd2:	4a4c      	ldr	r2, [pc, #304]	@ (800cf04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cdd4:	430b      	orrs	r3, r1
 800cdd6:	6513      	str	r3, [r2, #80]	@ 0x50
 800cdd8:	e003      	b.n	800cde2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cdde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800cde2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cde6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdea:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800cdee:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800cdf8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800cdfc:	460b      	mov	r3, r1
 800cdfe:	4313      	orrs	r3, r2
 800ce00:	d053      	beq.n	800ceaa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800ce02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ce06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ce0a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ce0e:	d035      	beq.n	800ce7c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800ce10:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ce14:	d82e      	bhi.n	800ce74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ce16:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ce1a:	d031      	beq.n	800ce80 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800ce1c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ce20:	d828      	bhi.n	800ce74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ce22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ce26:	d01a      	beq.n	800ce5e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800ce28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ce2c:	d822      	bhi.n	800ce74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d003      	beq.n	800ce3a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800ce32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ce36:	d007      	beq.n	800ce48 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800ce38:	e01c      	b.n	800ce74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce3a:	4b32      	ldr	r3, [pc, #200]	@ (800cf04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ce3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce3e:	4a31      	ldr	r2, [pc, #196]	@ (800cf04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ce40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ce44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ce46:	e01c      	b.n	800ce82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ce48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ce4c:	3308      	adds	r3, #8
 800ce4e:	2100      	movs	r1, #0
 800ce50:	4618      	mov	r0, r3
 800ce52:	f001 f8c5 	bl	800dfe0 <RCCEx_PLL2_Config>
 800ce56:	4603      	mov	r3, r0
 800ce58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ce5c:	e011      	b.n	800ce82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ce5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ce62:	3328      	adds	r3, #40	@ 0x28
 800ce64:	2100      	movs	r1, #0
 800ce66:	4618      	mov	r0, r3
 800ce68:	f001 f96c 	bl	800e144 <RCCEx_PLL3_Config>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ce72:	e006      	b.n	800ce82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ce74:	2301      	movs	r3, #1
 800ce76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ce7a:	e002      	b.n	800ce82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ce7c:	bf00      	nop
 800ce7e:	e000      	b.n	800ce82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ce80:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ce82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d10b      	bne.n	800cea2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ce8a:	4b1e      	ldr	r3, [pc, #120]	@ (800cf04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ce8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce8e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800ce92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ce96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ce9a:	4a1a      	ldr	r2, [pc, #104]	@ (800cf04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ce9c:	430b      	orrs	r3, r1
 800ce9e:	6593      	str	r3, [r2, #88]	@ 0x58
 800cea0:	e003      	b.n	800ceaa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cea2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cea6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ceaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ceae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800ceb6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ceba:	2300      	movs	r3, #0
 800cebc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800cec0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800cec4:	460b      	mov	r3, r1
 800cec6:	4313      	orrs	r3, r2
 800cec8:	d056      	beq.n	800cf78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800ceca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cece:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ced2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ced6:	d038      	beq.n	800cf4a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ced8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cedc:	d831      	bhi.n	800cf42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cede:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800cee2:	d034      	beq.n	800cf4e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800cee4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800cee8:	d82b      	bhi.n	800cf42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ceea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ceee:	d01d      	beq.n	800cf2c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800cef0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cef4:	d825      	bhi.n	800cf42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d006      	beq.n	800cf08 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800cefa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cefe:	d00a      	beq.n	800cf16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800cf00:	e01f      	b.n	800cf42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cf02:	bf00      	nop
 800cf04:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cf08:	4ba2      	ldr	r3, [pc, #648]	@ (800d194 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cf0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf0c:	4aa1      	ldr	r2, [pc, #644]	@ (800d194 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cf0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cf12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cf14:	e01c      	b.n	800cf50 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cf16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cf1a:	3308      	adds	r3, #8
 800cf1c:	2100      	movs	r1, #0
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f001 f85e 	bl	800dfe0 <RCCEx_PLL2_Config>
 800cf24:	4603      	mov	r3, r0
 800cf26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800cf2a:	e011      	b.n	800cf50 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cf2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cf30:	3328      	adds	r3, #40	@ 0x28
 800cf32:	2100      	movs	r1, #0
 800cf34:	4618      	mov	r0, r3
 800cf36:	f001 f905 	bl	800e144 <RCCEx_PLL3_Config>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cf40:	e006      	b.n	800cf50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800cf42:	2301      	movs	r3, #1
 800cf44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cf48:	e002      	b.n	800cf50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800cf4a:	bf00      	nop
 800cf4c:	e000      	b.n	800cf50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800cf4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cf50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d10b      	bne.n	800cf70 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800cf58:	4b8e      	ldr	r3, [pc, #568]	@ (800d194 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cf5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf5c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800cf60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cf64:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800cf68:	4a8a      	ldr	r2, [pc, #552]	@ (800d194 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cf6a:	430b      	orrs	r3, r1
 800cf6c:	6593      	str	r3, [r2, #88]	@ 0x58
 800cf6e:	e003      	b.n	800cf78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cf74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800cf78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cf7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf80:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800cf84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800cf88:	2300      	movs	r3, #0
 800cf8a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cf8e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800cf92:	460b      	mov	r3, r1
 800cf94:	4313      	orrs	r3, r2
 800cf96:	d03a      	beq.n	800d00e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800cf98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cf9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cf9e:	2b30      	cmp	r3, #48	@ 0x30
 800cfa0:	d01f      	beq.n	800cfe2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800cfa2:	2b30      	cmp	r3, #48	@ 0x30
 800cfa4:	d819      	bhi.n	800cfda <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800cfa6:	2b20      	cmp	r3, #32
 800cfa8:	d00c      	beq.n	800cfc4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800cfaa:	2b20      	cmp	r3, #32
 800cfac:	d815      	bhi.n	800cfda <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d019      	beq.n	800cfe6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800cfb2:	2b10      	cmp	r3, #16
 800cfb4:	d111      	bne.n	800cfda <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cfb6:	4b77      	ldr	r3, [pc, #476]	@ (800d194 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cfb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfba:	4a76      	ldr	r2, [pc, #472]	@ (800d194 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cfbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cfc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800cfc2:	e011      	b.n	800cfe8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cfc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cfc8:	3308      	adds	r3, #8
 800cfca:	2102      	movs	r1, #2
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f001 f807 	bl	800dfe0 <RCCEx_PLL2_Config>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800cfd8:	e006      	b.n	800cfe8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800cfda:	2301      	movs	r3, #1
 800cfdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cfe0:	e002      	b.n	800cfe8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800cfe2:	bf00      	nop
 800cfe4:	e000      	b.n	800cfe8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800cfe6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cfe8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d10a      	bne.n	800d006 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800cff0:	4b68      	ldr	r3, [pc, #416]	@ (800d194 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cff2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cff4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800cff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cffe:	4a65      	ldr	r2, [pc, #404]	@ (800d194 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d000:	430b      	orrs	r3, r1
 800d002:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d004:	e003      	b.n	800d00e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d006:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d00a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800d00e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d016:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800d01a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d01e:	2300      	movs	r3, #0
 800d020:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d024:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800d028:	460b      	mov	r3, r1
 800d02a:	4313      	orrs	r3, r2
 800d02c:	d051      	beq.n	800d0d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800d02e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d032:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d034:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d038:	d035      	beq.n	800d0a6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800d03a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d03e:	d82e      	bhi.n	800d09e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d040:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d044:	d031      	beq.n	800d0aa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800d046:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d04a:	d828      	bhi.n	800d09e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d04c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d050:	d01a      	beq.n	800d088 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800d052:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d056:	d822      	bhi.n	800d09e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d003      	beq.n	800d064 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800d05c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d060:	d007      	beq.n	800d072 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800d062:	e01c      	b.n	800d09e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d064:	4b4b      	ldr	r3, [pc, #300]	@ (800d194 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d068:	4a4a      	ldr	r2, [pc, #296]	@ (800d194 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d06a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d06e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d070:	e01c      	b.n	800d0ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d076:	3308      	adds	r3, #8
 800d078:	2100      	movs	r1, #0
 800d07a:	4618      	mov	r0, r3
 800d07c:	f000 ffb0 	bl	800dfe0 <RCCEx_PLL2_Config>
 800d080:	4603      	mov	r3, r0
 800d082:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d086:	e011      	b.n	800d0ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d08c:	3328      	adds	r3, #40	@ 0x28
 800d08e:	2100      	movs	r1, #0
 800d090:	4618      	mov	r0, r3
 800d092:	f001 f857 	bl	800e144 <RCCEx_PLL3_Config>
 800d096:	4603      	mov	r3, r0
 800d098:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d09c:	e006      	b.n	800d0ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d09e:	2301      	movs	r3, #1
 800d0a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d0a4:	e002      	b.n	800d0ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800d0a6:	bf00      	nop
 800d0a8:	e000      	b.n	800d0ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800d0aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d0ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d10a      	bne.n	800d0ca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800d0b4:	4b37      	ldr	r3, [pc, #220]	@ (800d194 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d0b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d0b8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800d0bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d0c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d0c2:	4a34      	ldr	r2, [pc, #208]	@ (800d194 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d0c4:	430b      	orrs	r3, r1
 800d0c6:	6513      	str	r3, [r2, #80]	@ 0x50
 800d0c8:	e003      	b.n	800d0d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d0ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800d0d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0da:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800d0de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d0e8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800d0ec:	460b      	mov	r3, r1
 800d0ee:	4313      	orrs	r3, r2
 800d0f0:	d056      	beq.n	800d1a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800d0f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d0f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d0fc:	d033      	beq.n	800d166 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800d0fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d102:	d82c      	bhi.n	800d15e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d104:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d108:	d02f      	beq.n	800d16a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800d10a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d10e:	d826      	bhi.n	800d15e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d110:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d114:	d02b      	beq.n	800d16e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800d116:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d11a:	d820      	bhi.n	800d15e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d11c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d120:	d012      	beq.n	800d148 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800d122:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d126:	d81a      	bhi.n	800d15e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d022      	beq.n	800d172 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800d12c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d130:	d115      	bne.n	800d15e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d136:	3308      	adds	r3, #8
 800d138:	2101      	movs	r1, #1
 800d13a:	4618      	mov	r0, r3
 800d13c:	f000 ff50 	bl	800dfe0 <RCCEx_PLL2_Config>
 800d140:	4603      	mov	r3, r0
 800d142:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d146:	e015      	b.n	800d174 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d14c:	3328      	adds	r3, #40	@ 0x28
 800d14e:	2101      	movs	r1, #1
 800d150:	4618      	mov	r0, r3
 800d152:	f000 fff7 	bl	800e144 <RCCEx_PLL3_Config>
 800d156:	4603      	mov	r3, r0
 800d158:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d15c:	e00a      	b.n	800d174 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d15e:	2301      	movs	r3, #1
 800d160:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d164:	e006      	b.n	800d174 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d166:	bf00      	nop
 800d168:	e004      	b.n	800d174 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d16a:	bf00      	nop
 800d16c:	e002      	b.n	800d174 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d16e:	bf00      	nop
 800d170:	e000      	b.n	800d174 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d172:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d174:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d10d      	bne.n	800d198 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800d17c:	4b05      	ldr	r3, [pc, #20]	@ (800d194 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d17e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d180:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800d184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d188:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d18a:	4a02      	ldr	r2, [pc, #8]	@ (800d194 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d18c:	430b      	orrs	r3, r1
 800d18e:	6513      	str	r3, [r2, #80]	@ 0x50
 800d190:	e006      	b.n	800d1a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800d192:	bf00      	nop
 800d194:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d198:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d19c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800d1a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1a8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800d1ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d1b6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800d1ba:	460b      	mov	r3, r1
 800d1bc:	4313      	orrs	r3, r2
 800d1be:	d055      	beq.n	800d26c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800d1c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d1c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d1c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d1cc:	d033      	beq.n	800d236 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800d1ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d1d2:	d82c      	bhi.n	800d22e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d1d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d1d8:	d02f      	beq.n	800d23a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800d1da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d1de:	d826      	bhi.n	800d22e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d1e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d1e4:	d02b      	beq.n	800d23e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800d1e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d1ea:	d820      	bhi.n	800d22e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d1ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d1f0:	d012      	beq.n	800d218 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800d1f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d1f6:	d81a      	bhi.n	800d22e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d022      	beq.n	800d242 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800d1fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d200:	d115      	bne.n	800d22e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d206:	3308      	adds	r3, #8
 800d208:	2101      	movs	r1, #1
 800d20a:	4618      	mov	r0, r3
 800d20c:	f000 fee8 	bl	800dfe0 <RCCEx_PLL2_Config>
 800d210:	4603      	mov	r3, r0
 800d212:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d216:	e015      	b.n	800d244 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d21c:	3328      	adds	r3, #40	@ 0x28
 800d21e:	2101      	movs	r1, #1
 800d220:	4618      	mov	r0, r3
 800d222:	f000 ff8f 	bl	800e144 <RCCEx_PLL3_Config>
 800d226:	4603      	mov	r3, r0
 800d228:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d22c:	e00a      	b.n	800d244 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800d22e:	2301      	movs	r3, #1
 800d230:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d234:	e006      	b.n	800d244 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d236:	bf00      	nop
 800d238:	e004      	b.n	800d244 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d23a:	bf00      	nop
 800d23c:	e002      	b.n	800d244 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d23e:	bf00      	nop
 800d240:	e000      	b.n	800d244 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d242:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d244:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d10b      	bne.n	800d264 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800d24c:	4ba3      	ldr	r3, [pc, #652]	@ (800d4dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d24e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d250:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800d254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d258:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d25c:	4a9f      	ldr	r2, [pc, #636]	@ (800d4dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d25e:	430b      	orrs	r3, r1
 800d260:	6593      	str	r3, [r2, #88]	@ 0x58
 800d262:	e003      	b.n	800d26c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d264:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d268:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d26c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d274:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800d278:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d27c:	2300      	movs	r3, #0
 800d27e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800d282:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d286:	460b      	mov	r3, r1
 800d288:	4313      	orrs	r3, r2
 800d28a:	d037      	beq.n	800d2fc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800d28c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d292:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d296:	d00e      	beq.n	800d2b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800d298:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d29c:	d816      	bhi.n	800d2cc <HAL_RCCEx_PeriphCLKConfig+0x700>
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d018      	beq.n	800d2d4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800d2a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d2a6:	d111      	bne.n	800d2cc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d2a8:	4b8c      	ldr	r3, [pc, #560]	@ (800d4dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d2aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2ac:	4a8b      	ldr	r2, [pc, #556]	@ (800d4dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d2ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d2b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d2b4:	e00f      	b.n	800d2d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d2b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d2ba:	3308      	adds	r3, #8
 800d2bc:	2101      	movs	r1, #1
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f000 fe8e 	bl	800dfe0 <RCCEx_PLL2_Config>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d2ca:	e004      	b.n	800d2d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d2d2:	e000      	b.n	800d2d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800d2d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d2d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d10a      	bne.n	800d2f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d2de:	4b7f      	ldr	r3, [pc, #508]	@ (800d4dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d2e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d2e2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800d2e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d2ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d2ec:	4a7b      	ldr	r2, [pc, #492]	@ (800d4dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d2ee:	430b      	orrs	r3, r1
 800d2f0:	6513      	str	r3, [r2, #80]	@ 0x50
 800d2f2:	e003      	b.n	800d2fc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d2f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800d2fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d304:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800d308:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d30c:	2300      	movs	r3, #0
 800d30e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d312:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800d316:	460b      	mov	r3, r1
 800d318:	4313      	orrs	r3, r2
 800d31a:	d039      	beq.n	800d390 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800d31c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d320:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d322:	2b03      	cmp	r3, #3
 800d324:	d81c      	bhi.n	800d360 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800d326:	a201      	add	r2, pc, #4	@ (adr r2, 800d32c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800d328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d32c:	0800d369 	.word	0x0800d369
 800d330:	0800d33d 	.word	0x0800d33d
 800d334:	0800d34b 	.word	0x0800d34b
 800d338:	0800d369 	.word	0x0800d369
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d33c:	4b67      	ldr	r3, [pc, #412]	@ (800d4dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d33e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d340:	4a66      	ldr	r2, [pc, #408]	@ (800d4dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d342:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d346:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d348:	e00f      	b.n	800d36a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d34a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d34e:	3308      	adds	r3, #8
 800d350:	2102      	movs	r1, #2
 800d352:	4618      	mov	r0, r3
 800d354:	f000 fe44 	bl	800dfe0 <RCCEx_PLL2_Config>
 800d358:	4603      	mov	r3, r0
 800d35a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d35e:	e004      	b.n	800d36a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d360:	2301      	movs	r3, #1
 800d362:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d366:	e000      	b.n	800d36a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800d368:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d36a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d10a      	bne.n	800d388 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800d372:	4b5a      	ldr	r3, [pc, #360]	@ (800d4dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d376:	f023 0103 	bic.w	r1, r3, #3
 800d37a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d37e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d380:	4a56      	ldr	r2, [pc, #344]	@ (800d4dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d382:	430b      	orrs	r3, r1
 800d384:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d386:	e003      	b.n	800d390 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d388:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d38c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d398:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800d39c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d3a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800d3aa:	460b      	mov	r3, r1
 800d3ac:	4313      	orrs	r3, r2
 800d3ae:	f000 809f 	beq.w	800d4f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d3b2:	4b4b      	ldr	r3, [pc, #300]	@ (800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	4a4a      	ldr	r2, [pc, #296]	@ (800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d3b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d3bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d3be:	f7fc ff7b 	bl	800a2b8 <HAL_GetTick>
 800d3c2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d3c6:	e00b      	b.n	800d3e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d3c8:	f7fc ff76 	bl	800a2b8 <HAL_GetTick>
 800d3cc:	4602      	mov	r2, r0
 800d3ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800d3d2:	1ad3      	subs	r3, r2, r3
 800d3d4:	2b64      	cmp	r3, #100	@ 0x64
 800d3d6:	d903      	bls.n	800d3e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800d3d8:	2303      	movs	r3, #3
 800d3da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d3de:	e005      	b.n	800d3ec <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d3e0:	4b3f      	ldr	r3, [pc, #252]	@ (800d4e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d0ed      	beq.n	800d3c8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800d3ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d179      	bne.n	800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800d3f4:	4b39      	ldr	r3, [pc, #228]	@ (800d4dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d3f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d3f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d400:	4053      	eors	r3, r2
 800d402:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d406:	2b00      	cmp	r3, #0
 800d408:	d015      	beq.n	800d436 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d40a:	4b34      	ldr	r3, [pc, #208]	@ (800d4dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d40c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d40e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d412:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d416:	4b31      	ldr	r3, [pc, #196]	@ (800d4dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d41a:	4a30      	ldr	r2, [pc, #192]	@ (800d4dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d41c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d420:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d422:	4b2e      	ldr	r3, [pc, #184]	@ (800d4dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d426:	4a2d      	ldr	r2, [pc, #180]	@ (800d4dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d428:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d42c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800d42e:	4a2b      	ldr	r2, [pc, #172]	@ (800d4dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d430:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d434:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800d436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d43a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d43e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d442:	d118      	bne.n	800d476 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d444:	f7fc ff38 	bl	800a2b8 <HAL_GetTick>
 800d448:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d44c:	e00d      	b.n	800d46a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d44e:	f7fc ff33 	bl	800a2b8 <HAL_GetTick>
 800d452:	4602      	mov	r2, r0
 800d454:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800d458:	1ad2      	subs	r2, r2, r3
 800d45a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800d45e:	429a      	cmp	r2, r3
 800d460:	d903      	bls.n	800d46a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800d462:	2303      	movs	r3, #3
 800d464:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800d468:	e005      	b.n	800d476 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d46a:	4b1c      	ldr	r3, [pc, #112]	@ (800d4dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d46c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d46e:	f003 0302 	and.w	r3, r3, #2
 800d472:	2b00      	cmp	r3, #0
 800d474:	d0eb      	beq.n	800d44e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800d476:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d129      	bne.n	800d4d2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d47e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d482:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d486:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d48a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d48e:	d10e      	bne.n	800d4ae <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800d490:	4b12      	ldr	r3, [pc, #72]	@ (800d4dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d492:	691b      	ldr	r3, [r3, #16]
 800d494:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800d498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d49c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d4a0:	091a      	lsrs	r2, r3, #4
 800d4a2:	4b10      	ldr	r3, [pc, #64]	@ (800d4e4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800d4a4:	4013      	ands	r3, r2
 800d4a6:	4a0d      	ldr	r2, [pc, #52]	@ (800d4dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d4a8:	430b      	orrs	r3, r1
 800d4aa:	6113      	str	r3, [r2, #16]
 800d4ac:	e005      	b.n	800d4ba <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800d4ae:	4b0b      	ldr	r3, [pc, #44]	@ (800d4dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d4b0:	691b      	ldr	r3, [r3, #16]
 800d4b2:	4a0a      	ldr	r2, [pc, #40]	@ (800d4dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d4b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d4b8:	6113      	str	r3, [r2, #16]
 800d4ba:	4b08      	ldr	r3, [pc, #32]	@ (800d4dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d4bc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800d4be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d4c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d4c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d4ca:	4a04      	ldr	r2, [pc, #16]	@ (800d4dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d4cc:	430b      	orrs	r3, r1
 800d4ce:	6713      	str	r3, [r2, #112]	@ 0x70
 800d4d0:	e00e      	b.n	800d4f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d4d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d4d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800d4da:	e009      	b.n	800d4f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800d4dc:	58024400 	.word	0x58024400
 800d4e0:	58024800 	.word	0x58024800
 800d4e4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d4e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d4ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800d4f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f8:	f002 0301 	and.w	r3, r2, #1
 800d4fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d500:	2300      	movs	r3, #0
 800d502:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d506:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d50a:	460b      	mov	r3, r1
 800d50c:	4313      	orrs	r3, r2
 800d50e:	f000 8089 	beq.w	800d624 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800d512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d516:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d518:	2b28      	cmp	r3, #40	@ 0x28
 800d51a:	d86b      	bhi.n	800d5f4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800d51c:	a201      	add	r2, pc, #4	@ (adr r2, 800d524 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800d51e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d522:	bf00      	nop
 800d524:	0800d5fd 	.word	0x0800d5fd
 800d528:	0800d5f5 	.word	0x0800d5f5
 800d52c:	0800d5f5 	.word	0x0800d5f5
 800d530:	0800d5f5 	.word	0x0800d5f5
 800d534:	0800d5f5 	.word	0x0800d5f5
 800d538:	0800d5f5 	.word	0x0800d5f5
 800d53c:	0800d5f5 	.word	0x0800d5f5
 800d540:	0800d5f5 	.word	0x0800d5f5
 800d544:	0800d5c9 	.word	0x0800d5c9
 800d548:	0800d5f5 	.word	0x0800d5f5
 800d54c:	0800d5f5 	.word	0x0800d5f5
 800d550:	0800d5f5 	.word	0x0800d5f5
 800d554:	0800d5f5 	.word	0x0800d5f5
 800d558:	0800d5f5 	.word	0x0800d5f5
 800d55c:	0800d5f5 	.word	0x0800d5f5
 800d560:	0800d5f5 	.word	0x0800d5f5
 800d564:	0800d5df 	.word	0x0800d5df
 800d568:	0800d5f5 	.word	0x0800d5f5
 800d56c:	0800d5f5 	.word	0x0800d5f5
 800d570:	0800d5f5 	.word	0x0800d5f5
 800d574:	0800d5f5 	.word	0x0800d5f5
 800d578:	0800d5f5 	.word	0x0800d5f5
 800d57c:	0800d5f5 	.word	0x0800d5f5
 800d580:	0800d5f5 	.word	0x0800d5f5
 800d584:	0800d5fd 	.word	0x0800d5fd
 800d588:	0800d5f5 	.word	0x0800d5f5
 800d58c:	0800d5f5 	.word	0x0800d5f5
 800d590:	0800d5f5 	.word	0x0800d5f5
 800d594:	0800d5f5 	.word	0x0800d5f5
 800d598:	0800d5f5 	.word	0x0800d5f5
 800d59c:	0800d5f5 	.word	0x0800d5f5
 800d5a0:	0800d5f5 	.word	0x0800d5f5
 800d5a4:	0800d5fd 	.word	0x0800d5fd
 800d5a8:	0800d5f5 	.word	0x0800d5f5
 800d5ac:	0800d5f5 	.word	0x0800d5f5
 800d5b0:	0800d5f5 	.word	0x0800d5f5
 800d5b4:	0800d5f5 	.word	0x0800d5f5
 800d5b8:	0800d5f5 	.word	0x0800d5f5
 800d5bc:	0800d5f5 	.word	0x0800d5f5
 800d5c0:	0800d5f5 	.word	0x0800d5f5
 800d5c4:	0800d5fd 	.word	0x0800d5fd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d5c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d5cc:	3308      	adds	r3, #8
 800d5ce:	2101      	movs	r1, #1
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f000 fd05 	bl	800dfe0 <RCCEx_PLL2_Config>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d5dc:	e00f      	b.n	800d5fe <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d5de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d5e2:	3328      	adds	r3, #40	@ 0x28
 800d5e4:	2101      	movs	r1, #1
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f000 fdac 	bl	800e144 <RCCEx_PLL3_Config>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d5f2:	e004      	b.n	800d5fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d5fa:	e000      	b.n	800d5fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800d5fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d5fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d602:	2b00      	cmp	r3, #0
 800d604:	d10a      	bne.n	800d61c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800d606:	4bbf      	ldr	r3, [pc, #764]	@ (800d904 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d60a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800d60e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d612:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d614:	4abb      	ldr	r2, [pc, #748]	@ (800d904 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d616:	430b      	orrs	r3, r1
 800d618:	6553      	str	r3, [r2, #84]	@ 0x54
 800d61a:	e003      	b.n	800d624 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d61c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d620:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800d624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d62c:	f002 0302 	and.w	r3, r2, #2
 800d630:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d634:	2300      	movs	r3, #0
 800d636:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800d63a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800d63e:	460b      	mov	r3, r1
 800d640:	4313      	orrs	r3, r2
 800d642:	d041      	beq.n	800d6c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800d644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d648:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d64a:	2b05      	cmp	r3, #5
 800d64c:	d824      	bhi.n	800d698 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800d64e:	a201      	add	r2, pc, #4	@ (adr r2, 800d654 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800d650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d654:	0800d6a1 	.word	0x0800d6a1
 800d658:	0800d66d 	.word	0x0800d66d
 800d65c:	0800d683 	.word	0x0800d683
 800d660:	0800d6a1 	.word	0x0800d6a1
 800d664:	0800d6a1 	.word	0x0800d6a1
 800d668:	0800d6a1 	.word	0x0800d6a1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d66c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d670:	3308      	adds	r3, #8
 800d672:	2101      	movs	r1, #1
 800d674:	4618      	mov	r0, r3
 800d676:	f000 fcb3 	bl	800dfe0 <RCCEx_PLL2_Config>
 800d67a:	4603      	mov	r3, r0
 800d67c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d680:	e00f      	b.n	800d6a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d686:	3328      	adds	r3, #40	@ 0x28
 800d688:	2101      	movs	r1, #1
 800d68a:	4618      	mov	r0, r3
 800d68c:	f000 fd5a 	bl	800e144 <RCCEx_PLL3_Config>
 800d690:	4603      	mov	r3, r0
 800d692:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d696:	e004      	b.n	800d6a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d698:	2301      	movs	r3, #1
 800d69a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d69e:	e000      	b.n	800d6a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800d6a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d6a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d10a      	bne.n	800d6c0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800d6aa:	4b96      	ldr	r3, [pc, #600]	@ (800d904 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d6ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6ae:	f023 0107 	bic.w	r1, r3, #7
 800d6b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d6b8:	4a92      	ldr	r2, [pc, #584]	@ (800d904 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d6ba:	430b      	orrs	r3, r1
 800d6bc:	6553      	str	r3, [r2, #84]	@ 0x54
 800d6be:	e003      	b.n	800d6c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d6c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d6c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d6c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d0:	f002 0304 	and.w	r3, r2, #4
 800d6d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d6d8:	2300      	movs	r3, #0
 800d6da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d6de:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800d6e2:	460b      	mov	r3, r1
 800d6e4:	4313      	orrs	r3, r2
 800d6e6:	d044      	beq.n	800d772 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d6e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d6f0:	2b05      	cmp	r3, #5
 800d6f2:	d825      	bhi.n	800d740 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800d6f4:	a201      	add	r2, pc, #4	@ (adr r2, 800d6fc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800d6f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6fa:	bf00      	nop
 800d6fc:	0800d749 	.word	0x0800d749
 800d700:	0800d715 	.word	0x0800d715
 800d704:	0800d72b 	.word	0x0800d72b
 800d708:	0800d749 	.word	0x0800d749
 800d70c:	0800d749 	.word	0x0800d749
 800d710:	0800d749 	.word	0x0800d749
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d718:	3308      	adds	r3, #8
 800d71a:	2101      	movs	r1, #1
 800d71c:	4618      	mov	r0, r3
 800d71e:	f000 fc5f 	bl	800dfe0 <RCCEx_PLL2_Config>
 800d722:	4603      	mov	r3, r0
 800d724:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d728:	e00f      	b.n	800d74a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d72a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d72e:	3328      	adds	r3, #40	@ 0x28
 800d730:	2101      	movs	r1, #1
 800d732:	4618      	mov	r0, r3
 800d734:	f000 fd06 	bl	800e144 <RCCEx_PLL3_Config>
 800d738:	4603      	mov	r3, r0
 800d73a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d73e:	e004      	b.n	800d74a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d740:	2301      	movs	r3, #1
 800d742:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d746:	e000      	b.n	800d74a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800d748:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d74a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d10b      	bne.n	800d76a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d752:	4b6c      	ldr	r3, [pc, #432]	@ (800d904 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d756:	f023 0107 	bic.w	r1, r3, #7
 800d75a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d75e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d762:	4a68      	ldr	r2, [pc, #416]	@ (800d904 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d764:	430b      	orrs	r3, r1
 800d766:	6593      	str	r3, [r2, #88]	@ 0x58
 800d768:	e003      	b.n	800d772 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d76a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d76e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d77a:	f002 0320 	and.w	r3, r2, #32
 800d77e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d782:	2300      	movs	r3, #0
 800d784:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d788:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d78c:	460b      	mov	r3, r1
 800d78e:	4313      	orrs	r3, r2
 800d790:	d055      	beq.n	800d83e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d79a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d79e:	d033      	beq.n	800d808 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800d7a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d7a4:	d82c      	bhi.n	800d800 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d7a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d7aa:	d02f      	beq.n	800d80c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800d7ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d7b0:	d826      	bhi.n	800d800 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d7b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d7b6:	d02b      	beq.n	800d810 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800d7b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d7bc:	d820      	bhi.n	800d800 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d7be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d7c2:	d012      	beq.n	800d7ea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800d7c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d7c8:	d81a      	bhi.n	800d800 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d022      	beq.n	800d814 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800d7ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d7d2:	d115      	bne.n	800d800 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d7d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7d8:	3308      	adds	r3, #8
 800d7da:	2100      	movs	r1, #0
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f000 fbff 	bl	800dfe0 <RCCEx_PLL2_Config>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d7e8:	e015      	b.n	800d816 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d7ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7ee:	3328      	adds	r3, #40	@ 0x28
 800d7f0:	2102      	movs	r1, #2
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f000 fca6 	bl	800e144 <RCCEx_PLL3_Config>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d7fe:	e00a      	b.n	800d816 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d800:	2301      	movs	r3, #1
 800d802:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d806:	e006      	b.n	800d816 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d808:	bf00      	nop
 800d80a:	e004      	b.n	800d816 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d80c:	bf00      	nop
 800d80e:	e002      	b.n	800d816 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d810:	bf00      	nop
 800d812:	e000      	b.n	800d816 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d814:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d816:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d10b      	bne.n	800d836 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d81e:	4b39      	ldr	r3, [pc, #228]	@ (800d904 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d822:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800d826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d82a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d82e:	4a35      	ldr	r2, [pc, #212]	@ (800d904 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d830:	430b      	orrs	r3, r1
 800d832:	6553      	str	r3, [r2, #84]	@ 0x54
 800d834:	e003      	b.n	800d83e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d836:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d83a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d83e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d846:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800d84a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d84e:	2300      	movs	r3, #0
 800d850:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d854:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800d858:	460b      	mov	r3, r1
 800d85a:	4313      	orrs	r3, r2
 800d85c:	d058      	beq.n	800d910 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d85e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d862:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d866:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800d86a:	d033      	beq.n	800d8d4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800d86c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800d870:	d82c      	bhi.n	800d8cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d872:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d876:	d02f      	beq.n	800d8d8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800d878:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d87c:	d826      	bhi.n	800d8cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d87e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d882:	d02b      	beq.n	800d8dc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800d884:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d888:	d820      	bhi.n	800d8cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d88a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d88e:	d012      	beq.n	800d8b6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800d890:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d894:	d81a      	bhi.n	800d8cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d896:	2b00      	cmp	r3, #0
 800d898:	d022      	beq.n	800d8e0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800d89a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d89e:	d115      	bne.n	800d8cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d8a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8a4:	3308      	adds	r3, #8
 800d8a6:	2100      	movs	r1, #0
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f000 fb99 	bl	800dfe0 <RCCEx_PLL2_Config>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d8b4:	e015      	b.n	800d8e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d8b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8ba:	3328      	adds	r3, #40	@ 0x28
 800d8bc:	2102      	movs	r1, #2
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f000 fc40 	bl	800e144 <RCCEx_PLL3_Config>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d8ca:	e00a      	b.n	800d8e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d8d2:	e006      	b.n	800d8e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d8d4:	bf00      	nop
 800d8d6:	e004      	b.n	800d8e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d8d8:	bf00      	nop
 800d8da:	e002      	b.n	800d8e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d8dc:	bf00      	nop
 800d8de:	e000      	b.n	800d8e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d8e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d8e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d10e      	bne.n	800d908 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d8ea:	4b06      	ldr	r3, [pc, #24]	@ (800d904 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d8ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d8ee:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800d8f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d8fa:	4a02      	ldr	r2, [pc, #8]	@ (800d904 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d8fc:	430b      	orrs	r3, r1
 800d8fe:	6593      	str	r3, [r2, #88]	@ 0x58
 800d900:	e006      	b.n	800d910 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800d902:	bf00      	nop
 800d904:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d908:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d90c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d918:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800d91c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d920:	2300      	movs	r3, #0
 800d922:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d926:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800d92a:	460b      	mov	r3, r1
 800d92c:	4313      	orrs	r3, r2
 800d92e:	d055      	beq.n	800d9dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d934:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d938:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800d93c:	d033      	beq.n	800d9a6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800d93e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800d942:	d82c      	bhi.n	800d99e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d944:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d948:	d02f      	beq.n	800d9aa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800d94a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d94e:	d826      	bhi.n	800d99e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d950:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800d954:	d02b      	beq.n	800d9ae <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800d956:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800d95a:	d820      	bhi.n	800d99e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d95c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d960:	d012      	beq.n	800d988 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800d962:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d966:	d81a      	bhi.n	800d99e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d022      	beq.n	800d9b2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800d96c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d970:	d115      	bne.n	800d99e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d976:	3308      	adds	r3, #8
 800d978:	2100      	movs	r1, #0
 800d97a:	4618      	mov	r0, r3
 800d97c:	f000 fb30 	bl	800dfe0 <RCCEx_PLL2_Config>
 800d980:	4603      	mov	r3, r0
 800d982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d986:	e015      	b.n	800d9b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d98c:	3328      	adds	r3, #40	@ 0x28
 800d98e:	2102      	movs	r1, #2
 800d990:	4618      	mov	r0, r3
 800d992:	f000 fbd7 	bl	800e144 <RCCEx_PLL3_Config>
 800d996:	4603      	mov	r3, r0
 800d998:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d99c:	e00a      	b.n	800d9b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d99e:	2301      	movs	r3, #1
 800d9a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d9a4:	e006      	b.n	800d9b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d9a6:	bf00      	nop
 800d9a8:	e004      	b.n	800d9b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d9aa:	bf00      	nop
 800d9ac:	e002      	b.n	800d9b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d9ae:	bf00      	nop
 800d9b0:	e000      	b.n	800d9b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d9b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d9b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d10b      	bne.n	800d9d4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d9bc:	4ba1      	ldr	r3, [pc, #644]	@ (800dc44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d9be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d9c0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800d9c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d9cc:	4a9d      	ldr	r2, [pc, #628]	@ (800dc44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d9ce:	430b      	orrs	r3, r1
 800d9d0:	6593      	str	r3, [r2, #88]	@ 0x58
 800d9d2:	e003      	b.n	800d9dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d9d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800d9dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e4:	f002 0308 	and.w	r3, r2, #8
 800d9e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d9f2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800d9f6:	460b      	mov	r3, r1
 800d9f8:	4313      	orrs	r3, r2
 800d9fa:	d01e      	beq.n	800da3a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800d9fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800da04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800da08:	d10c      	bne.n	800da24 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800da0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da0e:	3328      	adds	r3, #40	@ 0x28
 800da10:	2102      	movs	r1, #2
 800da12:	4618      	mov	r0, r3
 800da14:	f000 fb96 	bl	800e144 <RCCEx_PLL3_Config>
 800da18:	4603      	mov	r3, r0
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d002      	beq.n	800da24 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800da1e:	2301      	movs	r3, #1
 800da20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800da24:	4b87      	ldr	r3, [pc, #540]	@ (800dc44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800da26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da28:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800da2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800da34:	4a83      	ldr	r2, [pc, #524]	@ (800dc44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800da36:	430b      	orrs	r3, r1
 800da38:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800da3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da42:	f002 0310 	and.w	r3, r2, #16
 800da46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800da4a:	2300      	movs	r3, #0
 800da4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800da50:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800da54:	460b      	mov	r3, r1
 800da56:	4313      	orrs	r3, r2
 800da58:	d01e      	beq.n	800da98 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800da5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800da62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800da66:	d10c      	bne.n	800da82 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800da68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da6c:	3328      	adds	r3, #40	@ 0x28
 800da6e:	2102      	movs	r1, #2
 800da70:	4618      	mov	r0, r3
 800da72:	f000 fb67 	bl	800e144 <RCCEx_PLL3_Config>
 800da76:	4603      	mov	r3, r0
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d002      	beq.n	800da82 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800da7c:	2301      	movs	r3, #1
 800da7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800da82:	4b70      	ldr	r3, [pc, #448]	@ (800dc44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800da84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da86:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800da8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800da92:	4a6c      	ldr	r2, [pc, #432]	@ (800dc44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800da94:	430b      	orrs	r3, r1
 800da96:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800da98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800daa4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800daa8:	2300      	movs	r3, #0
 800daaa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800daae:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800dab2:	460b      	mov	r3, r1
 800dab4:	4313      	orrs	r3, r2
 800dab6:	d03e      	beq.n	800db36 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800dab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dabc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800dac0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dac4:	d022      	beq.n	800db0c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800dac6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800daca:	d81b      	bhi.n	800db04 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d003      	beq.n	800dad8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800dad0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dad4:	d00b      	beq.n	800daee <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800dad6:	e015      	b.n	800db04 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dadc:	3308      	adds	r3, #8
 800dade:	2100      	movs	r1, #0
 800dae0:	4618      	mov	r0, r3
 800dae2:	f000 fa7d 	bl	800dfe0 <RCCEx_PLL2_Config>
 800dae6:	4603      	mov	r3, r0
 800dae8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800daec:	e00f      	b.n	800db0e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800daee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800daf2:	3328      	adds	r3, #40	@ 0x28
 800daf4:	2102      	movs	r1, #2
 800daf6:	4618      	mov	r0, r3
 800daf8:	f000 fb24 	bl	800e144 <RCCEx_PLL3_Config>
 800dafc:	4603      	mov	r3, r0
 800dafe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800db02:	e004      	b.n	800db0e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800db04:	2301      	movs	r3, #1
 800db06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800db0a:	e000      	b.n	800db0e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800db0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800db0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800db12:	2b00      	cmp	r3, #0
 800db14:	d10b      	bne.n	800db2e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800db16:	4b4b      	ldr	r3, [pc, #300]	@ (800dc44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800db18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800db1a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800db1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800db26:	4a47      	ldr	r2, [pc, #284]	@ (800dc44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800db28:	430b      	orrs	r3, r1
 800db2a:	6593      	str	r3, [r2, #88]	@ 0x58
 800db2c:	e003      	b.n	800db36 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800db32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800db36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db3e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800db42:	67bb      	str	r3, [r7, #120]	@ 0x78
 800db44:	2300      	movs	r3, #0
 800db46:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800db48:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800db4c:	460b      	mov	r3, r1
 800db4e:	4313      	orrs	r3, r2
 800db50:	d03b      	beq.n	800dbca <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800db52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800db5a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800db5e:	d01f      	beq.n	800dba0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800db60:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800db64:	d818      	bhi.n	800db98 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800db66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800db6a:	d003      	beq.n	800db74 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800db6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800db70:	d007      	beq.n	800db82 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800db72:	e011      	b.n	800db98 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800db74:	4b33      	ldr	r3, [pc, #204]	@ (800dc44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800db76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db78:	4a32      	ldr	r2, [pc, #200]	@ (800dc44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800db7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800db7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800db80:	e00f      	b.n	800dba2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800db82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db86:	3328      	adds	r3, #40	@ 0x28
 800db88:	2101      	movs	r1, #1
 800db8a:	4618      	mov	r0, r3
 800db8c:	f000 fada 	bl	800e144 <RCCEx_PLL3_Config>
 800db90:	4603      	mov	r3, r0
 800db92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800db96:	e004      	b.n	800dba2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800db98:	2301      	movs	r3, #1
 800db9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800db9e:	e000      	b.n	800dba2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800dba0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dba2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d10b      	bne.n	800dbc2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800dbaa:	4b26      	ldr	r3, [pc, #152]	@ (800dc44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dbac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dbae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800dbb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dbba:	4a22      	ldr	r2, [pc, #136]	@ (800dc44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dbbc:	430b      	orrs	r3, r1
 800dbbe:	6553      	str	r3, [r2, #84]	@ 0x54
 800dbc0:	e003      	b.n	800dbca <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dbc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dbc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800dbca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800dbd6:	673b      	str	r3, [r7, #112]	@ 0x70
 800dbd8:	2300      	movs	r3, #0
 800dbda:	677b      	str	r3, [r7, #116]	@ 0x74
 800dbdc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800dbe0:	460b      	mov	r3, r1
 800dbe2:	4313      	orrs	r3, r2
 800dbe4:	d034      	beq.n	800dc50 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800dbe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d003      	beq.n	800dbf8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800dbf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dbf4:	d007      	beq.n	800dc06 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800dbf6:	e011      	b.n	800dc1c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dbf8:	4b12      	ldr	r3, [pc, #72]	@ (800dc44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dbfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbfc:	4a11      	ldr	r2, [pc, #68]	@ (800dc44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dbfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dc02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800dc04:	e00e      	b.n	800dc24 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dc06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc0a:	3308      	adds	r3, #8
 800dc0c:	2102      	movs	r1, #2
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f000 f9e6 	bl	800dfe0 <RCCEx_PLL2_Config>
 800dc14:	4603      	mov	r3, r0
 800dc16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800dc1a:	e003      	b.n	800dc24 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dc22:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dc24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d10d      	bne.n	800dc48 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800dc2c:	4b05      	ldr	r3, [pc, #20]	@ (800dc44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dc2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc30:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800dc34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc3a:	4a02      	ldr	r2, [pc, #8]	@ (800dc44 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dc3c:	430b      	orrs	r3, r1
 800dc3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800dc40:	e006      	b.n	800dc50 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800dc42:	bf00      	nop
 800dc44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800dc50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc58:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800dc5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dc5e:	2300      	movs	r3, #0
 800dc60:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800dc62:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800dc66:	460b      	mov	r3, r1
 800dc68:	4313      	orrs	r3, r2
 800dc6a:	d00c      	beq.n	800dc86 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800dc6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc70:	3328      	adds	r3, #40	@ 0x28
 800dc72:	2102      	movs	r1, #2
 800dc74:	4618      	mov	r0, r3
 800dc76:	f000 fa65 	bl	800e144 <RCCEx_PLL3_Config>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d002      	beq.n	800dc86 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800dc80:	2301      	movs	r3, #1
 800dc82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800dc86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc8e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800dc92:	663b      	str	r3, [r7, #96]	@ 0x60
 800dc94:	2300      	movs	r3, #0
 800dc96:	667b      	str	r3, [r7, #100]	@ 0x64
 800dc98:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800dc9c:	460b      	mov	r3, r1
 800dc9e:	4313      	orrs	r3, r2
 800dca0:	d038      	beq.n	800dd14 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800dca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dcaa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dcae:	d018      	beq.n	800dce2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800dcb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dcb4:	d811      	bhi.n	800dcda <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800dcb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dcba:	d014      	beq.n	800dce6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800dcbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dcc0:	d80b      	bhi.n	800dcda <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d011      	beq.n	800dcea <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800dcc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dcca:	d106      	bne.n	800dcda <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dccc:	4bc3      	ldr	r3, [pc, #780]	@ (800dfdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dcce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcd0:	4ac2      	ldr	r2, [pc, #776]	@ (800dfdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dcd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dcd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800dcd8:	e008      	b.n	800dcec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dcda:	2301      	movs	r3, #1
 800dcdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800dce0:	e004      	b.n	800dcec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800dce2:	bf00      	nop
 800dce4:	e002      	b.n	800dcec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800dce6:	bf00      	nop
 800dce8:	e000      	b.n	800dcec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800dcea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dcec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d10b      	bne.n	800dd0c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800dcf4:	4bb9      	ldr	r3, [pc, #740]	@ (800dfdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dcf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dcf8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800dcfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd04:	4ab5      	ldr	r2, [pc, #724]	@ (800dfdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd06:	430b      	orrs	r3, r1
 800dd08:	6553      	str	r3, [r2, #84]	@ 0x54
 800dd0a:	e003      	b.n	800dd14 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dd10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800dd14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd1c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800dd20:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dd22:	2300      	movs	r3, #0
 800dd24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dd26:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800dd2a:	460b      	mov	r3, r1
 800dd2c:	4313      	orrs	r3, r2
 800dd2e:	d009      	beq.n	800dd44 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800dd30:	4baa      	ldr	r3, [pc, #680]	@ (800dfdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd34:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800dd38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dd3e:	4aa7      	ldr	r2, [pc, #668]	@ (800dfdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd40:	430b      	orrs	r3, r1
 800dd42:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800dd44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd4c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800dd50:	653b      	str	r3, [r7, #80]	@ 0x50
 800dd52:	2300      	movs	r3, #0
 800dd54:	657b      	str	r3, [r7, #84]	@ 0x54
 800dd56:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800dd5a:	460b      	mov	r3, r1
 800dd5c:	4313      	orrs	r3, r2
 800dd5e:	d00a      	beq.n	800dd76 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800dd60:	4b9e      	ldr	r3, [pc, #632]	@ (800dfdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd62:	691b      	ldr	r3, [r3, #16]
 800dd64:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800dd68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd6c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800dd70:	4a9a      	ldr	r2, [pc, #616]	@ (800dfdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd72:	430b      	orrs	r3, r1
 800dd74:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800dd76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd7e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800dd82:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dd84:	2300      	movs	r3, #0
 800dd86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dd88:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800dd8c:	460b      	mov	r3, r1
 800dd8e:	4313      	orrs	r3, r2
 800dd90:	d009      	beq.n	800dda6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800dd92:	4b92      	ldr	r3, [pc, #584]	@ (800dfdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd96:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800dd9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dda0:	4a8e      	ldr	r2, [pc, #568]	@ (800dfdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dda2:	430b      	orrs	r3, r1
 800dda4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800dda6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ddaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddae:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800ddb2:	643b      	str	r3, [r7, #64]	@ 0x40
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	647b      	str	r3, [r7, #68]	@ 0x44
 800ddb8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800ddbc:	460b      	mov	r3, r1
 800ddbe:	4313      	orrs	r3, r2
 800ddc0:	d00e      	beq.n	800dde0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ddc2:	4b86      	ldr	r3, [pc, #536]	@ (800dfdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ddc4:	691b      	ldr	r3, [r3, #16]
 800ddc6:	4a85      	ldr	r2, [pc, #532]	@ (800dfdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ddc8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ddcc:	6113      	str	r3, [r2, #16]
 800ddce:	4b83      	ldr	r3, [pc, #524]	@ (800dfdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ddd0:	6919      	ldr	r1, [r3, #16]
 800ddd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ddd6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800ddda:	4a80      	ldr	r2, [pc, #512]	@ (800dfdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dddc:	430b      	orrs	r3, r1
 800ddde:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800dde0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dde4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dde8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800ddec:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ddee:	2300      	movs	r3, #0
 800ddf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ddf2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800ddf6:	460b      	mov	r3, r1
 800ddf8:	4313      	orrs	r3, r2
 800ddfa:	d009      	beq.n	800de10 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ddfc:	4b77      	ldr	r3, [pc, #476]	@ (800dfdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ddfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800de00:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800de04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800de0a:	4a74      	ldr	r2, [pc, #464]	@ (800dfdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800de0c:	430b      	orrs	r3, r1
 800de0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800de10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de18:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800de1c:	633b      	str	r3, [r7, #48]	@ 0x30
 800de1e:	2300      	movs	r3, #0
 800de20:	637b      	str	r3, [r7, #52]	@ 0x34
 800de22:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800de26:	460b      	mov	r3, r1
 800de28:	4313      	orrs	r3, r2
 800de2a:	d00a      	beq.n	800de42 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800de2c:	4b6b      	ldr	r3, [pc, #428]	@ (800dfdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800de2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800de30:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800de34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800de3c:	4a67      	ldr	r2, [pc, #412]	@ (800dfdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800de3e:	430b      	orrs	r3, r1
 800de40:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800de42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de4a:	2100      	movs	r1, #0
 800de4c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800de4e:	f003 0301 	and.w	r3, r3, #1
 800de52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800de54:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800de58:	460b      	mov	r3, r1
 800de5a:	4313      	orrs	r3, r2
 800de5c:	d011      	beq.n	800de82 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800de5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de62:	3308      	adds	r3, #8
 800de64:	2100      	movs	r1, #0
 800de66:	4618      	mov	r0, r3
 800de68:	f000 f8ba 	bl	800dfe0 <RCCEx_PLL2_Config>
 800de6c:	4603      	mov	r3, r0
 800de6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800de72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800de76:	2b00      	cmp	r3, #0
 800de78:	d003      	beq.n	800de82 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800de7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800de82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800de86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de8a:	2100      	movs	r1, #0
 800de8c:	6239      	str	r1, [r7, #32]
 800de8e:	f003 0302 	and.w	r3, r3, #2
 800de92:	627b      	str	r3, [r7, #36]	@ 0x24
 800de94:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800de98:	460b      	mov	r3, r1
 800de9a:	4313      	orrs	r3, r2
 800de9c:	d011      	beq.n	800dec2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800de9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dea2:	3308      	adds	r3, #8
 800dea4:	2101      	movs	r1, #1
 800dea6:	4618      	mov	r0, r3
 800dea8:	f000 f89a 	bl	800dfe0 <RCCEx_PLL2_Config>
 800deac:	4603      	mov	r3, r0
 800deae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800deb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d003      	beq.n	800dec2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800deba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800debe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800dec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deca:	2100      	movs	r1, #0
 800decc:	61b9      	str	r1, [r7, #24]
 800dece:	f003 0304 	and.w	r3, r3, #4
 800ded2:	61fb      	str	r3, [r7, #28]
 800ded4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ded8:	460b      	mov	r3, r1
 800deda:	4313      	orrs	r3, r2
 800dedc:	d011      	beq.n	800df02 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dee2:	3308      	adds	r3, #8
 800dee4:	2102      	movs	r1, #2
 800dee6:	4618      	mov	r0, r3
 800dee8:	f000 f87a 	bl	800dfe0 <RCCEx_PLL2_Config>
 800deec:	4603      	mov	r3, r0
 800deee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800def2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800def6:	2b00      	cmp	r3, #0
 800def8:	d003      	beq.n	800df02 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800defa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800defe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800df02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df0a:	2100      	movs	r1, #0
 800df0c:	6139      	str	r1, [r7, #16]
 800df0e:	f003 0308 	and.w	r3, r3, #8
 800df12:	617b      	str	r3, [r7, #20]
 800df14:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800df18:	460b      	mov	r3, r1
 800df1a:	4313      	orrs	r3, r2
 800df1c:	d011      	beq.n	800df42 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800df1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df22:	3328      	adds	r3, #40	@ 0x28
 800df24:	2100      	movs	r1, #0
 800df26:	4618      	mov	r0, r3
 800df28:	f000 f90c 	bl	800e144 <RCCEx_PLL3_Config>
 800df2c:	4603      	mov	r3, r0
 800df2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800df32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800df36:	2b00      	cmp	r3, #0
 800df38:	d003      	beq.n	800df42 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800df3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800df42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df4a:	2100      	movs	r1, #0
 800df4c:	60b9      	str	r1, [r7, #8]
 800df4e:	f003 0310 	and.w	r3, r3, #16
 800df52:	60fb      	str	r3, [r7, #12]
 800df54:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800df58:	460b      	mov	r3, r1
 800df5a:	4313      	orrs	r3, r2
 800df5c:	d011      	beq.n	800df82 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800df5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df62:	3328      	adds	r3, #40	@ 0x28
 800df64:	2101      	movs	r1, #1
 800df66:	4618      	mov	r0, r3
 800df68:	f000 f8ec 	bl	800e144 <RCCEx_PLL3_Config>
 800df6c:	4603      	mov	r3, r0
 800df6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800df72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800df76:	2b00      	cmp	r3, #0
 800df78:	d003      	beq.n	800df82 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800df7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800df82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800df86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df8a:	2100      	movs	r1, #0
 800df8c:	6039      	str	r1, [r7, #0]
 800df8e:	f003 0320 	and.w	r3, r3, #32
 800df92:	607b      	str	r3, [r7, #4]
 800df94:	e9d7 1200 	ldrd	r1, r2, [r7]
 800df98:	460b      	mov	r3, r1
 800df9a:	4313      	orrs	r3, r2
 800df9c:	d011      	beq.n	800dfc2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800df9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dfa2:	3328      	adds	r3, #40	@ 0x28
 800dfa4:	2102      	movs	r1, #2
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f000 f8cc 	bl	800e144 <RCCEx_PLL3_Config>
 800dfac:	4603      	mov	r3, r0
 800dfae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800dfb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d003      	beq.n	800dfc2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dfba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dfbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800dfc2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d101      	bne.n	800dfce <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	e000      	b.n	800dfd0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800dfce:	2301      	movs	r3, #1
}
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dfdc:	58024400 	.word	0x58024400

0800dfe0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b084      	sub	sp, #16
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
 800dfe8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dfea:	2300      	movs	r3, #0
 800dfec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dfee:	4b53      	ldr	r3, [pc, #332]	@ (800e13c <RCCEx_PLL2_Config+0x15c>)
 800dff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dff2:	f003 0303 	and.w	r3, r3, #3
 800dff6:	2b03      	cmp	r3, #3
 800dff8:	d101      	bne.n	800dffe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800dffa:	2301      	movs	r3, #1
 800dffc:	e099      	b.n	800e132 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800dffe:	4b4f      	ldr	r3, [pc, #316]	@ (800e13c <RCCEx_PLL2_Config+0x15c>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	4a4e      	ldr	r2, [pc, #312]	@ (800e13c <RCCEx_PLL2_Config+0x15c>)
 800e004:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e008:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e00a:	f7fc f955 	bl	800a2b8 <HAL_GetTick>
 800e00e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e010:	e008      	b.n	800e024 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e012:	f7fc f951 	bl	800a2b8 <HAL_GetTick>
 800e016:	4602      	mov	r2, r0
 800e018:	68bb      	ldr	r3, [r7, #8]
 800e01a:	1ad3      	subs	r3, r2, r3
 800e01c:	2b02      	cmp	r3, #2
 800e01e:	d901      	bls.n	800e024 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e020:	2303      	movs	r3, #3
 800e022:	e086      	b.n	800e132 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e024:	4b45      	ldr	r3, [pc, #276]	@ (800e13c <RCCEx_PLL2_Config+0x15c>)
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d1f0      	bne.n	800e012 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800e030:	4b42      	ldr	r3, [pc, #264]	@ (800e13c <RCCEx_PLL2_Config+0x15c>)
 800e032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e034:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	031b      	lsls	r3, r3, #12
 800e03e:	493f      	ldr	r1, [pc, #252]	@ (800e13c <RCCEx_PLL2_Config+0x15c>)
 800e040:	4313      	orrs	r3, r2
 800e042:	628b      	str	r3, [r1, #40]	@ 0x28
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	685b      	ldr	r3, [r3, #4]
 800e048:	3b01      	subs	r3, #1
 800e04a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	689b      	ldr	r3, [r3, #8]
 800e052:	3b01      	subs	r3, #1
 800e054:	025b      	lsls	r3, r3, #9
 800e056:	b29b      	uxth	r3, r3
 800e058:	431a      	orrs	r2, r3
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	68db      	ldr	r3, [r3, #12]
 800e05e:	3b01      	subs	r3, #1
 800e060:	041b      	lsls	r3, r3, #16
 800e062:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e066:	431a      	orrs	r2, r3
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	691b      	ldr	r3, [r3, #16]
 800e06c:	3b01      	subs	r3, #1
 800e06e:	061b      	lsls	r3, r3, #24
 800e070:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e074:	4931      	ldr	r1, [pc, #196]	@ (800e13c <RCCEx_PLL2_Config+0x15c>)
 800e076:	4313      	orrs	r3, r2
 800e078:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800e07a:	4b30      	ldr	r3, [pc, #192]	@ (800e13c <RCCEx_PLL2_Config+0x15c>)
 800e07c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e07e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	695b      	ldr	r3, [r3, #20]
 800e086:	492d      	ldr	r1, [pc, #180]	@ (800e13c <RCCEx_PLL2_Config+0x15c>)
 800e088:	4313      	orrs	r3, r2
 800e08a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800e08c:	4b2b      	ldr	r3, [pc, #172]	@ (800e13c <RCCEx_PLL2_Config+0x15c>)
 800e08e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e090:	f023 0220 	bic.w	r2, r3, #32
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	699b      	ldr	r3, [r3, #24]
 800e098:	4928      	ldr	r1, [pc, #160]	@ (800e13c <RCCEx_PLL2_Config+0x15c>)
 800e09a:	4313      	orrs	r3, r2
 800e09c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800e09e:	4b27      	ldr	r3, [pc, #156]	@ (800e13c <RCCEx_PLL2_Config+0x15c>)
 800e0a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0a2:	4a26      	ldr	r2, [pc, #152]	@ (800e13c <RCCEx_PLL2_Config+0x15c>)
 800e0a4:	f023 0310 	bic.w	r3, r3, #16
 800e0a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e0aa:	4b24      	ldr	r3, [pc, #144]	@ (800e13c <RCCEx_PLL2_Config+0x15c>)
 800e0ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e0ae:	4b24      	ldr	r3, [pc, #144]	@ (800e140 <RCCEx_PLL2_Config+0x160>)
 800e0b0:	4013      	ands	r3, r2
 800e0b2:	687a      	ldr	r2, [r7, #4]
 800e0b4:	69d2      	ldr	r2, [r2, #28]
 800e0b6:	00d2      	lsls	r2, r2, #3
 800e0b8:	4920      	ldr	r1, [pc, #128]	@ (800e13c <RCCEx_PLL2_Config+0x15c>)
 800e0ba:	4313      	orrs	r3, r2
 800e0bc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800e0be:	4b1f      	ldr	r3, [pc, #124]	@ (800e13c <RCCEx_PLL2_Config+0x15c>)
 800e0c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0c2:	4a1e      	ldr	r2, [pc, #120]	@ (800e13c <RCCEx_PLL2_Config+0x15c>)
 800e0c4:	f043 0310 	orr.w	r3, r3, #16
 800e0c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d106      	bne.n	800e0de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800e0d0:	4b1a      	ldr	r3, [pc, #104]	@ (800e13c <RCCEx_PLL2_Config+0x15c>)
 800e0d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0d4:	4a19      	ldr	r2, [pc, #100]	@ (800e13c <RCCEx_PLL2_Config+0x15c>)
 800e0d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e0da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e0dc:	e00f      	b.n	800e0fe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	2b01      	cmp	r3, #1
 800e0e2:	d106      	bne.n	800e0f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800e0e4:	4b15      	ldr	r3, [pc, #84]	@ (800e13c <RCCEx_PLL2_Config+0x15c>)
 800e0e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0e8:	4a14      	ldr	r2, [pc, #80]	@ (800e13c <RCCEx_PLL2_Config+0x15c>)
 800e0ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e0ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e0f0:	e005      	b.n	800e0fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800e0f2:	4b12      	ldr	r3, [pc, #72]	@ (800e13c <RCCEx_PLL2_Config+0x15c>)
 800e0f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0f6:	4a11      	ldr	r2, [pc, #68]	@ (800e13c <RCCEx_PLL2_Config+0x15c>)
 800e0f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e0fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800e0fe:	4b0f      	ldr	r3, [pc, #60]	@ (800e13c <RCCEx_PLL2_Config+0x15c>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	4a0e      	ldr	r2, [pc, #56]	@ (800e13c <RCCEx_PLL2_Config+0x15c>)
 800e104:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e108:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e10a:	f7fc f8d5 	bl	800a2b8 <HAL_GetTick>
 800e10e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e110:	e008      	b.n	800e124 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e112:	f7fc f8d1 	bl	800a2b8 <HAL_GetTick>
 800e116:	4602      	mov	r2, r0
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	1ad3      	subs	r3, r2, r3
 800e11c:	2b02      	cmp	r3, #2
 800e11e:	d901      	bls.n	800e124 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e120:	2303      	movs	r3, #3
 800e122:	e006      	b.n	800e132 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e124:	4b05      	ldr	r3, [pc, #20]	@ (800e13c <RCCEx_PLL2_Config+0x15c>)
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d0f0      	beq.n	800e112 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800e130:	7bfb      	ldrb	r3, [r7, #15]
}
 800e132:	4618      	mov	r0, r3
 800e134:	3710      	adds	r7, #16
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}
 800e13a:	bf00      	nop
 800e13c:	58024400 	.word	0x58024400
 800e140:	ffff0007 	.word	0xffff0007

0800e144 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b084      	sub	sp, #16
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
 800e14c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e14e:	2300      	movs	r3, #0
 800e150:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e152:	4b53      	ldr	r3, [pc, #332]	@ (800e2a0 <RCCEx_PLL3_Config+0x15c>)
 800e154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e156:	f003 0303 	and.w	r3, r3, #3
 800e15a:	2b03      	cmp	r3, #3
 800e15c:	d101      	bne.n	800e162 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800e15e:	2301      	movs	r3, #1
 800e160:	e099      	b.n	800e296 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800e162:	4b4f      	ldr	r3, [pc, #316]	@ (800e2a0 <RCCEx_PLL3_Config+0x15c>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	4a4e      	ldr	r2, [pc, #312]	@ (800e2a0 <RCCEx_PLL3_Config+0x15c>)
 800e168:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e16c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e16e:	f7fc f8a3 	bl	800a2b8 <HAL_GetTick>
 800e172:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e174:	e008      	b.n	800e188 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e176:	f7fc f89f 	bl	800a2b8 <HAL_GetTick>
 800e17a:	4602      	mov	r2, r0
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	1ad3      	subs	r3, r2, r3
 800e180:	2b02      	cmp	r3, #2
 800e182:	d901      	bls.n	800e188 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e184:	2303      	movs	r3, #3
 800e186:	e086      	b.n	800e296 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e188:	4b45      	ldr	r3, [pc, #276]	@ (800e2a0 <RCCEx_PLL3_Config+0x15c>)
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e190:	2b00      	cmp	r3, #0
 800e192:	d1f0      	bne.n	800e176 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800e194:	4b42      	ldr	r3, [pc, #264]	@ (800e2a0 <RCCEx_PLL3_Config+0x15c>)
 800e196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e198:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	051b      	lsls	r3, r3, #20
 800e1a2:	493f      	ldr	r1, [pc, #252]	@ (800e2a0 <RCCEx_PLL3_Config+0x15c>)
 800e1a4:	4313      	orrs	r3, r2
 800e1a6:	628b      	str	r3, [r1, #40]	@ 0x28
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	685b      	ldr	r3, [r3, #4]
 800e1ac:	3b01      	subs	r3, #1
 800e1ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	689b      	ldr	r3, [r3, #8]
 800e1b6:	3b01      	subs	r3, #1
 800e1b8:	025b      	lsls	r3, r3, #9
 800e1ba:	b29b      	uxth	r3, r3
 800e1bc:	431a      	orrs	r2, r3
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	68db      	ldr	r3, [r3, #12]
 800e1c2:	3b01      	subs	r3, #1
 800e1c4:	041b      	lsls	r3, r3, #16
 800e1c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e1ca:	431a      	orrs	r2, r3
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	691b      	ldr	r3, [r3, #16]
 800e1d0:	3b01      	subs	r3, #1
 800e1d2:	061b      	lsls	r3, r3, #24
 800e1d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e1d8:	4931      	ldr	r1, [pc, #196]	@ (800e2a0 <RCCEx_PLL3_Config+0x15c>)
 800e1da:	4313      	orrs	r3, r2
 800e1dc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e1de:	4b30      	ldr	r3, [pc, #192]	@ (800e2a0 <RCCEx_PLL3_Config+0x15c>)
 800e1e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	695b      	ldr	r3, [r3, #20]
 800e1ea:	492d      	ldr	r1, [pc, #180]	@ (800e2a0 <RCCEx_PLL3_Config+0x15c>)
 800e1ec:	4313      	orrs	r3, r2
 800e1ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e1f0:	4b2b      	ldr	r3, [pc, #172]	@ (800e2a0 <RCCEx_PLL3_Config+0x15c>)
 800e1f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1f4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	699b      	ldr	r3, [r3, #24]
 800e1fc:	4928      	ldr	r1, [pc, #160]	@ (800e2a0 <RCCEx_PLL3_Config+0x15c>)
 800e1fe:	4313      	orrs	r3, r2
 800e200:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e202:	4b27      	ldr	r3, [pc, #156]	@ (800e2a0 <RCCEx_PLL3_Config+0x15c>)
 800e204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e206:	4a26      	ldr	r2, [pc, #152]	@ (800e2a0 <RCCEx_PLL3_Config+0x15c>)
 800e208:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e20c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e20e:	4b24      	ldr	r3, [pc, #144]	@ (800e2a0 <RCCEx_PLL3_Config+0x15c>)
 800e210:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e212:	4b24      	ldr	r3, [pc, #144]	@ (800e2a4 <RCCEx_PLL3_Config+0x160>)
 800e214:	4013      	ands	r3, r2
 800e216:	687a      	ldr	r2, [r7, #4]
 800e218:	69d2      	ldr	r2, [r2, #28]
 800e21a:	00d2      	lsls	r2, r2, #3
 800e21c:	4920      	ldr	r1, [pc, #128]	@ (800e2a0 <RCCEx_PLL3_Config+0x15c>)
 800e21e:	4313      	orrs	r3, r2
 800e220:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e222:	4b1f      	ldr	r3, [pc, #124]	@ (800e2a0 <RCCEx_PLL3_Config+0x15c>)
 800e224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e226:	4a1e      	ldr	r2, [pc, #120]	@ (800e2a0 <RCCEx_PLL3_Config+0x15c>)
 800e228:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e22c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d106      	bne.n	800e242 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e234:	4b1a      	ldr	r3, [pc, #104]	@ (800e2a0 <RCCEx_PLL3_Config+0x15c>)
 800e236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e238:	4a19      	ldr	r2, [pc, #100]	@ (800e2a0 <RCCEx_PLL3_Config+0x15c>)
 800e23a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800e23e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e240:	e00f      	b.n	800e262 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	2b01      	cmp	r3, #1
 800e246:	d106      	bne.n	800e256 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e248:	4b15      	ldr	r3, [pc, #84]	@ (800e2a0 <RCCEx_PLL3_Config+0x15c>)
 800e24a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e24c:	4a14      	ldr	r2, [pc, #80]	@ (800e2a0 <RCCEx_PLL3_Config+0x15c>)
 800e24e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e252:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e254:	e005      	b.n	800e262 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e256:	4b12      	ldr	r3, [pc, #72]	@ (800e2a0 <RCCEx_PLL3_Config+0x15c>)
 800e258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e25a:	4a11      	ldr	r2, [pc, #68]	@ (800e2a0 <RCCEx_PLL3_Config+0x15c>)
 800e25c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e260:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e262:	4b0f      	ldr	r3, [pc, #60]	@ (800e2a0 <RCCEx_PLL3_Config+0x15c>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	4a0e      	ldr	r2, [pc, #56]	@ (800e2a0 <RCCEx_PLL3_Config+0x15c>)
 800e268:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e26c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e26e:	f7fc f823 	bl	800a2b8 <HAL_GetTick>
 800e272:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e274:	e008      	b.n	800e288 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e276:	f7fc f81f 	bl	800a2b8 <HAL_GetTick>
 800e27a:	4602      	mov	r2, r0
 800e27c:	68bb      	ldr	r3, [r7, #8]
 800e27e:	1ad3      	subs	r3, r2, r3
 800e280:	2b02      	cmp	r3, #2
 800e282:	d901      	bls.n	800e288 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e284:	2303      	movs	r3, #3
 800e286:	e006      	b.n	800e296 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e288:	4b05      	ldr	r3, [pc, #20]	@ (800e2a0 <RCCEx_PLL3_Config+0x15c>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e290:	2b00      	cmp	r3, #0
 800e292:	d0f0      	beq.n	800e276 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800e294:	7bfb      	ldrb	r3, [r7, #15]
}
 800e296:	4618      	mov	r0, r3
 800e298:	3710      	adds	r7, #16
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}
 800e29e:	bf00      	nop
 800e2a0:	58024400 	.word	0x58024400
 800e2a4:	ffff0007 	.word	0xffff0007

0800e2a8 <LL_ADC_REG_SetSequencerLength>:
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b083      	sub	sp, #12
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
 800e2b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e2b6:	f023 020f 	bic.w	r2, r3, #15
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	431a      	orrs	r2, r3
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800e2c2:	bf00      	nop
 800e2c4:	370c      	adds	r7, #12
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2cc:	4770      	bx	lr

0800e2ce <LL_ADC_IsEnabled>:
{
 800e2ce:	b480      	push	{r7}
 800e2d0:	b083      	sub	sp, #12
 800e2d2:	af00      	add	r7, sp, #0
 800e2d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	689b      	ldr	r3, [r3, #8]
 800e2da:	f003 0301 	and.w	r3, r3, #1
 800e2de:	2b01      	cmp	r3, #1
 800e2e0:	d101      	bne.n	800e2e6 <LL_ADC_IsEnabled+0x18>
 800e2e2:	2301      	movs	r3, #1
 800e2e4:	e000      	b.n	800e2e8 <LL_ADC_IsEnabled+0x1a>
 800e2e6:	2300      	movs	r3, #0
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	370c      	adds	r7, #12
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f2:	4770      	bx	lr

0800e2f4 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 800e2f4:	b590      	push	{r4, r7, lr}
 800e2f6:	b085      	sub	sp, #20
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
 800e2fc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800e2fe:	2300      	movs	r3, #0
 800e300:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	4a22      	ldr	r2, [pc, #136]	@ (800e390 <LL_ADC_CommonInit+0x9c>)
 800e306:	4293      	cmp	r3, r2
 800e308:	d10e      	bne.n	800e328 <LL_ADC_CommonInit+0x34>
 800e30a:	4822      	ldr	r0, [pc, #136]	@ (800e394 <LL_ADC_CommonInit+0xa0>)
 800e30c:	f7ff ffdf 	bl	800e2ce <LL_ADC_IsEnabled>
 800e310:	4604      	mov	r4, r0
 800e312:	4821      	ldr	r0, [pc, #132]	@ (800e398 <LL_ADC_CommonInit+0xa4>)
 800e314:	f7ff ffdb 	bl	800e2ce <LL_ADC_IsEnabled>
 800e318:	4603      	mov	r3, r0
 800e31a:	4323      	orrs	r3, r4
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	bf0c      	ite	eq
 800e320:	2301      	moveq	r3, #1
 800e322:	2300      	movne	r3, #0
 800e324:	b2db      	uxtb	r3, r3
 800e326:	e008      	b.n	800e33a <LL_ADC_CommonInit+0x46>
 800e328:	481c      	ldr	r0, [pc, #112]	@ (800e39c <LL_ADC_CommonInit+0xa8>)
 800e32a:	f7ff ffd0 	bl	800e2ce <LL_ADC_IsEnabled>
 800e32e:	4603      	mov	r3, r0
 800e330:	2b00      	cmp	r3, #0
 800e332:	bf0c      	ite	eq
 800e334:	2301      	moveq	r3, #1
 800e336:	2300      	movne	r3, #0
 800e338:	b2db      	uxtb	r3, r3
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d020      	beq.n	800e380 <LL_ADC_CommonInit+0x8c>
    /*  - multimode (if several ADC instances available on the                */
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	685b      	ldr	r3, [r3, #4]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d012      	beq.n	800e36c <LL_ADC_CommonInit+0x78>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	689a      	ldr	r2, [r3, #8]
 800e34a:	4b15      	ldr	r3, [pc, #84]	@ (800e3a0 <LL_ADC_CommonInit+0xac>)
 800e34c:	4013      	ands	r3, r2
 800e34e:	683a      	ldr	r2, [r7, #0]
 800e350:	6811      	ldr	r1, [r2, #0]
 800e352:	683a      	ldr	r2, [r7, #0]
 800e354:	6852      	ldr	r2, [r2, #4]
 800e356:	4311      	orrs	r1, r2
 800e358:	683a      	ldr	r2, [r7, #0]
 800e35a:	6892      	ldr	r2, [r2, #8]
 800e35c:	4311      	orrs	r1, r2
 800e35e:	683a      	ldr	r2, [r7, #0]
 800e360:	68d2      	ldr	r2, [r2, #12]
 800e362:	430a      	orrs	r2, r1
 800e364:	431a      	orrs	r2, r3
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	609a      	str	r2, [r3, #8]
 800e36a:	e00b      	b.n	800e384 <LL_ADC_CommonInit+0x90>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	689a      	ldr	r2, [r3, #8]
 800e370:	4b0b      	ldr	r3, [pc, #44]	@ (800e3a0 <LL_ADC_CommonInit+0xac>)
 800e372:	4013      	ands	r3, r2
 800e374:	683a      	ldr	r2, [r7, #0]
 800e376:	6812      	ldr	r2, [r2, #0]
 800e378:	431a      	orrs	r2, r3
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	609a      	str	r2, [r3, #8]
 800e37e:	e001      	b.n	800e384 <LL_ADC_CommonInit+0x90>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800e380:	2301      	movs	r3, #1
 800e382:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e384:	7bfb      	ldrb	r3, [r7, #15]
}
 800e386:	4618      	mov	r0, r3
 800e388:	3714      	adds	r7, #20
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd90      	pop	{r4, r7, pc}
 800e38e:	bf00      	nop
 800e390:	40022300 	.word	0x40022300
 800e394:	40022000 	.word	0x40022000
 800e398:	40022100 	.word	0x40022100
 800e39c:	58026000 	.word	0x58026000
 800e3a0:	ffc030e0 	.word	0xffc030e0

0800e3a4 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b084      	sub	sp, #16
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
 800e3ac:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_LEFT_BIT_SHIFT(ADC_InitStruct->LeftBitShift));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f7ff ff8b 	bl	800e2ce <LL_ADC_IsEnabled>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d115      	bne.n	800e3ea <LL_ADC_Init+0x46>
               ADC_InitStruct->Resolution
               | ADC_InitStruct->LowPowerMode
              );
    }
#else
    MODIFY_REG(ADCx->CFGR,
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	68da      	ldr	r2, [r3, #12]
 800e3c2:	4b0d      	ldr	r3, [pc, #52]	@ (800e3f8 <LL_ADC_Init+0x54>)
 800e3c4:	4013      	ands	r3, r2
 800e3c6:	683a      	ldr	r2, [r7, #0]
 800e3c8:	6811      	ldr	r1, [r2, #0]
 800e3ca:	683a      	ldr	r2, [r7, #0]
 800e3cc:	6892      	ldr	r2, [r2, #8]
 800e3ce:	430a      	orrs	r2, r1
 800e3d0:	431a      	orrs	r2, r3
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	60da      	str	r2, [r3, #12]
               ADC_InitStruct->Resolution
               | ADC_InitStruct->LowPowerMode
              );
#endif

    MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_LSHIFT, ADC_InitStruct->LeftBitShift);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	691b      	ldr	r3, [r3, #16]
 800e3da:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	685b      	ldr	r3, [r3, #4]
 800e3e2:	431a      	orrs	r2, r3
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	611a      	str	r2, [r3, #16]
 800e3e8:	e001      	b.n	800e3ee <LL_ADC_Init+0x4a>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800e3ea:	2301      	movs	r3, #1
 800e3ec:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800e3ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	3710      	adds	r7, #16
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}
 800e3f8:	ffffbfe3 	.word	0xffffbfe3

0800e3fc <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b084      	sub	sp, #16
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800e406:	2300      	movs	r3, #0
 800e408:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DATA_TRANSFER_MODE(ADC_REG_InitStruct->DataTransferMode));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f7ff ff5f 	bl	800e2ce <LL_ADC_IsEnabled>
 800e410:	4603      	mov	r3, r0
 800e412:	2b00      	cmp	r3, #0
 800e414:	d132      	bne.n	800e47c <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800e416:	683b      	ldr	r3, [r7, #0]
 800e418:	685b      	ldr	r3, [r3, #4]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d015      	beq.n	800e44a <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	68da      	ldr	r2, [r3, #12]
 800e422:	4b1a      	ldr	r3, [pc, #104]	@ (800e48c <LL_ADC_REG_Init+0x90>)
 800e424:	4013      	ands	r3, r2
 800e426:	683a      	ldr	r2, [r7, #0]
 800e428:	6811      	ldr	r1, [r2, #0]
 800e42a:	683a      	ldr	r2, [r7, #0]
 800e42c:	6892      	ldr	r2, [r2, #8]
 800e42e:	4311      	orrs	r1, r2
 800e430:	683a      	ldr	r2, [r7, #0]
 800e432:	68d2      	ldr	r2, [r2, #12]
 800e434:	4311      	orrs	r1, r2
 800e436:	683a      	ldr	r2, [r7, #0]
 800e438:	6912      	ldr	r2, [r2, #16]
 800e43a:	4311      	orrs	r1, r2
 800e43c:	683a      	ldr	r2, [r7, #0]
 800e43e:	6952      	ldr	r2, [r2, #20]
 800e440:	430a      	orrs	r2, r1
 800e442:	431a      	orrs	r2, r3
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	60da      	str	r2, [r3, #12]
 800e448:	e011      	b.n	800e46e <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	68da      	ldr	r2, [r3, #12]
 800e44e:	4b0f      	ldr	r3, [pc, #60]	@ (800e48c <LL_ADC_REG_Init+0x90>)
 800e450:	4013      	ands	r3, r2
 800e452:	683a      	ldr	r2, [r7, #0]
 800e454:	6811      	ldr	r1, [r2, #0]
 800e456:	683a      	ldr	r2, [r7, #0]
 800e458:	68d2      	ldr	r2, [r2, #12]
 800e45a:	4311      	orrs	r1, r2
 800e45c:	683a      	ldr	r2, [r7, #0]
 800e45e:	6912      	ldr	r2, [r2, #16]
 800e460:	4311      	orrs	r1, r2
 800e462:	683a      	ldr	r2, [r7, #0]
 800e464:	6952      	ldr	r2, [r2, #20]
 800e466:	430a      	orrs	r2, r1
 800e468:	431a      	orrs	r2, r3
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	685b      	ldr	r3, [r3, #4]
 800e472:	4619      	mov	r1, r3
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	f7ff ff17 	bl	800e2a8 <LL_ADC_REG_SetSequencerLength>
 800e47a:	e001      	b.n	800e480 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800e47c:	2301      	movs	r3, #1
 800e47e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800e480:	7bfb      	ldrb	r3, [r7, #15]
}
 800e482:	4618      	mov	r0, r3
 800e484:	3710      	adds	r7, #16
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
 800e48a:	bf00      	nop
 800e48c:	fff0c01c 	.word	0xfff0c01c

0800e490 <LL_GPIO_SetPinMode>:
{
 800e490:	b480      	push	{r7}
 800e492:	b085      	sub	sp, #20
 800e494:	af00      	add	r7, sp, #0
 800e496:	60f8      	str	r0, [r7, #12]
 800e498:	60b9      	str	r1, [r7, #8]
 800e49a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	6819      	ldr	r1, [r3, #0]
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	fb03 f203 	mul.w	r2, r3, r3
 800e4a6:	4613      	mov	r3, r2
 800e4a8:	005b      	lsls	r3, r3, #1
 800e4aa:	4413      	add	r3, r2
 800e4ac:	43db      	mvns	r3, r3
 800e4ae:	ea01 0203 	and.w	r2, r1, r3
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	fb03 f303 	mul.w	r3, r3, r3
 800e4b8:	6879      	ldr	r1, [r7, #4]
 800e4ba:	fb01 f303 	mul.w	r3, r1, r3
 800e4be:	431a      	orrs	r2, r3
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	601a      	str	r2, [r3, #0]
}
 800e4c4:	bf00      	nop
 800e4c6:	3714      	adds	r7, #20
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ce:	4770      	bx	lr

0800e4d0 <LL_GPIO_SetPinOutputType>:
{
 800e4d0:	b480      	push	{r7}
 800e4d2:	b085      	sub	sp, #20
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	60f8      	str	r0, [r7, #12]
 800e4d8:	60b9      	str	r1, [r7, #8]
 800e4da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	685a      	ldr	r2, [r3, #4]
 800e4e0:	68bb      	ldr	r3, [r7, #8]
 800e4e2:	43db      	mvns	r3, r3
 800e4e4:	401a      	ands	r2, r3
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	6879      	ldr	r1, [r7, #4]
 800e4ea:	fb01 f303 	mul.w	r3, r1, r3
 800e4ee:	431a      	orrs	r2, r3
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	605a      	str	r2, [r3, #4]
}
 800e4f4:	bf00      	nop
 800e4f6:	3714      	adds	r7, #20
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fe:	4770      	bx	lr

0800e500 <LL_GPIO_SetPinSpeed>:
{
 800e500:	b480      	push	{r7}
 800e502:	b085      	sub	sp, #20
 800e504:	af00      	add	r7, sp, #0
 800e506:	60f8      	str	r0, [r7, #12]
 800e508:	60b9      	str	r1, [r7, #8]
 800e50a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	6899      	ldr	r1, [r3, #8]
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	fb03 f203 	mul.w	r2, r3, r3
 800e516:	4613      	mov	r3, r2
 800e518:	005b      	lsls	r3, r3, #1
 800e51a:	4413      	add	r3, r2
 800e51c:	43db      	mvns	r3, r3
 800e51e:	ea01 0203 	and.w	r2, r1, r3
 800e522:	68bb      	ldr	r3, [r7, #8]
 800e524:	fb03 f303 	mul.w	r3, r3, r3
 800e528:	6879      	ldr	r1, [r7, #4]
 800e52a:	fb01 f303 	mul.w	r3, r1, r3
 800e52e:	431a      	orrs	r2, r3
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	609a      	str	r2, [r3, #8]
}
 800e534:	bf00      	nop
 800e536:	3714      	adds	r7, #20
 800e538:	46bd      	mov	sp, r7
 800e53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53e:	4770      	bx	lr

0800e540 <LL_GPIO_SetPinPull>:
{
 800e540:	b480      	push	{r7}
 800e542:	b085      	sub	sp, #20
 800e544:	af00      	add	r7, sp, #0
 800e546:	60f8      	str	r0, [r7, #12]
 800e548:	60b9      	str	r1, [r7, #8]
 800e54a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	68d9      	ldr	r1, [r3, #12]
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	fb03 f203 	mul.w	r2, r3, r3
 800e556:	4613      	mov	r3, r2
 800e558:	005b      	lsls	r3, r3, #1
 800e55a:	4413      	add	r3, r2
 800e55c:	43db      	mvns	r3, r3
 800e55e:	ea01 0203 	and.w	r2, r1, r3
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	fb03 f303 	mul.w	r3, r3, r3
 800e568:	6879      	ldr	r1, [r7, #4]
 800e56a:	fb01 f303 	mul.w	r3, r1, r3
 800e56e:	431a      	orrs	r2, r3
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	60da      	str	r2, [r3, #12]
}
 800e574:	bf00      	nop
 800e576:	3714      	adds	r7, #20
 800e578:	46bd      	mov	sp, r7
 800e57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57e:	4770      	bx	lr

0800e580 <LL_GPIO_SetAFPin_0_7>:
{
 800e580:	b480      	push	{r7}
 800e582:	b085      	sub	sp, #20
 800e584:	af00      	add	r7, sp, #0
 800e586:	60f8      	str	r0, [r7, #12]
 800e588:	60b9      	str	r1, [r7, #8]
 800e58a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	6a19      	ldr	r1, [r3, #32]
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	fb03 f303 	mul.w	r3, r3, r3
 800e596:	68ba      	ldr	r2, [r7, #8]
 800e598:	fb02 f303 	mul.w	r3, r2, r3
 800e59c:	68ba      	ldr	r2, [r7, #8]
 800e59e:	fb03 f202 	mul.w	r2, r3, r2
 800e5a2:	4613      	mov	r3, r2
 800e5a4:	011b      	lsls	r3, r3, #4
 800e5a6:	1a9b      	subs	r3, r3, r2
 800e5a8:	43db      	mvns	r3, r3
 800e5aa:	ea01 0203 	and.w	r2, r1, r3
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	fb03 f303 	mul.w	r3, r3, r3
 800e5b4:	68b9      	ldr	r1, [r7, #8]
 800e5b6:	fb01 f303 	mul.w	r3, r1, r3
 800e5ba:	68b9      	ldr	r1, [r7, #8]
 800e5bc:	fb01 f303 	mul.w	r3, r1, r3
 800e5c0:	6879      	ldr	r1, [r7, #4]
 800e5c2:	fb01 f303 	mul.w	r3, r1, r3
 800e5c6:	431a      	orrs	r2, r3
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	621a      	str	r2, [r3, #32]
}
 800e5cc:	bf00      	nop
 800e5ce:	3714      	adds	r7, #20
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d6:	4770      	bx	lr

0800e5d8 <LL_GPIO_SetAFPin_8_15>:
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b085      	sub	sp, #20
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	60f8      	str	r0, [r7, #12]
 800e5e0:	60b9      	str	r1, [r7, #8]
 800e5e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800e5e8:	68bb      	ldr	r3, [r7, #8]
 800e5ea:	0a1b      	lsrs	r3, r3, #8
 800e5ec:	68ba      	ldr	r2, [r7, #8]
 800e5ee:	0a12      	lsrs	r2, r2, #8
 800e5f0:	fb02 f303 	mul.w	r3, r2, r3
 800e5f4:	68ba      	ldr	r2, [r7, #8]
 800e5f6:	0a12      	lsrs	r2, r2, #8
 800e5f8:	fb02 f303 	mul.w	r3, r2, r3
 800e5fc:	68ba      	ldr	r2, [r7, #8]
 800e5fe:	0a12      	lsrs	r2, r2, #8
 800e600:	fb03 f202 	mul.w	r2, r3, r2
 800e604:	4613      	mov	r3, r2
 800e606:	011b      	lsls	r3, r3, #4
 800e608:	1a9b      	subs	r3, r3, r2
 800e60a:	43db      	mvns	r3, r3
 800e60c:	ea01 0203 	and.w	r2, r1, r3
 800e610:	68bb      	ldr	r3, [r7, #8]
 800e612:	0a1b      	lsrs	r3, r3, #8
 800e614:	68b9      	ldr	r1, [r7, #8]
 800e616:	0a09      	lsrs	r1, r1, #8
 800e618:	fb01 f303 	mul.w	r3, r1, r3
 800e61c:	68b9      	ldr	r1, [r7, #8]
 800e61e:	0a09      	lsrs	r1, r1, #8
 800e620:	fb01 f303 	mul.w	r3, r1, r3
 800e624:	68b9      	ldr	r1, [r7, #8]
 800e626:	0a09      	lsrs	r1, r1, #8
 800e628:	fb01 f303 	mul.w	r3, r1, r3
 800e62c:	6879      	ldr	r1, [r7, #4]
 800e62e:	fb01 f303 	mul.w	r3, r1, r3
 800e632:	431a      	orrs	r2, r3
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800e638:	bf00      	nop
 800e63a:	3714      	adds	r7, #20
 800e63c:	46bd      	mov	sp, r7
 800e63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e642:	4770      	bx	lr

0800e644 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b088      	sub	sp, #32
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
 800e64c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e654:	693b      	ldr	r3, [r7, #16]
 800e656:	fa93 f3a3 	rbit	r3, r3
 800e65a:	60fb      	str	r3, [r7, #12]
  return result;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800e660:	697b      	ldr	r3, [r7, #20]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d101      	bne.n	800e66a <LL_GPIO_Init+0x26>
    return 32U;
 800e666:	2320      	movs	r3, #32
 800e668:	e003      	b.n	800e672 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	fab3 f383 	clz	r3, r3
 800e670:	b2db      	uxtb	r3, r3
 800e672:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800e674:	e048      	b.n	800e708 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	681a      	ldr	r2, [r3, #0]
 800e67a:	2101      	movs	r1, #1
 800e67c:	69fb      	ldr	r3, [r7, #28]
 800e67e:	fa01 f303 	lsl.w	r3, r1, r3
 800e682:	4013      	ands	r3, r2
 800e684:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 800e686:	69bb      	ldr	r3, [r7, #24]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d03a      	beq.n	800e702 <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	685b      	ldr	r3, [r3, #4]
 800e690:	2b01      	cmp	r3, #1
 800e692:	d003      	beq.n	800e69c <LL_GPIO_Init+0x58>
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	685b      	ldr	r3, [r3, #4]
 800e698:	2b02      	cmp	r3, #2
 800e69a:	d10e      	bne.n	800e6ba <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	689b      	ldr	r3, [r3, #8]
 800e6a0:	461a      	mov	r2, r3
 800e6a2:	69b9      	ldr	r1, [r7, #24]
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f7ff ff2b 	bl	800e500 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800e6aa:	683b      	ldr	r3, [r7, #0]
 800e6ac:	6819      	ldr	r1, [r3, #0]
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	68db      	ldr	r3, [r3, #12]
 800e6b2:	461a      	mov	r2, r3
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f7ff ff0b 	bl	800e4d0 <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800e6ba:	683b      	ldr	r3, [r7, #0]
 800e6bc:	691b      	ldr	r3, [r3, #16]
 800e6be:	461a      	mov	r2, r3
 800e6c0:	69b9      	ldr	r1, [r7, #24]
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f7ff ff3c 	bl	800e540 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	685b      	ldr	r3, [r3, #4]
 800e6cc:	2b02      	cmp	r3, #2
 800e6ce:	d111      	bne.n	800e6f4 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800e6d0:	69bb      	ldr	r3, [r7, #24]
 800e6d2:	2bff      	cmp	r3, #255	@ 0xff
 800e6d4:	d807      	bhi.n	800e6e6 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	695b      	ldr	r3, [r3, #20]
 800e6da:	461a      	mov	r2, r3
 800e6dc:	69b9      	ldr	r1, [r7, #24]
 800e6de:	6878      	ldr	r0, [r7, #4]
 800e6e0:	f7ff ff4e 	bl	800e580 <LL_GPIO_SetAFPin_0_7>
 800e6e4:	e006      	b.n	800e6f4 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	695b      	ldr	r3, [r3, #20]
 800e6ea:	461a      	mov	r2, r3
 800e6ec:	69b9      	ldr	r1, [r7, #24]
 800e6ee:	6878      	ldr	r0, [r7, #4]
 800e6f0:	f7ff ff72 	bl	800e5d8 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	685b      	ldr	r3, [r3, #4]
 800e6f8:	461a      	mov	r2, r3
 800e6fa:	69b9      	ldr	r1, [r7, #24]
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	f7ff fec7 	bl	800e490 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800e702:	69fb      	ldr	r3, [r7, #28]
 800e704:	3301      	adds	r3, #1
 800e706:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	681a      	ldr	r2, [r3, #0]
 800e70c:	69fb      	ldr	r3, [r7, #28]
 800e70e:	fa22 f303 	lsr.w	r3, r2, r3
 800e712:	2b00      	cmp	r3, #0
 800e714:	d1af      	bne.n	800e676 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800e716:	2300      	movs	r3, #0
}
 800e718:	4618      	mov	r0, r3
 800e71a:	3720      	adds	r7, #32
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}

0800e720 <LL_I2C_Enable>:
{
 800e720:	b480      	push	{r7}
 800e722:	b083      	sub	sp, #12
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	f043 0201 	orr.w	r2, r3, #1
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	601a      	str	r2, [r3, #0]
}
 800e734:	bf00      	nop
 800e736:	370c      	adds	r7, #12
 800e738:	46bd      	mov	sp, r7
 800e73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73e:	4770      	bx	lr

0800e740 <LL_I2C_Disable>:
{
 800e740:	b480      	push	{r7}
 800e742:	b083      	sub	sp, #12
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	f023 0201 	bic.w	r2, r3, #1
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	601a      	str	r2, [r3, #0]
}
 800e754:	bf00      	nop
 800e756:	370c      	adds	r7, #12
 800e758:	46bd      	mov	sp, r7
 800e75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75e:	4770      	bx	lr

0800e760 <LL_I2C_ConfigFilters>:
{
 800e760:	b480      	push	{r7}
 800e762:	b085      	sub	sp, #20
 800e764:	af00      	add	r7, sp, #0
 800e766:	60f8      	str	r0, [r7, #12]
 800e768:	60b9      	str	r1, [r7, #8]
 800e76a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	0219      	lsls	r1, r3, #8
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	430b      	orrs	r3, r1
 800e77c:	431a      	orrs	r2, r3
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	601a      	str	r2, [r3, #0]
}
 800e782:	bf00      	nop
 800e784:	3714      	adds	r7, #20
 800e786:	46bd      	mov	sp, r7
 800e788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78c:	4770      	bx	lr
	...

0800e790 <LL_I2C_SetOwnAddress1>:
{
 800e790:	b480      	push	{r7}
 800e792:	b085      	sub	sp, #20
 800e794:	af00      	add	r7, sp, #0
 800e796:	60f8      	str	r0, [r7, #12]
 800e798:	60b9      	str	r1, [r7, #8]
 800e79a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	689a      	ldr	r2, [r3, #8]
 800e7a0:	4b06      	ldr	r3, [pc, #24]	@ (800e7bc <LL_I2C_SetOwnAddress1+0x2c>)
 800e7a2:	4013      	ands	r3, r2
 800e7a4:	68b9      	ldr	r1, [r7, #8]
 800e7a6:	687a      	ldr	r2, [r7, #4]
 800e7a8:	430a      	orrs	r2, r1
 800e7aa:	431a      	orrs	r2, r3
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	609a      	str	r2, [r3, #8]
}
 800e7b0:	bf00      	nop
 800e7b2:	3714      	adds	r7, #20
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ba:	4770      	bx	lr
 800e7bc:	fffff800 	.word	0xfffff800

0800e7c0 <LL_I2C_EnableOwnAddress1>:
{
 800e7c0:	b480      	push	{r7}
 800e7c2:	b083      	sub	sp, #12
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	689b      	ldr	r3, [r3, #8]
 800e7cc:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	609a      	str	r2, [r3, #8]
}
 800e7d4:	bf00      	nop
 800e7d6:	370c      	adds	r7, #12
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7de:	4770      	bx	lr

0800e7e0 <LL_I2C_DisableOwnAddress1>:
{
 800e7e0:	b480      	push	{r7}
 800e7e2:	b083      	sub	sp, #12
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	689b      	ldr	r3, [r3, #8]
 800e7ec:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	609a      	str	r2, [r3, #8]
}
 800e7f4:	bf00      	nop
 800e7f6:	370c      	adds	r7, #12
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fe:	4770      	bx	lr

0800e800 <LL_I2C_SetTiming>:
{
 800e800:	b480      	push	{r7}
 800e802:	b083      	sub	sp, #12
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
 800e808:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	683a      	ldr	r2, [r7, #0]
 800e80e:	611a      	str	r2, [r3, #16]
}
 800e810:	bf00      	nop
 800e812:	370c      	adds	r7, #12
 800e814:	46bd      	mov	sp, r7
 800e816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81a:	4770      	bx	lr

0800e81c <LL_I2C_SetMode>:
{
 800e81c:	b480      	push	{r7}
 800e81e:	b083      	sub	sp, #12
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
 800e824:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	431a      	orrs	r2, r3
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	601a      	str	r2, [r3, #0]
}
 800e836:	bf00      	nop
 800e838:	370c      	adds	r7, #12
 800e83a:	46bd      	mov	sp, r7
 800e83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e840:	4770      	bx	lr

0800e842 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 800e842:	b480      	push	{r7}
 800e844:	b083      	sub	sp, #12
 800e846:	af00      	add	r7, sp, #0
 800e848:	6078      	str	r0, [r7, #4]
 800e84a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	685b      	ldr	r3, [r3, #4]
 800e850:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	431a      	orrs	r2, r3
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	605a      	str	r2, [r3, #4]
}
 800e85c:	bf00      	nop
 800e85e:	370c      	adds	r7, #12
 800e860:	46bd      	mov	sp, r7
 800e862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e866:	4770      	bx	lr

0800e868 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b082      	sub	sp, #8
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
 800e870:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	f7ff ff64 	bl	800e740 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	6899      	ldr	r1, [r3, #8]
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	68db      	ldr	r3, [r3, #12]
 800e880:	461a      	mov	r2, r3
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f7ff ff6c 	bl	800e760 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	685b      	ldr	r3, [r3, #4]
 800e88c:	4619      	mov	r1, r3
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f7ff ffb6 	bl	800e800 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f7ff ff43 	bl	800e720 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 800e89a:	6878      	ldr	r0, [r7, #4]
 800e89c:	f7ff ffa0 	bl	800e7e0 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800e8a0:	683b      	ldr	r3, [r7, #0]
 800e8a2:	6919      	ldr	r1, [r3, #16]
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	699b      	ldr	r3, [r3, #24]
 800e8a8:	461a      	mov	r2, r3
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f7ff ff70 	bl	800e790 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	691b      	ldr	r3, [r3, #16]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d002      	beq.n	800e8be <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 800e8b8:	6878      	ldr	r0, [r7, #4]
 800e8ba:	f7ff ff81 	bl	800e7c0 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	4619      	mov	r1, r3
 800e8c4:	6878      	ldr	r0, [r7, #4]
 800e8c6:	f7ff ffa9 	bl	800e81c <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	695b      	ldr	r3, [r3, #20]
 800e8ce:	4619      	mov	r1, r3
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	f7ff ffb6 	bl	800e842 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800e8d6:	2300      	movs	r3, #0
}
 800e8d8:	4618      	mov	r0, r3
 800e8da:	3708      	adds	r7, #8
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bd80      	pop	{r7, pc}

0800e8e0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800e8e0:	b480      	push	{r7}
 800e8e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800e8e4:	4b07      	ldr	r3, [pc, #28]	@ (800e904 <LL_RCC_HSE_IsReady+0x24>)
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e8ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e8f0:	d101      	bne.n	800e8f6 <LL_RCC_HSE_IsReady+0x16>
 800e8f2:	2301      	movs	r3, #1
 800e8f4:	e000      	b.n	800e8f8 <LL_RCC_HSE_IsReady+0x18>
 800e8f6:	2300      	movs	r3, #0
}
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e900:	4770      	bx	lr
 800e902:	bf00      	nop
 800e904:	58024400 	.word	0x58024400

0800e908 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800e908:	b480      	push	{r7}
 800e90a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800e90c:	4b06      	ldr	r3, [pc, #24]	@ (800e928 <LL_RCC_HSI_IsReady+0x20>)
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	f003 0304 	and.w	r3, r3, #4
 800e914:	2b04      	cmp	r3, #4
 800e916:	d101      	bne.n	800e91c <LL_RCC_HSI_IsReady+0x14>
 800e918:	2301      	movs	r3, #1
 800e91a:	e000      	b.n	800e91e <LL_RCC_HSI_IsReady+0x16>
 800e91c:	2300      	movs	r3, #0
}
 800e91e:	4618      	mov	r0, r3
 800e920:	46bd      	mov	sp, r7
 800e922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e926:	4770      	bx	lr
 800e928:	58024400 	.word	0x58024400

0800e92c <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV2
  *         @arg @ref LL_RCC_HSI_DIV4
  *         @arg @ref LL_RCC_HSI_DIV8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
 800e92c:	b480      	push	{r7}
 800e92e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 800e930:	4b04      	ldr	r3, [pc, #16]	@ (800e944 <LL_RCC_HSI_GetDivider+0x18>)
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	f003 0318 	and.w	r3, r3, #24
}
 800e938:	4618      	mov	r0, r3
 800e93a:	46bd      	mov	sp, r7
 800e93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e940:	4770      	bx	lr
 800e942:	bf00      	nop
 800e944:	58024400 	.word	0x58024400

0800e948 <LL_RCC_CSI_IsReady>:
  * @brief  Check if CSI clock is ready
  * @rmtoll CR           CSIRDY        LL_RCC_CSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CSI_IsReady(void)
{
 800e948:	b480      	push	{r7}
 800e94a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY)) ? 1UL : 0UL);
 800e94c:	4b07      	ldr	r3, [pc, #28]	@ (800e96c <LL_RCC_CSI_IsReady+0x24>)
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e954:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e958:	d101      	bne.n	800e95e <LL_RCC_CSI_IsReady+0x16>
 800e95a:	2301      	movs	r3, #1
 800e95c:	e000      	b.n	800e960 <LL_RCC_CSI_IsReady+0x18>
 800e95e:	2300      	movs	r3, #0
}
 800e960:	4618      	mov	r0, r3
 800e962:	46bd      	mov	sp, r7
 800e964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e968:	4770      	bx	lr
 800e96a:	bf00      	nop
 800e96c:	58024400 	.word	0x58024400

0800e970 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800e970:	b480      	push	{r7}
 800e972:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800e974:	4b06      	ldr	r3, [pc, #24]	@ (800e990 <LL_RCC_LSE_IsReady+0x20>)
 800e976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e978:	f003 0302 	and.w	r3, r3, #2
 800e97c:	2b02      	cmp	r3, #2
 800e97e:	d101      	bne.n	800e984 <LL_RCC_LSE_IsReady+0x14>
 800e980:	2301      	movs	r3, #1
 800e982:	e000      	b.n	800e986 <LL_RCC_LSE_IsReady+0x16>
 800e984:	2300      	movs	r3, #0
}
 800e986:	4618      	mov	r0, r3
 800e988:	46bd      	mov	sp, r7
 800e98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98e:	4770      	bx	lr
 800e990:	58024400 	.word	0x58024400

0800e994 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_CSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL1
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800e994:	b480      	push	{r7}
 800e996:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800e998:	4b04      	ldr	r3, [pc, #16]	@ (800e9ac <LL_RCC_GetSysClkSource+0x18>)
 800e99a:	691b      	ldr	r3, [r3, #16]
 800e99c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
}
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a8:	4770      	bx	lr
 800e9aa:	bf00      	nop
 800e9ac:	58024400 	.word	0x58024400

0800e9b0 <LL_RCC_GetSysPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysPrescaler(void)
{
 800e9b0:	b480      	push	{r7}
 800e9b2:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1CPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1CPRE));
 800e9b4:	4b04      	ldr	r3, [pc, #16]	@ (800e9c8 <LL_RCC_GetSysPrescaler+0x18>)
 800e9b6:	699b      	ldr	r3, [r3, #24]
 800e9b8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE));
#endif /* RCC_D1CFGR_D1CPRE */
}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c4:	4770      	bx	lr
 800e9c6:	bf00      	nop
 800e9c8:	58024400 	.word	0x58024400

0800e9cc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_AHB_DIV_128
  *         @arg @ref LL_RCC_AHB_DIV_256
  *         @arg @ref LL_RCC_AHB_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800e9cc:	b480      	push	{r7}
 800e9ce:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_HPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 800e9d0:	4b04      	ldr	r3, [pc, #16]	@ (800e9e4 <LL_RCC_GetAHBPrescaler+0x18>)
 800e9d2:	699b      	ldr	r3, [r3, #24]
 800e9d4:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_HPRE));
#endif /* RCC_D1CFGR_HPRE */
}
 800e9d8:	4618      	mov	r0, r3
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e0:	4770      	bx	lr
 800e9e2:	bf00      	nop
 800e9e4:	58024400 	.word	0x58024400

0800e9e8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800e9e8:	b480      	push	{r7}
 800e9ea:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE1)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1));
 800e9ec:	4b04      	ldr	r3, [pc, #16]	@ (800ea00 <LL_RCC_GetAPB1Prescaler+0x18>)
 800e9ee:	69db      	ldr	r3, [r3, #28]
 800e9f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1));
#endif /* RCC_D2CFGR_D2PPRE1 */
}
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fc:	4770      	bx	lr
 800e9fe:	bf00      	nop
 800ea00:	58024400 	.word	0x58024400

0800ea04 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800ea04:	b480      	push	{r7}
 800ea06:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE2)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2));
 800ea08:	4b04      	ldr	r3, [pc, #16]	@ (800ea1c <LL_RCC_GetAPB2Prescaler+0x18>)
 800ea0a:	69db      	ldr	r3, [r3, #28]
 800ea0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2));
#endif /* RCC_D2CFGR_D2PPRE2 */
}
 800ea10:	4618      	mov	r0, r3
 800ea12:	46bd      	mov	sp, r7
 800ea14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea18:	4770      	bx	lr
 800ea1a:	bf00      	nop
 800ea1c:	58024400 	.word	0x58024400

0800ea20 <LL_RCC_GetClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_GetClockSource(uint32_t Periph)
{
 800ea20:	b480      	push	{r7}
 800ea22:	b085      	sub	sp, #20
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CCIPR_FMCSEL)
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->D1CCIPR) + LL_CLKSOURCE_REG(Periph)));
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	b2da      	uxtb	r2, r3
 800ea2c:	4b0e      	ldr	r3, [pc, #56]	@ (800ea68 <LL_RCC_GetClockSource+0x48>)
 800ea2e:	4413      	add	r3, r2
 800ea30:	60fb      	str	r3, [r7, #12]
#else
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CDCCIPR) + LL_CLKSOURCE_REG(Periph)));
#endif /* RCC_D1CCIPR_FMCSEL */
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	681a      	ldr	r2, [r3, #0]
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	0e19      	lsrs	r1, r3, #24
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	0a1b      	lsrs	r3, r3, #8
 800ea3e:	f003 031f 	and.w	r3, r3, #31
 800ea42:	fa01 f303 	lsl.w	r3, r1, r3
 800ea46:	401a      	ands	r2, r3
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	0a1b      	lsrs	r3, r3, #8
 800ea4c:	f003 031f 	and.w	r3, r3, #31
 800ea50:	fa22 f303 	lsr.w	r3, r2, r3
 800ea54:	041a      	lsls	r2, r3, #16
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	4313      	orrs	r3, r2
}
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	3714      	adds	r7, #20
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea64:	4770      	bx	lr
 800ea66:	bf00      	nop
 800ea68:	5802444c 	.word	0x5802444c

0800ea6c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_CSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t Periph)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b082      	sub	sp, #8
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f7ff ffd3 	bl	800ea20 <LL_RCC_GetClockSource>
 800ea7a:	4603      	mov	r3, r0
}
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	3708      	adds	r7, #8
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd80      	pop	{r7, pc}

0800ea84 <LL_RCC_PLL_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_CSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetSource(void)
{
 800ea84:	b480      	push	{r7}
 800ea86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 800ea88:	4b04      	ldr	r3, [pc, #16]	@ (800ea9c <LL_RCC_PLL_GetSource+0x18>)
 800ea8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea8c:	f003 0303 	and.w	r3, r3, #3
}
 800ea90:	4618      	mov	r0, r3
 800ea92:	46bd      	mov	sp, r7
 800ea94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea98:	4770      	bx	lr
 800ea9a:	bf00      	nop
 800ea9c:	58024400 	.word	0x58024400

0800eaa0 <LL_RCC_PLL1P_IsEnabled>:
  * @brief  Check if PLL1 P is enabled
  * @rmtoll PLLCFGR           DIVP1EN         LL_RCC_PLL1P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1P_IsEnabled(void)
{
 800eaa0:	b480      	push	{r7}
 800eaa2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN) == RCC_PLLCFGR_DIVP1EN) ? 1UL : 0UL);
 800eaa4:	4b07      	ldr	r3, [pc, #28]	@ (800eac4 <LL_RCC_PLL1P_IsEnabled+0x24>)
 800eaa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eaa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800eaac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eab0:	d101      	bne.n	800eab6 <LL_RCC_PLL1P_IsEnabled+0x16>
 800eab2:	2301      	movs	r3, #1
 800eab4:	e000      	b.n	800eab8 <LL_RCC_PLL1P_IsEnabled+0x18>
 800eab6:	2300      	movs	r3, #0
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	46bd      	mov	sp, r7
 800eabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac0:	4770      	bx	lr
 800eac2:	bf00      	nop
 800eac4:	58024400 	.word	0x58024400

0800eac8 <LL_RCC_PLL1Q_IsEnabled>:
  * @brief  Check if PLL1 Q is enabled
  * @rmtoll PLLCFGR           DIVQ1EN         LL_RCC_PLL1Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1Q_IsEnabled(void)
{
 800eac8:	b480      	push	{r7}
 800eaca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN) == RCC_PLLCFGR_DIVQ1EN) ? 1UL : 0UL);
 800eacc:	4b07      	ldr	r3, [pc, #28]	@ (800eaec <LL_RCC_PLL1Q_IsEnabled+0x24>)
 800eace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ead0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ead4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ead8:	d101      	bne.n	800eade <LL_RCC_PLL1Q_IsEnabled+0x16>
 800eada:	2301      	movs	r3, #1
 800eadc:	e000      	b.n	800eae0 <LL_RCC_PLL1Q_IsEnabled+0x18>
 800eade:	2300      	movs	r3, #0
}
 800eae0:	4618      	mov	r0, r3
 800eae2:	46bd      	mov	sp, r7
 800eae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae8:	4770      	bx	lr
 800eaea:	bf00      	nop
 800eaec:	58024400 	.word	0x58024400

0800eaf0 <LL_RCC_PLL1R_IsEnabled>:
  * @brief  Check if PLL1 R is enabled
  * @rmtoll PLLCFGR           DIVR1EN         LL_RCC_PLL1R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1R_IsEnabled(void)
{
 800eaf0:	b480      	push	{r7}
 800eaf2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN) == RCC_PLLCFGR_DIVR1EN) ? 1UL : 0UL);
 800eaf4:	4b07      	ldr	r3, [pc, #28]	@ (800eb14 <LL_RCC_PLL1R_IsEnabled+0x24>)
 800eaf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eaf8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800eafc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800eb00:	d101      	bne.n	800eb06 <LL_RCC_PLL1R_IsEnabled+0x16>
 800eb02:	2301      	movs	r3, #1
 800eb04:	e000      	b.n	800eb08 <LL_RCC_PLL1R_IsEnabled+0x18>
 800eb06:	2300      	movs	r3, #0
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb10:	4770      	bx	lr
 800eb12:	bf00      	nop
 800eb14:	58024400 	.word	0x58024400

0800eb18 <LL_RCC_PLL1FRACN_IsEnabled>:
  * @brief  Check if PLL1 FRACN is enabled
  * @rmtoll PLLCFGR           PLL1FRACEN         LL_RCC_PLL1FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1FRACN_IsEnabled(void)
{
 800eb18:	b480      	push	{r7}
 800eb1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN) == RCC_PLLCFGR_PLL1FRACEN) ? 1UL : 0UL);
 800eb1c:	4b06      	ldr	r3, [pc, #24]	@ (800eb38 <LL_RCC_PLL1FRACN_IsEnabled+0x20>)
 800eb1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb20:	f003 0301 	and.w	r3, r3, #1
 800eb24:	2b01      	cmp	r3, #1
 800eb26:	d101      	bne.n	800eb2c <LL_RCC_PLL1FRACN_IsEnabled+0x14>
 800eb28:	2301      	movs	r3, #1
 800eb2a:	e000      	b.n	800eb2e <LL_RCC_PLL1FRACN_IsEnabled+0x16>
 800eb2c:	2300      	movs	r3, #0
}
 800eb2e:	4618      	mov	r0, r3
 800eb30:	46bd      	mov	sp, r7
 800eb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb36:	4770      	bx	lr
 800eb38:	58024400 	.word	0x58024400

0800eb3c <LL_RCC_PLL1_GetN>:
  * @brief  Get PLL1 N Coefficient
  * @rmtoll PLL1DIVR        N1          LL_RCC_PLL1_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetN(void)
{
 800eb3c:	b480      	push	{r7}
 800eb3e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 800eb40:	4b04      	ldr	r3, [pc, #16]	@ (800eb54 <LL_RCC_PLL1_GetN+0x18>)
 800eb42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb48:	3301      	adds	r3, #1
}
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb52:	4770      	bx	lr
 800eb54:	58024400 	.word	0x58024400

0800eb58 <LL_RCC_PLL1_GetM>:
  * @brief  Get PLL1 M Coefficient
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetM(void)
{
 800eb58:	b480      	push	{r7}
 800eb5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 800eb5c:	4b04      	ldr	r3, [pc, #16]	@ (800eb70 <LL_RCC_PLL1_GetM+0x18>)
 800eb5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb60:	091b      	lsrs	r3, r3, #4
 800eb62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6e:	4770      	bx	lr
 800eb70:	58024400 	.word	0x58024400

0800eb74 <LL_RCC_PLL1_GetP>:
  * @brief  Get PLL1 P Coefficient
  * @rmtoll PLL1DIVR        P1          LL_RCC_PLL1_GetP
  * @retval A value between 2 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetP(void)
{
 800eb74:	b480      	push	{r7}
 800eb76:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_P1) >>  RCC_PLL1DIVR_P1_Pos) + 1UL);
 800eb78:	4b05      	ldr	r3, [pc, #20]	@ (800eb90 <LL_RCC_PLL1_GetP+0x1c>)
 800eb7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb7c:	0a5b      	lsrs	r3, r3, #9
 800eb7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eb82:	3301      	adds	r3, #1
}
 800eb84:	4618      	mov	r0, r3
 800eb86:	46bd      	mov	sp, r7
 800eb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8c:	4770      	bx	lr
 800eb8e:	bf00      	nop
 800eb90:	58024400 	.word	0x58024400

0800eb94 <LL_RCC_PLL1_GetQ>:
  * @brief  Get PLL1 Q Coefficient
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetQ(void)
{
 800eb94:	b480      	push	{r7}
 800eb96:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1) >>  RCC_PLL1DIVR_Q1_Pos) + 1UL);
 800eb98:	4b05      	ldr	r3, [pc, #20]	@ (800ebb0 <LL_RCC_PLL1_GetQ+0x1c>)
 800eb9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb9c:	0c1b      	lsrs	r3, r3, #16
 800eb9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eba2:	3301      	adds	r3, #1
}
 800eba4:	4618      	mov	r0, r3
 800eba6:	46bd      	mov	sp, r7
 800eba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebac:	4770      	bx	lr
 800ebae:	bf00      	nop
 800ebb0:	58024400 	.word	0x58024400

0800ebb4 <LL_RCC_PLL1_GetR>:
  * @brief  Get PLL1 R Coefficient
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetR(void)
{
 800ebb4:	b480      	push	{r7}
 800ebb6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_R1) >>  RCC_PLL1DIVR_R1_Pos) + 1UL);
 800ebb8:	4b05      	ldr	r3, [pc, #20]	@ (800ebd0 <LL_RCC_PLL1_GetR+0x1c>)
 800ebba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebbc:	0e1b      	lsrs	r3, r3, #24
 800ebbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ebc2:	3301      	adds	r3, #1
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebcc:	4770      	bx	lr
 800ebce:	bf00      	nop
 800ebd0:	58024400 	.word	0x58024400

0800ebd4 <LL_RCC_PLL1_GetFRACN>:
  * @brief  Get PLL1 FRACN Coefficient
  * @rmtoll PLL1FRACR      FRACN1          LL_RCC_PLL1_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetFRACN(void)
{
 800ebd4:	b480      	push	{r7}
 800ebd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1) >>  RCC_PLL1FRACR_FRACN1_Pos);
 800ebd8:	4b04      	ldr	r3, [pc, #16]	@ (800ebec <LL_RCC_PLL1_GetFRACN+0x18>)
 800ebda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ebdc:	08db      	lsrs	r3, r3, #3
 800ebde:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebea:	4770      	bx	lr
 800ebec:	58024400 	.word	0x58024400

0800ebf0 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll CR           PLL2RDY        LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY)) ? 1UL : 0UL);
 800ebf4:	4b07      	ldr	r3, [pc, #28]	@ (800ec14 <LL_RCC_PLL2_IsReady+0x24>)
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ebfc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ec00:	d101      	bne.n	800ec06 <LL_RCC_PLL2_IsReady+0x16>
 800ec02:	2301      	movs	r3, #1
 800ec04:	e000      	b.n	800ec08 <LL_RCC_PLL2_IsReady+0x18>
 800ec06:	2300      	movs	r3, #0
}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec10:	4770      	bx	lr
 800ec12:	bf00      	nop
 800ec14:	58024400 	.word	0x58024400

0800ec18 <LL_RCC_PLL2P_IsEnabled>:
  * @brief  Check if PLL2 P is enabled
  * @rmtoll PLLCFGR           DIVP2EN         LL_RCC_PLL2P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2P_IsEnabled(void)
{
 800ec18:	b480      	push	{r7}
 800ec1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP2EN) == RCC_PLLCFGR_DIVP2EN) ? 1UL : 0UL);
 800ec1c:	4b07      	ldr	r3, [pc, #28]	@ (800ec3c <LL_RCC_PLL2P_IsEnabled+0x24>)
 800ec1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec20:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ec24:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800ec28:	d101      	bne.n	800ec2e <LL_RCC_PLL2P_IsEnabled+0x16>
 800ec2a:	2301      	movs	r3, #1
 800ec2c:	e000      	b.n	800ec30 <LL_RCC_PLL2P_IsEnabled+0x18>
 800ec2e:	2300      	movs	r3, #0
}
 800ec30:	4618      	mov	r0, r3
 800ec32:	46bd      	mov	sp, r7
 800ec34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec38:	4770      	bx	lr
 800ec3a:	bf00      	nop
 800ec3c:	58024400 	.word	0x58024400

0800ec40 <LL_RCC_PLL2Q_IsEnabled>:
  * @brief  Check if PLL2 Q is enabled
  * @rmtoll PLLCFGR           DIVQ2EN         LL_RCC_PLL2Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2Q_IsEnabled(void)
{
 800ec40:	b480      	push	{r7}
 800ec42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ2EN) == RCC_PLLCFGR_DIVQ2EN) ? 1UL : 0UL);
 800ec44:	4b07      	ldr	r3, [pc, #28]	@ (800ec64 <LL_RCC_PLL2Q_IsEnabled+0x24>)
 800ec46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ec4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ec50:	d101      	bne.n	800ec56 <LL_RCC_PLL2Q_IsEnabled+0x16>
 800ec52:	2301      	movs	r3, #1
 800ec54:	e000      	b.n	800ec58 <LL_RCC_PLL2Q_IsEnabled+0x18>
 800ec56:	2300      	movs	r3, #0
}
 800ec58:	4618      	mov	r0, r3
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec60:	4770      	bx	lr
 800ec62:	bf00      	nop
 800ec64:	58024400 	.word	0x58024400

0800ec68 <LL_RCC_PLL2R_IsEnabled>:
  * @brief  Check if PLL2 R is enabled
  * @rmtoll PLLCFGR           DIVR2EN         LL_RCC_PLL2R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2R_IsEnabled(void)
{
 800ec68:	b480      	push	{r7}
 800ec6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR2EN) == RCC_PLLCFGR_DIVR2EN) ? 1UL : 0UL);
 800ec6c:	4b07      	ldr	r3, [pc, #28]	@ (800ec8c <LL_RCC_PLL2R_IsEnabled+0x24>)
 800ec6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ec74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ec78:	d101      	bne.n	800ec7e <LL_RCC_PLL2R_IsEnabled+0x16>
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	e000      	b.n	800ec80 <LL_RCC_PLL2R_IsEnabled+0x18>
 800ec7e:	2300      	movs	r3, #0
}
 800ec80:	4618      	mov	r0, r3
 800ec82:	46bd      	mov	sp, r7
 800ec84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec88:	4770      	bx	lr
 800ec8a:	bf00      	nop
 800ec8c:	58024400 	.word	0x58024400

0800ec90 <LL_RCC_PLL2FRACN_IsEnabled>:
  * @brief  Check if PLL2 FRACN is enabled
  * @rmtoll PLLCFGR           PLL2FRACEN         LL_RCC_PLL2FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2FRACN_IsEnabled(void)
{
 800ec90:	b480      	push	{r7}
 800ec92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL2FRACEN) == RCC_PLLCFGR_PLL2FRACEN) ? 1UL : 0UL);
 800ec94:	4b06      	ldr	r3, [pc, #24]	@ (800ecb0 <LL_RCC_PLL2FRACN_IsEnabled+0x20>)
 800ec96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec98:	f003 0310 	and.w	r3, r3, #16
 800ec9c:	2b10      	cmp	r3, #16
 800ec9e:	d101      	bne.n	800eca4 <LL_RCC_PLL2FRACN_IsEnabled+0x14>
 800eca0:	2301      	movs	r3, #1
 800eca2:	e000      	b.n	800eca6 <LL_RCC_PLL2FRACN_IsEnabled+0x16>
 800eca4:	2300      	movs	r3, #0
}
 800eca6:	4618      	mov	r0, r3
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecae:	4770      	bx	lr
 800ecb0:	58024400 	.word	0x58024400

0800ecb4 <LL_RCC_PLL2_GetN>:
  * @brief  Get PLL2 N Coefficient
  * @rmtoll PLL2DIVR        N2          LL_RCC_PLL2_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetN(void)
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_N2) >>  RCC_PLL2DIVR_N2_Pos) + 1UL);
 800ecb8:	4b04      	ldr	r3, [pc, #16]	@ (800eccc <LL_RCC_PLL2_GetN+0x18>)
 800ecba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ecbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecc0:	3301      	adds	r3, #1
}
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecca:	4770      	bx	lr
 800eccc:	58024400 	.word	0x58024400

0800ecd0 <LL_RCC_PLL2_GetM>:
  * @brief  Get PLL2 M Coefficient
  * @rmtoll PLLCKSELR       DIVM2          LL_RCC_PLL2_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetM(void)
{
 800ecd0:	b480      	push	{r7}
 800ecd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2) >>  RCC_PLLCKSELR_DIVM2_Pos);
 800ecd4:	4b04      	ldr	r3, [pc, #16]	@ (800ece8 <LL_RCC_PLL2_GetM+0x18>)
 800ecd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ecd8:	0b1b      	lsrs	r3, r3, #12
 800ecda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800ecde:	4618      	mov	r0, r3
 800ece0:	46bd      	mov	sp, r7
 800ece2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece6:	4770      	bx	lr
 800ece8:	58024400 	.word	0x58024400

0800ecec <LL_RCC_PLL2_GetP>:
  * @brief  Get PLL2 P Coefficient
  * @rmtoll PLL2DIVR        P2          LL_RCC_PLL2_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetP(void)
{
 800ecec:	b480      	push	{r7}
 800ecee:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_P2) >>  RCC_PLL2DIVR_P2_Pos) + 1UL);
 800ecf0:	4b05      	ldr	r3, [pc, #20]	@ (800ed08 <LL_RCC_PLL2_GetP+0x1c>)
 800ecf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ecf4:	0a5b      	lsrs	r3, r3, #9
 800ecf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ecfa:	3301      	adds	r3, #1
}
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed04:	4770      	bx	lr
 800ed06:	bf00      	nop
 800ed08:	58024400 	.word	0x58024400

0800ed0c <LL_RCC_PLL2_GetQ>:
  * @brief  Get PLL2 Q Coefficient
  * @rmtoll PLL2DIVR        Q2          LL_RCC_PLL2_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetQ(void)
{
 800ed0c:	b480      	push	{r7}
 800ed0e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2) >>  RCC_PLL2DIVR_Q2_Pos) + 1UL);
 800ed10:	4b05      	ldr	r3, [pc, #20]	@ (800ed28 <LL_RCC_PLL2_GetQ+0x1c>)
 800ed12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed14:	0c1b      	lsrs	r3, r3, #16
 800ed16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ed1a:	3301      	adds	r3, #1
}
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed24:	4770      	bx	lr
 800ed26:	bf00      	nop
 800ed28:	58024400 	.word	0x58024400

0800ed2c <LL_RCC_PLL2_GetR>:
  * @brief  Get PLL2 R Coefficient
  * @rmtoll PLL2DIVR        R2          LL_RCC_PLL2_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetR(void)
{
 800ed2c:	b480      	push	{r7}
 800ed2e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_R2) >>  RCC_PLL2DIVR_R2_Pos) + 1UL);
 800ed30:	4b05      	ldr	r3, [pc, #20]	@ (800ed48 <LL_RCC_PLL2_GetR+0x1c>)
 800ed32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed34:	0e1b      	lsrs	r3, r3, #24
 800ed36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ed3a:	3301      	adds	r3, #1
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed44:	4770      	bx	lr
 800ed46:	bf00      	nop
 800ed48:	58024400 	.word	0x58024400

0800ed4c <LL_RCC_PLL2_GetFRACN>:
  * @brief  Get PLL2 FRACN Coefficient
  * @rmtoll PLL2FRACR      FRACN2          LL_RCC_PLL2_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetFRACN(void)
{
 800ed4c:	b480      	push	{r7}
 800ed4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2FRACR, RCC_PLL2FRACR_FRACN2) >>  RCC_PLL2FRACR_FRACN2_Pos);
 800ed50:	4b04      	ldr	r3, [pc, #16]	@ (800ed64 <LL_RCC_PLL2_GetFRACN+0x18>)
 800ed52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed54:	08db      	lsrs	r3, r3, #3
 800ed56:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed62:	4770      	bx	lr
 800ed64:	58024400 	.word	0x58024400

0800ed68 <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll CR           PLL3RDY        LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
 800ed68:	b480      	push	{r7}
 800ed6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == (RCC_CR_PLL3RDY)) ? 1UL : 0UL);
 800ed6c:	4b07      	ldr	r3, [pc, #28]	@ (800ed8c <LL_RCC_PLL3_IsReady+0x24>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ed74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ed78:	d101      	bne.n	800ed7e <LL_RCC_PLL3_IsReady+0x16>
 800ed7a:	2301      	movs	r3, #1
 800ed7c:	e000      	b.n	800ed80 <LL_RCC_PLL3_IsReady+0x18>
 800ed7e:	2300      	movs	r3, #0
}
 800ed80:	4618      	mov	r0, r3
 800ed82:	46bd      	mov	sp, r7
 800ed84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed88:	4770      	bx	lr
 800ed8a:	bf00      	nop
 800ed8c:	58024400 	.word	0x58024400

0800ed90 <LL_RCC_PLL3P_IsEnabled>:
  * @brief  Check if PLL3 P is enabled
  * @rmtoll PLLCFGR           DIVP3EN         LL_RCC_PLL3P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3P_IsEnabled(void)
{
 800ed90:	b480      	push	{r7}
 800ed92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP3EN) == RCC_PLLCFGR_DIVP3EN) ? 1UL : 0UL);
 800ed94:	4b07      	ldr	r3, [pc, #28]	@ (800edb4 <LL_RCC_PLL3P_IsEnabled+0x24>)
 800ed96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ed9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800eda0:	d101      	bne.n	800eda6 <LL_RCC_PLL3P_IsEnabled+0x16>
 800eda2:	2301      	movs	r3, #1
 800eda4:	e000      	b.n	800eda8 <LL_RCC_PLL3P_IsEnabled+0x18>
 800eda6:	2300      	movs	r3, #0
}
 800eda8:	4618      	mov	r0, r3
 800edaa:	46bd      	mov	sp, r7
 800edac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb0:	4770      	bx	lr
 800edb2:	bf00      	nop
 800edb4:	58024400 	.word	0x58024400

0800edb8 <LL_RCC_PLL3Q_IsEnabled>:
  * @brief  Check if PLL3 Q is enabled
  * @rmtoll PLLCFGR           DIVQ3EN         LL_RCC_PLL3Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3Q_IsEnabled(void)
{
 800edb8:	b480      	push	{r7}
 800edba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ3EN) == RCC_PLLCFGR_DIVQ3EN) ? 1UL : 0UL);
 800edbc:	4b07      	ldr	r3, [pc, #28]	@ (800eddc <LL_RCC_PLL3Q_IsEnabled+0x24>)
 800edbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edc0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800edc4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800edc8:	d101      	bne.n	800edce <LL_RCC_PLL3Q_IsEnabled+0x16>
 800edca:	2301      	movs	r3, #1
 800edcc:	e000      	b.n	800edd0 <LL_RCC_PLL3Q_IsEnabled+0x18>
 800edce:	2300      	movs	r3, #0
}
 800edd0:	4618      	mov	r0, r3
 800edd2:	46bd      	mov	sp, r7
 800edd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd8:	4770      	bx	lr
 800edda:	bf00      	nop
 800eddc:	58024400 	.word	0x58024400

0800ede0 <LL_RCC_PLL3R_IsEnabled>:
  * @brief  Check if PLL3 R is enabled
  * @rmtoll PLLCFGR           DIVR3EN         LL_RCC_PLL3R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3R_IsEnabled(void)
{
 800ede0:	b480      	push	{r7}
 800ede2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR3EN) == RCC_PLLCFGR_DIVR3EN) ? 1UL : 0UL);
 800ede4:	4b07      	ldr	r3, [pc, #28]	@ (800ee04 <LL_RCC_PLL3R_IsEnabled+0x24>)
 800ede6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ede8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800edec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800edf0:	d101      	bne.n	800edf6 <LL_RCC_PLL3R_IsEnabled+0x16>
 800edf2:	2301      	movs	r3, #1
 800edf4:	e000      	b.n	800edf8 <LL_RCC_PLL3R_IsEnabled+0x18>
 800edf6:	2300      	movs	r3, #0
}
 800edf8:	4618      	mov	r0, r3
 800edfa:	46bd      	mov	sp, r7
 800edfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee00:	4770      	bx	lr
 800ee02:	bf00      	nop
 800ee04:	58024400 	.word	0x58024400

0800ee08 <LL_RCC_PLL3FRACN_IsEnabled>:
  * @brief  Check if PLL3 FRACN is enabled
  * @rmtoll PLLCFGR           PLL3FRACEN         LL_RCC_PLL3FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3FRACN_IsEnabled(void)
{
 800ee08:	b480      	push	{r7}
 800ee0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN) ? 1UL : 0UL);
 800ee0c:	4b07      	ldr	r3, [pc, #28]	@ (800ee2c <LL_RCC_PLL3FRACN_IsEnabled+0x24>)
 800ee0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ee14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ee18:	d101      	bne.n	800ee1e <LL_RCC_PLL3FRACN_IsEnabled+0x16>
 800ee1a:	2301      	movs	r3, #1
 800ee1c:	e000      	b.n	800ee20 <LL_RCC_PLL3FRACN_IsEnabled+0x18>
 800ee1e:	2300      	movs	r3, #0
}
 800ee20:	4618      	mov	r0, r3
 800ee22:	46bd      	mov	sp, r7
 800ee24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee28:	4770      	bx	lr
 800ee2a:	bf00      	nop
 800ee2c:	58024400 	.word	0x58024400

0800ee30 <LL_RCC_PLL3_GetN>:
  * @brief  Get PLL3 N Coefficient
  * @rmtoll PLL3DIVR        N3          LL_RCC_PLL3_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetN(void)
{
 800ee30:	b480      	push	{r7}
 800ee32:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 800ee34:	4b04      	ldr	r3, [pc, #16]	@ (800ee48 <LL_RCC_PLL3_GetN+0x18>)
 800ee36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee3c:	3301      	adds	r3, #1
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	46bd      	mov	sp, r7
 800ee42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee46:	4770      	bx	lr
 800ee48:	58024400 	.word	0x58024400

0800ee4c <LL_RCC_PLL3_GetM>:
  * @brief  Get PLL3 M Coefficient
  * @rmtoll PLLCKSELR       DIVM3          LL_RCC_PLL3_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetM(void)
{
 800ee4c:	b480      	push	{r7}
 800ee4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 800ee50:	4b04      	ldr	r3, [pc, #16]	@ (800ee64 <LL_RCC_PLL3_GetM+0x18>)
 800ee52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee54:	0d1b      	lsrs	r3, r3, #20
 800ee56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee62:	4770      	bx	lr
 800ee64:	58024400 	.word	0x58024400

0800ee68 <LL_RCC_PLL3_GetP>:
  * @brief  Get PLL3 P Coefficient
  * @rmtoll PLL3DIVR        P3          LL_RCC_PLL3_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetP(void)
{
 800ee68:	b480      	push	{r7}
 800ee6a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_P3) >>  RCC_PLL3DIVR_P3_Pos) + 1UL);
 800ee6c:	4b05      	ldr	r3, [pc, #20]	@ (800ee84 <LL_RCC_PLL3_GetP+0x1c>)
 800ee6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee70:	0a5b      	lsrs	r3, r3, #9
 800ee72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ee76:	3301      	adds	r3, #1
}
 800ee78:	4618      	mov	r0, r3
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee80:	4770      	bx	lr
 800ee82:	bf00      	nop
 800ee84:	58024400 	.word	0x58024400

0800ee88 <LL_RCC_PLL3_GetQ>:
  * @brief  Get PLL3 Q Coefficient
  * @rmtoll PLL3DIVR        Q3          LL_RCC_PLL3_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetQ(void)
{
 800ee88:	b480      	push	{r7}
 800ee8a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_Q3) >>  RCC_PLL3DIVR_Q3_Pos) + 1UL);
 800ee8c:	4b05      	ldr	r3, [pc, #20]	@ (800eea4 <LL_RCC_PLL3_GetQ+0x1c>)
 800ee8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee90:	0c1b      	lsrs	r3, r3, #16
 800ee92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ee96:	3301      	adds	r3, #1
}
 800ee98:	4618      	mov	r0, r3
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea0:	4770      	bx	lr
 800eea2:	bf00      	nop
 800eea4:	58024400 	.word	0x58024400

0800eea8 <LL_RCC_PLL3_GetR>:
  * @brief  Get PLL3 R Coefficient
  * @rmtoll PLL3DIVR        R3          LL_RCC_PLL3_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetR(void)
{
 800eea8:	b480      	push	{r7}
 800eeaa:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_R3) >>  RCC_PLL3DIVR_R3_Pos) + 1UL);
 800eeac:	4b05      	ldr	r3, [pc, #20]	@ (800eec4 <LL_RCC_PLL3_GetR+0x1c>)
 800eeae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eeb0:	0e1b      	lsrs	r3, r3, #24
 800eeb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eeb6:	3301      	adds	r3, #1
}
 800eeb8:	4618      	mov	r0, r3
 800eeba:	46bd      	mov	sp, r7
 800eebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec0:	4770      	bx	lr
 800eec2:	bf00      	nop
 800eec4:	58024400 	.word	0x58024400

0800eec8 <LL_RCC_PLL3_GetFRACN>:
  * @brief  Get PLL3 FRACN Coefficient
  * @rmtoll PLL3FRACR      FRACN3          LL_RCC_PLL3_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetFRACN(void)
{
 800eec8:	b480      	push	{r7}
 800eeca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3) >>  RCC_PLL3FRACR_FRACN3_Pos);
 800eecc:	4b04      	ldr	r3, [pc, #16]	@ (800eee0 <LL_RCC_PLL3_GetFRACN+0x18>)
 800eece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eed0:	08db      	lsrs	r3, r3, #3
 800eed2:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 800eed6:	4618      	mov	r0, r3
 800eed8:	46bd      	mov	sp, r7
 800eeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eede:	4770      	bx	lr
 800eee0:	58024400 	.word	0x58024400

0800eee4 <LL_RCC_GetPLL1ClockFreq>:
  * @brief  Return PLL1 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL1ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b08a      	sub	sp, #40	@ 0x28
 800eee8:	af02      	add	r7, sp, #8
 800eeea:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 800eeec:	2300      	movs	r3, #0
 800eeee:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 800eef0:	2300      	movs	r3, #0
 800eef2:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 800eef4:	f7ff fdc6 	bl	800ea84 <LL_RCC_PLL_GetSource>
 800eef8:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 800eefa:	697b      	ldr	r3, [r7, #20]
 800eefc:	2b02      	cmp	r3, #2
 800eefe:	d01f      	beq.n	800ef40 <LL_RCC_GetPLL1ClockFreq+0x5c>
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	2b02      	cmp	r3, #2
 800ef04:	d824      	bhi.n	800ef50 <LL_RCC_GetPLL1ClockFreq+0x6c>
 800ef06:	697b      	ldr	r3, [r7, #20]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d003      	beq.n	800ef14 <LL_RCC_GetPLL1ClockFreq+0x30>
 800ef0c:	697b      	ldr	r3, [r7, #20]
 800ef0e:	2b01      	cmp	r3, #1
 800ef10:	d00e      	beq.n	800ef30 <LL_RCC_GetPLL1ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 800ef12:	e01d      	b.n	800ef50 <LL_RCC_GetPLL1ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 800ef14:	f7ff fcf8 	bl	800e908 <LL_RCC_HSI_IsReady>
 800ef18:	4603      	mov	r3, r0
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d01a      	beq.n	800ef54 <LL_RCC_GetPLL1ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 800ef1e:	f7ff fd05 	bl	800e92c <LL_RCC_HSI_GetDivider>
 800ef22:	4603      	mov	r3, r0
 800ef24:	08db      	lsrs	r3, r3, #3
 800ef26:	4a38      	ldr	r2, [pc, #224]	@ (800f008 <LL_RCC_GetPLL1ClockFreq+0x124>)
 800ef28:	fa22 f303 	lsr.w	r3, r2, r3
 800ef2c:	61fb      	str	r3, [r7, #28]
      break;
 800ef2e:	e011      	b.n	800ef54 <LL_RCC_GetPLL1ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 800ef30:	f7ff fd0a 	bl	800e948 <LL_RCC_CSI_IsReady>
 800ef34:	4603      	mov	r3, r0
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d00e      	beq.n	800ef58 <LL_RCC_GetPLL1ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 800ef3a:	4b34      	ldr	r3, [pc, #208]	@ (800f00c <LL_RCC_GetPLL1ClockFreq+0x128>)
 800ef3c:	61fb      	str	r3, [r7, #28]
      break;
 800ef3e:	e00b      	b.n	800ef58 <LL_RCC_GetPLL1ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 800ef40:	f7ff fcce 	bl	800e8e0 <LL_RCC_HSE_IsReady>
 800ef44:	4603      	mov	r3, r0
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d008      	beq.n	800ef5c <LL_RCC_GetPLL1ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 800ef4a:	4b31      	ldr	r3, [pc, #196]	@ (800f010 <LL_RCC_GetPLL1ClockFreq+0x12c>)
 800ef4c:	61fb      	str	r3, [r7, #28]
      break;
 800ef4e:	e005      	b.n	800ef5c <LL_RCC_GetPLL1ClockFreq+0x78>
      break;
 800ef50:	bf00      	nop
 800ef52:	e004      	b.n	800ef5e <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 800ef54:	bf00      	nop
 800ef56:	e002      	b.n	800ef5e <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 800ef58:	bf00      	nop
 800ef5a:	e000      	b.n	800ef5e <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 800ef5c:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	2200      	movs	r2, #0
 800ef62:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	2200      	movs	r2, #0
 800ef68:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL1_GetM();
 800ef70:	f7ff fdf2 	bl	800eb58 <LL_RCC_PLL1_GetM>
 800ef74:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL1_GetN();
 800ef76:	f7ff fde1 	bl	800eb3c <LL_RCC_PLL1_GetN>
 800ef7a:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL1FRACN_IsEnabled() != 0U)
 800ef7c:	f7ff fdcc 	bl	800eb18 <LL_RCC_PLL1FRACN_IsEnabled>
 800ef80:	4603      	mov	r3, r0
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d002      	beq.n	800ef8c <LL_RCC_GetPLL1ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL1_GetFRACN();
 800ef86:	f7ff fe25 	bl	800ebd4 <LL_RCC_PLL1_GetFRACN>
 800ef8a:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 800ef8c:	693b      	ldr	r3, [r7, #16]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d035      	beq.n	800effe <LL_RCC_GetPLL1ClockFreq+0x11a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
 800ef92:	f7ff fd85 	bl	800eaa0 <LL_RCC_PLL1P_IsEnabled>
 800ef96:	4603      	mov	r3, r0
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d00c      	beq.n	800efb6 <LL_RCC_GetPLL1ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetP());
 800ef9c:	f7ff fdea 	bl	800eb74 <LL_RCC_PLL1_GetP>
 800efa0:	4603      	mov	r3, r0
 800efa2:	9300      	str	r3, [sp, #0]
 800efa4:	69bb      	ldr	r3, [r7, #24]
 800efa6:	68fa      	ldr	r2, [r7, #12]
 800efa8:	6939      	ldr	r1, [r7, #16]
 800efaa:	69f8      	ldr	r0, [r7, #28]
 800efac:	f000 f964 	bl	800f278 <LL_RCC_CalcPLLClockFreq>
 800efb0:	4602      	mov	r2, r0
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL1Q_IsEnabled() != 0U)
 800efb6:	f7ff fd87 	bl	800eac8 <LL_RCC_PLL1Q_IsEnabled>
 800efba:	4603      	mov	r3, r0
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d00c      	beq.n	800efda <LL_RCC_GetPLL1ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetQ());
 800efc0:	f7ff fde8 	bl	800eb94 <LL_RCC_PLL1_GetQ>
 800efc4:	4603      	mov	r3, r0
 800efc6:	9300      	str	r3, [sp, #0]
 800efc8:	69bb      	ldr	r3, [r7, #24]
 800efca:	68fa      	ldr	r2, [r7, #12]
 800efcc:	6939      	ldr	r1, [r7, #16]
 800efce:	69f8      	ldr	r0, [r7, #28]
 800efd0:	f000 f952 	bl	800f278 <LL_RCC_CalcPLLClockFreq>
 800efd4:	4602      	mov	r2, r0
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL1R_IsEnabled() != 0U)
 800efda:	f7ff fd89 	bl	800eaf0 <LL_RCC_PLL1R_IsEnabled>
 800efde:	4603      	mov	r3, r0
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d00c      	beq.n	800effe <LL_RCC_GetPLL1ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetR());
 800efe4:	f7ff fde6 	bl	800ebb4 <LL_RCC_PLL1_GetR>
 800efe8:	4603      	mov	r3, r0
 800efea:	9300      	str	r3, [sp, #0]
 800efec:	69bb      	ldr	r3, [r7, #24]
 800efee:	68fa      	ldr	r2, [r7, #12]
 800eff0:	6939      	ldr	r1, [r7, #16]
 800eff2:	69f8      	ldr	r0, [r7, #28]
 800eff4:	f000 f940 	bl	800f278 <LL_RCC_CalcPLLClockFreq>
 800eff8:	4602      	mov	r2, r0
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	609a      	str	r2, [r3, #8]
    }
  }
}
 800effe:	bf00      	nop
 800f000:	3720      	adds	r7, #32
 800f002:	46bd      	mov	sp, r7
 800f004:	bd80      	pop	{r7, pc}
 800f006:	bf00      	nop
 800f008:	03d09000 	.word	0x03d09000
 800f00c:	003d0900 	.word	0x003d0900
 800f010:	017d7840 	.word	0x017d7840

0800f014 <LL_RCC_GetPLL2ClockFreq>:
  * @brief  Return PLL2 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL2ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b08a      	sub	sp, #40	@ 0x28
 800f018:	af02      	add	r7, sp, #8
 800f01a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 800f01c:	2300      	movs	r3, #0
 800f01e:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 800f020:	2300      	movs	r3, #0
 800f022:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 800f024:	f7ff fd2e 	bl	800ea84 <LL_RCC_PLL_GetSource>
 800f028:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 800f02a:	697b      	ldr	r3, [r7, #20]
 800f02c:	2b02      	cmp	r3, #2
 800f02e:	d01f      	beq.n	800f070 <LL_RCC_GetPLL2ClockFreq+0x5c>
 800f030:	697b      	ldr	r3, [r7, #20]
 800f032:	2b02      	cmp	r3, #2
 800f034:	d824      	bhi.n	800f080 <LL_RCC_GetPLL2ClockFreq+0x6c>
 800f036:	697b      	ldr	r3, [r7, #20]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d003      	beq.n	800f044 <LL_RCC_GetPLL2ClockFreq+0x30>
 800f03c:	697b      	ldr	r3, [r7, #20]
 800f03e:	2b01      	cmp	r3, #1
 800f040:	d00e      	beq.n	800f060 <LL_RCC_GetPLL2ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 800f042:	e01d      	b.n	800f080 <LL_RCC_GetPLL2ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 800f044:	f7ff fc60 	bl	800e908 <LL_RCC_HSI_IsReady>
 800f048:	4603      	mov	r3, r0
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d01a      	beq.n	800f084 <LL_RCC_GetPLL2ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 800f04e:	f7ff fc6d 	bl	800e92c <LL_RCC_HSI_GetDivider>
 800f052:	4603      	mov	r3, r0
 800f054:	08db      	lsrs	r3, r3, #3
 800f056:	4a38      	ldr	r2, [pc, #224]	@ (800f138 <LL_RCC_GetPLL2ClockFreq+0x124>)
 800f058:	fa22 f303 	lsr.w	r3, r2, r3
 800f05c:	61fb      	str	r3, [r7, #28]
      break;
 800f05e:	e011      	b.n	800f084 <LL_RCC_GetPLL2ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 800f060:	f7ff fc72 	bl	800e948 <LL_RCC_CSI_IsReady>
 800f064:	4603      	mov	r3, r0
 800f066:	2b00      	cmp	r3, #0
 800f068:	d00e      	beq.n	800f088 <LL_RCC_GetPLL2ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 800f06a:	4b34      	ldr	r3, [pc, #208]	@ (800f13c <LL_RCC_GetPLL2ClockFreq+0x128>)
 800f06c:	61fb      	str	r3, [r7, #28]
      break;
 800f06e:	e00b      	b.n	800f088 <LL_RCC_GetPLL2ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 800f070:	f7ff fc36 	bl	800e8e0 <LL_RCC_HSE_IsReady>
 800f074:	4603      	mov	r3, r0
 800f076:	2b00      	cmp	r3, #0
 800f078:	d008      	beq.n	800f08c <LL_RCC_GetPLL2ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 800f07a:	4b31      	ldr	r3, [pc, #196]	@ (800f140 <LL_RCC_GetPLL2ClockFreq+0x12c>)
 800f07c:	61fb      	str	r3, [r7, #28]
      break;
 800f07e:	e005      	b.n	800f08c <LL_RCC_GetPLL2ClockFreq+0x78>
      break;
 800f080:	bf00      	nop
 800f082:	e004      	b.n	800f08e <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 800f084:	bf00      	nop
 800f086:	e002      	b.n	800f08e <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 800f088:	bf00      	nop
 800f08a:	e000      	b.n	800f08e <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 800f08c:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2200      	movs	r2, #0
 800f092:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2200      	movs	r2, #0
 800f098:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	2200      	movs	r2, #0
 800f09e:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL2_GetM();
 800f0a0:	f7ff fe16 	bl	800ecd0 <LL_RCC_PLL2_GetM>
 800f0a4:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL2_GetN();
 800f0a6:	f7ff fe05 	bl	800ecb4 <LL_RCC_PLL2_GetN>
 800f0aa:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL2FRACN_IsEnabled() != 0U)
 800f0ac:	f7ff fdf0 	bl	800ec90 <LL_RCC_PLL2FRACN_IsEnabled>
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d002      	beq.n	800f0bc <LL_RCC_GetPLL2ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL2_GetFRACN();
 800f0b6:	f7ff fe49 	bl	800ed4c <LL_RCC_PLL2_GetFRACN>
 800f0ba:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 800f0bc:	693b      	ldr	r3, [r7, #16]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d035      	beq.n	800f12e <LL_RCC_GetPLL2ClockFreq+0x11a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
 800f0c2:	f7ff fda9 	bl	800ec18 <LL_RCC_PLL2P_IsEnabled>
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d00c      	beq.n	800f0e6 <LL_RCC_GetPLL2ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetP());
 800f0cc:	f7ff fe0e 	bl	800ecec <LL_RCC_PLL2_GetP>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	9300      	str	r3, [sp, #0]
 800f0d4:	69bb      	ldr	r3, [r7, #24]
 800f0d6:	68fa      	ldr	r2, [r7, #12]
 800f0d8:	6939      	ldr	r1, [r7, #16]
 800f0da:	69f8      	ldr	r0, [r7, #28]
 800f0dc:	f000 f8cc 	bl	800f278 <LL_RCC_CalcPLLClockFreq>
 800f0e0:	4602      	mov	r2, r0
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 800f0e6:	f7ff fdab 	bl	800ec40 <LL_RCC_PLL2Q_IsEnabled>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d00c      	beq.n	800f10a <LL_RCC_GetPLL2ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetQ());
 800f0f0:	f7ff fe0c 	bl	800ed0c <LL_RCC_PLL2_GetQ>
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	9300      	str	r3, [sp, #0]
 800f0f8:	69bb      	ldr	r3, [r7, #24]
 800f0fa:	68fa      	ldr	r2, [r7, #12]
 800f0fc:	6939      	ldr	r1, [r7, #16]
 800f0fe:	69f8      	ldr	r0, [r7, #28]
 800f100:	f000 f8ba 	bl	800f278 <LL_RCC_CalcPLLClockFreq>
 800f104:	4602      	mov	r2, r0
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL2R_IsEnabled() != 0U)
 800f10a:	f7ff fdad 	bl	800ec68 <LL_RCC_PLL2R_IsEnabled>
 800f10e:	4603      	mov	r3, r0
 800f110:	2b00      	cmp	r3, #0
 800f112:	d00c      	beq.n	800f12e <LL_RCC_GetPLL2ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetR());
 800f114:	f7ff fe0a 	bl	800ed2c <LL_RCC_PLL2_GetR>
 800f118:	4603      	mov	r3, r0
 800f11a:	9300      	str	r3, [sp, #0]
 800f11c:	69bb      	ldr	r3, [r7, #24]
 800f11e:	68fa      	ldr	r2, [r7, #12]
 800f120:	6939      	ldr	r1, [r7, #16]
 800f122:	69f8      	ldr	r0, [r7, #28]
 800f124:	f000 f8a8 	bl	800f278 <LL_RCC_CalcPLLClockFreq>
 800f128:	4602      	mov	r2, r0
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	609a      	str	r2, [r3, #8]
    }
  }
}
 800f12e:	bf00      	nop
 800f130:	3720      	adds	r7, #32
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}
 800f136:	bf00      	nop
 800f138:	03d09000 	.word	0x03d09000
 800f13c:	003d0900 	.word	0x003d0900
 800f140:	017d7840 	.word	0x017d7840

0800f144 <LL_RCC_GetPLL3ClockFreq>:
  * @brief  Return PLL3 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL3ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b08a      	sub	sp, #40	@ 0x28
 800f148:	af02      	add	r7, sp, #8
 800f14a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 800f14c:	2300      	movs	r3, #0
 800f14e:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 800f150:	2300      	movs	r3, #0
 800f152:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 800f154:	f7ff fc96 	bl	800ea84 <LL_RCC_PLL_GetSource>
 800f158:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 800f15a:	697b      	ldr	r3, [r7, #20]
 800f15c:	2b02      	cmp	r3, #2
 800f15e:	d01f      	beq.n	800f1a0 <LL_RCC_GetPLL3ClockFreq+0x5c>
 800f160:	697b      	ldr	r3, [r7, #20]
 800f162:	2b02      	cmp	r3, #2
 800f164:	d824      	bhi.n	800f1b0 <LL_RCC_GetPLL3ClockFreq+0x6c>
 800f166:	697b      	ldr	r3, [r7, #20]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d003      	beq.n	800f174 <LL_RCC_GetPLL3ClockFreq+0x30>
 800f16c:	697b      	ldr	r3, [r7, #20]
 800f16e:	2b01      	cmp	r3, #1
 800f170:	d00e      	beq.n	800f190 <LL_RCC_GetPLL3ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 800f172:	e01d      	b.n	800f1b0 <LL_RCC_GetPLL3ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 800f174:	f7ff fbc8 	bl	800e908 <LL_RCC_HSI_IsReady>
 800f178:	4603      	mov	r3, r0
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d01a      	beq.n	800f1b4 <LL_RCC_GetPLL3ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 800f17e:	f7ff fbd5 	bl	800e92c <LL_RCC_HSI_GetDivider>
 800f182:	4603      	mov	r3, r0
 800f184:	08db      	lsrs	r3, r3, #3
 800f186:	4a39      	ldr	r2, [pc, #228]	@ (800f26c <LL_RCC_GetPLL3ClockFreq+0x128>)
 800f188:	fa22 f303 	lsr.w	r3, r2, r3
 800f18c:	61fb      	str	r3, [r7, #28]
      break;
 800f18e:	e011      	b.n	800f1b4 <LL_RCC_GetPLL3ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 800f190:	f7ff fbda 	bl	800e948 <LL_RCC_CSI_IsReady>
 800f194:	4603      	mov	r3, r0
 800f196:	2b00      	cmp	r3, #0
 800f198:	d00e      	beq.n	800f1b8 <LL_RCC_GetPLL3ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 800f19a:	4b35      	ldr	r3, [pc, #212]	@ (800f270 <LL_RCC_GetPLL3ClockFreq+0x12c>)
 800f19c:	61fb      	str	r3, [r7, #28]
      break;
 800f19e:	e00b      	b.n	800f1b8 <LL_RCC_GetPLL3ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 800f1a0:	f7ff fb9e 	bl	800e8e0 <LL_RCC_HSE_IsReady>
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d008      	beq.n	800f1bc <LL_RCC_GetPLL3ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 800f1aa:	4b32      	ldr	r3, [pc, #200]	@ (800f274 <LL_RCC_GetPLL3ClockFreq+0x130>)
 800f1ac:	61fb      	str	r3, [r7, #28]
      break;
 800f1ae:	e005      	b.n	800f1bc <LL_RCC_GetPLL3ClockFreq+0x78>
      break;
 800f1b0:	bf00      	nop
 800f1b2:	e004      	b.n	800f1be <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 800f1b4:	bf00      	nop
 800f1b6:	e002      	b.n	800f1be <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 800f1b8:	bf00      	nop
 800f1ba:	e000      	b.n	800f1be <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 800f1bc:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL3_GetM();
 800f1d0:	f7ff fe3c 	bl	800ee4c <LL_RCC_PLL3_GetM>
 800f1d4:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL3_GetN();
 800f1d6:	f7ff fe2b 	bl	800ee30 <LL_RCC_PLL3_GetN>
 800f1da:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL3FRACN_IsEnabled() != 0U)
 800f1dc:	f7ff fe14 	bl	800ee08 <LL_RCC_PLL3FRACN_IsEnabled>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d002      	beq.n	800f1ec <LL_RCC_GetPLL3ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL3_GetFRACN();
 800f1e6:	f7ff fe6f 	bl	800eec8 <LL_RCC_PLL3_GetFRACN>
 800f1ea:	61b8      	str	r0, [r7, #24]
  }

  if ((m != 0U) && (pllinputfreq != 0U))
 800f1ec:	693b      	ldr	r3, [r7, #16]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d038      	beq.n	800f264 <LL_RCC_GetPLL3ClockFreq+0x120>
 800f1f2:	69fb      	ldr	r3, [r7, #28]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d035      	beq.n	800f264 <LL_RCC_GetPLL3ClockFreq+0x120>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
 800f1f8:	f7ff fdca 	bl	800ed90 <LL_RCC_PLL3P_IsEnabled>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d00c      	beq.n	800f21c <LL_RCC_GetPLL3ClockFreq+0xd8>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetP());
 800f202:	f7ff fe31 	bl	800ee68 <LL_RCC_PLL3_GetP>
 800f206:	4603      	mov	r3, r0
 800f208:	9300      	str	r3, [sp, #0]
 800f20a:	69bb      	ldr	r3, [r7, #24]
 800f20c:	68fa      	ldr	r2, [r7, #12]
 800f20e:	6939      	ldr	r1, [r7, #16]
 800f210:	69f8      	ldr	r0, [r7, #28]
 800f212:	f000 f831 	bl	800f278 <LL_RCC_CalcPLLClockFreq>
 800f216:	4602      	mov	r2, r0
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 800f21c:	f7ff fdcc 	bl	800edb8 <LL_RCC_PLL3Q_IsEnabled>
 800f220:	4603      	mov	r3, r0
 800f222:	2b00      	cmp	r3, #0
 800f224:	d00c      	beq.n	800f240 <LL_RCC_GetPLL3ClockFreq+0xfc>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetQ());
 800f226:	f7ff fe2f 	bl	800ee88 <LL_RCC_PLL3_GetQ>
 800f22a:	4603      	mov	r3, r0
 800f22c:	9300      	str	r3, [sp, #0]
 800f22e:	69bb      	ldr	r3, [r7, #24]
 800f230:	68fa      	ldr	r2, [r7, #12]
 800f232:	6939      	ldr	r1, [r7, #16]
 800f234:	69f8      	ldr	r0, [r7, #28]
 800f236:	f000 f81f 	bl	800f278 <LL_RCC_CalcPLLClockFreq>
 800f23a:	4602      	mov	r2, r0
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL3R_IsEnabled() != 0U)
 800f240:	f7ff fdce 	bl	800ede0 <LL_RCC_PLL3R_IsEnabled>
 800f244:	4603      	mov	r3, r0
 800f246:	2b00      	cmp	r3, #0
 800f248:	d00c      	beq.n	800f264 <LL_RCC_GetPLL3ClockFreq+0x120>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetR());
 800f24a:	f7ff fe2d 	bl	800eea8 <LL_RCC_PLL3_GetR>
 800f24e:	4603      	mov	r3, r0
 800f250:	9300      	str	r3, [sp, #0]
 800f252:	69bb      	ldr	r3, [r7, #24]
 800f254:	68fa      	ldr	r2, [r7, #12]
 800f256:	6939      	ldr	r1, [r7, #16]
 800f258:	69f8      	ldr	r0, [r7, #28]
 800f25a:	f000 f80d 	bl	800f278 <LL_RCC_CalcPLLClockFreq>
 800f25e:	4602      	mov	r2, r0
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	609a      	str	r2, [r3, #8]
    }
  }
}
 800f264:	bf00      	nop
 800f266:	3720      	adds	r7, #32
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}
 800f26c:	03d09000 	.word	0x03d09000
 800f270:	003d0900 	.word	0x003d0900
 800f274:	017d7840 	.word	0x017d7840

0800f278 <LL_RCC_CalcPLLClockFreq>:
  * @param  PQR    VCO output divider (P, Q or R)
  *                Between 1 and 128, except for PLL1P Odd value not allowed
  * @retval PLL1 clock frequency (in Hz)
  */
uint32_t LL_RCC_CalcPLLClockFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t PQR)
{
 800f278:	b480      	push	{r7}
 800f27a:	b087      	sub	sp, #28
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	60f8      	str	r0, [r7, #12]
 800f280:	60b9      	str	r1, [r7, #8]
 800f282:	607a      	str	r2, [r7, #4]
 800f284:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN / (float_t)0x2000));
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	ee07 3a90 	vmov	s15, r3
 800f28c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	ee07 3a90 	vmov	s15, r3
 800f296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f29a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	ee07 3a90 	vmov	s15, r3
 800f2a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	ee07 3a90 	vmov	s15, r3
 800f2ae:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800f2b2:	eddf 5a10 	vldr	s11, [pc, #64]	@ 800f2f4 <LL_RCC_CalcPLLClockFreq+0x7c>
 800f2b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f2ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f2be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f2c2:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)PQR;
 800f2c6:	6a3b      	ldr	r3, [r7, #32]
 800f2c8:	ee07 3a90 	vmov	s15, r3
 800f2cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f2d0:	edd7 6a05 	vldr	s13, [r7, #20]
 800f2d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f2d8:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
 800f2dc:	edd7 7a05 	vldr	s15, [r7, #20]
 800f2e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f2e4:	ee17 3a90 	vmov	r3, s15
}
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	371c      	adds	r7, #28
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f2:	4770      	bx	lr
 800f2f4:	46000000 	.word	0x46000000

0800f2f8 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800f2f8:	b590      	push	{r4, r7, lr}
 800f2fa:	b087      	sub	sp, #28
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800f300:	2300      	movs	r3, #0
 800f302:	617b      	str	r3, [r7, #20]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800f304:	6878      	ldr	r0, [r7, #4]
 800f306:	f7ff fbb1 	bl	800ea6c <LL_RCC_GetUSARTClockSource>
 800f30a:	4603      	mov	r3, r0
 800f30c:	4a62      	ldr	r2, [pc, #392]	@ (800f498 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 800f30e:	4293      	cmp	r3, r2
 800f310:	f000 80a9 	beq.w	800f466 <LL_RCC_GetUSARTClockFreq+0x16e>
 800f314:	4a60      	ldr	r2, [pc, #384]	@ (800f498 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 800f316:	4293      	cmp	r3, r2
 800f318:	f200 80ae 	bhi.w	800f478 <LL_RCC_GetUSARTClockFreq+0x180>
 800f31c:	4a5f      	ldr	r2, [pc, #380]	@ (800f49c <LL_RCC_GetUSARTClockFreq+0x1a4>)
 800f31e:	4293      	cmp	r3, r2
 800f320:	f000 80a1 	beq.w	800f466 <LL_RCC_GetUSARTClockFreq+0x16e>
 800f324:	4a5d      	ldr	r2, [pc, #372]	@ (800f49c <LL_RCC_GetUSARTClockFreq+0x1a4>)
 800f326:	4293      	cmp	r3, r2
 800f328:	f200 80a6 	bhi.w	800f478 <LL_RCC_GetUSARTClockFreq+0x180>
 800f32c:	4a5c      	ldr	r2, [pc, #368]	@ (800f4a0 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 800f32e:	4293      	cmp	r3, r2
 800f330:	f000 8091 	beq.w	800f456 <LL_RCC_GetUSARTClockFreq+0x15e>
 800f334:	4a5a      	ldr	r2, [pc, #360]	@ (800f4a0 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 800f336:	4293      	cmp	r3, r2
 800f338:	f200 809e 	bhi.w	800f478 <LL_RCC_GetUSARTClockFreq+0x180>
 800f33c:	4a59      	ldr	r2, [pc, #356]	@ (800f4a4 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 800f33e:	4293      	cmp	r3, r2
 800f340:	f000 8089 	beq.w	800f456 <LL_RCC_GetUSARTClockFreq+0x15e>
 800f344:	4a57      	ldr	r2, [pc, #348]	@ (800f4a4 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 800f346:	4293      	cmp	r3, r2
 800f348:	f200 8096 	bhi.w	800f478 <LL_RCC_GetUSARTClockFreq+0x180>
 800f34c:	4a56      	ldr	r2, [pc, #344]	@ (800f4a8 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 800f34e:	4293      	cmp	r3, r2
 800f350:	d073      	beq.n	800f43a <LL_RCC_GetUSARTClockFreq+0x142>
 800f352:	4a55      	ldr	r2, [pc, #340]	@ (800f4a8 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 800f354:	4293      	cmp	r3, r2
 800f356:	f200 808f 	bhi.w	800f478 <LL_RCC_GetUSARTClockFreq+0x180>
 800f35a:	4a54      	ldr	r2, [pc, #336]	@ (800f4ac <LL_RCC_GetUSARTClockFreq+0x1b4>)
 800f35c:	4293      	cmp	r3, r2
 800f35e:	d06c      	beq.n	800f43a <LL_RCC_GetUSARTClockFreq+0x142>
 800f360:	4a52      	ldr	r2, [pc, #328]	@ (800f4ac <LL_RCC_GetUSARTClockFreq+0x1b4>)
 800f362:	4293      	cmp	r3, r2
 800f364:	f200 8088 	bhi.w	800f478 <LL_RCC_GetUSARTClockFreq+0x180>
 800f368:	4a51      	ldr	r2, [pc, #324]	@ (800f4b0 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800f36a:	4293      	cmp	r3, r2
 800f36c:	d058      	beq.n	800f420 <LL_RCC_GetUSARTClockFreq+0x128>
 800f36e:	4a50      	ldr	r2, [pc, #320]	@ (800f4b0 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800f370:	4293      	cmp	r3, r2
 800f372:	f200 8081 	bhi.w	800f478 <LL_RCC_GetUSARTClockFreq+0x180>
 800f376:	4a4f      	ldr	r2, [pc, #316]	@ (800f4b4 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800f378:	4293      	cmp	r3, r2
 800f37a:	d051      	beq.n	800f420 <LL_RCC_GetUSARTClockFreq+0x128>
 800f37c:	4a4d      	ldr	r2, [pc, #308]	@ (800f4b4 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800f37e:	4293      	cmp	r3, r2
 800f380:	d87a      	bhi.n	800f478 <LL_RCC_GetUSARTClockFreq+0x180>
 800f382:	4a4d      	ldr	r2, [pc, #308]	@ (800f4b8 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800f384:	4293      	cmp	r3, r2
 800f386:	d03e      	beq.n	800f406 <LL_RCC_GetUSARTClockFreq+0x10e>
 800f388:	4a4b      	ldr	r2, [pc, #300]	@ (800f4b8 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800f38a:	4293      	cmp	r3, r2
 800f38c:	d874      	bhi.n	800f478 <LL_RCC_GetUSARTClockFreq+0x180>
 800f38e:	4a4b      	ldr	r2, [pc, #300]	@ (800f4bc <LL_RCC_GetUSARTClockFreq+0x1c4>)
 800f390:	4293      	cmp	r3, r2
 800f392:	d038      	beq.n	800f406 <LL_RCC_GetUSARTClockFreq+0x10e>
 800f394:	4a49      	ldr	r2, [pc, #292]	@ (800f4bc <LL_RCC_GetUSARTClockFreq+0x1c4>)
 800f396:	4293      	cmp	r3, r2
 800f398:	d86e      	bhi.n	800f478 <LL_RCC_GetUSARTClockFreq+0x180>
 800f39a:	4a49      	ldr	r2, [pc, #292]	@ (800f4c0 <LL_RCC_GetUSARTClockFreq+0x1c8>)
 800f39c:	4293      	cmp	r3, r2
 800f39e:	d01a      	beq.n	800f3d6 <LL_RCC_GetUSARTClockFreq+0xde>
 800f3a0:	4a48      	ldr	r2, [pc, #288]	@ (800f4c4 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 800f3a2:	4293      	cmp	r3, r2
 800f3a4:	d168      	bne.n	800f478 <LL_RCC_GetUSARTClockFreq+0x180>
  {
    case LL_RCC_USART16_CLKSOURCE_PCLK2:
      usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 800f3a6:	f000 f895 	bl	800f4d4 <RCC_GetSystemClockFreq>
 800f3aa:	4604      	mov	r4, r0
 800f3ac:	f7ff fb00 	bl	800e9b0 <LL_RCC_GetSysPrescaler>
 800f3b0:	4603      	mov	r3, r0
 800f3b2:	0a1b      	lsrs	r3, r3, #8
 800f3b4:	f003 030f 	and.w	r3, r3, #15
 800f3b8:	4a43      	ldr	r2, [pc, #268]	@ (800f4c8 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 800f3ba:	5cd3      	ldrb	r3, [r2, r3]
 800f3bc:	f003 031f 	and.w	r3, r3, #31
 800f3c0:	fa24 f303 	lsr.w	r3, r4, r3
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f000 f8e7 	bl	800f598 <RCC_GetHCLKClockFreq>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	f000 f911 	bl	800f5f4 <RCC_GetPCLK2ClockFreq>
 800f3d2:	6178      	str	r0, [r7, #20]
      break;
 800f3d4:	e05b      	b.n	800f48e <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART234578_CLKSOURCE_PCLK1:
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 800f3d6:	f000 f87d 	bl	800f4d4 <RCC_GetSystemClockFreq>
 800f3da:	4604      	mov	r4, r0
 800f3dc:	f7ff fae8 	bl	800e9b0 <LL_RCC_GetSysPrescaler>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	0a1b      	lsrs	r3, r3, #8
 800f3e4:	f003 030f 	and.w	r3, r3, #15
 800f3e8:	4a37      	ldr	r2, [pc, #220]	@ (800f4c8 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 800f3ea:	5cd3      	ldrb	r3, [r2, r3]
 800f3ec:	f003 031f 	and.w	r3, r3, #31
 800f3f0:	fa24 f303 	lsr.w	r3, r4, r3
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f000 f8cf 	bl	800f598 <RCC_GetHCLKClockFreq>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	f000 f8e1 	bl	800f5c4 <RCC_GetPCLK1ClockFreq>
 800f402:	6178      	str	r0, [r7, #20]
      break;
 800f404:	e043      	b.n	800f48e <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART16_CLKSOURCE_PLL2Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL2Q:
      if (LL_RCC_PLL2_IsReady() != 0U)
 800f406:	f7ff fbf3 	bl	800ebf0 <LL_RCC_PLL2_IsReady>
 800f40a:	4603      	mov	r3, r0
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d035      	beq.n	800f47c <LL_RCC_GetUSARTClockFreq+0x184>
      {
        LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 800f410:	f107 0308 	add.w	r3, r7, #8
 800f414:	4618      	mov	r0, r3
 800f416:	f7ff fdfd 	bl	800f014 <LL_RCC_GetPLL2ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	617b      	str	r3, [r7, #20]
      }
      break;
 800f41e:	e02d      	b.n	800f47c <LL_RCC_GetUSARTClockFreq+0x184>

    case LL_RCC_USART16_CLKSOURCE_PLL3Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL3Q:
      if (LL_RCC_PLL3_IsReady() != 0U)
 800f420:	f7ff fca2 	bl	800ed68 <LL_RCC_PLL3_IsReady>
 800f424:	4603      	mov	r3, r0
 800f426:	2b00      	cmp	r3, #0
 800f428:	d02a      	beq.n	800f480 <LL_RCC_GetUSARTClockFreq+0x188>
      {
        LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 800f42a:	f107 0308 	add.w	r3, r7, #8
 800f42e:	4618      	mov	r0, r3
 800f430:	f7ff fe88 	bl	800f144 <LL_RCC_GetPLL3ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	617b      	str	r3, [r7, #20]
      }
      break;
 800f438:	e022      	b.n	800f480 <LL_RCC_GetUSARTClockFreq+0x188>

    case LL_RCC_USART16_CLKSOURCE_HSI:
    case LL_RCC_USART234578_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
 800f43a:	f7ff fa65 	bl	800e908 <LL_RCC_HSI_IsReady>
 800f43e:	4603      	mov	r3, r0
 800f440:	2b00      	cmp	r3, #0
 800f442:	d01f      	beq.n	800f484 <LL_RCC_GetUSARTClockFreq+0x18c>
      {
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 800f444:	f7ff fa72 	bl	800e92c <LL_RCC_HSI_GetDivider>
 800f448:	4603      	mov	r3, r0
 800f44a:	08db      	lsrs	r3, r3, #3
 800f44c:	4a1f      	ldr	r2, [pc, #124]	@ (800f4cc <LL_RCC_GetUSARTClockFreq+0x1d4>)
 800f44e:	fa22 f303 	lsr.w	r3, r2, r3
 800f452:	617b      	str	r3, [r7, #20]
      }
      break;
 800f454:	e016      	b.n	800f484 <LL_RCC_GetUSARTClockFreq+0x18c>

    case LL_RCC_USART16_CLKSOURCE_CSI:
    case LL_RCC_USART234578_CLKSOURCE_CSI:
      if (LL_RCC_CSI_IsReady() != 0U)
 800f456:	f7ff fa77 	bl	800e948 <LL_RCC_CSI_IsReady>
 800f45a:	4603      	mov	r3, r0
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d013      	beq.n	800f488 <LL_RCC_GetUSARTClockFreq+0x190>
      {
        usart_frequency = CSI_VALUE;
 800f460:	4b1b      	ldr	r3, [pc, #108]	@ (800f4d0 <LL_RCC_GetUSARTClockFreq+0x1d8>)
 800f462:	617b      	str	r3, [r7, #20]
      }
      break;
 800f464:	e010      	b.n	800f488 <LL_RCC_GetUSARTClockFreq+0x190>

    case LL_RCC_USART16_CLKSOURCE_LSE:
    case LL_RCC_USART234578_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
 800f466:	f7ff fa83 	bl	800e970 <LL_RCC_LSE_IsReady>
 800f46a:	4603      	mov	r3, r0
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d00d      	beq.n	800f48c <LL_RCC_GetUSARTClockFreq+0x194>
      {
        usart_frequency = LSE_VALUE;
 800f470:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f474:	617b      	str	r3, [r7, #20]
      }
      break;
 800f476:	e009      	b.n	800f48c <LL_RCC_GetUSARTClockFreq+0x194>

    default:
      /* Kernel clock disabled */
      break;
 800f478:	bf00      	nop
 800f47a:	e008      	b.n	800f48e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 800f47c:	bf00      	nop
 800f47e:	e006      	b.n	800f48e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 800f480:	bf00      	nop
 800f482:	e004      	b.n	800f48e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 800f484:	bf00      	nop
 800f486:	e002      	b.n	800f48e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 800f488:	bf00      	nop
 800f48a:	e000      	b.n	800f48e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 800f48c:	bf00      	nop
  }

  return usart_frequency;
 800f48e:	697b      	ldr	r3, [r7, #20]
}
 800f490:	4618      	mov	r0, r3
 800f492:	371c      	adds	r7, #28
 800f494:	46bd      	mov	sp, r7
 800f496:	bd90      	pop	{r4, r7, pc}
 800f498:	07050308 	.word	0x07050308
 800f49c:	07050008 	.word	0x07050008
 800f4a0:	07040308 	.word	0x07040308
 800f4a4:	07040008 	.word	0x07040008
 800f4a8:	07030308 	.word	0x07030308
 800f4ac:	07030008 	.word	0x07030008
 800f4b0:	07020308 	.word	0x07020308
 800f4b4:	07020008 	.word	0x07020008
 800f4b8:	07010308 	.word	0x07010308
 800f4bc:	07010008 	.word	0x07010008
 800f4c0:	07000008 	.word	0x07000008
 800f4c4:	07000308 	.word	0x07000308
 800f4c8:	08012398 	.word	0x08012398
 800f4cc:	03d09000 	.word	0x03d09000
 800f4d0:	003d0900 	.word	0x003d0900

0800f4d4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b084      	sub	sp, #16
 800f4d8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800f4da:	2300      	movs	r3, #0
 800f4dc:	60fb      	str	r3, [r7, #12]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800f4de:	f7ff fa59 	bl	800e994 <LL_RCC_GetSysClkSource>
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	2b18      	cmp	r3, #24
 800f4e6:	d84b      	bhi.n	800f580 <RCC_GetSystemClockFreq+0xac>
 800f4e8:	a201      	add	r2, pc, #4	@ (adr r2, 800f4f0 <RCC_GetSystemClockFreq+0x1c>)
 800f4ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4ee:	bf00      	nop
 800f4f0:	0800f555 	.word	0x0800f555
 800f4f4:	0800f581 	.word	0x0800f581
 800f4f8:	0800f581 	.word	0x0800f581
 800f4fc:	0800f581 	.word	0x0800f581
 800f500:	0800f581 	.word	0x0800f581
 800f504:	0800f581 	.word	0x0800f581
 800f508:	0800f581 	.word	0x0800f581
 800f50c:	0800f581 	.word	0x0800f581
 800f510:	0800f567 	.word	0x0800f567
 800f514:	0800f581 	.word	0x0800f581
 800f518:	0800f581 	.word	0x0800f581
 800f51c:	0800f581 	.word	0x0800f581
 800f520:	0800f581 	.word	0x0800f581
 800f524:	0800f581 	.word	0x0800f581
 800f528:	0800f581 	.word	0x0800f581
 800f52c:	0800f581 	.word	0x0800f581
 800f530:	0800f56d 	.word	0x0800f56d
 800f534:	0800f581 	.word	0x0800f581
 800f538:	0800f581 	.word	0x0800f581
 800f53c:	0800f581 	.word	0x0800f581
 800f540:	0800f581 	.word	0x0800f581
 800f544:	0800f581 	.word	0x0800f581
 800f548:	0800f581 	.word	0x0800f581
 800f54c:	0800f581 	.word	0x0800f581
 800f550:	0800f573 	.word	0x0800f573
  {
    /* No check on Ready: Won't be selected by hardware if not */
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 800f554:	f7ff f9ea 	bl	800e92c <LL_RCC_HSI_GetDivider>
 800f558:	4603      	mov	r3, r0
 800f55a:	08db      	lsrs	r3, r3, #3
 800f55c:	4a0b      	ldr	r2, [pc, #44]	@ (800f58c <RCC_GetSystemClockFreq+0xb8>)
 800f55e:	fa22 f303 	lsr.w	r3, r2, r3
 800f562:	60fb      	str	r3, [r7, #12]
      break;
 800f564:	e00d      	b.n	800f582 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_CSI:
      frequency = CSI_VALUE;
 800f566:	4b0a      	ldr	r3, [pc, #40]	@ (800f590 <RCC_GetSystemClockFreq+0xbc>)
 800f568:	60fb      	str	r3, [r7, #12]
      break;
 800f56a:	e00a      	b.n	800f582 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:
      frequency = HSE_VALUE;
 800f56c:	4b09      	ldr	r3, [pc, #36]	@ (800f594 <RCC_GetSystemClockFreq+0xc0>)
 800f56e:	60fb      	str	r3, [r7, #12]
      break;
 800f570:	e007      	b.n	800f582 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL1:
      LL_RCC_GetPLL1ClockFreq(&PLL_Clocks);
 800f572:	463b      	mov	r3, r7
 800f574:	4618      	mov	r0, r3
 800f576:	f7ff fcb5 	bl	800eee4 <LL_RCC_GetPLL1ClockFreq>
      frequency = PLL_Clocks.PLL_P_Frequency;
 800f57a:	683b      	ldr	r3, [r7, #0]
 800f57c:	60fb      	str	r3, [r7, #12]
      break;
 800f57e:	e000      	b.n	800f582 <RCC_GetSystemClockFreq+0xae>

    default:
      /* Nothing to do */
      break;
 800f580:	bf00      	nop
  }

  return frequency;
 800f582:	68fb      	ldr	r3, [r7, #12]
}
 800f584:	4618      	mov	r0, r3
 800f586:	3710      	adds	r7, #16
 800f588:	46bd      	mov	sp, r7
 800f58a:	bd80      	pop	{r7, pc}
 800f58c:	03d09000 	.word	0x03d09000
 800f590:	003d0900 	.word	0x003d0900
 800f594:	017d7840 	.word	0x017d7840

0800f598 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b082      	sub	sp, #8
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800f5a0:	f7ff fa14 	bl	800e9cc <LL_RCC_GetAHBPrescaler>
 800f5a4:	4603      	mov	r3, r0
 800f5a6:	f003 030f 	and.w	r3, r3, #15
 800f5aa:	4a05      	ldr	r2, [pc, #20]	@ (800f5c0 <RCC_GetHCLKClockFreq+0x28>)
 800f5ac:	5cd3      	ldrb	r3, [r2, r3]
 800f5ae:	f003 031f 	and.w	r3, r3, #31
 800f5b2:	687a      	ldr	r2, [r7, #4]
 800f5b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	3708      	adds	r7, #8
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	bd80      	pop	{r7, pc}
 800f5c0:	08012398 	.word	0x08012398

0800f5c4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b082      	sub	sp, #8
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800f5cc:	f7ff fa0c 	bl	800e9e8 <LL_RCC_GetAPB1Prescaler>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	091b      	lsrs	r3, r3, #4
 800f5d4:	f003 0307 	and.w	r3, r3, #7
 800f5d8:	4a05      	ldr	r2, [pc, #20]	@ (800f5f0 <RCC_GetPCLK1ClockFreq+0x2c>)
 800f5da:	5cd3      	ldrb	r3, [r2, r3]
 800f5dc:	f003 031f 	and.w	r3, r3, #31
 800f5e0:	687a      	ldr	r2, [r7, #4]
 800f5e2:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	3708      	adds	r7, #8
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	bd80      	pop	{r7, pc}
 800f5ee:	bf00      	nop
 800f5f0:	08012398 	.word	0x08012398

0800f5f4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b082      	sub	sp, #8
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800f5fc:	f7ff fa02 	bl	800ea04 <LL_RCC_GetAPB2Prescaler>
 800f600:	4603      	mov	r3, r0
 800f602:	0a1b      	lsrs	r3, r3, #8
 800f604:	f003 0307 	and.w	r3, r3, #7
 800f608:	4a05      	ldr	r2, [pc, #20]	@ (800f620 <RCC_GetPCLK2ClockFreq+0x2c>)
 800f60a:	5cd3      	ldrb	r3, [r2, r3]
 800f60c:	f003 031f 	and.w	r3, r3, #31
 800f610:	687a      	ldr	r2, [r7, #4]
 800f612:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f616:	4618      	mov	r0, r3
 800f618:	3708      	adds	r7, #8
 800f61a:	46bd      	mov	sp, r7
 800f61c:	bd80      	pop	{r7, pc}
 800f61e:	bf00      	nop
 800f620:	08012398 	.word	0x08012398

0800f624 <LL_USART_IsEnabled>:
{
 800f624:	b480      	push	{r7}
 800f626:	b083      	sub	sp, #12
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	f003 0301 	and.w	r3, r3, #1
 800f634:	2b01      	cmp	r3, #1
 800f636:	d101      	bne.n	800f63c <LL_USART_IsEnabled+0x18>
 800f638:	2301      	movs	r3, #1
 800f63a:	e000      	b.n	800f63e <LL_USART_IsEnabled+0x1a>
 800f63c:	2300      	movs	r3, #0
}
 800f63e:	4618      	mov	r0, r3
 800f640:	370c      	adds	r7, #12
 800f642:	46bd      	mov	sp, r7
 800f644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f648:	4770      	bx	lr

0800f64a <LL_USART_SetPrescaler>:
{
 800f64a:	b480      	push	{r7}
 800f64c:	b083      	sub	sp, #12
 800f64e:	af00      	add	r7, sp, #0
 800f650:	6078      	str	r0, [r7, #4]
 800f652:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f658:	f023 030f 	bic.w	r3, r3, #15
 800f65c:	683a      	ldr	r2, [r7, #0]
 800f65e:	b292      	uxth	r2, r2
 800f660:	431a      	orrs	r2, r3
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800f666:	bf00      	nop
 800f668:	370c      	adds	r7, #12
 800f66a:	46bd      	mov	sp, r7
 800f66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f670:	4770      	bx	lr

0800f672 <LL_USART_SetStopBitsLength>:
{
 800f672:	b480      	push	{r7}
 800f674:	b083      	sub	sp, #12
 800f676:	af00      	add	r7, sp, #0
 800f678:	6078      	str	r0, [r7, #4]
 800f67a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	685b      	ldr	r3, [r3, #4]
 800f680:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800f684:	683b      	ldr	r3, [r7, #0]
 800f686:	431a      	orrs	r2, r3
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	605a      	str	r2, [r3, #4]
}
 800f68c:	bf00      	nop
 800f68e:	370c      	adds	r7, #12
 800f690:	46bd      	mov	sp, r7
 800f692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f696:	4770      	bx	lr

0800f698 <LL_USART_SetHWFlowCtrl>:
{
 800f698:	b480      	push	{r7}
 800f69a:	b083      	sub	sp, #12
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
 800f6a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	689b      	ldr	r3, [r3, #8]
 800f6a6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	431a      	orrs	r2, r3
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	609a      	str	r2, [r3, #8]
}
 800f6b2:	bf00      	nop
 800f6b4:	370c      	adds	r7, #12
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6bc:	4770      	bx	lr
	...

0800f6c0 <LL_USART_SetBaudRate>:
{
 800f6c0:	b480      	push	{r7}
 800f6c2:	b087      	sub	sp, #28
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	60f8      	str	r0, [r7, #12]
 800f6c8:	60b9      	str	r1, [r7, #8]
 800f6ca:	607a      	str	r2, [r7, #4]
 800f6cc:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	2b0b      	cmp	r3, #11
 800f6d2:	d83c      	bhi.n	800f74e <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 800f6d4:	6a3b      	ldr	r3, [r7, #32]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d039      	beq.n	800f74e <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800f6da:	683b      	ldr	r3, [r7, #0]
 800f6dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f6e0:	d122      	bne.n	800f728 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	b2db      	uxtb	r3, r3
 800f6e6:	461a      	mov	r2, r3
 800f6e8:	4b1c      	ldr	r3, [pc, #112]	@ (800f75c <LL_USART_SetBaudRate+0x9c>)
 800f6ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6ee:	68ba      	ldr	r2, [r7, #8]
 800f6f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800f6f4:	005a      	lsls	r2, r3, #1
 800f6f6:	6a3b      	ldr	r3, [r7, #32]
 800f6f8:	085b      	lsrs	r3, r3, #1
 800f6fa:	441a      	add	r2, r3
 800f6fc:	6a3b      	ldr	r3, [r7, #32]
 800f6fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800f702:	b29b      	uxth	r3, r3
 800f704:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800f706:	697a      	ldr	r2, [r7, #20]
 800f708:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 800f70c:	4013      	ands	r3, r2
 800f70e:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f710:	697b      	ldr	r3, [r7, #20]
 800f712:	085b      	lsrs	r3, r3, #1
 800f714:	b29b      	uxth	r3, r3
 800f716:	f003 0307 	and.w	r3, r3, #7
 800f71a:	693a      	ldr	r2, [r7, #16]
 800f71c:	4313      	orrs	r3, r2
 800f71e:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	693a      	ldr	r2, [r7, #16]
 800f724:	60da      	str	r2, [r3, #12]
}
 800f726:	e012      	b.n	800f74e <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	b2db      	uxtb	r3, r3
 800f72c:	461a      	mov	r2, r3
 800f72e:	4b0b      	ldr	r3, [pc, #44]	@ (800f75c <LL_USART_SetBaudRate+0x9c>)
 800f730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f734:	68ba      	ldr	r2, [r7, #8]
 800f736:	fbb2 f2f3 	udiv	r2, r2, r3
 800f73a:	6a3b      	ldr	r3, [r7, #32]
 800f73c:	085b      	lsrs	r3, r3, #1
 800f73e:	441a      	add	r2, r3
 800f740:	6a3b      	ldr	r3, [r7, #32]
 800f742:	fbb2 f3f3 	udiv	r3, r2, r3
 800f746:	b29b      	uxth	r3, r3
 800f748:	461a      	mov	r2, r3
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	60da      	str	r2, [r3, #12]
}
 800f74e:	bf00      	nop
 800f750:	371c      	adds	r7, #28
 800f752:	46bd      	mov	sp, r7
 800f754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f758:	4770      	bx	lr
 800f75a:	bf00      	nop
 800f75c:	080123a8 	.word	0x080123a8

0800f760 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b086      	sub	sp, #24
 800f764:	af02      	add	r7, sp, #8
 800f766:	6078      	str	r0, [r7, #4]
 800f768:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800f76a:	2301      	movs	r3, #1
 800f76c:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800f76e:	2300      	movs	r3, #0
 800f770:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800f772:	6878      	ldr	r0, [r7, #4]
 800f774:	f7ff ff56 	bl	800f624 <LL_USART_IsEnabled>
 800f778:	4603      	mov	r3, r0
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d17f      	bne.n	800f87e <LL_USART_Init+0x11e>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	681a      	ldr	r2, [r3, #0]
 800f782:	4b41      	ldr	r3, [pc, #260]	@ (800f888 <LL_USART_Init+0x128>)
 800f784:	4013      	ands	r3, r2
 800f786:	683a      	ldr	r2, [r7, #0]
 800f788:	6891      	ldr	r1, [r2, #8]
 800f78a:	683a      	ldr	r2, [r7, #0]
 800f78c:	6912      	ldr	r2, [r2, #16]
 800f78e:	4311      	orrs	r1, r2
 800f790:	683a      	ldr	r2, [r7, #0]
 800f792:	6952      	ldr	r2, [r2, #20]
 800f794:	4311      	orrs	r1, r2
 800f796:	683a      	ldr	r2, [r7, #0]
 800f798:	69d2      	ldr	r2, [r2, #28]
 800f79a:	430a      	orrs	r2, r1
 800f79c:	431a      	orrs	r2, r3
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800f7a2:	683b      	ldr	r3, [r7, #0]
 800f7a4:	68db      	ldr	r3, [r3, #12]
 800f7a6:	4619      	mov	r1, r3
 800f7a8:	6878      	ldr	r0, [r7, #4]
 800f7aa:	f7ff ff62 	bl	800f672 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800f7ae:	683b      	ldr	r3, [r7, #0]
 800f7b0:	699b      	ldr	r3, [r3, #24]
 800f7b2:	4619      	mov	r1, r3
 800f7b4:	6878      	ldr	r0, [r7, #4]
 800f7b6:	f7ff ff6f 	bl	800f698 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	4a33      	ldr	r2, [pc, #204]	@ (800f88c <LL_USART_Init+0x12c>)
 800f7be:	4293      	cmp	r3, r2
 800f7c0:	d104      	bne.n	800f7cc <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 800f7c2:	4833      	ldr	r0, [pc, #204]	@ (800f890 <LL_USART_Init+0x130>)
 800f7c4:	f7ff fd98 	bl	800f2f8 <LL_RCC_GetUSARTClockFreq>
 800f7c8:	60b8      	str	r0, [r7, #8]
 800f7ca:	e03d      	b.n	800f848 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART2)
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	4a31      	ldr	r2, [pc, #196]	@ (800f894 <LL_USART_Init+0x134>)
 800f7d0:	4293      	cmp	r3, r2
 800f7d2:	d104      	bne.n	800f7de <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800f7d4:	4830      	ldr	r0, [pc, #192]	@ (800f898 <LL_USART_Init+0x138>)
 800f7d6:	f7ff fd8f 	bl	800f2f8 <LL_RCC_GetUSARTClockFreq>
 800f7da:	60b8      	str	r0, [r7, #8]
 800f7dc:	e034      	b.n	800f848 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART3)
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	4a2e      	ldr	r2, [pc, #184]	@ (800f89c <LL_USART_Init+0x13c>)
 800f7e2:	4293      	cmp	r3, r2
 800f7e4:	d104      	bne.n	800f7f0 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800f7e6:	482c      	ldr	r0, [pc, #176]	@ (800f898 <LL_USART_Init+0x138>)
 800f7e8:	f7ff fd86 	bl	800f2f8 <LL_RCC_GetUSARTClockFreq>
 800f7ec:	60b8      	str	r0, [r7, #8]
 800f7ee:	e02b      	b.n	800f848 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART4)
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	4a2b      	ldr	r2, [pc, #172]	@ (800f8a0 <LL_USART_Init+0x140>)
 800f7f4:	4293      	cmp	r3, r2
 800f7f6:	d104      	bne.n	800f802 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800f7f8:	4827      	ldr	r0, [pc, #156]	@ (800f898 <LL_USART_Init+0x138>)
 800f7fa:	f7ff fd7d 	bl	800f2f8 <LL_RCC_GetUSARTClockFreq>
 800f7fe:	60b8      	str	r0, [r7, #8]
 800f800:	e022      	b.n	800f848 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART5)
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	4a27      	ldr	r2, [pc, #156]	@ (800f8a4 <LL_USART_Init+0x144>)
 800f806:	4293      	cmp	r3, r2
 800f808:	d104      	bne.n	800f814 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800f80a:	4823      	ldr	r0, [pc, #140]	@ (800f898 <LL_USART_Init+0x138>)
 800f80c:	f7ff fd74 	bl	800f2f8 <LL_RCC_GetUSARTClockFreq>
 800f810:	60b8      	str	r0, [r7, #8]
 800f812:	e019      	b.n	800f848 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART6)
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	4a24      	ldr	r2, [pc, #144]	@ (800f8a8 <LL_USART_Init+0x148>)
 800f818:	4293      	cmp	r3, r2
 800f81a:	d104      	bne.n	800f826 <LL_USART_Init+0xc6>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 800f81c:	481c      	ldr	r0, [pc, #112]	@ (800f890 <LL_USART_Init+0x130>)
 800f81e:	f7ff fd6b 	bl	800f2f8 <LL_RCC_GetUSARTClockFreq>
 800f822:	60b8      	str	r0, [r7, #8]
 800f824:	e010      	b.n	800f848 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART7)
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	4a20      	ldr	r2, [pc, #128]	@ (800f8ac <LL_USART_Init+0x14c>)
 800f82a:	4293      	cmp	r3, r2
 800f82c:	d104      	bne.n	800f838 <LL_USART_Init+0xd8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800f82e:	481a      	ldr	r0, [pc, #104]	@ (800f898 <LL_USART_Init+0x138>)
 800f830:	f7ff fd62 	bl	800f2f8 <LL_RCC_GetUSARTClockFreq>
 800f834:	60b8      	str	r0, [r7, #8]
 800f836:	e007      	b.n	800f848 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART8)
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	4a1d      	ldr	r2, [pc, #116]	@ (800f8b0 <LL_USART_Init+0x150>)
 800f83c:	4293      	cmp	r3, r2
 800f83e:	d103      	bne.n	800f848 <LL_USART_Init+0xe8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800f840:	4815      	ldr	r0, [pc, #84]	@ (800f898 <LL_USART_Init+0x138>)
 800f842:	f7ff fd59 	bl	800f2f8 <LL_RCC_GetUSARTClockFreq>
 800f846:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800f848:	68bb      	ldr	r3, [r7, #8]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d011      	beq.n	800f872 <LL_USART_Init+0x112>
        && (USART_InitStruct->BaudRate != 0U))
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	685b      	ldr	r3, [r3, #4]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d00d      	beq.n	800f872 <LL_USART_Init+0x112>
    {
      status = SUCCESS;
 800f856:	2300      	movs	r3, #0
 800f858:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 800f85e:	683b      	ldr	r3, [r7, #0]
 800f860:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 800f862:	683b      	ldr	r3, [r7, #0]
 800f864:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 800f866:	9300      	str	r3, [sp, #0]
 800f868:	460b      	mov	r3, r1
 800f86a:	68b9      	ldr	r1, [r7, #8]
 800f86c:	6878      	ldr	r0, [r7, #4]
 800f86e:	f7ff ff27 	bl	800f6c0 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	4619      	mov	r1, r3
 800f878:	6878      	ldr	r0, [r7, #4]
 800f87a:	f7ff fee6 	bl	800f64a <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800f87e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f880:	4618      	mov	r0, r3
 800f882:	3710      	adds	r7, #16
 800f884:	46bd      	mov	sp, r7
 800f886:	bd80      	pop	{r7, pc}
 800f888:	efff69f3 	.word	0xefff69f3
 800f88c:	40011000 	.word	0x40011000
 800f890:	07000308 	.word	0x07000308
 800f894:	40004400 	.word	0x40004400
 800f898:	07000008 	.word	0x07000008
 800f89c:	40004800 	.word	0x40004800
 800f8a0:	40004c00 	.word	0x40004c00
 800f8a4:	40005000 	.word	0x40005000
 800f8a8:	40011400 	.word	0x40011400
 800f8ac:	40007800 	.word	0x40007800
 800f8b0:	40007c00 	.word	0x40007c00

0800f8b4 <srand>:
 800f8b4:	b538      	push	{r3, r4, r5, lr}
 800f8b6:	4b10      	ldr	r3, [pc, #64]	@ (800f8f8 <srand+0x44>)
 800f8b8:	681d      	ldr	r5, [r3, #0]
 800f8ba:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800f8bc:	4604      	mov	r4, r0
 800f8be:	b9b3      	cbnz	r3, 800f8ee <srand+0x3a>
 800f8c0:	2018      	movs	r0, #24
 800f8c2:	f000 fca1 	bl	8010208 <malloc>
 800f8c6:	4602      	mov	r2, r0
 800f8c8:	6328      	str	r0, [r5, #48]	@ 0x30
 800f8ca:	b920      	cbnz	r0, 800f8d6 <srand+0x22>
 800f8cc:	4b0b      	ldr	r3, [pc, #44]	@ (800f8fc <srand+0x48>)
 800f8ce:	480c      	ldr	r0, [pc, #48]	@ (800f900 <srand+0x4c>)
 800f8d0:	2146      	movs	r1, #70	@ 0x46
 800f8d2:	f000 fc31 	bl	8010138 <__assert_func>
 800f8d6:	490b      	ldr	r1, [pc, #44]	@ (800f904 <srand+0x50>)
 800f8d8:	4b0b      	ldr	r3, [pc, #44]	@ (800f908 <srand+0x54>)
 800f8da:	e9c0 1300 	strd	r1, r3, [r0]
 800f8de:	4b0b      	ldr	r3, [pc, #44]	@ (800f90c <srand+0x58>)
 800f8e0:	6083      	str	r3, [r0, #8]
 800f8e2:	230b      	movs	r3, #11
 800f8e4:	8183      	strh	r3, [r0, #12]
 800f8e6:	2100      	movs	r1, #0
 800f8e8:	2001      	movs	r0, #1
 800f8ea:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800f8ee:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	611c      	str	r4, [r3, #16]
 800f8f4:	615a      	str	r2, [r3, #20]
 800f8f6:	bd38      	pop	{r3, r4, r5, pc}
 800f8f8:	240000e8 	.word	0x240000e8
 800f8fc:	080123d8 	.word	0x080123d8
 800f900:	080123ef 	.word	0x080123ef
 800f904:	abcd330e 	.word	0xabcd330e
 800f908:	e66d1234 	.word	0xe66d1234
 800f90c:	0005deec 	.word	0x0005deec

0800f910 <rand>:
 800f910:	4b16      	ldr	r3, [pc, #88]	@ (800f96c <rand+0x5c>)
 800f912:	b510      	push	{r4, lr}
 800f914:	681c      	ldr	r4, [r3, #0]
 800f916:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f918:	b9b3      	cbnz	r3, 800f948 <rand+0x38>
 800f91a:	2018      	movs	r0, #24
 800f91c:	f000 fc74 	bl	8010208 <malloc>
 800f920:	4602      	mov	r2, r0
 800f922:	6320      	str	r0, [r4, #48]	@ 0x30
 800f924:	b920      	cbnz	r0, 800f930 <rand+0x20>
 800f926:	4b12      	ldr	r3, [pc, #72]	@ (800f970 <rand+0x60>)
 800f928:	4812      	ldr	r0, [pc, #72]	@ (800f974 <rand+0x64>)
 800f92a:	2152      	movs	r1, #82	@ 0x52
 800f92c:	f000 fc04 	bl	8010138 <__assert_func>
 800f930:	4911      	ldr	r1, [pc, #68]	@ (800f978 <rand+0x68>)
 800f932:	4b12      	ldr	r3, [pc, #72]	@ (800f97c <rand+0x6c>)
 800f934:	e9c0 1300 	strd	r1, r3, [r0]
 800f938:	4b11      	ldr	r3, [pc, #68]	@ (800f980 <rand+0x70>)
 800f93a:	6083      	str	r3, [r0, #8]
 800f93c:	230b      	movs	r3, #11
 800f93e:	8183      	strh	r3, [r0, #12]
 800f940:	2100      	movs	r1, #0
 800f942:	2001      	movs	r0, #1
 800f944:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800f948:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f94a:	480e      	ldr	r0, [pc, #56]	@ (800f984 <rand+0x74>)
 800f94c:	690b      	ldr	r3, [r1, #16]
 800f94e:	694c      	ldr	r4, [r1, #20]
 800f950:	4a0d      	ldr	r2, [pc, #52]	@ (800f988 <rand+0x78>)
 800f952:	4358      	muls	r0, r3
 800f954:	fb02 0004 	mla	r0, r2, r4, r0
 800f958:	fba3 3202 	umull	r3, r2, r3, r2
 800f95c:	3301      	adds	r3, #1
 800f95e:	eb40 0002 	adc.w	r0, r0, r2
 800f962:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800f966:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800f96a:	bd10      	pop	{r4, pc}
 800f96c:	240000e8 	.word	0x240000e8
 800f970:	080123d8 	.word	0x080123d8
 800f974:	080123ef 	.word	0x080123ef
 800f978:	abcd330e 	.word	0xabcd330e
 800f97c:	e66d1234 	.word	0xe66d1234
 800f980:	0005deec 	.word	0x0005deec
 800f984:	5851f42d 	.word	0x5851f42d
 800f988:	4c957f2d 	.word	0x4c957f2d

0800f98c <_strtol_l.isra.0>:
 800f98c:	2b24      	cmp	r3, #36	@ 0x24
 800f98e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f992:	4686      	mov	lr, r0
 800f994:	4690      	mov	r8, r2
 800f996:	d801      	bhi.n	800f99c <_strtol_l.isra.0+0x10>
 800f998:	2b01      	cmp	r3, #1
 800f99a:	d106      	bne.n	800f9aa <_strtol_l.isra.0+0x1e>
 800f99c:	f000 fb90 	bl	80100c0 <__errno>
 800f9a0:	2316      	movs	r3, #22
 800f9a2:	6003      	str	r3, [r0, #0]
 800f9a4:	2000      	movs	r0, #0
 800f9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9aa:	4834      	ldr	r0, [pc, #208]	@ (800fa7c <_strtol_l.isra.0+0xf0>)
 800f9ac:	460d      	mov	r5, r1
 800f9ae:	462a      	mov	r2, r5
 800f9b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f9b4:	5d06      	ldrb	r6, [r0, r4]
 800f9b6:	f016 0608 	ands.w	r6, r6, #8
 800f9ba:	d1f8      	bne.n	800f9ae <_strtol_l.isra.0+0x22>
 800f9bc:	2c2d      	cmp	r4, #45	@ 0x2d
 800f9be:	d110      	bne.n	800f9e2 <_strtol_l.isra.0+0x56>
 800f9c0:	782c      	ldrb	r4, [r5, #0]
 800f9c2:	2601      	movs	r6, #1
 800f9c4:	1c95      	adds	r5, r2, #2
 800f9c6:	f033 0210 	bics.w	r2, r3, #16
 800f9ca:	d115      	bne.n	800f9f8 <_strtol_l.isra.0+0x6c>
 800f9cc:	2c30      	cmp	r4, #48	@ 0x30
 800f9ce:	d10d      	bne.n	800f9ec <_strtol_l.isra.0+0x60>
 800f9d0:	782a      	ldrb	r2, [r5, #0]
 800f9d2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f9d6:	2a58      	cmp	r2, #88	@ 0x58
 800f9d8:	d108      	bne.n	800f9ec <_strtol_l.isra.0+0x60>
 800f9da:	786c      	ldrb	r4, [r5, #1]
 800f9dc:	3502      	adds	r5, #2
 800f9de:	2310      	movs	r3, #16
 800f9e0:	e00a      	b.n	800f9f8 <_strtol_l.isra.0+0x6c>
 800f9e2:	2c2b      	cmp	r4, #43	@ 0x2b
 800f9e4:	bf04      	itt	eq
 800f9e6:	782c      	ldrbeq	r4, [r5, #0]
 800f9e8:	1c95      	addeq	r5, r2, #2
 800f9ea:	e7ec      	b.n	800f9c6 <_strtol_l.isra.0+0x3a>
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d1f6      	bne.n	800f9de <_strtol_l.isra.0+0x52>
 800f9f0:	2c30      	cmp	r4, #48	@ 0x30
 800f9f2:	bf14      	ite	ne
 800f9f4:	230a      	movne	r3, #10
 800f9f6:	2308      	moveq	r3, #8
 800f9f8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f9fc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800fa00:	2200      	movs	r2, #0
 800fa02:	fbbc f9f3 	udiv	r9, ip, r3
 800fa06:	4610      	mov	r0, r2
 800fa08:	fb03 ca19 	mls	sl, r3, r9, ip
 800fa0c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800fa10:	2f09      	cmp	r7, #9
 800fa12:	d80f      	bhi.n	800fa34 <_strtol_l.isra.0+0xa8>
 800fa14:	463c      	mov	r4, r7
 800fa16:	42a3      	cmp	r3, r4
 800fa18:	dd1b      	ble.n	800fa52 <_strtol_l.isra.0+0xc6>
 800fa1a:	1c57      	adds	r7, r2, #1
 800fa1c:	d007      	beq.n	800fa2e <_strtol_l.isra.0+0xa2>
 800fa1e:	4581      	cmp	r9, r0
 800fa20:	d314      	bcc.n	800fa4c <_strtol_l.isra.0+0xc0>
 800fa22:	d101      	bne.n	800fa28 <_strtol_l.isra.0+0x9c>
 800fa24:	45a2      	cmp	sl, r4
 800fa26:	db11      	blt.n	800fa4c <_strtol_l.isra.0+0xc0>
 800fa28:	fb00 4003 	mla	r0, r0, r3, r4
 800fa2c:	2201      	movs	r2, #1
 800fa2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fa32:	e7eb      	b.n	800fa0c <_strtol_l.isra.0+0x80>
 800fa34:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800fa38:	2f19      	cmp	r7, #25
 800fa3a:	d801      	bhi.n	800fa40 <_strtol_l.isra.0+0xb4>
 800fa3c:	3c37      	subs	r4, #55	@ 0x37
 800fa3e:	e7ea      	b.n	800fa16 <_strtol_l.isra.0+0x8a>
 800fa40:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800fa44:	2f19      	cmp	r7, #25
 800fa46:	d804      	bhi.n	800fa52 <_strtol_l.isra.0+0xc6>
 800fa48:	3c57      	subs	r4, #87	@ 0x57
 800fa4a:	e7e4      	b.n	800fa16 <_strtol_l.isra.0+0x8a>
 800fa4c:	f04f 32ff 	mov.w	r2, #4294967295
 800fa50:	e7ed      	b.n	800fa2e <_strtol_l.isra.0+0xa2>
 800fa52:	1c53      	adds	r3, r2, #1
 800fa54:	d108      	bne.n	800fa68 <_strtol_l.isra.0+0xdc>
 800fa56:	2322      	movs	r3, #34	@ 0x22
 800fa58:	f8ce 3000 	str.w	r3, [lr]
 800fa5c:	4660      	mov	r0, ip
 800fa5e:	f1b8 0f00 	cmp.w	r8, #0
 800fa62:	d0a0      	beq.n	800f9a6 <_strtol_l.isra.0+0x1a>
 800fa64:	1e69      	subs	r1, r5, #1
 800fa66:	e006      	b.n	800fa76 <_strtol_l.isra.0+0xea>
 800fa68:	b106      	cbz	r6, 800fa6c <_strtol_l.isra.0+0xe0>
 800fa6a:	4240      	negs	r0, r0
 800fa6c:	f1b8 0f00 	cmp.w	r8, #0
 800fa70:	d099      	beq.n	800f9a6 <_strtol_l.isra.0+0x1a>
 800fa72:	2a00      	cmp	r2, #0
 800fa74:	d1f6      	bne.n	800fa64 <_strtol_l.isra.0+0xd8>
 800fa76:	f8c8 1000 	str.w	r1, [r8]
 800fa7a:	e794      	b.n	800f9a6 <_strtol_l.isra.0+0x1a>
 800fa7c:	080124b7 	.word	0x080124b7

0800fa80 <strtol>:
 800fa80:	4613      	mov	r3, r2
 800fa82:	460a      	mov	r2, r1
 800fa84:	4601      	mov	r1, r0
 800fa86:	4802      	ldr	r0, [pc, #8]	@ (800fa90 <strtol+0x10>)
 800fa88:	6800      	ldr	r0, [r0, #0]
 800fa8a:	f7ff bf7f 	b.w	800f98c <_strtol_l.isra.0>
 800fa8e:	bf00      	nop
 800fa90:	240000e8 	.word	0x240000e8

0800fa94 <std>:
 800fa94:	2300      	movs	r3, #0
 800fa96:	b510      	push	{r4, lr}
 800fa98:	4604      	mov	r4, r0
 800fa9a:	e9c0 3300 	strd	r3, r3, [r0]
 800fa9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800faa2:	6083      	str	r3, [r0, #8]
 800faa4:	8181      	strh	r1, [r0, #12]
 800faa6:	6643      	str	r3, [r0, #100]	@ 0x64
 800faa8:	81c2      	strh	r2, [r0, #14]
 800faaa:	6183      	str	r3, [r0, #24]
 800faac:	4619      	mov	r1, r3
 800faae:	2208      	movs	r2, #8
 800fab0:	305c      	adds	r0, #92	@ 0x5c
 800fab2:	f000 fa75 	bl	800ffa0 <memset>
 800fab6:	4b0d      	ldr	r3, [pc, #52]	@ (800faec <std+0x58>)
 800fab8:	6263      	str	r3, [r4, #36]	@ 0x24
 800faba:	4b0d      	ldr	r3, [pc, #52]	@ (800faf0 <std+0x5c>)
 800fabc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fabe:	4b0d      	ldr	r3, [pc, #52]	@ (800faf4 <std+0x60>)
 800fac0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fac2:	4b0d      	ldr	r3, [pc, #52]	@ (800faf8 <std+0x64>)
 800fac4:	6323      	str	r3, [r4, #48]	@ 0x30
 800fac6:	4b0d      	ldr	r3, [pc, #52]	@ (800fafc <std+0x68>)
 800fac8:	6224      	str	r4, [r4, #32]
 800faca:	429c      	cmp	r4, r3
 800facc:	d006      	beq.n	800fadc <std+0x48>
 800face:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fad2:	4294      	cmp	r4, r2
 800fad4:	d002      	beq.n	800fadc <std+0x48>
 800fad6:	33d0      	adds	r3, #208	@ 0xd0
 800fad8:	429c      	cmp	r4, r3
 800fada:	d105      	bne.n	800fae8 <std+0x54>
 800fadc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fae4:	f000 bb16 	b.w	8010114 <__retarget_lock_init_recursive>
 800fae8:	bd10      	pop	{r4, pc}
 800faea:	bf00      	nop
 800faec:	0800fda9 	.word	0x0800fda9
 800faf0:	0800fdcb 	.word	0x0800fdcb
 800faf4:	0800fe03 	.word	0x0800fe03
 800faf8:	0800fe27 	.word	0x0800fe27
 800fafc:	24042cdc 	.word	0x24042cdc

0800fb00 <stdio_exit_handler>:
 800fb00:	4a02      	ldr	r2, [pc, #8]	@ (800fb0c <stdio_exit_handler+0xc>)
 800fb02:	4903      	ldr	r1, [pc, #12]	@ (800fb10 <stdio_exit_handler+0x10>)
 800fb04:	4803      	ldr	r0, [pc, #12]	@ (800fb14 <stdio_exit_handler+0x14>)
 800fb06:	f000 b869 	b.w	800fbdc <_fwalk_sglue>
 800fb0a:	bf00      	nop
 800fb0c:	240000dc 	.word	0x240000dc
 800fb10:	08010cc9 	.word	0x08010cc9
 800fb14:	240000ec 	.word	0x240000ec

0800fb18 <cleanup_stdio>:
 800fb18:	6841      	ldr	r1, [r0, #4]
 800fb1a:	4b0c      	ldr	r3, [pc, #48]	@ (800fb4c <cleanup_stdio+0x34>)
 800fb1c:	4299      	cmp	r1, r3
 800fb1e:	b510      	push	{r4, lr}
 800fb20:	4604      	mov	r4, r0
 800fb22:	d001      	beq.n	800fb28 <cleanup_stdio+0x10>
 800fb24:	f001 f8d0 	bl	8010cc8 <_fflush_r>
 800fb28:	68a1      	ldr	r1, [r4, #8]
 800fb2a:	4b09      	ldr	r3, [pc, #36]	@ (800fb50 <cleanup_stdio+0x38>)
 800fb2c:	4299      	cmp	r1, r3
 800fb2e:	d002      	beq.n	800fb36 <cleanup_stdio+0x1e>
 800fb30:	4620      	mov	r0, r4
 800fb32:	f001 f8c9 	bl	8010cc8 <_fflush_r>
 800fb36:	68e1      	ldr	r1, [r4, #12]
 800fb38:	4b06      	ldr	r3, [pc, #24]	@ (800fb54 <cleanup_stdio+0x3c>)
 800fb3a:	4299      	cmp	r1, r3
 800fb3c:	d004      	beq.n	800fb48 <cleanup_stdio+0x30>
 800fb3e:	4620      	mov	r0, r4
 800fb40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb44:	f001 b8c0 	b.w	8010cc8 <_fflush_r>
 800fb48:	bd10      	pop	{r4, pc}
 800fb4a:	bf00      	nop
 800fb4c:	24042cdc 	.word	0x24042cdc
 800fb50:	24042d44 	.word	0x24042d44
 800fb54:	24042dac 	.word	0x24042dac

0800fb58 <global_stdio_init.part.0>:
 800fb58:	b510      	push	{r4, lr}
 800fb5a:	4b0b      	ldr	r3, [pc, #44]	@ (800fb88 <global_stdio_init.part.0+0x30>)
 800fb5c:	4c0b      	ldr	r4, [pc, #44]	@ (800fb8c <global_stdio_init.part.0+0x34>)
 800fb5e:	4a0c      	ldr	r2, [pc, #48]	@ (800fb90 <global_stdio_init.part.0+0x38>)
 800fb60:	601a      	str	r2, [r3, #0]
 800fb62:	4620      	mov	r0, r4
 800fb64:	2200      	movs	r2, #0
 800fb66:	2104      	movs	r1, #4
 800fb68:	f7ff ff94 	bl	800fa94 <std>
 800fb6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fb70:	2201      	movs	r2, #1
 800fb72:	2109      	movs	r1, #9
 800fb74:	f7ff ff8e 	bl	800fa94 <std>
 800fb78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fb7c:	2202      	movs	r2, #2
 800fb7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb82:	2112      	movs	r1, #18
 800fb84:	f7ff bf86 	b.w	800fa94 <std>
 800fb88:	24042e14 	.word	0x24042e14
 800fb8c:	24042cdc 	.word	0x24042cdc
 800fb90:	0800fb01 	.word	0x0800fb01

0800fb94 <__sfp_lock_acquire>:
 800fb94:	4801      	ldr	r0, [pc, #4]	@ (800fb9c <__sfp_lock_acquire+0x8>)
 800fb96:	f000 babe 	b.w	8010116 <__retarget_lock_acquire_recursive>
 800fb9a:	bf00      	nop
 800fb9c:	24042e1d 	.word	0x24042e1d

0800fba0 <__sfp_lock_release>:
 800fba0:	4801      	ldr	r0, [pc, #4]	@ (800fba8 <__sfp_lock_release+0x8>)
 800fba2:	f000 bab9 	b.w	8010118 <__retarget_lock_release_recursive>
 800fba6:	bf00      	nop
 800fba8:	24042e1d 	.word	0x24042e1d

0800fbac <__sinit>:
 800fbac:	b510      	push	{r4, lr}
 800fbae:	4604      	mov	r4, r0
 800fbb0:	f7ff fff0 	bl	800fb94 <__sfp_lock_acquire>
 800fbb4:	6a23      	ldr	r3, [r4, #32]
 800fbb6:	b11b      	cbz	r3, 800fbc0 <__sinit+0x14>
 800fbb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbbc:	f7ff bff0 	b.w	800fba0 <__sfp_lock_release>
 800fbc0:	4b04      	ldr	r3, [pc, #16]	@ (800fbd4 <__sinit+0x28>)
 800fbc2:	6223      	str	r3, [r4, #32]
 800fbc4:	4b04      	ldr	r3, [pc, #16]	@ (800fbd8 <__sinit+0x2c>)
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d1f5      	bne.n	800fbb8 <__sinit+0xc>
 800fbcc:	f7ff ffc4 	bl	800fb58 <global_stdio_init.part.0>
 800fbd0:	e7f2      	b.n	800fbb8 <__sinit+0xc>
 800fbd2:	bf00      	nop
 800fbd4:	0800fb19 	.word	0x0800fb19
 800fbd8:	24042e14 	.word	0x24042e14

0800fbdc <_fwalk_sglue>:
 800fbdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbe0:	4607      	mov	r7, r0
 800fbe2:	4688      	mov	r8, r1
 800fbe4:	4614      	mov	r4, r2
 800fbe6:	2600      	movs	r6, #0
 800fbe8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fbec:	f1b9 0901 	subs.w	r9, r9, #1
 800fbf0:	d505      	bpl.n	800fbfe <_fwalk_sglue+0x22>
 800fbf2:	6824      	ldr	r4, [r4, #0]
 800fbf4:	2c00      	cmp	r4, #0
 800fbf6:	d1f7      	bne.n	800fbe8 <_fwalk_sglue+0xc>
 800fbf8:	4630      	mov	r0, r6
 800fbfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbfe:	89ab      	ldrh	r3, [r5, #12]
 800fc00:	2b01      	cmp	r3, #1
 800fc02:	d907      	bls.n	800fc14 <_fwalk_sglue+0x38>
 800fc04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fc08:	3301      	adds	r3, #1
 800fc0a:	d003      	beq.n	800fc14 <_fwalk_sglue+0x38>
 800fc0c:	4629      	mov	r1, r5
 800fc0e:	4638      	mov	r0, r7
 800fc10:	47c0      	blx	r8
 800fc12:	4306      	orrs	r6, r0
 800fc14:	3568      	adds	r5, #104	@ 0x68
 800fc16:	e7e9      	b.n	800fbec <_fwalk_sglue+0x10>

0800fc18 <iprintf>:
 800fc18:	b40f      	push	{r0, r1, r2, r3}
 800fc1a:	b507      	push	{r0, r1, r2, lr}
 800fc1c:	4906      	ldr	r1, [pc, #24]	@ (800fc38 <iprintf+0x20>)
 800fc1e:	ab04      	add	r3, sp, #16
 800fc20:	6808      	ldr	r0, [r1, #0]
 800fc22:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc26:	6881      	ldr	r1, [r0, #8]
 800fc28:	9301      	str	r3, [sp, #4]
 800fc2a:	f000 fd25 	bl	8010678 <_vfiprintf_r>
 800fc2e:	b003      	add	sp, #12
 800fc30:	f85d eb04 	ldr.w	lr, [sp], #4
 800fc34:	b004      	add	sp, #16
 800fc36:	4770      	bx	lr
 800fc38:	240000e8 	.word	0x240000e8

0800fc3c <_puts_r>:
 800fc3c:	6a03      	ldr	r3, [r0, #32]
 800fc3e:	b570      	push	{r4, r5, r6, lr}
 800fc40:	6884      	ldr	r4, [r0, #8]
 800fc42:	4605      	mov	r5, r0
 800fc44:	460e      	mov	r6, r1
 800fc46:	b90b      	cbnz	r3, 800fc4c <_puts_r+0x10>
 800fc48:	f7ff ffb0 	bl	800fbac <__sinit>
 800fc4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fc4e:	07db      	lsls	r3, r3, #31
 800fc50:	d405      	bmi.n	800fc5e <_puts_r+0x22>
 800fc52:	89a3      	ldrh	r3, [r4, #12]
 800fc54:	0598      	lsls	r0, r3, #22
 800fc56:	d402      	bmi.n	800fc5e <_puts_r+0x22>
 800fc58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fc5a:	f000 fa5c 	bl	8010116 <__retarget_lock_acquire_recursive>
 800fc5e:	89a3      	ldrh	r3, [r4, #12]
 800fc60:	0719      	lsls	r1, r3, #28
 800fc62:	d502      	bpl.n	800fc6a <_puts_r+0x2e>
 800fc64:	6923      	ldr	r3, [r4, #16]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d135      	bne.n	800fcd6 <_puts_r+0x9a>
 800fc6a:	4621      	mov	r1, r4
 800fc6c:	4628      	mov	r0, r5
 800fc6e:	f000 f927 	bl	800fec0 <__swsetup_r>
 800fc72:	b380      	cbz	r0, 800fcd6 <_puts_r+0x9a>
 800fc74:	f04f 35ff 	mov.w	r5, #4294967295
 800fc78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fc7a:	07da      	lsls	r2, r3, #31
 800fc7c:	d405      	bmi.n	800fc8a <_puts_r+0x4e>
 800fc7e:	89a3      	ldrh	r3, [r4, #12]
 800fc80:	059b      	lsls	r3, r3, #22
 800fc82:	d402      	bmi.n	800fc8a <_puts_r+0x4e>
 800fc84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fc86:	f000 fa47 	bl	8010118 <__retarget_lock_release_recursive>
 800fc8a:	4628      	mov	r0, r5
 800fc8c:	bd70      	pop	{r4, r5, r6, pc}
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	da04      	bge.n	800fc9c <_puts_r+0x60>
 800fc92:	69a2      	ldr	r2, [r4, #24]
 800fc94:	429a      	cmp	r2, r3
 800fc96:	dc17      	bgt.n	800fcc8 <_puts_r+0x8c>
 800fc98:	290a      	cmp	r1, #10
 800fc9a:	d015      	beq.n	800fcc8 <_puts_r+0x8c>
 800fc9c:	6823      	ldr	r3, [r4, #0]
 800fc9e:	1c5a      	adds	r2, r3, #1
 800fca0:	6022      	str	r2, [r4, #0]
 800fca2:	7019      	strb	r1, [r3, #0]
 800fca4:	68a3      	ldr	r3, [r4, #8]
 800fca6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fcaa:	3b01      	subs	r3, #1
 800fcac:	60a3      	str	r3, [r4, #8]
 800fcae:	2900      	cmp	r1, #0
 800fcb0:	d1ed      	bne.n	800fc8e <_puts_r+0x52>
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	da11      	bge.n	800fcda <_puts_r+0x9e>
 800fcb6:	4622      	mov	r2, r4
 800fcb8:	210a      	movs	r1, #10
 800fcba:	4628      	mov	r0, r5
 800fcbc:	f000 f8c2 	bl	800fe44 <__swbuf_r>
 800fcc0:	3001      	adds	r0, #1
 800fcc2:	d0d7      	beq.n	800fc74 <_puts_r+0x38>
 800fcc4:	250a      	movs	r5, #10
 800fcc6:	e7d7      	b.n	800fc78 <_puts_r+0x3c>
 800fcc8:	4622      	mov	r2, r4
 800fcca:	4628      	mov	r0, r5
 800fccc:	f000 f8ba 	bl	800fe44 <__swbuf_r>
 800fcd0:	3001      	adds	r0, #1
 800fcd2:	d1e7      	bne.n	800fca4 <_puts_r+0x68>
 800fcd4:	e7ce      	b.n	800fc74 <_puts_r+0x38>
 800fcd6:	3e01      	subs	r6, #1
 800fcd8:	e7e4      	b.n	800fca4 <_puts_r+0x68>
 800fcda:	6823      	ldr	r3, [r4, #0]
 800fcdc:	1c5a      	adds	r2, r3, #1
 800fcde:	6022      	str	r2, [r4, #0]
 800fce0:	220a      	movs	r2, #10
 800fce2:	701a      	strb	r2, [r3, #0]
 800fce4:	e7ee      	b.n	800fcc4 <_puts_r+0x88>
	...

0800fce8 <puts>:
 800fce8:	4b02      	ldr	r3, [pc, #8]	@ (800fcf4 <puts+0xc>)
 800fcea:	4601      	mov	r1, r0
 800fcec:	6818      	ldr	r0, [r3, #0]
 800fcee:	f7ff bfa5 	b.w	800fc3c <_puts_r>
 800fcf2:	bf00      	nop
 800fcf4:	240000e8 	.word	0x240000e8

0800fcf8 <sniprintf>:
 800fcf8:	b40c      	push	{r2, r3}
 800fcfa:	b530      	push	{r4, r5, lr}
 800fcfc:	4b18      	ldr	r3, [pc, #96]	@ (800fd60 <sniprintf+0x68>)
 800fcfe:	1e0c      	subs	r4, r1, #0
 800fd00:	681d      	ldr	r5, [r3, #0]
 800fd02:	b09d      	sub	sp, #116	@ 0x74
 800fd04:	da08      	bge.n	800fd18 <sniprintf+0x20>
 800fd06:	238b      	movs	r3, #139	@ 0x8b
 800fd08:	602b      	str	r3, [r5, #0]
 800fd0a:	f04f 30ff 	mov.w	r0, #4294967295
 800fd0e:	b01d      	add	sp, #116	@ 0x74
 800fd10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fd14:	b002      	add	sp, #8
 800fd16:	4770      	bx	lr
 800fd18:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fd1c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fd20:	f04f 0300 	mov.w	r3, #0
 800fd24:	931b      	str	r3, [sp, #108]	@ 0x6c
 800fd26:	bf14      	ite	ne
 800fd28:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fd2c:	4623      	moveq	r3, r4
 800fd2e:	9304      	str	r3, [sp, #16]
 800fd30:	9307      	str	r3, [sp, #28]
 800fd32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fd36:	9002      	str	r0, [sp, #8]
 800fd38:	9006      	str	r0, [sp, #24]
 800fd3a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fd3e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fd40:	ab21      	add	r3, sp, #132	@ 0x84
 800fd42:	a902      	add	r1, sp, #8
 800fd44:	4628      	mov	r0, r5
 800fd46:	9301      	str	r3, [sp, #4]
 800fd48:	f000 fb70 	bl	801042c <_svfiprintf_r>
 800fd4c:	1c43      	adds	r3, r0, #1
 800fd4e:	bfbc      	itt	lt
 800fd50:	238b      	movlt	r3, #139	@ 0x8b
 800fd52:	602b      	strlt	r3, [r5, #0]
 800fd54:	2c00      	cmp	r4, #0
 800fd56:	d0da      	beq.n	800fd0e <sniprintf+0x16>
 800fd58:	9b02      	ldr	r3, [sp, #8]
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	701a      	strb	r2, [r3, #0]
 800fd5e:	e7d6      	b.n	800fd0e <sniprintf+0x16>
 800fd60:	240000e8 	.word	0x240000e8

0800fd64 <siprintf>:
 800fd64:	b40e      	push	{r1, r2, r3}
 800fd66:	b510      	push	{r4, lr}
 800fd68:	b09d      	sub	sp, #116	@ 0x74
 800fd6a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800fd6c:	9002      	str	r0, [sp, #8]
 800fd6e:	9006      	str	r0, [sp, #24]
 800fd70:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fd74:	480a      	ldr	r0, [pc, #40]	@ (800fda0 <siprintf+0x3c>)
 800fd76:	9107      	str	r1, [sp, #28]
 800fd78:	9104      	str	r1, [sp, #16]
 800fd7a:	490a      	ldr	r1, [pc, #40]	@ (800fda4 <siprintf+0x40>)
 800fd7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd80:	9105      	str	r1, [sp, #20]
 800fd82:	2400      	movs	r4, #0
 800fd84:	a902      	add	r1, sp, #8
 800fd86:	6800      	ldr	r0, [r0, #0]
 800fd88:	9301      	str	r3, [sp, #4]
 800fd8a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800fd8c:	f000 fb4e 	bl	801042c <_svfiprintf_r>
 800fd90:	9b02      	ldr	r3, [sp, #8]
 800fd92:	701c      	strb	r4, [r3, #0]
 800fd94:	b01d      	add	sp, #116	@ 0x74
 800fd96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd9a:	b003      	add	sp, #12
 800fd9c:	4770      	bx	lr
 800fd9e:	bf00      	nop
 800fda0:	240000e8 	.word	0x240000e8
 800fda4:	ffff0208 	.word	0xffff0208

0800fda8 <__sread>:
 800fda8:	b510      	push	{r4, lr}
 800fdaa:	460c      	mov	r4, r1
 800fdac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdb0:	f000 f962 	bl	8010078 <_read_r>
 800fdb4:	2800      	cmp	r0, #0
 800fdb6:	bfab      	itete	ge
 800fdb8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fdba:	89a3      	ldrhlt	r3, [r4, #12]
 800fdbc:	181b      	addge	r3, r3, r0
 800fdbe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fdc2:	bfac      	ite	ge
 800fdc4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fdc6:	81a3      	strhlt	r3, [r4, #12]
 800fdc8:	bd10      	pop	{r4, pc}

0800fdca <__swrite>:
 800fdca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdce:	461f      	mov	r7, r3
 800fdd0:	898b      	ldrh	r3, [r1, #12]
 800fdd2:	05db      	lsls	r3, r3, #23
 800fdd4:	4605      	mov	r5, r0
 800fdd6:	460c      	mov	r4, r1
 800fdd8:	4616      	mov	r6, r2
 800fdda:	d505      	bpl.n	800fde8 <__swrite+0x1e>
 800fddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fde0:	2302      	movs	r3, #2
 800fde2:	2200      	movs	r2, #0
 800fde4:	f000 f936 	bl	8010054 <_lseek_r>
 800fde8:	89a3      	ldrh	r3, [r4, #12]
 800fdea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fdee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fdf2:	81a3      	strh	r3, [r4, #12]
 800fdf4:	4632      	mov	r2, r6
 800fdf6:	463b      	mov	r3, r7
 800fdf8:	4628      	mov	r0, r5
 800fdfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fdfe:	f000 b94d 	b.w	801009c <_write_r>

0800fe02 <__sseek>:
 800fe02:	b510      	push	{r4, lr}
 800fe04:	460c      	mov	r4, r1
 800fe06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe0a:	f000 f923 	bl	8010054 <_lseek_r>
 800fe0e:	1c43      	adds	r3, r0, #1
 800fe10:	89a3      	ldrh	r3, [r4, #12]
 800fe12:	bf15      	itete	ne
 800fe14:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fe16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fe1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fe1e:	81a3      	strheq	r3, [r4, #12]
 800fe20:	bf18      	it	ne
 800fe22:	81a3      	strhne	r3, [r4, #12]
 800fe24:	bd10      	pop	{r4, pc}

0800fe26 <__sclose>:
 800fe26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe2a:	f000 b903 	b.w	8010034 <_close_r>
	...

0800fe30 <viprintf>:
 800fe30:	460b      	mov	r3, r1
 800fe32:	4903      	ldr	r1, [pc, #12]	@ (800fe40 <viprintf+0x10>)
 800fe34:	4602      	mov	r2, r0
 800fe36:	6808      	ldr	r0, [r1, #0]
 800fe38:	6881      	ldr	r1, [r0, #8]
 800fe3a:	f000 bc1d 	b.w	8010678 <_vfiprintf_r>
 800fe3e:	bf00      	nop
 800fe40:	240000e8 	.word	0x240000e8

0800fe44 <__swbuf_r>:
 800fe44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe46:	460e      	mov	r6, r1
 800fe48:	4614      	mov	r4, r2
 800fe4a:	4605      	mov	r5, r0
 800fe4c:	b118      	cbz	r0, 800fe56 <__swbuf_r+0x12>
 800fe4e:	6a03      	ldr	r3, [r0, #32]
 800fe50:	b90b      	cbnz	r3, 800fe56 <__swbuf_r+0x12>
 800fe52:	f7ff feab 	bl	800fbac <__sinit>
 800fe56:	69a3      	ldr	r3, [r4, #24]
 800fe58:	60a3      	str	r3, [r4, #8]
 800fe5a:	89a3      	ldrh	r3, [r4, #12]
 800fe5c:	071a      	lsls	r2, r3, #28
 800fe5e:	d501      	bpl.n	800fe64 <__swbuf_r+0x20>
 800fe60:	6923      	ldr	r3, [r4, #16]
 800fe62:	b943      	cbnz	r3, 800fe76 <__swbuf_r+0x32>
 800fe64:	4621      	mov	r1, r4
 800fe66:	4628      	mov	r0, r5
 800fe68:	f000 f82a 	bl	800fec0 <__swsetup_r>
 800fe6c:	b118      	cbz	r0, 800fe76 <__swbuf_r+0x32>
 800fe6e:	f04f 37ff 	mov.w	r7, #4294967295
 800fe72:	4638      	mov	r0, r7
 800fe74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe76:	6823      	ldr	r3, [r4, #0]
 800fe78:	6922      	ldr	r2, [r4, #16]
 800fe7a:	1a98      	subs	r0, r3, r2
 800fe7c:	6963      	ldr	r3, [r4, #20]
 800fe7e:	b2f6      	uxtb	r6, r6
 800fe80:	4283      	cmp	r3, r0
 800fe82:	4637      	mov	r7, r6
 800fe84:	dc05      	bgt.n	800fe92 <__swbuf_r+0x4e>
 800fe86:	4621      	mov	r1, r4
 800fe88:	4628      	mov	r0, r5
 800fe8a:	f000 ff1d 	bl	8010cc8 <_fflush_r>
 800fe8e:	2800      	cmp	r0, #0
 800fe90:	d1ed      	bne.n	800fe6e <__swbuf_r+0x2a>
 800fe92:	68a3      	ldr	r3, [r4, #8]
 800fe94:	3b01      	subs	r3, #1
 800fe96:	60a3      	str	r3, [r4, #8]
 800fe98:	6823      	ldr	r3, [r4, #0]
 800fe9a:	1c5a      	adds	r2, r3, #1
 800fe9c:	6022      	str	r2, [r4, #0]
 800fe9e:	701e      	strb	r6, [r3, #0]
 800fea0:	6962      	ldr	r2, [r4, #20]
 800fea2:	1c43      	adds	r3, r0, #1
 800fea4:	429a      	cmp	r2, r3
 800fea6:	d004      	beq.n	800feb2 <__swbuf_r+0x6e>
 800fea8:	89a3      	ldrh	r3, [r4, #12]
 800feaa:	07db      	lsls	r3, r3, #31
 800feac:	d5e1      	bpl.n	800fe72 <__swbuf_r+0x2e>
 800feae:	2e0a      	cmp	r6, #10
 800feb0:	d1df      	bne.n	800fe72 <__swbuf_r+0x2e>
 800feb2:	4621      	mov	r1, r4
 800feb4:	4628      	mov	r0, r5
 800feb6:	f000 ff07 	bl	8010cc8 <_fflush_r>
 800feba:	2800      	cmp	r0, #0
 800febc:	d0d9      	beq.n	800fe72 <__swbuf_r+0x2e>
 800febe:	e7d6      	b.n	800fe6e <__swbuf_r+0x2a>

0800fec0 <__swsetup_r>:
 800fec0:	b538      	push	{r3, r4, r5, lr}
 800fec2:	4b29      	ldr	r3, [pc, #164]	@ (800ff68 <__swsetup_r+0xa8>)
 800fec4:	4605      	mov	r5, r0
 800fec6:	6818      	ldr	r0, [r3, #0]
 800fec8:	460c      	mov	r4, r1
 800feca:	b118      	cbz	r0, 800fed4 <__swsetup_r+0x14>
 800fecc:	6a03      	ldr	r3, [r0, #32]
 800fece:	b90b      	cbnz	r3, 800fed4 <__swsetup_r+0x14>
 800fed0:	f7ff fe6c 	bl	800fbac <__sinit>
 800fed4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fed8:	0719      	lsls	r1, r3, #28
 800feda:	d422      	bmi.n	800ff22 <__swsetup_r+0x62>
 800fedc:	06da      	lsls	r2, r3, #27
 800fede:	d407      	bmi.n	800fef0 <__swsetup_r+0x30>
 800fee0:	2209      	movs	r2, #9
 800fee2:	602a      	str	r2, [r5, #0]
 800fee4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fee8:	81a3      	strh	r3, [r4, #12]
 800feea:	f04f 30ff 	mov.w	r0, #4294967295
 800feee:	e033      	b.n	800ff58 <__swsetup_r+0x98>
 800fef0:	0758      	lsls	r0, r3, #29
 800fef2:	d512      	bpl.n	800ff1a <__swsetup_r+0x5a>
 800fef4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fef6:	b141      	cbz	r1, 800ff0a <__swsetup_r+0x4a>
 800fef8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fefc:	4299      	cmp	r1, r3
 800fefe:	d002      	beq.n	800ff06 <__swsetup_r+0x46>
 800ff00:	4628      	mov	r0, r5
 800ff02:	f000 f937 	bl	8010174 <_free_r>
 800ff06:	2300      	movs	r3, #0
 800ff08:	6363      	str	r3, [r4, #52]	@ 0x34
 800ff0a:	89a3      	ldrh	r3, [r4, #12]
 800ff0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ff10:	81a3      	strh	r3, [r4, #12]
 800ff12:	2300      	movs	r3, #0
 800ff14:	6063      	str	r3, [r4, #4]
 800ff16:	6923      	ldr	r3, [r4, #16]
 800ff18:	6023      	str	r3, [r4, #0]
 800ff1a:	89a3      	ldrh	r3, [r4, #12]
 800ff1c:	f043 0308 	orr.w	r3, r3, #8
 800ff20:	81a3      	strh	r3, [r4, #12]
 800ff22:	6923      	ldr	r3, [r4, #16]
 800ff24:	b94b      	cbnz	r3, 800ff3a <__swsetup_r+0x7a>
 800ff26:	89a3      	ldrh	r3, [r4, #12]
 800ff28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ff2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ff30:	d003      	beq.n	800ff3a <__swsetup_r+0x7a>
 800ff32:	4621      	mov	r1, r4
 800ff34:	4628      	mov	r0, r5
 800ff36:	f000 ff27 	bl	8010d88 <__smakebuf_r>
 800ff3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff3e:	f013 0201 	ands.w	r2, r3, #1
 800ff42:	d00a      	beq.n	800ff5a <__swsetup_r+0x9a>
 800ff44:	2200      	movs	r2, #0
 800ff46:	60a2      	str	r2, [r4, #8]
 800ff48:	6962      	ldr	r2, [r4, #20]
 800ff4a:	4252      	negs	r2, r2
 800ff4c:	61a2      	str	r2, [r4, #24]
 800ff4e:	6922      	ldr	r2, [r4, #16]
 800ff50:	b942      	cbnz	r2, 800ff64 <__swsetup_r+0xa4>
 800ff52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ff56:	d1c5      	bne.n	800fee4 <__swsetup_r+0x24>
 800ff58:	bd38      	pop	{r3, r4, r5, pc}
 800ff5a:	0799      	lsls	r1, r3, #30
 800ff5c:	bf58      	it	pl
 800ff5e:	6962      	ldrpl	r2, [r4, #20]
 800ff60:	60a2      	str	r2, [r4, #8]
 800ff62:	e7f4      	b.n	800ff4e <__swsetup_r+0x8e>
 800ff64:	2000      	movs	r0, #0
 800ff66:	e7f7      	b.n	800ff58 <__swsetup_r+0x98>
 800ff68:	240000e8 	.word	0x240000e8

0800ff6c <memmove>:
 800ff6c:	4288      	cmp	r0, r1
 800ff6e:	b510      	push	{r4, lr}
 800ff70:	eb01 0402 	add.w	r4, r1, r2
 800ff74:	d902      	bls.n	800ff7c <memmove+0x10>
 800ff76:	4284      	cmp	r4, r0
 800ff78:	4623      	mov	r3, r4
 800ff7a:	d807      	bhi.n	800ff8c <memmove+0x20>
 800ff7c:	1e43      	subs	r3, r0, #1
 800ff7e:	42a1      	cmp	r1, r4
 800ff80:	d008      	beq.n	800ff94 <memmove+0x28>
 800ff82:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ff86:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ff8a:	e7f8      	b.n	800ff7e <memmove+0x12>
 800ff8c:	4402      	add	r2, r0
 800ff8e:	4601      	mov	r1, r0
 800ff90:	428a      	cmp	r2, r1
 800ff92:	d100      	bne.n	800ff96 <memmove+0x2a>
 800ff94:	bd10      	pop	{r4, pc}
 800ff96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ff9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ff9e:	e7f7      	b.n	800ff90 <memmove+0x24>

0800ffa0 <memset>:
 800ffa0:	4402      	add	r2, r0
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	4293      	cmp	r3, r2
 800ffa6:	d100      	bne.n	800ffaa <memset+0xa>
 800ffa8:	4770      	bx	lr
 800ffaa:	f803 1b01 	strb.w	r1, [r3], #1
 800ffae:	e7f9      	b.n	800ffa4 <memset+0x4>

0800ffb0 <strchr>:
 800ffb0:	b2c9      	uxtb	r1, r1
 800ffb2:	4603      	mov	r3, r0
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ffba:	b112      	cbz	r2, 800ffc2 <strchr+0x12>
 800ffbc:	428a      	cmp	r2, r1
 800ffbe:	d1f9      	bne.n	800ffb4 <strchr+0x4>
 800ffc0:	4770      	bx	lr
 800ffc2:	2900      	cmp	r1, #0
 800ffc4:	bf18      	it	ne
 800ffc6:	2000      	movne	r0, #0
 800ffc8:	4770      	bx	lr
	...

0800ffcc <strncasecmp>:
 800ffcc:	b570      	push	{r4, r5, r6, lr}
 800ffce:	4e0e      	ldr	r6, [pc, #56]	@ (8010008 <strncasecmp+0x3c>)
 800ffd0:	4605      	mov	r5, r0
 800ffd2:	440a      	add	r2, r1
 800ffd4:	428a      	cmp	r2, r1
 800ffd6:	d101      	bne.n	800ffdc <strncasecmp+0x10>
 800ffd8:	2000      	movs	r0, #0
 800ffda:	e013      	b.n	8010004 <strncasecmp+0x38>
 800ffdc:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ffe0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ffe4:	5cf0      	ldrb	r0, [r6, r3]
 800ffe6:	f000 0003 	and.w	r0, r0, #3
 800ffea:	2801      	cmp	r0, #1
 800ffec:	5d30      	ldrb	r0, [r6, r4]
 800ffee:	f000 0003 	and.w	r0, r0, #3
 800fff2:	bf08      	it	eq
 800fff4:	3320      	addeq	r3, #32
 800fff6:	2801      	cmp	r0, #1
 800fff8:	bf08      	it	eq
 800fffa:	3420      	addeq	r4, #32
 800fffc:	1b18      	subs	r0, r3, r4
 800fffe:	d101      	bne.n	8010004 <strncasecmp+0x38>
 8010000:	2c00      	cmp	r4, #0
 8010002:	d1e7      	bne.n	800ffd4 <strncasecmp+0x8>
 8010004:	bd70      	pop	{r4, r5, r6, pc}
 8010006:	bf00      	nop
 8010008:	080124b7 	.word	0x080124b7

0801000c <strncpy>:
 801000c:	b510      	push	{r4, lr}
 801000e:	3901      	subs	r1, #1
 8010010:	4603      	mov	r3, r0
 8010012:	b132      	cbz	r2, 8010022 <strncpy+0x16>
 8010014:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010018:	f803 4b01 	strb.w	r4, [r3], #1
 801001c:	3a01      	subs	r2, #1
 801001e:	2c00      	cmp	r4, #0
 8010020:	d1f7      	bne.n	8010012 <strncpy+0x6>
 8010022:	441a      	add	r2, r3
 8010024:	2100      	movs	r1, #0
 8010026:	4293      	cmp	r3, r2
 8010028:	d100      	bne.n	801002c <strncpy+0x20>
 801002a:	bd10      	pop	{r4, pc}
 801002c:	f803 1b01 	strb.w	r1, [r3], #1
 8010030:	e7f9      	b.n	8010026 <strncpy+0x1a>
	...

08010034 <_close_r>:
 8010034:	b538      	push	{r3, r4, r5, lr}
 8010036:	4d06      	ldr	r5, [pc, #24]	@ (8010050 <_close_r+0x1c>)
 8010038:	2300      	movs	r3, #0
 801003a:	4604      	mov	r4, r0
 801003c:	4608      	mov	r0, r1
 801003e:	602b      	str	r3, [r5, #0]
 8010040:	f7f1 fd54 	bl	8001aec <_close>
 8010044:	1c43      	adds	r3, r0, #1
 8010046:	d102      	bne.n	801004e <_close_r+0x1a>
 8010048:	682b      	ldr	r3, [r5, #0]
 801004a:	b103      	cbz	r3, 801004e <_close_r+0x1a>
 801004c:	6023      	str	r3, [r4, #0]
 801004e:	bd38      	pop	{r3, r4, r5, pc}
 8010050:	24042e18 	.word	0x24042e18

08010054 <_lseek_r>:
 8010054:	b538      	push	{r3, r4, r5, lr}
 8010056:	4d07      	ldr	r5, [pc, #28]	@ (8010074 <_lseek_r+0x20>)
 8010058:	4604      	mov	r4, r0
 801005a:	4608      	mov	r0, r1
 801005c:	4611      	mov	r1, r2
 801005e:	2200      	movs	r2, #0
 8010060:	602a      	str	r2, [r5, #0]
 8010062:	461a      	mov	r2, r3
 8010064:	f7f1 fd69 	bl	8001b3a <_lseek>
 8010068:	1c43      	adds	r3, r0, #1
 801006a:	d102      	bne.n	8010072 <_lseek_r+0x1e>
 801006c:	682b      	ldr	r3, [r5, #0]
 801006e:	b103      	cbz	r3, 8010072 <_lseek_r+0x1e>
 8010070:	6023      	str	r3, [r4, #0]
 8010072:	bd38      	pop	{r3, r4, r5, pc}
 8010074:	24042e18 	.word	0x24042e18

08010078 <_read_r>:
 8010078:	b538      	push	{r3, r4, r5, lr}
 801007a:	4d07      	ldr	r5, [pc, #28]	@ (8010098 <_read_r+0x20>)
 801007c:	4604      	mov	r4, r0
 801007e:	4608      	mov	r0, r1
 8010080:	4611      	mov	r1, r2
 8010082:	2200      	movs	r2, #0
 8010084:	602a      	str	r2, [r5, #0]
 8010086:	461a      	mov	r2, r3
 8010088:	f7f1 fcf7 	bl	8001a7a <_read>
 801008c:	1c43      	adds	r3, r0, #1
 801008e:	d102      	bne.n	8010096 <_read_r+0x1e>
 8010090:	682b      	ldr	r3, [r5, #0]
 8010092:	b103      	cbz	r3, 8010096 <_read_r+0x1e>
 8010094:	6023      	str	r3, [r4, #0]
 8010096:	bd38      	pop	{r3, r4, r5, pc}
 8010098:	24042e18 	.word	0x24042e18

0801009c <_write_r>:
 801009c:	b538      	push	{r3, r4, r5, lr}
 801009e:	4d07      	ldr	r5, [pc, #28]	@ (80100bc <_write_r+0x20>)
 80100a0:	4604      	mov	r4, r0
 80100a2:	4608      	mov	r0, r1
 80100a4:	4611      	mov	r1, r2
 80100a6:	2200      	movs	r2, #0
 80100a8:	602a      	str	r2, [r5, #0]
 80100aa:	461a      	mov	r2, r3
 80100ac:	f7f1 fd02 	bl	8001ab4 <_write>
 80100b0:	1c43      	adds	r3, r0, #1
 80100b2:	d102      	bne.n	80100ba <_write_r+0x1e>
 80100b4:	682b      	ldr	r3, [r5, #0]
 80100b6:	b103      	cbz	r3, 80100ba <_write_r+0x1e>
 80100b8:	6023      	str	r3, [r4, #0]
 80100ba:	bd38      	pop	{r3, r4, r5, pc}
 80100bc:	24042e18 	.word	0x24042e18

080100c0 <__errno>:
 80100c0:	4b01      	ldr	r3, [pc, #4]	@ (80100c8 <__errno+0x8>)
 80100c2:	6818      	ldr	r0, [r3, #0]
 80100c4:	4770      	bx	lr
 80100c6:	bf00      	nop
 80100c8:	240000e8 	.word	0x240000e8

080100cc <__libc_init_array>:
 80100cc:	b570      	push	{r4, r5, r6, lr}
 80100ce:	4d0d      	ldr	r5, [pc, #52]	@ (8010104 <__libc_init_array+0x38>)
 80100d0:	4c0d      	ldr	r4, [pc, #52]	@ (8010108 <__libc_init_array+0x3c>)
 80100d2:	1b64      	subs	r4, r4, r5
 80100d4:	10a4      	asrs	r4, r4, #2
 80100d6:	2600      	movs	r6, #0
 80100d8:	42a6      	cmp	r6, r4
 80100da:	d109      	bne.n	80100f0 <__libc_init_array+0x24>
 80100dc:	4d0b      	ldr	r5, [pc, #44]	@ (801010c <__libc_init_array+0x40>)
 80100de:	4c0c      	ldr	r4, [pc, #48]	@ (8010110 <__libc_init_array+0x44>)
 80100e0:	f000 ff42 	bl	8010f68 <_init>
 80100e4:	1b64      	subs	r4, r4, r5
 80100e6:	10a4      	asrs	r4, r4, #2
 80100e8:	2600      	movs	r6, #0
 80100ea:	42a6      	cmp	r6, r4
 80100ec:	d105      	bne.n	80100fa <__libc_init_array+0x2e>
 80100ee:	bd70      	pop	{r4, r5, r6, pc}
 80100f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80100f4:	4798      	blx	r3
 80100f6:	3601      	adds	r6, #1
 80100f8:	e7ee      	b.n	80100d8 <__libc_init_array+0xc>
 80100fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80100fe:	4798      	blx	r3
 8010100:	3601      	adds	r6, #1
 8010102:	e7f2      	b.n	80100ea <__libc_init_array+0x1e>
 8010104:	080125c0 	.word	0x080125c0
 8010108:	080125c0 	.word	0x080125c0
 801010c:	080125c0 	.word	0x080125c0
 8010110:	080125c4 	.word	0x080125c4

08010114 <__retarget_lock_init_recursive>:
 8010114:	4770      	bx	lr

08010116 <__retarget_lock_acquire_recursive>:
 8010116:	4770      	bx	lr

08010118 <__retarget_lock_release_recursive>:
 8010118:	4770      	bx	lr

0801011a <memcpy>:
 801011a:	440a      	add	r2, r1
 801011c:	4291      	cmp	r1, r2
 801011e:	f100 33ff 	add.w	r3, r0, #4294967295
 8010122:	d100      	bne.n	8010126 <memcpy+0xc>
 8010124:	4770      	bx	lr
 8010126:	b510      	push	{r4, lr}
 8010128:	f811 4b01 	ldrb.w	r4, [r1], #1
 801012c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010130:	4291      	cmp	r1, r2
 8010132:	d1f9      	bne.n	8010128 <memcpy+0xe>
 8010134:	bd10      	pop	{r4, pc}
	...

08010138 <__assert_func>:
 8010138:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801013a:	4614      	mov	r4, r2
 801013c:	461a      	mov	r2, r3
 801013e:	4b09      	ldr	r3, [pc, #36]	@ (8010164 <__assert_func+0x2c>)
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	4605      	mov	r5, r0
 8010144:	68d8      	ldr	r0, [r3, #12]
 8010146:	b14c      	cbz	r4, 801015c <__assert_func+0x24>
 8010148:	4b07      	ldr	r3, [pc, #28]	@ (8010168 <__assert_func+0x30>)
 801014a:	9100      	str	r1, [sp, #0]
 801014c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010150:	4906      	ldr	r1, [pc, #24]	@ (801016c <__assert_func+0x34>)
 8010152:	462b      	mov	r3, r5
 8010154:	f000 fde0 	bl	8010d18 <fiprintf>
 8010158:	f000 fe84 	bl	8010e64 <abort>
 801015c:	4b04      	ldr	r3, [pc, #16]	@ (8010170 <__assert_func+0x38>)
 801015e:	461c      	mov	r4, r3
 8010160:	e7f3      	b.n	801014a <__assert_func+0x12>
 8010162:	bf00      	nop
 8010164:	240000e8 	.word	0x240000e8
 8010168:	08012447 	.word	0x08012447
 801016c:	08012454 	.word	0x08012454
 8010170:	08012482 	.word	0x08012482

08010174 <_free_r>:
 8010174:	b538      	push	{r3, r4, r5, lr}
 8010176:	4605      	mov	r5, r0
 8010178:	2900      	cmp	r1, #0
 801017a:	d041      	beq.n	8010200 <_free_r+0x8c>
 801017c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010180:	1f0c      	subs	r4, r1, #4
 8010182:	2b00      	cmp	r3, #0
 8010184:	bfb8      	it	lt
 8010186:	18e4      	addlt	r4, r4, r3
 8010188:	f000 f8e8 	bl	801035c <__malloc_lock>
 801018c:	4a1d      	ldr	r2, [pc, #116]	@ (8010204 <_free_r+0x90>)
 801018e:	6813      	ldr	r3, [r2, #0]
 8010190:	b933      	cbnz	r3, 80101a0 <_free_r+0x2c>
 8010192:	6063      	str	r3, [r4, #4]
 8010194:	6014      	str	r4, [r2, #0]
 8010196:	4628      	mov	r0, r5
 8010198:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801019c:	f000 b8e4 	b.w	8010368 <__malloc_unlock>
 80101a0:	42a3      	cmp	r3, r4
 80101a2:	d908      	bls.n	80101b6 <_free_r+0x42>
 80101a4:	6820      	ldr	r0, [r4, #0]
 80101a6:	1821      	adds	r1, r4, r0
 80101a8:	428b      	cmp	r3, r1
 80101aa:	bf01      	itttt	eq
 80101ac:	6819      	ldreq	r1, [r3, #0]
 80101ae:	685b      	ldreq	r3, [r3, #4]
 80101b0:	1809      	addeq	r1, r1, r0
 80101b2:	6021      	streq	r1, [r4, #0]
 80101b4:	e7ed      	b.n	8010192 <_free_r+0x1e>
 80101b6:	461a      	mov	r2, r3
 80101b8:	685b      	ldr	r3, [r3, #4]
 80101ba:	b10b      	cbz	r3, 80101c0 <_free_r+0x4c>
 80101bc:	42a3      	cmp	r3, r4
 80101be:	d9fa      	bls.n	80101b6 <_free_r+0x42>
 80101c0:	6811      	ldr	r1, [r2, #0]
 80101c2:	1850      	adds	r0, r2, r1
 80101c4:	42a0      	cmp	r0, r4
 80101c6:	d10b      	bne.n	80101e0 <_free_r+0x6c>
 80101c8:	6820      	ldr	r0, [r4, #0]
 80101ca:	4401      	add	r1, r0
 80101cc:	1850      	adds	r0, r2, r1
 80101ce:	4283      	cmp	r3, r0
 80101d0:	6011      	str	r1, [r2, #0]
 80101d2:	d1e0      	bne.n	8010196 <_free_r+0x22>
 80101d4:	6818      	ldr	r0, [r3, #0]
 80101d6:	685b      	ldr	r3, [r3, #4]
 80101d8:	6053      	str	r3, [r2, #4]
 80101da:	4408      	add	r0, r1
 80101dc:	6010      	str	r0, [r2, #0]
 80101de:	e7da      	b.n	8010196 <_free_r+0x22>
 80101e0:	d902      	bls.n	80101e8 <_free_r+0x74>
 80101e2:	230c      	movs	r3, #12
 80101e4:	602b      	str	r3, [r5, #0]
 80101e6:	e7d6      	b.n	8010196 <_free_r+0x22>
 80101e8:	6820      	ldr	r0, [r4, #0]
 80101ea:	1821      	adds	r1, r4, r0
 80101ec:	428b      	cmp	r3, r1
 80101ee:	bf04      	itt	eq
 80101f0:	6819      	ldreq	r1, [r3, #0]
 80101f2:	685b      	ldreq	r3, [r3, #4]
 80101f4:	6063      	str	r3, [r4, #4]
 80101f6:	bf04      	itt	eq
 80101f8:	1809      	addeq	r1, r1, r0
 80101fa:	6021      	streq	r1, [r4, #0]
 80101fc:	6054      	str	r4, [r2, #4]
 80101fe:	e7ca      	b.n	8010196 <_free_r+0x22>
 8010200:	bd38      	pop	{r3, r4, r5, pc}
 8010202:	bf00      	nop
 8010204:	24042e24 	.word	0x24042e24

08010208 <malloc>:
 8010208:	4b02      	ldr	r3, [pc, #8]	@ (8010214 <malloc+0xc>)
 801020a:	4601      	mov	r1, r0
 801020c:	6818      	ldr	r0, [r3, #0]
 801020e:	f000 b825 	b.w	801025c <_malloc_r>
 8010212:	bf00      	nop
 8010214:	240000e8 	.word	0x240000e8

08010218 <sbrk_aligned>:
 8010218:	b570      	push	{r4, r5, r6, lr}
 801021a:	4e0f      	ldr	r6, [pc, #60]	@ (8010258 <sbrk_aligned+0x40>)
 801021c:	460c      	mov	r4, r1
 801021e:	6831      	ldr	r1, [r6, #0]
 8010220:	4605      	mov	r5, r0
 8010222:	b911      	cbnz	r1, 801022a <sbrk_aligned+0x12>
 8010224:	f000 fe0e 	bl	8010e44 <_sbrk_r>
 8010228:	6030      	str	r0, [r6, #0]
 801022a:	4621      	mov	r1, r4
 801022c:	4628      	mov	r0, r5
 801022e:	f000 fe09 	bl	8010e44 <_sbrk_r>
 8010232:	1c43      	adds	r3, r0, #1
 8010234:	d103      	bne.n	801023e <sbrk_aligned+0x26>
 8010236:	f04f 34ff 	mov.w	r4, #4294967295
 801023a:	4620      	mov	r0, r4
 801023c:	bd70      	pop	{r4, r5, r6, pc}
 801023e:	1cc4      	adds	r4, r0, #3
 8010240:	f024 0403 	bic.w	r4, r4, #3
 8010244:	42a0      	cmp	r0, r4
 8010246:	d0f8      	beq.n	801023a <sbrk_aligned+0x22>
 8010248:	1a21      	subs	r1, r4, r0
 801024a:	4628      	mov	r0, r5
 801024c:	f000 fdfa 	bl	8010e44 <_sbrk_r>
 8010250:	3001      	adds	r0, #1
 8010252:	d1f2      	bne.n	801023a <sbrk_aligned+0x22>
 8010254:	e7ef      	b.n	8010236 <sbrk_aligned+0x1e>
 8010256:	bf00      	nop
 8010258:	24042e20 	.word	0x24042e20

0801025c <_malloc_r>:
 801025c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010260:	1ccd      	adds	r5, r1, #3
 8010262:	f025 0503 	bic.w	r5, r5, #3
 8010266:	3508      	adds	r5, #8
 8010268:	2d0c      	cmp	r5, #12
 801026a:	bf38      	it	cc
 801026c:	250c      	movcc	r5, #12
 801026e:	2d00      	cmp	r5, #0
 8010270:	4606      	mov	r6, r0
 8010272:	db01      	blt.n	8010278 <_malloc_r+0x1c>
 8010274:	42a9      	cmp	r1, r5
 8010276:	d904      	bls.n	8010282 <_malloc_r+0x26>
 8010278:	230c      	movs	r3, #12
 801027a:	6033      	str	r3, [r6, #0]
 801027c:	2000      	movs	r0, #0
 801027e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010282:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010358 <_malloc_r+0xfc>
 8010286:	f000 f869 	bl	801035c <__malloc_lock>
 801028a:	f8d8 3000 	ldr.w	r3, [r8]
 801028e:	461c      	mov	r4, r3
 8010290:	bb44      	cbnz	r4, 80102e4 <_malloc_r+0x88>
 8010292:	4629      	mov	r1, r5
 8010294:	4630      	mov	r0, r6
 8010296:	f7ff ffbf 	bl	8010218 <sbrk_aligned>
 801029a:	1c43      	adds	r3, r0, #1
 801029c:	4604      	mov	r4, r0
 801029e:	d158      	bne.n	8010352 <_malloc_r+0xf6>
 80102a0:	f8d8 4000 	ldr.w	r4, [r8]
 80102a4:	4627      	mov	r7, r4
 80102a6:	2f00      	cmp	r7, #0
 80102a8:	d143      	bne.n	8010332 <_malloc_r+0xd6>
 80102aa:	2c00      	cmp	r4, #0
 80102ac:	d04b      	beq.n	8010346 <_malloc_r+0xea>
 80102ae:	6823      	ldr	r3, [r4, #0]
 80102b0:	4639      	mov	r1, r7
 80102b2:	4630      	mov	r0, r6
 80102b4:	eb04 0903 	add.w	r9, r4, r3
 80102b8:	f000 fdc4 	bl	8010e44 <_sbrk_r>
 80102bc:	4581      	cmp	r9, r0
 80102be:	d142      	bne.n	8010346 <_malloc_r+0xea>
 80102c0:	6821      	ldr	r1, [r4, #0]
 80102c2:	1a6d      	subs	r5, r5, r1
 80102c4:	4629      	mov	r1, r5
 80102c6:	4630      	mov	r0, r6
 80102c8:	f7ff ffa6 	bl	8010218 <sbrk_aligned>
 80102cc:	3001      	adds	r0, #1
 80102ce:	d03a      	beq.n	8010346 <_malloc_r+0xea>
 80102d0:	6823      	ldr	r3, [r4, #0]
 80102d2:	442b      	add	r3, r5
 80102d4:	6023      	str	r3, [r4, #0]
 80102d6:	f8d8 3000 	ldr.w	r3, [r8]
 80102da:	685a      	ldr	r2, [r3, #4]
 80102dc:	bb62      	cbnz	r2, 8010338 <_malloc_r+0xdc>
 80102de:	f8c8 7000 	str.w	r7, [r8]
 80102e2:	e00f      	b.n	8010304 <_malloc_r+0xa8>
 80102e4:	6822      	ldr	r2, [r4, #0]
 80102e6:	1b52      	subs	r2, r2, r5
 80102e8:	d420      	bmi.n	801032c <_malloc_r+0xd0>
 80102ea:	2a0b      	cmp	r2, #11
 80102ec:	d917      	bls.n	801031e <_malloc_r+0xc2>
 80102ee:	1961      	adds	r1, r4, r5
 80102f0:	42a3      	cmp	r3, r4
 80102f2:	6025      	str	r5, [r4, #0]
 80102f4:	bf18      	it	ne
 80102f6:	6059      	strne	r1, [r3, #4]
 80102f8:	6863      	ldr	r3, [r4, #4]
 80102fa:	bf08      	it	eq
 80102fc:	f8c8 1000 	streq.w	r1, [r8]
 8010300:	5162      	str	r2, [r4, r5]
 8010302:	604b      	str	r3, [r1, #4]
 8010304:	4630      	mov	r0, r6
 8010306:	f000 f82f 	bl	8010368 <__malloc_unlock>
 801030a:	f104 000b 	add.w	r0, r4, #11
 801030e:	1d23      	adds	r3, r4, #4
 8010310:	f020 0007 	bic.w	r0, r0, #7
 8010314:	1ac2      	subs	r2, r0, r3
 8010316:	bf1c      	itt	ne
 8010318:	1a1b      	subne	r3, r3, r0
 801031a:	50a3      	strne	r3, [r4, r2]
 801031c:	e7af      	b.n	801027e <_malloc_r+0x22>
 801031e:	6862      	ldr	r2, [r4, #4]
 8010320:	42a3      	cmp	r3, r4
 8010322:	bf0c      	ite	eq
 8010324:	f8c8 2000 	streq.w	r2, [r8]
 8010328:	605a      	strne	r2, [r3, #4]
 801032a:	e7eb      	b.n	8010304 <_malloc_r+0xa8>
 801032c:	4623      	mov	r3, r4
 801032e:	6864      	ldr	r4, [r4, #4]
 8010330:	e7ae      	b.n	8010290 <_malloc_r+0x34>
 8010332:	463c      	mov	r4, r7
 8010334:	687f      	ldr	r7, [r7, #4]
 8010336:	e7b6      	b.n	80102a6 <_malloc_r+0x4a>
 8010338:	461a      	mov	r2, r3
 801033a:	685b      	ldr	r3, [r3, #4]
 801033c:	42a3      	cmp	r3, r4
 801033e:	d1fb      	bne.n	8010338 <_malloc_r+0xdc>
 8010340:	2300      	movs	r3, #0
 8010342:	6053      	str	r3, [r2, #4]
 8010344:	e7de      	b.n	8010304 <_malloc_r+0xa8>
 8010346:	230c      	movs	r3, #12
 8010348:	6033      	str	r3, [r6, #0]
 801034a:	4630      	mov	r0, r6
 801034c:	f000 f80c 	bl	8010368 <__malloc_unlock>
 8010350:	e794      	b.n	801027c <_malloc_r+0x20>
 8010352:	6005      	str	r5, [r0, #0]
 8010354:	e7d6      	b.n	8010304 <_malloc_r+0xa8>
 8010356:	bf00      	nop
 8010358:	24042e24 	.word	0x24042e24

0801035c <__malloc_lock>:
 801035c:	4801      	ldr	r0, [pc, #4]	@ (8010364 <__malloc_lock+0x8>)
 801035e:	f7ff beda 	b.w	8010116 <__retarget_lock_acquire_recursive>
 8010362:	bf00      	nop
 8010364:	24042e1c 	.word	0x24042e1c

08010368 <__malloc_unlock>:
 8010368:	4801      	ldr	r0, [pc, #4]	@ (8010370 <__malloc_unlock+0x8>)
 801036a:	f7ff bed5 	b.w	8010118 <__retarget_lock_release_recursive>
 801036e:	bf00      	nop
 8010370:	24042e1c 	.word	0x24042e1c

08010374 <__ssputs_r>:
 8010374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010378:	688e      	ldr	r6, [r1, #8]
 801037a:	461f      	mov	r7, r3
 801037c:	42be      	cmp	r6, r7
 801037e:	680b      	ldr	r3, [r1, #0]
 8010380:	4682      	mov	sl, r0
 8010382:	460c      	mov	r4, r1
 8010384:	4690      	mov	r8, r2
 8010386:	d82d      	bhi.n	80103e4 <__ssputs_r+0x70>
 8010388:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801038c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010390:	d026      	beq.n	80103e0 <__ssputs_r+0x6c>
 8010392:	6965      	ldr	r5, [r4, #20]
 8010394:	6909      	ldr	r1, [r1, #16]
 8010396:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801039a:	eba3 0901 	sub.w	r9, r3, r1
 801039e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80103a2:	1c7b      	adds	r3, r7, #1
 80103a4:	444b      	add	r3, r9
 80103a6:	106d      	asrs	r5, r5, #1
 80103a8:	429d      	cmp	r5, r3
 80103aa:	bf38      	it	cc
 80103ac:	461d      	movcc	r5, r3
 80103ae:	0553      	lsls	r3, r2, #21
 80103b0:	d527      	bpl.n	8010402 <__ssputs_r+0x8e>
 80103b2:	4629      	mov	r1, r5
 80103b4:	f7ff ff52 	bl	801025c <_malloc_r>
 80103b8:	4606      	mov	r6, r0
 80103ba:	b360      	cbz	r0, 8010416 <__ssputs_r+0xa2>
 80103bc:	6921      	ldr	r1, [r4, #16]
 80103be:	464a      	mov	r2, r9
 80103c0:	f7ff feab 	bl	801011a <memcpy>
 80103c4:	89a3      	ldrh	r3, [r4, #12]
 80103c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80103ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80103ce:	81a3      	strh	r3, [r4, #12]
 80103d0:	6126      	str	r6, [r4, #16]
 80103d2:	6165      	str	r5, [r4, #20]
 80103d4:	444e      	add	r6, r9
 80103d6:	eba5 0509 	sub.w	r5, r5, r9
 80103da:	6026      	str	r6, [r4, #0]
 80103dc:	60a5      	str	r5, [r4, #8]
 80103de:	463e      	mov	r6, r7
 80103e0:	42be      	cmp	r6, r7
 80103e2:	d900      	bls.n	80103e6 <__ssputs_r+0x72>
 80103e4:	463e      	mov	r6, r7
 80103e6:	6820      	ldr	r0, [r4, #0]
 80103e8:	4632      	mov	r2, r6
 80103ea:	4641      	mov	r1, r8
 80103ec:	f7ff fdbe 	bl	800ff6c <memmove>
 80103f0:	68a3      	ldr	r3, [r4, #8]
 80103f2:	1b9b      	subs	r3, r3, r6
 80103f4:	60a3      	str	r3, [r4, #8]
 80103f6:	6823      	ldr	r3, [r4, #0]
 80103f8:	4433      	add	r3, r6
 80103fa:	6023      	str	r3, [r4, #0]
 80103fc:	2000      	movs	r0, #0
 80103fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010402:	462a      	mov	r2, r5
 8010404:	f000 fd35 	bl	8010e72 <_realloc_r>
 8010408:	4606      	mov	r6, r0
 801040a:	2800      	cmp	r0, #0
 801040c:	d1e0      	bne.n	80103d0 <__ssputs_r+0x5c>
 801040e:	6921      	ldr	r1, [r4, #16]
 8010410:	4650      	mov	r0, sl
 8010412:	f7ff feaf 	bl	8010174 <_free_r>
 8010416:	230c      	movs	r3, #12
 8010418:	f8ca 3000 	str.w	r3, [sl]
 801041c:	89a3      	ldrh	r3, [r4, #12]
 801041e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010422:	81a3      	strh	r3, [r4, #12]
 8010424:	f04f 30ff 	mov.w	r0, #4294967295
 8010428:	e7e9      	b.n	80103fe <__ssputs_r+0x8a>
	...

0801042c <_svfiprintf_r>:
 801042c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010430:	4698      	mov	r8, r3
 8010432:	898b      	ldrh	r3, [r1, #12]
 8010434:	061b      	lsls	r3, r3, #24
 8010436:	b09d      	sub	sp, #116	@ 0x74
 8010438:	4607      	mov	r7, r0
 801043a:	460d      	mov	r5, r1
 801043c:	4614      	mov	r4, r2
 801043e:	d510      	bpl.n	8010462 <_svfiprintf_r+0x36>
 8010440:	690b      	ldr	r3, [r1, #16]
 8010442:	b973      	cbnz	r3, 8010462 <_svfiprintf_r+0x36>
 8010444:	2140      	movs	r1, #64	@ 0x40
 8010446:	f7ff ff09 	bl	801025c <_malloc_r>
 801044a:	6028      	str	r0, [r5, #0]
 801044c:	6128      	str	r0, [r5, #16]
 801044e:	b930      	cbnz	r0, 801045e <_svfiprintf_r+0x32>
 8010450:	230c      	movs	r3, #12
 8010452:	603b      	str	r3, [r7, #0]
 8010454:	f04f 30ff 	mov.w	r0, #4294967295
 8010458:	b01d      	add	sp, #116	@ 0x74
 801045a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801045e:	2340      	movs	r3, #64	@ 0x40
 8010460:	616b      	str	r3, [r5, #20]
 8010462:	2300      	movs	r3, #0
 8010464:	9309      	str	r3, [sp, #36]	@ 0x24
 8010466:	2320      	movs	r3, #32
 8010468:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801046c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010470:	2330      	movs	r3, #48	@ 0x30
 8010472:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010610 <_svfiprintf_r+0x1e4>
 8010476:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801047a:	f04f 0901 	mov.w	r9, #1
 801047e:	4623      	mov	r3, r4
 8010480:	469a      	mov	sl, r3
 8010482:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010486:	b10a      	cbz	r2, 801048c <_svfiprintf_r+0x60>
 8010488:	2a25      	cmp	r2, #37	@ 0x25
 801048a:	d1f9      	bne.n	8010480 <_svfiprintf_r+0x54>
 801048c:	ebba 0b04 	subs.w	fp, sl, r4
 8010490:	d00b      	beq.n	80104aa <_svfiprintf_r+0x7e>
 8010492:	465b      	mov	r3, fp
 8010494:	4622      	mov	r2, r4
 8010496:	4629      	mov	r1, r5
 8010498:	4638      	mov	r0, r7
 801049a:	f7ff ff6b 	bl	8010374 <__ssputs_r>
 801049e:	3001      	adds	r0, #1
 80104a0:	f000 80a7 	beq.w	80105f2 <_svfiprintf_r+0x1c6>
 80104a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80104a6:	445a      	add	r2, fp
 80104a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80104aa:	f89a 3000 	ldrb.w	r3, [sl]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	f000 809f 	beq.w	80105f2 <_svfiprintf_r+0x1c6>
 80104b4:	2300      	movs	r3, #0
 80104b6:	f04f 32ff 	mov.w	r2, #4294967295
 80104ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80104be:	f10a 0a01 	add.w	sl, sl, #1
 80104c2:	9304      	str	r3, [sp, #16]
 80104c4:	9307      	str	r3, [sp, #28]
 80104c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80104ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80104cc:	4654      	mov	r4, sl
 80104ce:	2205      	movs	r2, #5
 80104d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104d4:	484e      	ldr	r0, [pc, #312]	@ (8010610 <_svfiprintf_r+0x1e4>)
 80104d6:	f7ef ff1b 	bl	8000310 <memchr>
 80104da:	9a04      	ldr	r2, [sp, #16]
 80104dc:	b9d8      	cbnz	r0, 8010516 <_svfiprintf_r+0xea>
 80104de:	06d0      	lsls	r0, r2, #27
 80104e0:	bf44      	itt	mi
 80104e2:	2320      	movmi	r3, #32
 80104e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80104e8:	0711      	lsls	r1, r2, #28
 80104ea:	bf44      	itt	mi
 80104ec:	232b      	movmi	r3, #43	@ 0x2b
 80104ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80104f2:	f89a 3000 	ldrb.w	r3, [sl]
 80104f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80104f8:	d015      	beq.n	8010526 <_svfiprintf_r+0xfa>
 80104fa:	9a07      	ldr	r2, [sp, #28]
 80104fc:	4654      	mov	r4, sl
 80104fe:	2000      	movs	r0, #0
 8010500:	f04f 0c0a 	mov.w	ip, #10
 8010504:	4621      	mov	r1, r4
 8010506:	f811 3b01 	ldrb.w	r3, [r1], #1
 801050a:	3b30      	subs	r3, #48	@ 0x30
 801050c:	2b09      	cmp	r3, #9
 801050e:	d94b      	bls.n	80105a8 <_svfiprintf_r+0x17c>
 8010510:	b1b0      	cbz	r0, 8010540 <_svfiprintf_r+0x114>
 8010512:	9207      	str	r2, [sp, #28]
 8010514:	e014      	b.n	8010540 <_svfiprintf_r+0x114>
 8010516:	eba0 0308 	sub.w	r3, r0, r8
 801051a:	fa09 f303 	lsl.w	r3, r9, r3
 801051e:	4313      	orrs	r3, r2
 8010520:	9304      	str	r3, [sp, #16]
 8010522:	46a2      	mov	sl, r4
 8010524:	e7d2      	b.n	80104cc <_svfiprintf_r+0xa0>
 8010526:	9b03      	ldr	r3, [sp, #12]
 8010528:	1d19      	adds	r1, r3, #4
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	9103      	str	r1, [sp, #12]
 801052e:	2b00      	cmp	r3, #0
 8010530:	bfbb      	ittet	lt
 8010532:	425b      	neglt	r3, r3
 8010534:	f042 0202 	orrlt.w	r2, r2, #2
 8010538:	9307      	strge	r3, [sp, #28]
 801053a:	9307      	strlt	r3, [sp, #28]
 801053c:	bfb8      	it	lt
 801053e:	9204      	strlt	r2, [sp, #16]
 8010540:	7823      	ldrb	r3, [r4, #0]
 8010542:	2b2e      	cmp	r3, #46	@ 0x2e
 8010544:	d10a      	bne.n	801055c <_svfiprintf_r+0x130>
 8010546:	7863      	ldrb	r3, [r4, #1]
 8010548:	2b2a      	cmp	r3, #42	@ 0x2a
 801054a:	d132      	bne.n	80105b2 <_svfiprintf_r+0x186>
 801054c:	9b03      	ldr	r3, [sp, #12]
 801054e:	1d1a      	adds	r2, r3, #4
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	9203      	str	r2, [sp, #12]
 8010554:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010558:	3402      	adds	r4, #2
 801055a:	9305      	str	r3, [sp, #20]
 801055c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010620 <_svfiprintf_r+0x1f4>
 8010560:	7821      	ldrb	r1, [r4, #0]
 8010562:	2203      	movs	r2, #3
 8010564:	4650      	mov	r0, sl
 8010566:	f7ef fed3 	bl	8000310 <memchr>
 801056a:	b138      	cbz	r0, 801057c <_svfiprintf_r+0x150>
 801056c:	9b04      	ldr	r3, [sp, #16]
 801056e:	eba0 000a 	sub.w	r0, r0, sl
 8010572:	2240      	movs	r2, #64	@ 0x40
 8010574:	4082      	lsls	r2, r0
 8010576:	4313      	orrs	r3, r2
 8010578:	3401      	adds	r4, #1
 801057a:	9304      	str	r3, [sp, #16]
 801057c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010580:	4824      	ldr	r0, [pc, #144]	@ (8010614 <_svfiprintf_r+0x1e8>)
 8010582:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010586:	2206      	movs	r2, #6
 8010588:	f7ef fec2 	bl	8000310 <memchr>
 801058c:	2800      	cmp	r0, #0
 801058e:	d036      	beq.n	80105fe <_svfiprintf_r+0x1d2>
 8010590:	4b21      	ldr	r3, [pc, #132]	@ (8010618 <_svfiprintf_r+0x1ec>)
 8010592:	bb1b      	cbnz	r3, 80105dc <_svfiprintf_r+0x1b0>
 8010594:	9b03      	ldr	r3, [sp, #12]
 8010596:	3307      	adds	r3, #7
 8010598:	f023 0307 	bic.w	r3, r3, #7
 801059c:	3308      	adds	r3, #8
 801059e:	9303      	str	r3, [sp, #12]
 80105a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105a2:	4433      	add	r3, r6
 80105a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80105a6:	e76a      	b.n	801047e <_svfiprintf_r+0x52>
 80105a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80105ac:	460c      	mov	r4, r1
 80105ae:	2001      	movs	r0, #1
 80105b0:	e7a8      	b.n	8010504 <_svfiprintf_r+0xd8>
 80105b2:	2300      	movs	r3, #0
 80105b4:	3401      	adds	r4, #1
 80105b6:	9305      	str	r3, [sp, #20]
 80105b8:	4619      	mov	r1, r3
 80105ba:	f04f 0c0a 	mov.w	ip, #10
 80105be:	4620      	mov	r0, r4
 80105c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80105c4:	3a30      	subs	r2, #48	@ 0x30
 80105c6:	2a09      	cmp	r2, #9
 80105c8:	d903      	bls.n	80105d2 <_svfiprintf_r+0x1a6>
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d0c6      	beq.n	801055c <_svfiprintf_r+0x130>
 80105ce:	9105      	str	r1, [sp, #20]
 80105d0:	e7c4      	b.n	801055c <_svfiprintf_r+0x130>
 80105d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80105d6:	4604      	mov	r4, r0
 80105d8:	2301      	movs	r3, #1
 80105da:	e7f0      	b.n	80105be <_svfiprintf_r+0x192>
 80105dc:	ab03      	add	r3, sp, #12
 80105de:	9300      	str	r3, [sp, #0]
 80105e0:	462a      	mov	r2, r5
 80105e2:	4b0e      	ldr	r3, [pc, #56]	@ (801061c <_svfiprintf_r+0x1f0>)
 80105e4:	a904      	add	r1, sp, #16
 80105e6:	4638      	mov	r0, r7
 80105e8:	f3af 8000 	nop.w
 80105ec:	1c42      	adds	r2, r0, #1
 80105ee:	4606      	mov	r6, r0
 80105f0:	d1d6      	bne.n	80105a0 <_svfiprintf_r+0x174>
 80105f2:	89ab      	ldrh	r3, [r5, #12]
 80105f4:	065b      	lsls	r3, r3, #25
 80105f6:	f53f af2d 	bmi.w	8010454 <_svfiprintf_r+0x28>
 80105fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80105fc:	e72c      	b.n	8010458 <_svfiprintf_r+0x2c>
 80105fe:	ab03      	add	r3, sp, #12
 8010600:	9300      	str	r3, [sp, #0]
 8010602:	462a      	mov	r2, r5
 8010604:	4b05      	ldr	r3, [pc, #20]	@ (801061c <_svfiprintf_r+0x1f0>)
 8010606:	a904      	add	r1, sp, #16
 8010608:	4638      	mov	r0, r7
 801060a:	f000 f9bb 	bl	8010984 <_printf_i>
 801060e:	e7ed      	b.n	80105ec <_svfiprintf_r+0x1c0>
 8010610:	08012483 	.word	0x08012483
 8010614:	0801248d 	.word	0x0801248d
 8010618:	00000000 	.word	0x00000000
 801061c:	08010375 	.word	0x08010375
 8010620:	08012489 	.word	0x08012489

08010624 <__sfputc_r>:
 8010624:	6893      	ldr	r3, [r2, #8]
 8010626:	3b01      	subs	r3, #1
 8010628:	2b00      	cmp	r3, #0
 801062a:	b410      	push	{r4}
 801062c:	6093      	str	r3, [r2, #8]
 801062e:	da08      	bge.n	8010642 <__sfputc_r+0x1e>
 8010630:	6994      	ldr	r4, [r2, #24]
 8010632:	42a3      	cmp	r3, r4
 8010634:	db01      	blt.n	801063a <__sfputc_r+0x16>
 8010636:	290a      	cmp	r1, #10
 8010638:	d103      	bne.n	8010642 <__sfputc_r+0x1e>
 801063a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801063e:	f7ff bc01 	b.w	800fe44 <__swbuf_r>
 8010642:	6813      	ldr	r3, [r2, #0]
 8010644:	1c58      	adds	r0, r3, #1
 8010646:	6010      	str	r0, [r2, #0]
 8010648:	7019      	strb	r1, [r3, #0]
 801064a:	4608      	mov	r0, r1
 801064c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010650:	4770      	bx	lr

08010652 <__sfputs_r>:
 8010652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010654:	4606      	mov	r6, r0
 8010656:	460f      	mov	r7, r1
 8010658:	4614      	mov	r4, r2
 801065a:	18d5      	adds	r5, r2, r3
 801065c:	42ac      	cmp	r4, r5
 801065e:	d101      	bne.n	8010664 <__sfputs_r+0x12>
 8010660:	2000      	movs	r0, #0
 8010662:	e007      	b.n	8010674 <__sfputs_r+0x22>
 8010664:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010668:	463a      	mov	r2, r7
 801066a:	4630      	mov	r0, r6
 801066c:	f7ff ffda 	bl	8010624 <__sfputc_r>
 8010670:	1c43      	adds	r3, r0, #1
 8010672:	d1f3      	bne.n	801065c <__sfputs_r+0xa>
 8010674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010678 <_vfiprintf_r>:
 8010678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801067c:	460d      	mov	r5, r1
 801067e:	b09d      	sub	sp, #116	@ 0x74
 8010680:	4614      	mov	r4, r2
 8010682:	4698      	mov	r8, r3
 8010684:	4606      	mov	r6, r0
 8010686:	b118      	cbz	r0, 8010690 <_vfiprintf_r+0x18>
 8010688:	6a03      	ldr	r3, [r0, #32]
 801068a:	b90b      	cbnz	r3, 8010690 <_vfiprintf_r+0x18>
 801068c:	f7ff fa8e 	bl	800fbac <__sinit>
 8010690:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010692:	07d9      	lsls	r1, r3, #31
 8010694:	d405      	bmi.n	80106a2 <_vfiprintf_r+0x2a>
 8010696:	89ab      	ldrh	r3, [r5, #12]
 8010698:	059a      	lsls	r2, r3, #22
 801069a:	d402      	bmi.n	80106a2 <_vfiprintf_r+0x2a>
 801069c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801069e:	f7ff fd3a 	bl	8010116 <__retarget_lock_acquire_recursive>
 80106a2:	89ab      	ldrh	r3, [r5, #12]
 80106a4:	071b      	lsls	r3, r3, #28
 80106a6:	d501      	bpl.n	80106ac <_vfiprintf_r+0x34>
 80106a8:	692b      	ldr	r3, [r5, #16]
 80106aa:	b99b      	cbnz	r3, 80106d4 <_vfiprintf_r+0x5c>
 80106ac:	4629      	mov	r1, r5
 80106ae:	4630      	mov	r0, r6
 80106b0:	f7ff fc06 	bl	800fec0 <__swsetup_r>
 80106b4:	b170      	cbz	r0, 80106d4 <_vfiprintf_r+0x5c>
 80106b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80106b8:	07dc      	lsls	r4, r3, #31
 80106ba:	d504      	bpl.n	80106c6 <_vfiprintf_r+0x4e>
 80106bc:	f04f 30ff 	mov.w	r0, #4294967295
 80106c0:	b01d      	add	sp, #116	@ 0x74
 80106c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106c6:	89ab      	ldrh	r3, [r5, #12]
 80106c8:	0598      	lsls	r0, r3, #22
 80106ca:	d4f7      	bmi.n	80106bc <_vfiprintf_r+0x44>
 80106cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80106ce:	f7ff fd23 	bl	8010118 <__retarget_lock_release_recursive>
 80106d2:	e7f3      	b.n	80106bc <_vfiprintf_r+0x44>
 80106d4:	2300      	movs	r3, #0
 80106d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80106d8:	2320      	movs	r3, #32
 80106da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80106de:	f8cd 800c 	str.w	r8, [sp, #12]
 80106e2:	2330      	movs	r3, #48	@ 0x30
 80106e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010894 <_vfiprintf_r+0x21c>
 80106e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80106ec:	f04f 0901 	mov.w	r9, #1
 80106f0:	4623      	mov	r3, r4
 80106f2:	469a      	mov	sl, r3
 80106f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80106f8:	b10a      	cbz	r2, 80106fe <_vfiprintf_r+0x86>
 80106fa:	2a25      	cmp	r2, #37	@ 0x25
 80106fc:	d1f9      	bne.n	80106f2 <_vfiprintf_r+0x7a>
 80106fe:	ebba 0b04 	subs.w	fp, sl, r4
 8010702:	d00b      	beq.n	801071c <_vfiprintf_r+0xa4>
 8010704:	465b      	mov	r3, fp
 8010706:	4622      	mov	r2, r4
 8010708:	4629      	mov	r1, r5
 801070a:	4630      	mov	r0, r6
 801070c:	f7ff ffa1 	bl	8010652 <__sfputs_r>
 8010710:	3001      	adds	r0, #1
 8010712:	f000 80a7 	beq.w	8010864 <_vfiprintf_r+0x1ec>
 8010716:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010718:	445a      	add	r2, fp
 801071a:	9209      	str	r2, [sp, #36]	@ 0x24
 801071c:	f89a 3000 	ldrb.w	r3, [sl]
 8010720:	2b00      	cmp	r3, #0
 8010722:	f000 809f 	beq.w	8010864 <_vfiprintf_r+0x1ec>
 8010726:	2300      	movs	r3, #0
 8010728:	f04f 32ff 	mov.w	r2, #4294967295
 801072c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010730:	f10a 0a01 	add.w	sl, sl, #1
 8010734:	9304      	str	r3, [sp, #16]
 8010736:	9307      	str	r3, [sp, #28]
 8010738:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801073c:	931a      	str	r3, [sp, #104]	@ 0x68
 801073e:	4654      	mov	r4, sl
 8010740:	2205      	movs	r2, #5
 8010742:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010746:	4853      	ldr	r0, [pc, #332]	@ (8010894 <_vfiprintf_r+0x21c>)
 8010748:	f7ef fde2 	bl	8000310 <memchr>
 801074c:	9a04      	ldr	r2, [sp, #16]
 801074e:	b9d8      	cbnz	r0, 8010788 <_vfiprintf_r+0x110>
 8010750:	06d1      	lsls	r1, r2, #27
 8010752:	bf44      	itt	mi
 8010754:	2320      	movmi	r3, #32
 8010756:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801075a:	0713      	lsls	r3, r2, #28
 801075c:	bf44      	itt	mi
 801075e:	232b      	movmi	r3, #43	@ 0x2b
 8010760:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010764:	f89a 3000 	ldrb.w	r3, [sl]
 8010768:	2b2a      	cmp	r3, #42	@ 0x2a
 801076a:	d015      	beq.n	8010798 <_vfiprintf_r+0x120>
 801076c:	9a07      	ldr	r2, [sp, #28]
 801076e:	4654      	mov	r4, sl
 8010770:	2000      	movs	r0, #0
 8010772:	f04f 0c0a 	mov.w	ip, #10
 8010776:	4621      	mov	r1, r4
 8010778:	f811 3b01 	ldrb.w	r3, [r1], #1
 801077c:	3b30      	subs	r3, #48	@ 0x30
 801077e:	2b09      	cmp	r3, #9
 8010780:	d94b      	bls.n	801081a <_vfiprintf_r+0x1a2>
 8010782:	b1b0      	cbz	r0, 80107b2 <_vfiprintf_r+0x13a>
 8010784:	9207      	str	r2, [sp, #28]
 8010786:	e014      	b.n	80107b2 <_vfiprintf_r+0x13a>
 8010788:	eba0 0308 	sub.w	r3, r0, r8
 801078c:	fa09 f303 	lsl.w	r3, r9, r3
 8010790:	4313      	orrs	r3, r2
 8010792:	9304      	str	r3, [sp, #16]
 8010794:	46a2      	mov	sl, r4
 8010796:	e7d2      	b.n	801073e <_vfiprintf_r+0xc6>
 8010798:	9b03      	ldr	r3, [sp, #12]
 801079a:	1d19      	adds	r1, r3, #4
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	9103      	str	r1, [sp, #12]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	bfbb      	ittet	lt
 80107a4:	425b      	neglt	r3, r3
 80107a6:	f042 0202 	orrlt.w	r2, r2, #2
 80107aa:	9307      	strge	r3, [sp, #28]
 80107ac:	9307      	strlt	r3, [sp, #28]
 80107ae:	bfb8      	it	lt
 80107b0:	9204      	strlt	r2, [sp, #16]
 80107b2:	7823      	ldrb	r3, [r4, #0]
 80107b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80107b6:	d10a      	bne.n	80107ce <_vfiprintf_r+0x156>
 80107b8:	7863      	ldrb	r3, [r4, #1]
 80107ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80107bc:	d132      	bne.n	8010824 <_vfiprintf_r+0x1ac>
 80107be:	9b03      	ldr	r3, [sp, #12]
 80107c0:	1d1a      	adds	r2, r3, #4
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	9203      	str	r2, [sp, #12]
 80107c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80107ca:	3402      	adds	r4, #2
 80107cc:	9305      	str	r3, [sp, #20]
 80107ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80108a4 <_vfiprintf_r+0x22c>
 80107d2:	7821      	ldrb	r1, [r4, #0]
 80107d4:	2203      	movs	r2, #3
 80107d6:	4650      	mov	r0, sl
 80107d8:	f7ef fd9a 	bl	8000310 <memchr>
 80107dc:	b138      	cbz	r0, 80107ee <_vfiprintf_r+0x176>
 80107de:	9b04      	ldr	r3, [sp, #16]
 80107e0:	eba0 000a 	sub.w	r0, r0, sl
 80107e4:	2240      	movs	r2, #64	@ 0x40
 80107e6:	4082      	lsls	r2, r0
 80107e8:	4313      	orrs	r3, r2
 80107ea:	3401      	adds	r4, #1
 80107ec:	9304      	str	r3, [sp, #16]
 80107ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107f2:	4829      	ldr	r0, [pc, #164]	@ (8010898 <_vfiprintf_r+0x220>)
 80107f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80107f8:	2206      	movs	r2, #6
 80107fa:	f7ef fd89 	bl	8000310 <memchr>
 80107fe:	2800      	cmp	r0, #0
 8010800:	d03f      	beq.n	8010882 <_vfiprintf_r+0x20a>
 8010802:	4b26      	ldr	r3, [pc, #152]	@ (801089c <_vfiprintf_r+0x224>)
 8010804:	bb1b      	cbnz	r3, 801084e <_vfiprintf_r+0x1d6>
 8010806:	9b03      	ldr	r3, [sp, #12]
 8010808:	3307      	adds	r3, #7
 801080a:	f023 0307 	bic.w	r3, r3, #7
 801080e:	3308      	adds	r3, #8
 8010810:	9303      	str	r3, [sp, #12]
 8010812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010814:	443b      	add	r3, r7
 8010816:	9309      	str	r3, [sp, #36]	@ 0x24
 8010818:	e76a      	b.n	80106f0 <_vfiprintf_r+0x78>
 801081a:	fb0c 3202 	mla	r2, ip, r2, r3
 801081e:	460c      	mov	r4, r1
 8010820:	2001      	movs	r0, #1
 8010822:	e7a8      	b.n	8010776 <_vfiprintf_r+0xfe>
 8010824:	2300      	movs	r3, #0
 8010826:	3401      	adds	r4, #1
 8010828:	9305      	str	r3, [sp, #20]
 801082a:	4619      	mov	r1, r3
 801082c:	f04f 0c0a 	mov.w	ip, #10
 8010830:	4620      	mov	r0, r4
 8010832:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010836:	3a30      	subs	r2, #48	@ 0x30
 8010838:	2a09      	cmp	r2, #9
 801083a:	d903      	bls.n	8010844 <_vfiprintf_r+0x1cc>
 801083c:	2b00      	cmp	r3, #0
 801083e:	d0c6      	beq.n	80107ce <_vfiprintf_r+0x156>
 8010840:	9105      	str	r1, [sp, #20]
 8010842:	e7c4      	b.n	80107ce <_vfiprintf_r+0x156>
 8010844:	fb0c 2101 	mla	r1, ip, r1, r2
 8010848:	4604      	mov	r4, r0
 801084a:	2301      	movs	r3, #1
 801084c:	e7f0      	b.n	8010830 <_vfiprintf_r+0x1b8>
 801084e:	ab03      	add	r3, sp, #12
 8010850:	9300      	str	r3, [sp, #0]
 8010852:	462a      	mov	r2, r5
 8010854:	4b12      	ldr	r3, [pc, #72]	@ (80108a0 <_vfiprintf_r+0x228>)
 8010856:	a904      	add	r1, sp, #16
 8010858:	4630      	mov	r0, r6
 801085a:	f3af 8000 	nop.w
 801085e:	4607      	mov	r7, r0
 8010860:	1c78      	adds	r0, r7, #1
 8010862:	d1d6      	bne.n	8010812 <_vfiprintf_r+0x19a>
 8010864:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010866:	07d9      	lsls	r1, r3, #31
 8010868:	d405      	bmi.n	8010876 <_vfiprintf_r+0x1fe>
 801086a:	89ab      	ldrh	r3, [r5, #12]
 801086c:	059a      	lsls	r2, r3, #22
 801086e:	d402      	bmi.n	8010876 <_vfiprintf_r+0x1fe>
 8010870:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010872:	f7ff fc51 	bl	8010118 <__retarget_lock_release_recursive>
 8010876:	89ab      	ldrh	r3, [r5, #12]
 8010878:	065b      	lsls	r3, r3, #25
 801087a:	f53f af1f 	bmi.w	80106bc <_vfiprintf_r+0x44>
 801087e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010880:	e71e      	b.n	80106c0 <_vfiprintf_r+0x48>
 8010882:	ab03      	add	r3, sp, #12
 8010884:	9300      	str	r3, [sp, #0]
 8010886:	462a      	mov	r2, r5
 8010888:	4b05      	ldr	r3, [pc, #20]	@ (80108a0 <_vfiprintf_r+0x228>)
 801088a:	a904      	add	r1, sp, #16
 801088c:	4630      	mov	r0, r6
 801088e:	f000 f879 	bl	8010984 <_printf_i>
 8010892:	e7e4      	b.n	801085e <_vfiprintf_r+0x1e6>
 8010894:	08012483 	.word	0x08012483
 8010898:	0801248d 	.word	0x0801248d
 801089c:	00000000 	.word	0x00000000
 80108a0:	08010653 	.word	0x08010653
 80108a4:	08012489 	.word	0x08012489

080108a8 <_printf_common>:
 80108a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108ac:	4616      	mov	r6, r2
 80108ae:	4698      	mov	r8, r3
 80108b0:	688a      	ldr	r2, [r1, #8]
 80108b2:	690b      	ldr	r3, [r1, #16]
 80108b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80108b8:	4293      	cmp	r3, r2
 80108ba:	bfb8      	it	lt
 80108bc:	4613      	movlt	r3, r2
 80108be:	6033      	str	r3, [r6, #0]
 80108c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80108c4:	4607      	mov	r7, r0
 80108c6:	460c      	mov	r4, r1
 80108c8:	b10a      	cbz	r2, 80108ce <_printf_common+0x26>
 80108ca:	3301      	adds	r3, #1
 80108cc:	6033      	str	r3, [r6, #0]
 80108ce:	6823      	ldr	r3, [r4, #0]
 80108d0:	0699      	lsls	r1, r3, #26
 80108d2:	bf42      	ittt	mi
 80108d4:	6833      	ldrmi	r3, [r6, #0]
 80108d6:	3302      	addmi	r3, #2
 80108d8:	6033      	strmi	r3, [r6, #0]
 80108da:	6825      	ldr	r5, [r4, #0]
 80108dc:	f015 0506 	ands.w	r5, r5, #6
 80108e0:	d106      	bne.n	80108f0 <_printf_common+0x48>
 80108e2:	f104 0a19 	add.w	sl, r4, #25
 80108e6:	68e3      	ldr	r3, [r4, #12]
 80108e8:	6832      	ldr	r2, [r6, #0]
 80108ea:	1a9b      	subs	r3, r3, r2
 80108ec:	42ab      	cmp	r3, r5
 80108ee:	dc26      	bgt.n	801093e <_printf_common+0x96>
 80108f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80108f4:	6822      	ldr	r2, [r4, #0]
 80108f6:	3b00      	subs	r3, #0
 80108f8:	bf18      	it	ne
 80108fa:	2301      	movne	r3, #1
 80108fc:	0692      	lsls	r2, r2, #26
 80108fe:	d42b      	bmi.n	8010958 <_printf_common+0xb0>
 8010900:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010904:	4641      	mov	r1, r8
 8010906:	4638      	mov	r0, r7
 8010908:	47c8      	blx	r9
 801090a:	3001      	adds	r0, #1
 801090c:	d01e      	beq.n	801094c <_printf_common+0xa4>
 801090e:	6823      	ldr	r3, [r4, #0]
 8010910:	6922      	ldr	r2, [r4, #16]
 8010912:	f003 0306 	and.w	r3, r3, #6
 8010916:	2b04      	cmp	r3, #4
 8010918:	bf02      	ittt	eq
 801091a:	68e5      	ldreq	r5, [r4, #12]
 801091c:	6833      	ldreq	r3, [r6, #0]
 801091e:	1aed      	subeq	r5, r5, r3
 8010920:	68a3      	ldr	r3, [r4, #8]
 8010922:	bf0c      	ite	eq
 8010924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010928:	2500      	movne	r5, #0
 801092a:	4293      	cmp	r3, r2
 801092c:	bfc4      	itt	gt
 801092e:	1a9b      	subgt	r3, r3, r2
 8010930:	18ed      	addgt	r5, r5, r3
 8010932:	2600      	movs	r6, #0
 8010934:	341a      	adds	r4, #26
 8010936:	42b5      	cmp	r5, r6
 8010938:	d11a      	bne.n	8010970 <_printf_common+0xc8>
 801093a:	2000      	movs	r0, #0
 801093c:	e008      	b.n	8010950 <_printf_common+0xa8>
 801093e:	2301      	movs	r3, #1
 8010940:	4652      	mov	r2, sl
 8010942:	4641      	mov	r1, r8
 8010944:	4638      	mov	r0, r7
 8010946:	47c8      	blx	r9
 8010948:	3001      	adds	r0, #1
 801094a:	d103      	bne.n	8010954 <_printf_common+0xac>
 801094c:	f04f 30ff 	mov.w	r0, #4294967295
 8010950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010954:	3501      	adds	r5, #1
 8010956:	e7c6      	b.n	80108e6 <_printf_common+0x3e>
 8010958:	18e1      	adds	r1, r4, r3
 801095a:	1c5a      	adds	r2, r3, #1
 801095c:	2030      	movs	r0, #48	@ 0x30
 801095e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010962:	4422      	add	r2, r4
 8010964:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010968:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801096c:	3302      	adds	r3, #2
 801096e:	e7c7      	b.n	8010900 <_printf_common+0x58>
 8010970:	2301      	movs	r3, #1
 8010972:	4622      	mov	r2, r4
 8010974:	4641      	mov	r1, r8
 8010976:	4638      	mov	r0, r7
 8010978:	47c8      	blx	r9
 801097a:	3001      	adds	r0, #1
 801097c:	d0e6      	beq.n	801094c <_printf_common+0xa4>
 801097e:	3601      	adds	r6, #1
 8010980:	e7d9      	b.n	8010936 <_printf_common+0x8e>
	...

08010984 <_printf_i>:
 8010984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010988:	7e0f      	ldrb	r7, [r1, #24]
 801098a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801098c:	2f78      	cmp	r7, #120	@ 0x78
 801098e:	4691      	mov	r9, r2
 8010990:	4680      	mov	r8, r0
 8010992:	460c      	mov	r4, r1
 8010994:	469a      	mov	sl, r3
 8010996:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801099a:	d807      	bhi.n	80109ac <_printf_i+0x28>
 801099c:	2f62      	cmp	r7, #98	@ 0x62
 801099e:	d80a      	bhi.n	80109b6 <_printf_i+0x32>
 80109a0:	2f00      	cmp	r7, #0
 80109a2:	f000 80d1 	beq.w	8010b48 <_printf_i+0x1c4>
 80109a6:	2f58      	cmp	r7, #88	@ 0x58
 80109a8:	f000 80b8 	beq.w	8010b1c <_printf_i+0x198>
 80109ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80109b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80109b4:	e03a      	b.n	8010a2c <_printf_i+0xa8>
 80109b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80109ba:	2b15      	cmp	r3, #21
 80109bc:	d8f6      	bhi.n	80109ac <_printf_i+0x28>
 80109be:	a101      	add	r1, pc, #4	@ (adr r1, 80109c4 <_printf_i+0x40>)
 80109c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80109c4:	08010a1d 	.word	0x08010a1d
 80109c8:	08010a31 	.word	0x08010a31
 80109cc:	080109ad 	.word	0x080109ad
 80109d0:	080109ad 	.word	0x080109ad
 80109d4:	080109ad 	.word	0x080109ad
 80109d8:	080109ad 	.word	0x080109ad
 80109dc:	08010a31 	.word	0x08010a31
 80109e0:	080109ad 	.word	0x080109ad
 80109e4:	080109ad 	.word	0x080109ad
 80109e8:	080109ad 	.word	0x080109ad
 80109ec:	080109ad 	.word	0x080109ad
 80109f0:	08010b2f 	.word	0x08010b2f
 80109f4:	08010a5b 	.word	0x08010a5b
 80109f8:	08010ae9 	.word	0x08010ae9
 80109fc:	080109ad 	.word	0x080109ad
 8010a00:	080109ad 	.word	0x080109ad
 8010a04:	08010b51 	.word	0x08010b51
 8010a08:	080109ad 	.word	0x080109ad
 8010a0c:	08010a5b 	.word	0x08010a5b
 8010a10:	080109ad 	.word	0x080109ad
 8010a14:	080109ad 	.word	0x080109ad
 8010a18:	08010af1 	.word	0x08010af1
 8010a1c:	6833      	ldr	r3, [r6, #0]
 8010a1e:	1d1a      	adds	r2, r3, #4
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	6032      	str	r2, [r6, #0]
 8010a24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010a28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010a2c:	2301      	movs	r3, #1
 8010a2e:	e09c      	b.n	8010b6a <_printf_i+0x1e6>
 8010a30:	6833      	ldr	r3, [r6, #0]
 8010a32:	6820      	ldr	r0, [r4, #0]
 8010a34:	1d19      	adds	r1, r3, #4
 8010a36:	6031      	str	r1, [r6, #0]
 8010a38:	0606      	lsls	r6, r0, #24
 8010a3a:	d501      	bpl.n	8010a40 <_printf_i+0xbc>
 8010a3c:	681d      	ldr	r5, [r3, #0]
 8010a3e:	e003      	b.n	8010a48 <_printf_i+0xc4>
 8010a40:	0645      	lsls	r5, r0, #25
 8010a42:	d5fb      	bpl.n	8010a3c <_printf_i+0xb8>
 8010a44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010a48:	2d00      	cmp	r5, #0
 8010a4a:	da03      	bge.n	8010a54 <_printf_i+0xd0>
 8010a4c:	232d      	movs	r3, #45	@ 0x2d
 8010a4e:	426d      	negs	r5, r5
 8010a50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010a54:	4858      	ldr	r0, [pc, #352]	@ (8010bb8 <_printf_i+0x234>)
 8010a56:	230a      	movs	r3, #10
 8010a58:	e011      	b.n	8010a7e <_printf_i+0xfa>
 8010a5a:	6821      	ldr	r1, [r4, #0]
 8010a5c:	6833      	ldr	r3, [r6, #0]
 8010a5e:	0608      	lsls	r0, r1, #24
 8010a60:	f853 5b04 	ldr.w	r5, [r3], #4
 8010a64:	d402      	bmi.n	8010a6c <_printf_i+0xe8>
 8010a66:	0649      	lsls	r1, r1, #25
 8010a68:	bf48      	it	mi
 8010a6a:	b2ad      	uxthmi	r5, r5
 8010a6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8010a6e:	4852      	ldr	r0, [pc, #328]	@ (8010bb8 <_printf_i+0x234>)
 8010a70:	6033      	str	r3, [r6, #0]
 8010a72:	bf14      	ite	ne
 8010a74:	230a      	movne	r3, #10
 8010a76:	2308      	moveq	r3, #8
 8010a78:	2100      	movs	r1, #0
 8010a7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010a7e:	6866      	ldr	r6, [r4, #4]
 8010a80:	60a6      	str	r6, [r4, #8]
 8010a82:	2e00      	cmp	r6, #0
 8010a84:	db05      	blt.n	8010a92 <_printf_i+0x10e>
 8010a86:	6821      	ldr	r1, [r4, #0]
 8010a88:	432e      	orrs	r6, r5
 8010a8a:	f021 0104 	bic.w	r1, r1, #4
 8010a8e:	6021      	str	r1, [r4, #0]
 8010a90:	d04b      	beq.n	8010b2a <_printf_i+0x1a6>
 8010a92:	4616      	mov	r6, r2
 8010a94:	fbb5 f1f3 	udiv	r1, r5, r3
 8010a98:	fb03 5711 	mls	r7, r3, r1, r5
 8010a9c:	5dc7      	ldrb	r7, [r0, r7]
 8010a9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010aa2:	462f      	mov	r7, r5
 8010aa4:	42bb      	cmp	r3, r7
 8010aa6:	460d      	mov	r5, r1
 8010aa8:	d9f4      	bls.n	8010a94 <_printf_i+0x110>
 8010aaa:	2b08      	cmp	r3, #8
 8010aac:	d10b      	bne.n	8010ac6 <_printf_i+0x142>
 8010aae:	6823      	ldr	r3, [r4, #0]
 8010ab0:	07df      	lsls	r7, r3, #31
 8010ab2:	d508      	bpl.n	8010ac6 <_printf_i+0x142>
 8010ab4:	6923      	ldr	r3, [r4, #16]
 8010ab6:	6861      	ldr	r1, [r4, #4]
 8010ab8:	4299      	cmp	r1, r3
 8010aba:	bfde      	ittt	le
 8010abc:	2330      	movle	r3, #48	@ 0x30
 8010abe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010ac2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010ac6:	1b92      	subs	r2, r2, r6
 8010ac8:	6122      	str	r2, [r4, #16]
 8010aca:	f8cd a000 	str.w	sl, [sp]
 8010ace:	464b      	mov	r3, r9
 8010ad0:	aa03      	add	r2, sp, #12
 8010ad2:	4621      	mov	r1, r4
 8010ad4:	4640      	mov	r0, r8
 8010ad6:	f7ff fee7 	bl	80108a8 <_printf_common>
 8010ada:	3001      	adds	r0, #1
 8010adc:	d14a      	bne.n	8010b74 <_printf_i+0x1f0>
 8010ade:	f04f 30ff 	mov.w	r0, #4294967295
 8010ae2:	b004      	add	sp, #16
 8010ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ae8:	6823      	ldr	r3, [r4, #0]
 8010aea:	f043 0320 	orr.w	r3, r3, #32
 8010aee:	6023      	str	r3, [r4, #0]
 8010af0:	4832      	ldr	r0, [pc, #200]	@ (8010bbc <_printf_i+0x238>)
 8010af2:	2778      	movs	r7, #120	@ 0x78
 8010af4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010af8:	6823      	ldr	r3, [r4, #0]
 8010afa:	6831      	ldr	r1, [r6, #0]
 8010afc:	061f      	lsls	r7, r3, #24
 8010afe:	f851 5b04 	ldr.w	r5, [r1], #4
 8010b02:	d402      	bmi.n	8010b0a <_printf_i+0x186>
 8010b04:	065f      	lsls	r7, r3, #25
 8010b06:	bf48      	it	mi
 8010b08:	b2ad      	uxthmi	r5, r5
 8010b0a:	6031      	str	r1, [r6, #0]
 8010b0c:	07d9      	lsls	r1, r3, #31
 8010b0e:	bf44      	itt	mi
 8010b10:	f043 0320 	orrmi.w	r3, r3, #32
 8010b14:	6023      	strmi	r3, [r4, #0]
 8010b16:	b11d      	cbz	r5, 8010b20 <_printf_i+0x19c>
 8010b18:	2310      	movs	r3, #16
 8010b1a:	e7ad      	b.n	8010a78 <_printf_i+0xf4>
 8010b1c:	4826      	ldr	r0, [pc, #152]	@ (8010bb8 <_printf_i+0x234>)
 8010b1e:	e7e9      	b.n	8010af4 <_printf_i+0x170>
 8010b20:	6823      	ldr	r3, [r4, #0]
 8010b22:	f023 0320 	bic.w	r3, r3, #32
 8010b26:	6023      	str	r3, [r4, #0]
 8010b28:	e7f6      	b.n	8010b18 <_printf_i+0x194>
 8010b2a:	4616      	mov	r6, r2
 8010b2c:	e7bd      	b.n	8010aaa <_printf_i+0x126>
 8010b2e:	6833      	ldr	r3, [r6, #0]
 8010b30:	6825      	ldr	r5, [r4, #0]
 8010b32:	6961      	ldr	r1, [r4, #20]
 8010b34:	1d18      	adds	r0, r3, #4
 8010b36:	6030      	str	r0, [r6, #0]
 8010b38:	062e      	lsls	r6, r5, #24
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	d501      	bpl.n	8010b42 <_printf_i+0x1be>
 8010b3e:	6019      	str	r1, [r3, #0]
 8010b40:	e002      	b.n	8010b48 <_printf_i+0x1c4>
 8010b42:	0668      	lsls	r0, r5, #25
 8010b44:	d5fb      	bpl.n	8010b3e <_printf_i+0x1ba>
 8010b46:	8019      	strh	r1, [r3, #0]
 8010b48:	2300      	movs	r3, #0
 8010b4a:	6123      	str	r3, [r4, #16]
 8010b4c:	4616      	mov	r6, r2
 8010b4e:	e7bc      	b.n	8010aca <_printf_i+0x146>
 8010b50:	6833      	ldr	r3, [r6, #0]
 8010b52:	1d1a      	adds	r2, r3, #4
 8010b54:	6032      	str	r2, [r6, #0]
 8010b56:	681e      	ldr	r6, [r3, #0]
 8010b58:	6862      	ldr	r2, [r4, #4]
 8010b5a:	2100      	movs	r1, #0
 8010b5c:	4630      	mov	r0, r6
 8010b5e:	f7ef fbd7 	bl	8000310 <memchr>
 8010b62:	b108      	cbz	r0, 8010b68 <_printf_i+0x1e4>
 8010b64:	1b80      	subs	r0, r0, r6
 8010b66:	6060      	str	r0, [r4, #4]
 8010b68:	6863      	ldr	r3, [r4, #4]
 8010b6a:	6123      	str	r3, [r4, #16]
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010b72:	e7aa      	b.n	8010aca <_printf_i+0x146>
 8010b74:	6923      	ldr	r3, [r4, #16]
 8010b76:	4632      	mov	r2, r6
 8010b78:	4649      	mov	r1, r9
 8010b7a:	4640      	mov	r0, r8
 8010b7c:	47d0      	blx	sl
 8010b7e:	3001      	adds	r0, #1
 8010b80:	d0ad      	beq.n	8010ade <_printf_i+0x15a>
 8010b82:	6823      	ldr	r3, [r4, #0]
 8010b84:	079b      	lsls	r3, r3, #30
 8010b86:	d413      	bmi.n	8010bb0 <_printf_i+0x22c>
 8010b88:	68e0      	ldr	r0, [r4, #12]
 8010b8a:	9b03      	ldr	r3, [sp, #12]
 8010b8c:	4298      	cmp	r0, r3
 8010b8e:	bfb8      	it	lt
 8010b90:	4618      	movlt	r0, r3
 8010b92:	e7a6      	b.n	8010ae2 <_printf_i+0x15e>
 8010b94:	2301      	movs	r3, #1
 8010b96:	4632      	mov	r2, r6
 8010b98:	4649      	mov	r1, r9
 8010b9a:	4640      	mov	r0, r8
 8010b9c:	47d0      	blx	sl
 8010b9e:	3001      	adds	r0, #1
 8010ba0:	d09d      	beq.n	8010ade <_printf_i+0x15a>
 8010ba2:	3501      	adds	r5, #1
 8010ba4:	68e3      	ldr	r3, [r4, #12]
 8010ba6:	9903      	ldr	r1, [sp, #12]
 8010ba8:	1a5b      	subs	r3, r3, r1
 8010baa:	42ab      	cmp	r3, r5
 8010bac:	dcf2      	bgt.n	8010b94 <_printf_i+0x210>
 8010bae:	e7eb      	b.n	8010b88 <_printf_i+0x204>
 8010bb0:	2500      	movs	r5, #0
 8010bb2:	f104 0619 	add.w	r6, r4, #25
 8010bb6:	e7f5      	b.n	8010ba4 <_printf_i+0x220>
 8010bb8:	08012494 	.word	0x08012494
 8010bbc:	080124a5 	.word	0x080124a5

08010bc0 <__sflush_r>:
 8010bc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bc8:	0716      	lsls	r6, r2, #28
 8010bca:	4605      	mov	r5, r0
 8010bcc:	460c      	mov	r4, r1
 8010bce:	d454      	bmi.n	8010c7a <__sflush_r+0xba>
 8010bd0:	684b      	ldr	r3, [r1, #4]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	dc02      	bgt.n	8010bdc <__sflush_r+0x1c>
 8010bd6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	dd48      	ble.n	8010c6e <__sflush_r+0xae>
 8010bdc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010bde:	2e00      	cmp	r6, #0
 8010be0:	d045      	beq.n	8010c6e <__sflush_r+0xae>
 8010be2:	2300      	movs	r3, #0
 8010be4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010be8:	682f      	ldr	r7, [r5, #0]
 8010bea:	6a21      	ldr	r1, [r4, #32]
 8010bec:	602b      	str	r3, [r5, #0]
 8010bee:	d030      	beq.n	8010c52 <__sflush_r+0x92>
 8010bf0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010bf2:	89a3      	ldrh	r3, [r4, #12]
 8010bf4:	0759      	lsls	r1, r3, #29
 8010bf6:	d505      	bpl.n	8010c04 <__sflush_r+0x44>
 8010bf8:	6863      	ldr	r3, [r4, #4]
 8010bfa:	1ad2      	subs	r2, r2, r3
 8010bfc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010bfe:	b10b      	cbz	r3, 8010c04 <__sflush_r+0x44>
 8010c00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010c02:	1ad2      	subs	r2, r2, r3
 8010c04:	2300      	movs	r3, #0
 8010c06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010c08:	6a21      	ldr	r1, [r4, #32]
 8010c0a:	4628      	mov	r0, r5
 8010c0c:	47b0      	blx	r6
 8010c0e:	1c43      	adds	r3, r0, #1
 8010c10:	89a3      	ldrh	r3, [r4, #12]
 8010c12:	d106      	bne.n	8010c22 <__sflush_r+0x62>
 8010c14:	6829      	ldr	r1, [r5, #0]
 8010c16:	291d      	cmp	r1, #29
 8010c18:	d82b      	bhi.n	8010c72 <__sflush_r+0xb2>
 8010c1a:	4a2a      	ldr	r2, [pc, #168]	@ (8010cc4 <__sflush_r+0x104>)
 8010c1c:	40ca      	lsrs	r2, r1
 8010c1e:	07d6      	lsls	r6, r2, #31
 8010c20:	d527      	bpl.n	8010c72 <__sflush_r+0xb2>
 8010c22:	2200      	movs	r2, #0
 8010c24:	6062      	str	r2, [r4, #4]
 8010c26:	04d9      	lsls	r1, r3, #19
 8010c28:	6922      	ldr	r2, [r4, #16]
 8010c2a:	6022      	str	r2, [r4, #0]
 8010c2c:	d504      	bpl.n	8010c38 <__sflush_r+0x78>
 8010c2e:	1c42      	adds	r2, r0, #1
 8010c30:	d101      	bne.n	8010c36 <__sflush_r+0x76>
 8010c32:	682b      	ldr	r3, [r5, #0]
 8010c34:	b903      	cbnz	r3, 8010c38 <__sflush_r+0x78>
 8010c36:	6560      	str	r0, [r4, #84]	@ 0x54
 8010c38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010c3a:	602f      	str	r7, [r5, #0]
 8010c3c:	b1b9      	cbz	r1, 8010c6e <__sflush_r+0xae>
 8010c3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010c42:	4299      	cmp	r1, r3
 8010c44:	d002      	beq.n	8010c4c <__sflush_r+0x8c>
 8010c46:	4628      	mov	r0, r5
 8010c48:	f7ff fa94 	bl	8010174 <_free_r>
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	6363      	str	r3, [r4, #52]	@ 0x34
 8010c50:	e00d      	b.n	8010c6e <__sflush_r+0xae>
 8010c52:	2301      	movs	r3, #1
 8010c54:	4628      	mov	r0, r5
 8010c56:	47b0      	blx	r6
 8010c58:	4602      	mov	r2, r0
 8010c5a:	1c50      	adds	r0, r2, #1
 8010c5c:	d1c9      	bne.n	8010bf2 <__sflush_r+0x32>
 8010c5e:	682b      	ldr	r3, [r5, #0]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d0c6      	beq.n	8010bf2 <__sflush_r+0x32>
 8010c64:	2b1d      	cmp	r3, #29
 8010c66:	d001      	beq.n	8010c6c <__sflush_r+0xac>
 8010c68:	2b16      	cmp	r3, #22
 8010c6a:	d11e      	bne.n	8010caa <__sflush_r+0xea>
 8010c6c:	602f      	str	r7, [r5, #0]
 8010c6e:	2000      	movs	r0, #0
 8010c70:	e022      	b.n	8010cb8 <__sflush_r+0xf8>
 8010c72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c76:	b21b      	sxth	r3, r3
 8010c78:	e01b      	b.n	8010cb2 <__sflush_r+0xf2>
 8010c7a:	690f      	ldr	r7, [r1, #16]
 8010c7c:	2f00      	cmp	r7, #0
 8010c7e:	d0f6      	beq.n	8010c6e <__sflush_r+0xae>
 8010c80:	0793      	lsls	r3, r2, #30
 8010c82:	680e      	ldr	r6, [r1, #0]
 8010c84:	bf08      	it	eq
 8010c86:	694b      	ldreq	r3, [r1, #20]
 8010c88:	600f      	str	r7, [r1, #0]
 8010c8a:	bf18      	it	ne
 8010c8c:	2300      	movne	r3, #0
 8010c8e:	eba6 0807 	sub.w	r8, r6, r7
 8010c92:	608b      	str	r3, [r1, #8]
 8010c94:	f1b8 0f00 	cmp.w	r8, #0
 8010c98:	dde9      	ble.n	8010c6e <__sflush_r+0xae>
 8010c9a:	6a21      	ldr	r1, [r4, #32]
 8010c9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010c9e:	4643      	mov	r3, r8
 8010ca0:	463a      	mov	r2, r7
 8010ca2:	4628      	mov	r0, r5
 8010ca4:	47b0      	blx	r6
 8010ca6:	2800      	cmp	r0, #0
 8010ca8:	dc08      	bgt.n	8010cbc <__sflush_r+0xfc>
 8010caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010cb2:	81a3      	strh	r3, [r4, #12]
 8010cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8010cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cbc:	4407      	add	r7, r0
 8010cbe:	eba8 0800 	sub.w	r8, r8, r0
 8010cc2:	e7e7      	b.n	8010c94 <__sflush_r+0xd4>
 8010cc4:	20400001 	.word	0x20400001

08010cc8 <_fflush_r>:
 8010cc8:	b538      	push	{r3, r4, r5, lr}
 8010cca:	690b      	ldr	r3, [r1, #16]
 8010ccc:	4605      	mov	r5, r0
 8010cce:	460c      	mov	r4, r1
 8010cd0:	b913      	cbnz	r3, 8010cd8 <_fflush_r+0x10>
 8010cd2:	2500      	movs	r5, #0
 8010cd4:	4628      	mov	r0, r5
 8010cd6:	bd38      	pop	{r3, r4, r5, pc}
 8010cd8:	b118      	cbz	r0, 8010ce2 <_fflush_r+0x1a>
 8010cda:	6a03      	ldr	r3, [r0, #32]
 8010cdc:	b90b      	cbnz	r3, 8010ce2 <_fflush_r+0x1a>
 8010cde:	f7fe ff65 	bl	800fbac <__sinit>
 8010ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d0f3      	beq.n	8010cd2 <_fflush_r+0xa>
 8010cea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010cec:	07d0      	lsls	r0, r2, #31
 8010cee:	d404      	bmi.n	8010cfa <_fflush_r+0x32>
 8010cf0:	0599      	lsls	r1, r3, #22
 8010cf2:	d402      	bmi.n	8010cfa <_fflush_r+0x32>
 8010cf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010cf6:	f7ff fa0e 	bl	8010116 <__retarget_lock_acquire_recursive>
 8010cfa:	4628      	mov	r0, r5
 8010cfc:	4621      	mov	r1, r4
 8010cfe:	f7ff ff5f 	bl	8010bc0 <__sflush_r>
 8010d02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010d04:	07da      	lsls	r2, r3, #31
 8010d06:	4605      	mov	r5, r0
 8010d08:	d4e4      	bmi.n	8010cd4 <_fflush_r+0xc>
 8010d0a:	89a3      	ldrh	r3, [r4, #12]
 8010d0c:	059b      	lsls	r3, r3, #22
 8010d0e:	d4e1      	bmi.n	8010cd4 <_fflush_r+0xc>
 8010d10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010d12:	f7ff fa01 	bl	8010118 <__retarget_lock_release_recursive>
 8010d16:	e7dd      	b.n	8010cd4 <_fflush_r+0xc>

08010d18 <fiprintf>:
 8010d18:	b40e      	push	{r1, r2, r3}
 8010d1a:	b503      	push	{r0, r1, lr}
 8010d1c:	4601      	mov	r1, r0
 8010d1e:	ab03      	add	r3, sp, #12
 8010d20:	4805      	ldr	r0, [pc, #20]	@ (8010d38 <fiprintf+0x20>)
 8010d22:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d26:	6800      	ldr	r0, [r0, #0]
 8010d28:	9301      	str	r3, [sp, #4]
 8010d2a:	f7ff fca5 	bl	8010678 <_vfiprintf_r>
 8010d2e:	b002      	add	sp, #8
 8010d30:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d34:	b003      	add	sp, #12
 8010d36:	4770      	bx	lr
 8010d38:	240000e8 	.word	0x240000e8

08010d3c <__swhatbuf_r>:
 8010d3c:	b570      	push	{r4, r5, r6, lr}
 8010d3e:	460c      	mov	r4, r1
 8010d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d44:	2900      	cmp	r1, #0
 8010d46:	b096      	sub	sp, #88	@ 0x58
 8010d48:	4615      	mov	r5, r2
 8010d4a:	461e      	mov	r6, r3
 8010d4c:	da0d      	bge.n	8010d6a <__swhatbuf_r+0x2e>
 8010d4e:	89a3      	ldrh	r3, [r4, #12]
 8010d50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010d54:	f04f 0100 	mov.w	r1, #0
 8010d58:	bf14      	ite	ne
 8010d5a:	2340      	movne	r3, #64	@ 0x40
 8010d5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010d60:	2000      	movs	r0, #0
 8010d62:	6031      	str	r1, [r6, #0]
 8010d64:	602b      	str	r3, [r5, #0]
 8010d66:	b016      	add	sp, #88	@ 0x58
 8010d68:	bd70      	pop	{r4, r5, r6, pc}
 8010d6a:	466a      	mov	r2, sp
 8010d6c:	f000 f848 	bl	8010e00 <_fstat_r>
 8010d70:	2800      	cmp	r0, #0
 8010d72:	dbec      	blt.n	8010d4e <__swhatbuf_r+0x12>
 8010d74:	9901      	ldr	r1, [sp, #4]
 8010d76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010d7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010d7e:	4259      	negs	r1, r3
 8010d80:	4159      	adcs	r1, r3
 8010d82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010d86:	e7eb      	b.n	8010d60 <__swhatbuf_r+0x24>

08010d88 <__smakebuf_r>:
 8010d88:	898b      	ldrh	r3, [r1, #12]
 8010d8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010d8c:	079d      	lsls	r5, r3, #30
 8010d8e:	4606      	mov	r6, r0
 8010d90:	460c      	mov	r4, r1
 8010d92:	d507      	bpl.n	8010da4 <__smakebuf_r+0x1c>
 8010d94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010d98:	6023      	str	r3, [r4, #0]
 8010d9a:	6123      	str	r3, [r4, #16]
 8010d9c:	2301      	movs	r3, #1
 8010d9e:	6163      	str	r3, [r4, #20]
 8010da0:	b003      	add	sp, #12
 8010da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010da4:	ab01      	add	r3, sp, #4
 8010da6:	466a      	mov	r2, sp
 8010da8:	f7ff ffc8 	bl	8010d3c <__swhatbuf_r>
 8010dac:	9f00      	ldr	r7, [sp, #0]
 8010dae:	4605      	mov	r5, r0
 8010db0:	4639      	mov	r1, r7
 8010db2:	4630      	mov	r0, r6
 8010db4:	f7ff fa52 	bl	801025c <_malloc_r>
 8010db8:	b948      	cbnz	r0, 8010dce <__smakebuf_r+0x46>
 8010dba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010dbe:	059a      	lsls	r2, r3, #22
 8010dc0:	d4ee      	bmi.n	8010da0 <__smakebuf_r+0x18>
 8010dc2:	f023 0303 	bic.w	r3, r3, #3
 8010dc6:	f043 0302 	orr.w	r3, r3, #2
 8010dca:	81a3      	strh	r3, [r4, #12]
 8010dcc:	e7e2      	b.n	8010d94 <__smakebuf_r+0xc>
 8010dce:	89a3      	ldrh	r3, [r4, #12]
 8010dd0:	6020      	str	r0, [r4, #0]
 8010dd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010dd6:	81a3      	strh	r3, [r4, #12]
 8010dd8:	9b01      	ldr	r3, [sp, #4]
 8010dda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010dde:	b15b      	cbz	r3, 8010df8 <__smakebuf_r+0x70>
 8010de0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010de4:	4630      	mov	r0, r6
 8010de6:	f000 f81d 	bl	8010e24 <_isatty_r>
 8010dea:	b128      	cbz	r0, 8010df8 <__smakebuf_r+0x70>
 8010dec:	89a3      	ldrh	r3, [r4, #12]
 8010dee:	f023 0303 	bic.w	r3, r3, #3
 8010df2:	f043 0301 	orr.w	r3, r3, #1
 8010df6:	81a3      	strh	r3, [r4, #12]
 8010df8:	89a3      	ldrh	r3, [r4, #12]
 8010dfa:	431d      	orrs	r5, r3
 8010dfc:	81a5      	strh	r5, [r4, #12]
 8010dfe:	e7cf      	b.n	8010da0 <__smakebuf_r+0x18>

08010e00 <_fstat_r>:
 8010e00:	b538      	push	{r3, r4, r5, lr}
 8010e02:	4d07      	ldr	r5, [pc, #28]	@ (8010e20 <_fstat_r+0x20>)
 8010e04:	2300      	movs	r3, #0
 8010e06:	4604      	mov	r4, r0
 8010e08:	4608      	mov	r0, r1
 8010e0a:	4611      	mov	r1, r2
 8010e0c:	602b      	str	r3, [r5, #0]
 8010e0e:	f7f0 fe79 	bl	8001b04 <_fstat>
 8010e12:	1c43      	adds	r3, r0, #1
 8010e14:	d102      	bne.n	8010e1c <_fstat_r+0x1c>
 8010e16:	682b      	ldr	r3, [r5, #0]
 8010e18:	b103      	cbz	r3, 8010e1c <_fstat_r+0x1c>
 8010e1a:	6023      	str	r3, [r4, #0]
 8010e1c:	bd38      	pop	{r3, r4, r5, pc}
 8010e1e:	bf00      	nop
 8010e20:	24042e18 	.word	0x24042e18

08010e24 <_isatty_r>:
 8010e24:	b538      	push	{r3, r4, r5, lr}
 8010e26:	4d06      	ldr	r5, [pc, #24]	@ (8010e40 <_isatty_r+0x1c>)
 8010e28:	2300      	movs	r3, #0
 8010e2a:	4604      	mov	r4, r0
 8010e2c:	4608      	mov	r0, r1
 8010e2e:	602b      	str	r3, [r5, #0]
 8010e30:	f7f0 fe78 	bl	8001b24 <_isatty>
 8010e34:	1c43      	adds	r3, r0, #1
 8010e36:	d102      	bne.n	8010e3e <_isatty_r+0x1a>
 8010e38:	682b      	ldr	r3, [r5, #0]
 8010e3a:	b103      	cbz	r3, 8010e3e <_isatty_r+0x1a>
 8010e3c:	6023      	str	r3, [r4, #0]
 8010e3e:	bd38      	pop	{r3, r4, r5, pc}
 8010e40:	24042e18 	.word	0x24042e18

08010e44 <_sbrk_r>:
 8010e44:	b538      	push	{r3, r4, r5, lr}
 8010e46:	4d06      	ldr	r5, [pc, #24]	@ (8010e60 <_sbrk_r+0x1c>)
 8010e48:	2300      	movs	r3, #0
 8010e4a:	4604      	mov	r4, r0
 8010e4c:	4608      	mov	r0, r1
 8010e4e:	602b      	str	r3, [r5, #0]
 8010e50:	f7f0 fe80 	bl	8001b54 <_sbrk>
 8010e54:	1c43      	adds	r3, r0, #1
 8010e56:	d102      	bne.n	8010e5e <_sbrk_r+0x1a>
 8010e58:	682b      	ldr	r3, [r5, #0]
 8010e5a:	b103      	cbz	r3, 8010e5e <_sbrk_r+0x1a>
 8010e5c:	6023      	str	r3, [r4, #0]
 8010e5e:	bd38      	pop	{r3, r4, r5, pc}
 8010e60:	24042e18 	.word	0x24042e18

08010e64 <abort>:
 8010e64:	b508      	push	{r3, lr}
 8010e66:	2006      	movs	r0, #6
 8010e68:	f000 f85a 	bl	8010f20 <raise>
 8010e6c:	2001      	movs	r0, #1
 8010e6e:	f7f0 fdf9 	bl	8001a64 <_exit>

08010e72 <_realloc_r>:
 8010e72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e76:	4607      	mov	r7, r0
 8010e78:	4614      	mov	r4, r2
 8010e7a:	460d      	mov	r5, r1
 8010e7c:	b921      	cbnz	r1, 8010e88 <_realloc_r+0x16>
 8010e7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e82:	4611      	mov	r1, r2
 8010e84:	f7ff b9ea 	b.w	801025c <_malloc_r>
 8010e88:	b92a      	cbnz	r2, 8010e96 <_realloc_r+0x24>
 8010e8a:	f7ff f973 	bl	8010174 <_free_r>
 8010e8e:	4625      	mov	r5, r4
 8010e90:	4628      	mov	r0, r5
 8010e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e96:	f000 f85f 	bl	8010f58 <_malloc_usable_size_r>
 8010e9a:	4284      	cmp	r4, r0
 8010e9c:	4606      	mov	r6, r0
 8010e9e:	d802      	bhi.n	8010ea6 <_realloc_r+0x34>
 8010ea0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010ea4:	d8f4      	bhi.n	8010e90 <_realloc_r+0x1e>
 8010ea6:	4621      	mov	r1, r4
 8010ea8:	4638      	mov	r0, r7
 8010eaa:	f7ff f9d7 	bl	801025c <_malloc_r>
 8010eae:	4680      	mov	r8, r0
 8010eb0:	b908      	cbnz	r0, 8010eb6 <_realloc_r+0x44>
 8010eb2:	4645      	mov	r5, r8
 8010eb4:	e7ec      	b.n	8010e90 <_realloc_r+0x1e>
 8010eb6:	42b4      	cmp	r4, r6
 8010eb8:	4622      	mov	r2, r4
 8010eba:	4629      	mov	r1, r5
 8010ebc:	bf28      	it	cs
 8010ebe:	4632      	movcs	r2, r6
 8010ec0:	f7ff f92b 	bl	801011a <memcpy>
 8010ec4:	4629      	mov	r1, r5
 8010ec6:	4638      	mov	r0, r7
 8010ec8:	f7ff f954 	bl	8010174 <_free_r>
 8010ecc:	e7f1      	b.n	8010eb2 <_realloc_r+0x40>

08010ece <_raise_r>:
 8010ece:	291f      	cmp	r1, #31
 8010ed0:	b538      	push	{r3, r4, r5, lr}
 8010ed2:	4605      	mov	r5, r0
 8010ed4:	460c      	mov	r4, r1
 8010ed6:	d904      	bls.n	8010ee2 <_raise_r+0x14>
 8010ed8:	2316      	movs	r3, #22
 8010eda:	6003      	str	r3, [r0, #0]
 8010edc:	f04f 30ff 	mov.w	r0, #4294967295
 8010ee0:	bd38      	pop	{r3, r4, r5, pc}
 8010ee2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010ee4:	b112      	cbz	r2, 8010eec <_raise_r+0x1e>
 8010ee6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010eea:	b94b      	cbnz	r3, 8010f00 <_raise_r+0x32>
 8010eec:	4628      	mov	r0, r5
 8010eee:	f000 f831 	bl	8010f54 <_getpid_r>
 8010ef2:	4622      	mov	r2, r4
 8010ef4:	4601      	mov	r1, r0
 8010ef6:	4628      	mov	r0, r5
 8010ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010efc:	f000 b818 	b.w	8010f30 <_kill_r>
 8010f00:	2b01      	cmp	r3, #1
 8010f02:	d00a      	beq.n	8010f1a <_raise_r+0x4c>
 8010f04:	1c59      	adds	r1, r3, #1
 8010f06:	d103      	bne.n	8010f10 <_raise_r+0x42>
 8010f08:	2316      	movs	r3, #22
 8010f0a:	6003      	str	r3, [r0, #0]
 8010f0c:	2001      	movs	r0, #1
 8010f0e:	e7e7      	b.n	8010ee0 <_raise_r+0x12>
 8010f10:	2100      	movs	r1, #0
 8010f12:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010f16:	4620      	mov	r0, r4
 8010f18:	4798      	blx	r3
 8010f1a:	2000      	movs	r0, #0
 8010f1c:	e7e0      	b.n	8010ee0 <_raise_r+0x12>
	...

08010f20 <raise>:
 8010f20:	4b02      	ldr	r3, [pc, #8]	@ (8010f2c <raise+0xc>)
 8010f22:	4601      	mov	r1, r0
 8010f24:	6818      	ldr	r0, [r3, #0]
 8010f26:	f7ff bfd2 	b.w	8010ece <_raise_r>
 8010f2a:	bf00      	nop
 8010f2c:	240000e8 	.word	0x240000e8

08010f30 <_kill_r>:
 8010f30:	b538      	push	{r3, r4, r5, lr}
 8010f32:	4d07      	ldr	r5, [pc, #28]	@ (8010f50 <_kill_r+0x20>)
 8010f34:	2300      	movs	r3, #0
 8010f36:	4604      	mov	r4, r0
 8010f38:	4608      	mov	r0, r1
 8010f3a:	4611      	mov	r1, r2
 8010f3c:	602b      	str	r3, [r5, #0]
 8010f3e:	f7f0 fd81 	bl	8001a44 <_kill>
 8010f42:	1c43      	adds	r3, r0, #1
 8010f44:	d102      	bne.n	8010f4c <_kill_r+0x1c>
 8010f46:	682b      	ldr	r3, [r5, #0]
 8010f48:	b103      	cbz	r3, 8010f4c <_kill_r+0x1c>
 8010f4a:	6023      	str	r3, [r4, #0]
 8010f4c:	bd38      	pop	{r3, r4, r5, pc}
 8010f4e:	bf00      	nop
 8010f50:	24042e18 	.word	0x24042e18

08010f54 <_getpid_r>:
 8010f54:	f7f0 bd6e 	b.w	8001a34 <_getpid>

08010f58 <_malloc_usable_size_r>:
 8010f58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f5c:	1f18      	subs	r0, r3, #4
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	bfbc      	itt	lt
 8010f62:	580b      	ldrlt	r3, [r1, r0]
 8010f64:	18c0      	addlt	r0, r0, r3
 8010f66:	4770      	bx	lr

08010f68 <_init>:
 8010f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f6a:	bf00      	nop
 8010f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f6e:	bc08      	pop	{r3}
 8010f70:	469e      	mov	lr, r3
 8010f72:	4770      	bx	lr

08010f74 <_fini>:
 8010f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f76:	bf00      	nop
 8010f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f7a:	bc08      	pop	{r3}
 8010f7c:	469e      	mov	lr, r3
 8010f7e:	4770      	bx	lr
